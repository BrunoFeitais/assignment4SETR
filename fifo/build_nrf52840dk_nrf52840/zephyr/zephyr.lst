
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001ea0 	.word	0x20001ea0
}
   4:	00002741 	.word	0x00002741
   8:	000093df 	.word	0x000093df
   c:	0000272d 	.word	0x0000272d
  10:	0000272d 	.word	0x0000272d
  14:	0000272d 	.word	0x0000272d
  18:	0000272d 	.word	0x0000272d
	...
  2c:	00002549 	.word	0x00002549
  30:	0000272d 	.word	0x0000272d
  34:	00000000 	.word	0x00000000
  38:	000024f5 	.word	0x000024f5
  3c:	0000272d 	.word	0x0000272d

00000040 <_irq_vector_table>:
  40:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  50:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  60:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  70:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  80:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  90:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  a0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  b0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  c0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  d0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  e0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..
  f0:	000024ad 000024ad 000024ad 000024ad     .$...$...$...$..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0x10e>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0xfa>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <__data_size+0x6>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x44>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size+0x2c>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x160>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size+0x2c>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0x8e>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0x8a>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0xa4>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0xf2>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0xda>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x16e>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x132>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x150>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x58>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x58>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x58>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0x6>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0x6>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295
     8fc:	f04f 30ff 	movne.w	r0, #4294967295
     900:	f000 b96c 	b.w	bdc <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	468e      	mov	lr, r1
     928:	2b00      	cmp	r3, #0
     92a:	f040 8082 	bne.w	a32 <__udivmoddi4+0x116>
     92e:	428a      	cmp	r2, r1
     930:	4617      	mov	r7, r2
     932:	d946      	bls.n	9c2 <__udivmoddi4+0xa6>
     934:	fab2 f282 	clz	r2, r2
     938:	b14a      	cbz	r2, 94e <__udivmoddi4+0x32>
     93a:	f1c2 0120 	rsb	r1, r2, #32
     93e:	fa05 f302 	lsl.w	r3, r5, r2
     942:	fa20 f101 	lsr.w	r1, r0, r1
     946:	4097      	lsls	r7, r2
     948:	ea41 0e03 	orr.w	lr, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     952:	0c23      	lsrs	r3, r4, #16
     954:	fbbe fcf8 	udiv	ip, lr, r8
     958:	b2b9      	uxth	r1, r7
     95a:	fb08 ee1c 	mls	lr, r8, ip, lr
     95e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     962:	fb0c f001 	mul.w	r0, ip, r1
     966:	4298      	cmp	r0, r3
     968:	d90a      	bls.n	980 <__udivmoddi4+0x64>
     96a:	18fb      	adds	r3, r7, r3
     96c:	f10c 35ff 	add.w	r5, ip, #4294967295
     970:	f080 8116 	bcs.w	ba0 <__udivmoddi4+0x284>
     974:	4298      	cmp	r0, r3
     976:	f240 8113 	bls.w	ba0 <__udivmoddi4+0x284>
     97a:	f1ac 0c02 	sub.w	ip, ip, #2
     97e:	443b      	add	r3, r7
     980:	1a1b      	subs	r3, r3, r0
     982:	b2a4      	uxth	r4, r4
     984:	fbb3 f0f8 	udiv	r0, r3, r8
     988:	fb08 3310 	mls	r3, r8, r0, r3
     98c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     990:	fb00 f101 	mul.w	r1, r0, r1
     994:	42a1      	cmp	r1, r4
     996:	d909      	bls.n	9ac <__udivmoddi4+0x90>
     998:	193c      	adds	r4, r7, r4
     99a:	f100 33ff 	add.w	r3, r0, #4294967295
     99e:	f080 8101 	bcs.w	ba4 <__udivmoddi4+0x288>
     9a2:	42a1      	cmp	r1, r4
     9a4:	f240 80fe 	bls.w	ba4 <__udivmoddi4+0x288>
     9a8:	3802      	subs	r0, #2
     9aa:	443c      	add	r4, r7
     9ac:	1a64      	subs	r4, r4, r1
     9ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9b2:	2100      	movs	r1, #0
     9b4:	b11e      	cbz	r6, 9be <__udivmoddi4+0xa2>
     9b6:	40d4      	lsrs	r4, r2
     9b8:	2300      	movs	r3, #0
     9ba:	e9c6 4300 	strd	r4, r3, [r6]
     9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c2:	b902      	cbnz	r2, 9c6 <__udivmoddi4+0xaa>
     9c4:	deff      	udf	#255	; 0xff
     9c6:	fab2 f282 	clz	r2, r2
     9ca:	2a00      	cmp	r2, #0
     9cc:	d14f      	bne.n	a6e <__udivmoddi4+0x152>
     9ce:	1bcb      	subs	r3, r1, r7
     9d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9d4:	fa1f f887 	uxth.w	r8, r7
     9d8:	2101      	movs	r1, #1
     9da:	fbb3 fcfe 	udiv	ip, r3, lr
     9de:	0c25      	lsrs	r5, r4, #16
     9e0:	fb0e 331c 	mls	r3, lr, ip, r3
     9e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9e8:	fb08 f30c 	mul.w	r3, r8, ip
     9ec:	42ab      	cmp	r3, r5
     9ee:	d907      	bls.n	a00 <__udivmoddi4+0xe4>
     9f0:	197d      	adds	r5, r7, r5
     9f2:	f10c 30ff 	add.w	r0, ip, #4294967295
     9f6:	d202      	bcs.n	9fe <__udivmoddi4+0xe2>
     9f8:	42ab      	cmp	r3, r5
     9fa:	f200 80e7 	bhi.w	bcc <__udivmoddi4+0x2b0>
     9fe:	4684      	mov	ip, r0
     a00:	1aed      	subs	r5, r5, r3
     a02:	b2a3      	uxth	r3, r4
     a04:	fbb5 f0fe 	udiv	r0, r5, lr
     a08:	fb0e 5510 	mls	r5, lr, r0, r5
     a0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a10:	fb08 f800 	mul.w	r8, r8, r0
     a14:	45a0      	cmp	r8, r4
     a16:	d907      	bls.n	a28 <__udivmoddi4+0x10c>
     a18:	193c      	adds	r4, r7, r4
     a1a:	f100 33ff 	add.w	r3, r0, #4294967295
     a1e:	d202      	bcs.n	a26 <__udivmoddi4+0x10a>
     a20:	45a0      	cmp	r8, r4
     a22:	f200 80d7 	bhi.w	bd4 <__udivmoddi4+0x2b8>
     a26:	4618      	mov	r0, r3
     a28:	eba4 0408 	sub.w	r4, r4, r8
     a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a30:	e7c0      	b.n	9b4 <__udivmoddi4+0x98>
     a32:	428b      	cmp	r3, r1
     a34:	d908      	bls.n	a48 <__udivmoddi4+0x12c>
     a36:	2e00      	cmp	r6, #0
     a38:	f000 80af 	beq.w	b9a <__udivmoddi4+0x27e>
     a3c:	2100      	movs	r1, #0
     a3e:	e9c6 0500 	strd	r0, r5, [r6]
     a42:	4608      	mov	r0, r1
     a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a48:	fab3 f183 	clz	r1, r3
     a4c:	2900      	cmp	r1, #0
     a4e:	d14b      	bne.n	ae8 <__udivmoddi4+0x1cc>
     a50:	42ab      	cmp	r3, r5
     a52:	d302      	bcc.n	a5a <__udivmoddi4+0x13e>
     a54:	4282      	cmp	r2, r0
     a56:	f200 80b7 	bhi.w	bc8 <__udivmoddi4+0x2ac>
     a5a:	1a84      	subs	r4, r0, r2
     a5c:	eb65 0303 	sbc.w	r3, r5, r3
     a60:	2001      	movs	r0, #1
     a62:	469e      	mov	lr, r3
     a64:	2e00      	cmp	r6, #0
     a66:	d0aa      	beq.n	9be <__udivmoddi4+0xa2>
     a68:	e9c6 4e00 	strd	r4, lr, [r6]
     a6c:	e7a7      	b.n	9be <__udivmoddi4+0xa2>
     a6e:	f1c2 0c20 	rsb	ip, r2, #32
     a72:	fa01 f302 	lsl.w	r3, r1, r2
     a76:	4097      	lsls	r7, r2
     a78:	fa20 f00c 	lsr.w	r0, r0, ip
     a7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a80:	fa21 fc0c 	lsr.w	ip, r1, ip
     a84:	4318      	orrs	r0, r3
     a86:	fbbc f1fe 	udiv	r1, ip, lr
     a8a:	0c05      	lsrs	r5, r0, #16
     a8c:	fb0e cc11 	mls	ip, lr, r1, ip
     a90:	fa1f f887 	uxth.w	r8, r7
     a94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a98:	fb01 f308 	mul.w	r3, r1, r8
     a9c:	42ab      	cmp	r3, r5
     a9e:	fa04 f402 	lsl.w	r4, r4, r2
     aa2:	d909      	bls.n	ab8 <__udivmoddi4+0x19c>
     aa4:	197d      	adds	r5, r7, r5
     aa6:	f101 3cff 	add.w	ip, r1, #4294967295
     aaa:	f080 808b 	bcs.w	bc4 <__udivmoddi4+0x2a8>
     aae:	42ab      	cmp	r3, r5
     ab0:	f240 8088 	bls.w	bc4 <__udivmoddi4+0x2a8>
     ab4:	3902      	subs	r1, #2
     ab6:	443d      	add	r5, r7
     ab8:	1aeb      	subs	r3, r5, r3
     aba:	b285      	uxth	r5, r0
     abc:	fbb3 f0fe 	udiv	r0, r3, lr
     ac0:	fb0e 3310 	mls	r3, lr, r0, r3
     ac4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ac8:	fb00 f308 	mul.w	r3, r0, r8
     acc:	42ab      	cmp	r3, r5
     ace:	d907      	bls.n	ae0 <__udivmoddi4+0x1c4>
     ad0:	197d      	adds	r5, r7, r5
     ad2:	f100 3cff 	add.w	ip, r0, #4294967295
     ad6:	d271      	bcs.n	bbc <__udivmoddi4+0x2a0>
     ad8:	42ab      	cmp	r3, r5
     ada:	d96f      	bls.n	bbc <__udivmoddi4+0x2a0>
     adc:	3802      	subs	r0, #2
     ade:	443d      	add	r5, r7
     ae0:	1aeb      	subs	r3, r5, r3
     ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ae6:	e778      	b.n	9da <__udivmoddi4+0xbe>
     ae8:	f1c1 0c20 	rsb	ip, r1, #32
     aec:	408b      	lsls	r3, r1
     aee:	fa22 f70c 	lsr.w	r7, r2, ip
     af2:	431f      	orrs	r7, r3
     af4:	fa20 f40c 	lsr.w	r4, r0, ip
     af8:	fa05 f301 	lsl.w	r3, r5, r1
     afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b00:	fa25 f50c 	lsr.w	r5, r5, ip
     b04:	431c      	orrs	r4, r3
     b06:	0c23      	lsrs	r3, r4, #16
     b08:	fbb5 f9fe 	udiv	r9, r5, lr
     b0c:	fa1f f887 	uxth.w	r8, r7
     b10:	fb0e 5519 	mls	r5, lr, r9, r5
     b14:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b18:	fb09 fa08 	mul.w	sl, r9, r8
     b1c:	45aa      	cmp	sl, r5
     b1e:	fa02 f201 	lsl.w	r2, r2, r1
     b22:	fa00 f301 	lsl.w	r3, r0, r1
     b26:	d908      	bls.n	b3a <__udivmoddi4+0x21e>
     b28:	197d      	adds	r5, r7, r5
     b2a:	f109 30ff 	add.w	r0, r9, #4294967295
     b2e:	d247      	bcs.n	bc0 <__udivmoddi4+0x2a4>
     b30:	45aa      	cmp	sl, r5
     b32:	d945      	bls.n	bc0 <__udivmoddi4+0x2a4>
     b34:	f1a9 0902 	sub.w	r9, r9, #2
     b38:	443d      	add	r5, r7
     b3a:	eba5 050a 	sub.w	r5, r5, sl
     b3e:	b2a4      	uxth	r4, r4
     b40:	fbb5 f0fe 	udiv	r0, r5, lr
     b44:	fb0e 5510 	mls	r5, lr, r0, r5
     b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b4c:	fb00 f808 	mul.w	r8, r0, r8
     b50:	45a0      	cmp	r8, r4
     b52:	d907      	bls.n	b64 <__udivmoddi4+0x248>
     b54:	193c      	adds	r4, r7, r4
     b56:	f100 35ff 	add.w	r5, r0, #4294967295
     b5a:	d22d      	bcs.n	bb8 <__udivmoddi4+0x29c>
     b5c:	45a0      	cmp	r8, r4
     b5e:	d92b      	bls.n	bb8 <__udivmoddi4+0x29c>
     b60:	3802      	subs	r0, #2
     b62:	443c      	add	r4, r7
     b64:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b68:	eba4 0408 	sub.w	r4, r4, r8
     b6c:	fba0 8902 	umull	r8, r9, r0, r2
     b70:	454c      	cmp	r4, r9
     b72:	46c6      	mov	lr, r8
     b74:	464d      	mov	r5, r9
     b76:	d319      	bcc.n	bac <__udivmoddi4+0x290>
     b78:	d016      	beq.n	ba8 <__udivmoddi4+0x28c>
     b7a:	b15e      	cbz	r6, b94 <__udivmoddi4+0x278>
     b7c:	ebb3 020e 	subs.w	r2, r3, lr
     b80:	eb64 0405 	sbc.w	r4, r4, r5
     b84:	fa04 fc0c 	lsl.w	ip, r4, ip
     b88:	40ca      	lsrs	r2, r1
     b8a:	ea4c 0202 	orr.w	r2, ip, r2
     b8e:	40cc      	lsrs	r4, r1
     b90:	e9c6 2400 	strd	r2, r4, [r6]
     b94:	2100      	movs	r1, #0
     b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b9a:	4631      	mov	r1, r6
     b9c:	4630      	mov	r0, r6
     b9e:	e70e      	b.n	9be <__udivmoddi4+0xa2>
     ba0:	46ac      	mov	ip, r5
     ba2:	e6ed      	b.n	980 <__udivmoddi4+0x64>
     ba4:	4618      	mov	r0, r3
     ba6:	e701      	b.n	9ac <__udivmoddi4+0x90>
     ba8:	4543      	cmp	r3, r8
     baa:	d2e6      	bcs.n	b7a <__udivmoddi4+0x25e>
     bac:	ebb8 0e02 	subs.w	lr, r8, r2
     bb0:	eb69 0507 	sbc.w	r5, r9, r7
     bb4:	3801      	subs	r0, #1
     bb6:	e7e0      	b.n	b7a <__udivmoddi4+0x25e>
     bb8:	4628      	mov	r0, r5
     bba:	e7d3      	b.n	b64 <__udivmoddi4+0x248>
     bbc:	4660      	mov	r0, ip
     bbe:	e78f      	b.n	ae0 <__udivmoddi4+0x1c4>
     bc0:	4681      	mov	r9, r0
     bc2:	e7ba      	b.n	b3a <__udivmoddi4+0x21e>
     bc4:	4661      	mov	r1, ip
     bc6:	e777      	b.n	ab8 <__udivmoddi4+0x19c>
     bc8:	4608      	mov	r0, r1
     bca:	e74b      	b.n	a64 <__udivmoddi4+0x148>
     bcc:	f1ac 0c02 	sub.w	ip, ip, #2
     bd0:	443d      	add	r5, r7
     bd2:	e715      	b.n	a00 <__udivmoddi4+0xe4>
     bd4:	3802      	subs	r0, #2
     bd6:	443c      	add	r4, r7
     bd8:	e726      	b.n	a28 <__udivmoddi4+0x10c>
     bda:	bf00      	nop

00000bdc <__aeabi_idiv0>:
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be4:	b08d      	sub	sp, #52	; 0x34
    /* Local variables */
    long int nact = 0;
    int i= 0;
    struct data_item_t *data_ab;
    struct data_item_t data_bc;
    int valores[10] = {0,0,0,0,0,0,0,0,0,0};
     be6:	2228      	movs	r2, #40	; 0x28
     be8:	2100      	movs	r1, #0
     bea:	a802      	add	r0, sp, #8
     bec:	f008 fc28 	bl	9440 <memset>
		/* coverity[OVERRUN] */
		return (void *) arch_syscall_invoke3(*(uintptr_t *)&queue, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
     bf0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; cc4 <thread_B_code+0xe4>

    while(1) {
        data_ab = k_fifo_get(&fifo_ab, K_FOREVER);
        printk("(B), ", adc_sample_buffer[0]);
     bf4:	f8df a0d0 	ldr.w	sl, [pc, #208]	; cc8 <thread_B_code+0xe8>
     bf8:	4e2f      	ldr	r6, [pc, #188]	; (cb8 <thread_B_code+0xd8>)
     bfa:	f10d 0908 	add.w	r9, sp, #8
{
     bfe:	464d      	mov	r5, r9
     c00:	2400      	movs	r4, #0
     c02:	f04f 33ff 	mov.w	r3, #4294967295
     c06:	f04f 32ff 	mov.w	r2, #4294967295
     c0a:	4658      	mov	r0, fp
     c0c:	f005 fade 	bl	61cc <z_impl_k_queue_get>
     c10:	4607      	mov	r7, r0
        printk("(B), ", adc_sample_buffer[0]);
     c12:	f8ba 1000 	ldrh.w	r1, [sl]
     c16:	4630      	mov	r0, r6
        valores[i] = data_ab->data;
        i++;
     c18:	3401      	adds	r4, #1
        printk("(B), ", adc_sample_buffer[0]);
     c1a:	f008 fbba 	bl	9392 <printk>
        valores[i] = data_ab->data;
     c1e:	88bb      	ldrh	r3, [r7, #4]
     c20:	f845 3b04 	str.w	r3, [r5], #4
        int cnt = 0;
        int avgmax = 0;
        int avgmin = 0;
        int sum = 0;

        if(i > 9){
     c24:	2c0a      	cmp	r4, #10
     c26:	d1ec      	bne.n	c02 <thread_B_code+0x22>
        int avg = 0;
     c28:	2000      	movs	r0, #0
     c2a:	aa02      	add	r2, sp, #8
          for(i = 0; i < 10; i++){
     c2c:	4603      	mov	r3, r0
            avg += valores[i];
     c2e:	f852 1b04 	ldr.w	r1, [r2], #4
          for(i = 0; i < 10; i++){
     c32:	3301      	adds	r3, #1
     c34:	2b0a      	cmp	r3, #10
            avg += valores[i];
     c36:	4408      	add	r0, r1
          for(i = 0; i < 10; i++){
     c38:	d1f9      	bne.n	c2e <thread_B_code+0x4e>
          }
          avg = avg/10;

          avgmax = avg + avg*0.1;
     c3a:	fb90 f0f3 	sdiv	r0, r0, r3
     c3e:	f7ff fbb1 	bl	3a4 <__aeabi_i2d>
     c42:	a31b      	add	r3, pc, #108	; (adr r3, cb0 <thread_B_code+0xd0>)
     c44:	e9d3 2300 	ldrd	r2, r3, [r3]
     c48:	4604      	mov	r4, r0
     c4a:	460d      	mov	r5, r1
     c4c:	f7ff fc14 	bl	478 <__aeabi_dmul>
     c50:	4602      	mov	r2, r0
     c52:	460b      	mov	r3, r1
     c54:	4606      	mov	r6, r0
     c56:	460f      	mov	r7, r1
     c58:	4620      	mov	r0, r4
     c5a:	4629      	mov	r1, r5
     c5c:	f7ff fa56 	bl	10c <__adddf3>
     c60:	f7ff fe1c 	bl	89c <__aeabi_d2iz>
          avgmin = avg - avg*0.1;
     c64:	4632      	mov	r2, r6
     c66:	463b      	mov	r3, r7
          avgmax = avg + avg*0.1;
     c68:	4680      	mov	r8, r0
          avgmin = avg - avg*0.1;
     c6a:	4629      	mov	r1, r5
     c6c:	4620      	mov	r0, r4
     c6e:	f7ff fa4b 	bl	108 <__aeabi_dsub>
     c72:	f7ff fe13 	bl	89c <__aeabi_d2iz>
        int sum = 0;
     c76:	2300      	movs	r3, #0
        int cnt = 0;
     c78:	461a      	mov	r2, r3

          for(i = 0; i < 10; i++){
     c7a:	4619      	mov	r1, r3
            if(valores[i] < avgmax || valores[i] > avgmin) {
     c7c:	f859 4b04 	ldr.w	r4, [r9], #4
     c80:	4544      	cmp	r4, r8
     c82:	db01      	blt.n	c88 <thread_B_code+0xa8>
     c84:	4284      	cmp	r4, r0
     c86:	dd01      	ble.n	c8c <thread_B_code+0xac>
              sum += valores[i];
     c88:	4423      	add	r3, r4
              cnt++;
     c8a:	3201      	adds	r2, #1
          for(i = 0; i < 10; i++){
     c8c:	3101      	adds	r1, #1
     c8e:	290a      	cmp	r1, #10
     c90:	d1f4      	bne.n	c7c <thread_B_code+0x9c>
            }
          }
          i = 0;

          data_bc.data = sum/cnt;
     c92:	fb93 f3f2 	sdiv	r3, r3, r2

          k_fifo_put(&fifo_bc, &data_bc);
     c96:	4669      	mov	r1, sp
     c98:	4808      	ldr	r0, [pc, #32]	; (cbc <thread_B_code+0xdc>)
          data_bc.data = sum/cnt;
     c9a:	f8ad 3004 	strh.w	r3, [sp, #4]
          k_fifo_put(&fifo_bc, &data_bc);
     c9e:	f008 feea 	bl	9a76 <k_queue_append>
          printk("\nValor calculado: %d (B)\n", data_bc.data);
     ca2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
     ca6:	4806      	ldr	r0, [pc, #24]	; (cc0 <thread_B_code+0xe0>)
     ca8:	f008 fb73 	bl	9392 <printk>
     cac:	e7a4      	b.n	bf8 <thread_B_code+0x18>
     cae:	bf00      	nop
     cb0:	9999999a 	.word	0x9999999a
     cb4:	3fb99999 	.word	0x3fb99999
     cb8:	0000a0c4 	.word	0x0000a0c4
     cbc:	200005d8 	.word	0x200005d8
     cc0:	0000a0ca 	.word	0x0000a0ca
     cc4:	200005bc 	.word	0x200005bc
     cc8:	20000c7c 	.word	0x20000c7c

00000ccc <thread_A_code>:
{
     ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     cd0:	b09b      	sub	sp, #108	; 0x6c
	return z_impl_k_uptime_ticks();
     cd2:	f008 ff1a 	bl	9b0a <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     cda:	460a      	mov	r2, r1
     cdc:	fba0 0103 	umull	r0, r1, r0, r3
     ce0:	fb03 1102 	mla	r1, r3, r2, r1
     ce4:	0bc3      	lsrs	r3, r0, #15
     ce6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     cea:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + thread_A_period;
     cec:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
	const struct adc_sequence sequence = {
     cf0:	4e31      	ldr	r6, [pc, #196]	; (db8 <thread_A_code+0xec>)
	if (adc_dev == NULL) {
     cf2:	4f32      	ldr	r7, [pc, #200]	; (dbc <thread_A_code+0xf0>)
          printk("adc_sample() failed with error code %d\n\r",err);
     cf4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; dd4 <thread_A_code+0x108>
    release_time = k_uptime_get() + thread_A_period;
     cf8:	f142 0500 	adc.w	r5, r2, #0
	const struct adc_sequence sequence = {
     cfc:	2214      	movs	r2, #20
     cfe:	2100      	movs	r1, #0
     d00:	a801      	add	r0, sp, #4
     d02:	f008 fb9d 	bl	9440 <memset>
     d06:	2302      	movs	r3, #2
	if (adc_dev == NULL) {
     d08:	6838      	ldr	r0, [r7, #0]
	const struct adc_sequence sequence = {
     d0a:	9304      	str	r3, [sp, #16]
     d0c:	e9cd 3602 	strd	r3, r6, [sp, #8]
     d10:	230a      	movs	r3, #10
     d12:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
     d16:	2800      	cmp	r0, #0
     d18:	d13b      	bne.n	d92 <thread_A_code+0xc6>
            printk("adc_sample(): error, must bind to adc first \n\r");
     d1a:	4829      	ldr	r0, [pc, #164]	; (dc0 <thread_A_code+0xf4>)
     d1c:	f008 fb39 	bl	9392 <printk>
            return -1;
     d20:	f04f 39ff 	mov.w	r9, #4294967295
          printk("adc_sample() failed with error code %d\n\r",err);
     d24:	4649      	mov	r1, r9
     d26:	4640      	mov	r0, r8
     d28:	f008 fb33 	bl	9392 <printk>
        printk("%d (A), ", adc_sample_buffer[0]);
     d2c:	8831      	ldrh	r1, [r6, #0]
     d2e:	4825      	ldr	r0, [pc, #148]	; (dc4 <thread_A_code+0xf8>)
     d30:	f008 fb2f 	bl	9392 <printk>
        data_ab->data = adc_sample_buffer[0];
     d34:	8833      	ldrh	r3, [r6, #0]
        k_fifo_put(&fifo_ab, &data_ab);  
     d36:	4824      	ldr	r0, [pc, #144]	; (dc8 <thread_A_code+0xfc>)
        data_ab->data = adc_sample_buffer[0];
     d38:	f8ad 301c 	strh.w	r3, [sp, #28]
        k_fifo_put(&fifo_ab, &data_ab);  
     d3c:	a906      	add	r1, sp, #24
     d3e:	f008 fe9a 	bl	9a76 <k_queue_append>
     d42:	f008 fee2 	bl	9b0a <z_impl_k_uptime_ticks>
     d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     d4a:	460a      	mov	r2, r1
     d4c:	fba0 0103 	umull	r0, r1, r0, r3
     d50:	fb03 1102 	mla	r1, r3, r2, r1
     d54:	0bc2      	lsrs	r2, r0, #15
     d56:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
     d5a:	0bcb      	lsrs	r3, r1, #15
        if( fin_time < release_time) {
     d5c:	42a2      	cmp	r2, r4
     d5e:	eb73 0105 	sbcs.w	r1, r3, r5
     d62:	dacb      	bge.n	cfc <thread_A_code+0x30>
          k_msleep(release_time - fin_time);
     d64:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     d68:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
     d6c:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     d70:	f240 30e7 	movw	r0, #999	; 0x3e7
     d74:	2100      	movs	r1, #0
     d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d7a:	2300      	movs	r3, #0
     d7c:	fbce 010c 	smlal	r0, r1, lr, ip
     d80:	f7ff fdb4 	bl	8ec <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     d84:	f006 fb50 	bl	7428 <z_impl_k_sleep>
          release_time += thread_A_period;
     d88:	f514 7496 	adds.w	r4, r4, #300	; 0x12c
     d8c:	f145 0500 	adc.w	r5, r5, #0
     d90:	e7b4      	b.n	cfc <thread_A_code+0x30>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     d92:	6883      	ldr	r3, [r0, #8]
     d94:	a901      	add	r1, sp, #4
     d96:	685b      	ldr	r3, [r3, #4]
     d98:	4798      	blx	r3
	if (ret) {
     d9a:	4681      	mov	r9, r0
     d9c:	b120      	cbz	r0, da8 <thread_A_code+0xdc>
            printk("adc_read() failed with code %d\n", ret);
     d9e:	4601      	mov	r1, r0
     da0:	480a      	ldr	r0, [pc, #40]	; (dcc <thread_A_code+0x100>)
     da2:	f008 faf6 	bl	9392 <printk>
        if(err) {
     da6:	e7bd      	b.n	d24 <thread_A_code+0x58>
          if(adc_sample_buffer[0] > 1023) {
     da8:	8833      	ldrh	r3, [r6, #0]
     daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     dae:	d3bd      	bcc.n	d2c <thread_A_code+0x60>
              printk("adc reading out of range\n\r");
     db0:	4807      	ldr	r0, [pc, #28]	; (dd0 <thread_A_code+0x104>)
     db2:	f008 faee 	bl	9392 <printk>
     db6:	e7b9      	b.n	d2c <thread_A_code+0x60>
     db8:	20000c7c 	.word	0x20000c7c
     dbc:	200005b8 	.word	0x200005b8
     dc0:	0000a0e4 	.word	0x0000a0e4
     dc4:	0000a177 	.word	0x0000a177
     dc8:	200005bc 	.word	0x200005bc
     dcc:	0000a113 	.word	0x0000a113
     dd0:	0000a15c 	.word	0x0000a15c
     dd4:	0000a133 	.word	0x0000a133

00000dd8 <thread_C_code>:
        }           
    }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	b087      	sub	sp, #28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     dde:	4833      	ldr	r0, [pc, #204]	; (eac <thread_C_code+0xd4>)
     de0:	f004 fc68 	bl	56b4 <z_impl_device_get_binding>
    unsigned int pwmPeriod_us = 1000;       /* PWM period in us */
    int ret = 0;
    long int nact = 0;

    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
     de4:	4604      	mov	r4, r0
     de6:	b908      	cbnz	r0, dec <thread_C_code+0x14>
	printk("Error: PWM device %s is not ready\n", pwm0_dev->name);
     de8:	6803      	ldr	r3, [r0, #0]
     dea:	deff      	udf	#255	; 0xff
	return;
    }
    else  {
        printk("PWM device %s is ready\n", pwm0_dev->name);            
     dec:	6801      	ldr	r1, [r0, #0]
     dee:	4830      	ldr	r0, [pc, #192]	; (eb0 <thread_C_code+0xd8>)
     df0:	f008 facf 	bl	9392 <printk>
	return z_impl_k_queue_get(queue, timeout);
     df4:	f04f 32ff 	mov.w	r2, #4294967295
     df8:	f04f 33ff 	mov.w	r3, #4294967295
     dfc:	482d      	ldr	r0, [pc, #180]	; (eb4 <thread_C_code+0xdc>)
     dfe:	f005 f9e5 	bl	61cc <z_impl_k_queue_get>
     e02:	4605      	mov	r5, r0
    }

    while(1) {
        data_bc = k_fifo_get(&fifo_bc, K_FOREVER);          
        printk("Valor final: %d (C)\n\n\n",data_bc->data);
     e04:	8881      	ldrh	r1, [r0, #4]
     e06:	482c      	ldr	r0, [pc, #176]	; (eb8 <thread_C_code+0xe0>)
     e08:	f008 fac3 	bl	9392 <printk>

        ret = pwm_pin_set_usec(pwm0_dev, pwm0_channel, pwmPeriod_us,(unsigned int)((pwmPeriod_us*data_bc->data)/1023), PWM_POLARITY_NORMAL);
     e0c:	88ad      	ldrh	r5, [r5, #4]
     e0e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     e12:	437d      	muls	r5, r7
     e14:	f240 33ff 	movw	r3, #1023	; 0x3ff
     e18:	fbb5 f5f3 	udiv	r5, r5, r3
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     e1c:	68a3      	ldr	r3, [r4, #8]
     e1e:	aa04      	add	r2, sp, #16
     e20:	685b      	ldr	r3, [r3, #4]
     e22:	210d      	movs	r1, #13
     e24:	4620      	mov	r0, r4
     e26:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     e28:	4680      	mov	r8, r0
     e2a:	b138      	cbz	r0, e3c <thread_C_code+0x64>
		return -EIO;
     e2c:	f06f 0104 	mvn.w	r1, #4
        if (ret) {
          printk("Error %d: failed to set pulse width\n", ret);
     e30:	4822      	ldr	r0, [pc, #136]	; (ebc <thread_C_code+0xe4>)
     e32:	f008 faae 	bl	9392 <printk>
          return;
        }
  }
     e36:	b007      	add	sp, #28
     e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     e3c:	e9dd 6304 	ldrd	r6, r3, [sp, #16]
     e40:	fba6 ab07 	umull	sl, fp, r6, r7
     e44:	fb07 bb03 	mla	fp, r7, r3, fp
     e48:	4a1d      	ldr	r2, [pc, #116]	; (ec0 <thread_C_code+0xe8>)
     e4a:	9303      	str	r3, [sp, #12]
     e4c:	4650      	mov	r0, sl
     e4e:	2300      	movs	r3, #0
     e50:	4659      	mov	r1, fp
     e52:	f7ff fd4b 	bl	8ec <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     e56:	4b1b      	ldr	r3, [pc, #108]	; (ec4 <thread_C_code+0xec>)
     e58:	f04f 32ff 	mov.w	r2, #4294967295
     e5c:	455b      	cmp	r3, fp
     e5e:	bf08      	it	eq
     e60:	4552      	cmpeq	r2, sl
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     e62:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     e64:	d202      	bcs.n	e6c <thread_C_code+0x94>
		return -ENOTSUP;
     e66:	f06f 0185 	mvn.w	r1, #133	; 0x85
     e6a:	e7e1      	b.n	e30 <thread_C_code+0x58>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     e6c:	9b03      	ldr	r3, [sp, #12]
     e6e:	4a14      	ldr	r2, [pc, #80]	; (ec0 <thread_C_code+0xe8>)
     e70:	fba5 6706 	umull	r6, r7, r5, r6
     e74:	fb05 7703 	mla	r7, r5, r3, r7
     e78:	4630      	mov	r0, r6
     e7a:	2300      	movs	r3, #0
     e7c:	4639      	mov	r1, r7
     e7e:	f7ff fd35 	bl	8ec <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     e82:	4a10      	ldr	r2, [pc, #64]	; (ec4 <thread_C_code+0xec>)
     e84:	f04f 31ff 	mov.w	r1, #4294967295
     e88:	42ba      	cmp	r2, r7
     e8a:	bf08      	it	eq
     e8c:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     e8e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     e90:	d3e9      	bcc.n	e66 <thread_C_code+0x8e>
	return api->pin_set(dev, pwm, period, pulse, flags);
     e92:	68a2      	ldr	r2, [r4, #8]
     e94:	f8cd 8000 	str.w	r8, [sp]
     e98:	6815      	ldr	r5, [r2, #0]
     e9a:	210d      	movs	r1, #13
     e9c:	464a      	mov	r2, r9
     e9e:	4620      	mov	r0, r4
     ea0:	47a8      	blx	r5
        if (ret) {
     ea2:	4601      	mov	r1, r0
     ea4:	2800      	cmp	r0, #0
     ea6:	d0a5      	beq.n	df4 <thread_C_code+0x1c>
     ea8:	e7c2      	b.n	e30 <thread_C_code+0x58>
     eaa:	bf00      	nop
     eac:	0000a180 	.word	0x0000a180
     eb0:	0000a186 	.word	0x0000a186
     eb4:	200005d8 	.word	0x200005d8
     eb8:	0000a19e 	.word	0x0000a19e
     ebc:	0000a1b5 	.word	0x0000a1b5
     ec0:	000f4240 	.word	0x000f4240
     ec4:	000f423f 	.word	0x000f423f

00000ec8 <main>:
void main(void) {
     ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eca:	b089      	sub	sp, #36	; 0x24
     ecc:	4828      	ldr	r0, [pc, #160]	; (f70 <main+0xa8>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
     ece:	4c29      	ldr	r4, [pc, #164]	; (f74 <main+0xac>)
     ed0:	f004 fbf0 	bl	56b4 <z_impl_device_get_binding>
     ed4:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     ed6:	b910      	cbnz	r0, ede <main+0x16>
        printk("ADC device_get_binding() failed\n");
     ed8:	4827      	ldr	r0, [pc, #156]	; (f78 <main+0xb0>)
     eda:	f008 fa5a 	bl	9392 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     ede:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     ee0:	6883      	ldr	r3, [r0, #8]
     ee2:	4926      	ldr	r1, [pc, #152]	; (f7c <main+0xb4>)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	4798      	blx	r3
    if (err) {
     ee8:	4601      	mov	r1, r0
     eea:	b110      	cbz	r0, ef2 <main+0x2a>
        printk("adc_channel_setup() failed with error code %d\n", err);
     eec:	4824      	ldr	r0, [pc, #144]	; (f80 <main+0xb8>)
     eee:	f008 fa50 	bl	9392 <printk>
    printk("\n\r IPC via FIFO example \n\r");
     ef2:	4824      	ldr	r0, [pc, #144]	; (f84 <main+0xbc>)
     ef4:	f008 fa4d 	bl	9392 <printk>
	z_impl_k_queue_init(queue);
     ef8:	4823      	ldr	r0, [pc, #140]	; (f88 <main+0xc0>)
     efa:	f008 fdaf 	bl	9a5c <z_impl_k_queue_init>
     efe:	4823      	ldr	r0, [pc, #140]	; (f8c <main+0xc4>)
     f00:	f008 fdac 	bl	9a5c <z_impl_k_queue_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     f04:	2600      	movs	r6, #0
     f06:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     f08:	2400      	movs	r4, #0
     f0a:	2501      	movs	r5, #1
     f0c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f10:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f14:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f18:	4b1d      	ldr	r3, [pc, #116]	; (f90 <main+0xc8>)
     f1a:	491e      	ldr	r1, [pc, #120]	; (f94 <main+0xcc>)
     f1c:	9400      	str	r4, [sp, #0]
     f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f22:	481d      	ldr	r0, [pc, #116]	; (f98 <main+0xd0>)
     f24:	f006 fd38 	bl	7998 <z_impl_k_thread_create>
     f28:	4b1c      	ldr	r3, [pc, #112]	; (f9c <main+0xd4>)
     f2a:	6018      	str	r0, [r3, #0]
     f2c:	4b1c      	ldr	r3, [pc, #112]	; (fa0 <main+0xd8>)
     f2e:	491d      	ldr	r1, [pc, #116]	; (fa4 <main+0xdc>)
     f30:	9400      	str	r4, [sp, #0]
     f32:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f36:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f42:	4819      	ldr	r0, [pc, #100]	; (fa8 <main+0xe0>)
     f44:	f006 fd28 	bl	7998 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     f48:	4b18      	ldr	r3, [pc, #96]	; (fac <main+0xe4>)
     f4a:	6018      	str	r0, [r3, #0]
     f4c:	4b18      	ldr	r3, [pc, #96]	; (fb0 <main+0xe8>)
     f4e:	4919      	ldr	r1, [pc, #100]	; (fb4 <main+0xec>)
     f50:	9400      	str	r4, [sp, #0]
     f52:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f56:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f62:	4815      	ldr	r0, [pc, #84]	; (fb8 <main+0xf0>)
     f64:	f006 fd18 	bl	7998 <z_impl_k_thread_create>
    thread_C_tid = k_thread_create(&thread_C_data, thread_C_stack,
     f68:	4b14      	ldr	r3, [pc, #80]	; (fbc <main+0xf4>)
     f6a:	6018      	str	r0, [r3, #0]
} 
     f6c:	b009      	add	sp, #36	; 0x24
     f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f70:	0000a1da 	.word	0x0000a1da
     f74:	200005b8 	.word	0x200005b8
     f78:	0000a1e0 	.word	0x0000a1e0
     f7c:	0000a0bc 	.word	0x0000a0bc
     f80:	0000a201 	.word	0x0000a201
     f84:	0000a230 	.word	0x0000a230
     f88:	200005bc 	.word	0x200005bc
     f8c:	200005d8 	.word	0x200005d8
     f90:	00000ccd 	.word	0x00000ccd
     f94:	20000e40 	.word	0x20000e40
     f98:	20000270 	.word	0x20000270
     f9c:	200005f4 	.word	0x200005f4
     fa0:	00000be1 	.word	0x00000be1
     fa4:	20001260 	.word	0x20001260
     fa8:	200002f0 	.word	0x200002f0
     fac:	200005f8 	.word	0x200005f8
     fb0:	00000dd9 	.word	0x00000dd9
     fb4:	20001680 	.word	0x20001680
     fb8:	20000370 	.word	0x20000370
     fbc:	200005fc 	.word	0x200005fc

00000fc0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fc4:	b091      	sub	sp, #68	; 0x44
     fc6:	468b      	mov	fp, r1
     fc8:	9002      	str	r0, [sp, #8]
     fca:	4692      	mov	sl, r2
     fcc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     fce:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     fd0:	f89a 0000 	ldrb.w	r0, [sl]
     fd4:	b908      	cbnz	r0, fda <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     fd6:	4628      	mov	r0, r5
     fd8:	e35e      	b.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
		if (*fp != '%') {
     fda:	2825      	cmp	r0, #37	; 0x25
     fdc:	f10a 0701 	add.w	r7, sl, #1
     fe0:	d007      	beq.n	ff2 <cbvprintf+0x32>
			OUTC('%');
     fe2:	9b02      	ldr	r3, [sp, #8]
     fe4:	4659      	mov	r1, fp
     fe6:	4798      	blx	r3
     fe8:	2800      	cmp	r0, #0
     fea:	f2c0 8355 	blt.w	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
     fee:	3501      	adds	r5, #1
			break;
     ff0:	e210      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		} state = {
     ff2:	2218      	movs	r2, #24
     ff4:	2100      	movs	r1, #0
     ff6:	a80a      	add	r0, sp, #40	; 0x28
     ff8:	f008 fa22 	bl	9440 <memset>
	if (*sp == '%') {
     ffc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1000:	2b25      	cmp	r3, #37	; 0x25
    1002:	d078      	beq.n	10f6 <CONFIG_FPROTECT_BLOCK_SIZE+0xf6>
    1004:	2200      	movs	r2, #0
    1006:	4694      	mov	ip, r2
    1008:	4616      	mov	r6, r2
    100a:	4696      	mov	lr, r2
    100c:	4610      	mov	r0, r2
    100e:	4639      	mov	r1, r7
		switch (*sp) {
    1010:	f817 3b01 	ldrb.w	r3, [r7], #1
    1014:	2b2b      	cmp	r3, #43	; 0x2b
    1016:	f000 809d 	beq.w	1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>
    101a:	f200 8094 	bhi.w	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    101e:	2b20      	cmp	r3, #32
    1020:	f000 809b 	beq.w	115a <CONFIG_FPROTECT_BLOCK_SIZE+0x15a>
    1024:	2b23      	cmp	r3, #35	; 0x23
    1026:	f000 809a 	beq.w	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    102a:	b128      	cbz	r0, 1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    102c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1030:	f040 0004 	orr.w	r0, r0, #4
    1034:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1038:	f1be 0f00 	cmp.w	lr, #0
    103c:	d005      	beq.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    103e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1042:	f040 0008 	orr.w	r0, r0, #8
    1046:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    104a:	b12e      	cbz	r6, 1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    104c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1050:	f040 0010 	orr.w	r0, r0, #16
    1054:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1058:	f1bc 0f00 	cmp.w	ip, #0
    105c:	d005      	beq.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    105e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1062:	f040 0020 	orr.w	r0, r0, #32
    1066:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    106a:	b12a      	cbz	r2, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
    106c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1074:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1078:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    107c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1080:	2844      	cmp	r0, #68	; 0x44
    1082:	d103      	bne.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
		conv->flag_zero = false;
    1084:	f36f 1286 	bfc	r2, #6, #1
    1088:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    108c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1090:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1096:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    109a:	d17b      	bne.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
		conv->width_star = true;
    109c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10a0:	f042 0201 	orr.w	r2, r2, #1
    10a4:	1c4b      	adds	r3, r1, #1
    10a6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    10aa:	781a      	ldrb	r2, [r3, #0]
    10ac:	2a2e      	cmp	r2, #46	; 0x2e
    10ae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10b2:	bf0c      	ite	eq
    10b4:	2101      	moveq	r1, #1
    10b6:	2100      	movne	r1, #0
    10b8:	f361 0241 	bfi	r2, r1, #1, #1
    10bc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    10c0:	d174      	bne.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
	if (*sp == '*') {
    10c2:	785a      	ldrb	r2, [r3, #1]
    10c4:	2a2a      	cmp	r2, #42	; 0x2a
    10c6:	d06a      	beq.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    10c8:	3301      	adds	r3, #1
	size_t val = 0;
    10ca:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    10cc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    10ce:	4618      	mov	r0, r3
    10d0:	f810 2b01 	ldrb.w	r2, [r0], #1
    10d4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    10d8:	2f09      	cmp	r7, #9
    10da:	f240 808e 	bls.w	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
	conv->unsupported |= ((conv->prec_value < 0)
    10de:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    10e2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    10e4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    10e8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    10ec:	f361 0241 	bfi	r2, r1, #1, #1
    10f0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    10f4:	e05a      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
		conv->specifier = *sp++;
    10f6:	f10a 0702 	add.w	r7, sl, #2
    10fa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    10fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1102:	07d9      	lsls	r1, r3, #31
    1104:	f140 8149 	bpl.w	139a <CONFIG_FPROTECT_BLOCK_SIZE+0x39a>
			width = va_arg(ap, int);
    1108:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    110c:	f1b9 0f00 	cmp.w	r9, #0
    1110:	da07      	bge.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
				conv->flag_dash = true;
    1112:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1116:	f042 0204 	orr.w	r2, r2, #4
    111a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    111e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1122:	075a      	lsls	r2, r3, #29
    1124:	f140 8142 	bpl.w	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
			int arg = va_arg(ap, int);
    1128:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    112c:	f1b8 0f00 	cmp.w	r8, #0
    1130:	f280 8141 	bge.w	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
				conv->prec_present = false;
    1134:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1138:	f36f 0341 	bfc	r3, #1, #1
    113c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1140:	f04f 38ff 	mov.w	r8, #4294967295
    1144:	e137      	b.n	13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
		switch (*sp) {
    1146:	2b2d      	cmp	r3, #45	; 0x2d
    1148:	d00c      	beq.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    114a:	2b30      	cmp	r3, #48	; 0x30
    114c:	f47f af6d 	bne.w	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
			conv->flag_zero = true;
    1150:	2201      	movs	r2, #1
	} while (loop);
    1152:	e75c      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
			conv->flag_plus = true;
    1154:	f04f 0e01 	mov.w	lr, #1
    1158:	e759      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
			conv->flag_space = true;
    115a:	2601      	movs	r6, #1
    115c:	e757      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
			conv->flag_hash = true;
    115e:	f04f 0c01 	mov.w	ip, #1
    1162:	e754      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
		switch (*sp) {
    1164:	2001      	movs	r0, #1
    1166:	e752      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
		val = 10U * val + *sp++ - '0';
    1168:	fb0c 0202 	mla	r2, ip, r2, r0
    116c:	3a30      	subs	r2, #48	; 0x30
    116e:	4633      	mov	r3, r6
    1170:	461e      	mov	r6, r3
    1172:	f816 0b01 	ldrb.w	r0, [r6], #1
    1176:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    117a:	2f09      	cmp	r7, #9
    117c:	d9f4      	bls.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
	if (sp != wp) {
    117e:	4299      	cmp	r1, r3
    1180:	d093      	beq.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
		conv->unsupported |= ((conv->width_value < 0)
    1182:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1186:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1188:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    118a:	f362 0141 	bfi	r1, r2, #1, #1
    118e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1192:	e78a      	b.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
    1194:	460b      	mov	r3, r1
	size_t val = 0;
    1196:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1198:	f04f 0c0a 	mov.w	ip, #10
    119c:	e7e8      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		conv->prec_star = true;
    119e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11a2:	f042 0204 	orr.w	r2, r2, #4
    11a6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    11aa:	3302      	adds	r3, #2
	switch (*sp) {
    11ac:	461f      	mov	r7, r3
    11ae:	f817 2b01 	ldrb.w	r2, [r7], #1
    11b2:	2a6c      	cmp	r2, #108	; 0x6c
    11b4:	d041      	beq.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    11b6:	d825      	bhi.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11b8:	2a68      	cmp	r2, #104	; 0x68
    11ba:	d02b      	beq.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11bc:	2a6a      	cmp	r2, #106	; 0x6a
    11be:	d046      	beq.n	124e <CONFIG_FPROTECT_BLOCK_SIZE+0x24e>
    11c0:	2a4c      	cmp	r2, #76	; 0x4c
    11c2:	d04c      	beq.n	125e <CONFIG_FPROTECT_BLOCK_SIZE+0x25e>
    11c4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    11c6:	f817 2b01 	ldrb.w	r2, [r7], #1
    11ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11ce:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    11d2:	2a78      	cmp	r2, #120	; 0x78
    11d4:	f200 80d9 	bhi.w	138a <CONFIG_FPROTECT_BLOCK_SIZE+0x38a>
    11d8:	2a57      	cmp	r2, #87	; 0x57
    11da:	d84d      	bhi.n	1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    11dc:	2a41      	cmp	r2, #65	; 0x41
    11de:	d003      	beq.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
    11e0:	3a45      	subs	r2, #69	; 0x45
    11e2:	2a02      	cmp	r2, #2
    11e4:	f200 80d1 	bhi.w	138a <CONFIG_FPROTECT_BLOCK_SIZE+0x38a>
		conv->specifier_cat = SPECIFIER_FP;
    11e8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11ec:	2204      	movs	r2, #4
    11ee:	f362 0302 	bfi	r3, r2, #0, #3
    11f2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    11f6:	2301      	movs	r3, #1
			break;
    11f8:	e09e      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
		val = 10U * val + *sp++ - '0';
    11fa:	fb06 2101 	mla	r1, r6, r1, r2
    11fe:	3930      	subs	r1, #48	; 0x30
    1200:	4603      	mov	r3, r0
    1202:	e764      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	switch (*sp) {
    1204:	2a74      	cmp	r2, #116	; 0x74
    1206:	d026      	beq.n	1256 <CONFIG_FPROTECT_BLOCK_SIZE+0x256>
    1208:	2a7a      	cmp	r2, #122	; 0x7a
    120a:	d1db      	bne.n	11c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c4>
		conv->length_mod = LENGTH_Z;
    120c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1210:	2206      	movs	r2, #6
    1212:	e00d      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
		if (*++sp == 'h') {
    1214:	785a      	ldrb	r2, [r3, #1]
    1216:	2a68      	cmp	r2, #104	; 0x68
    1218:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    121c:	d106      	bne.n	122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>
			conv->length_mod = LENGTH_HH;
    121e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1220:	f361 02c6 	bfi	r2, r1, #3, #4
    1224:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1228:	1c9f      	adds	r7, r3, #2
    122a:	e7cc      	b.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
			conv->length_mod = LENGTH_H;
    122c:	4613      	mov	r3, r2
    122e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1230:	f362 03c6 	bfi	r3, r2, #3, #4
    1234:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1238:	e7c5      	b.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
		if (*++sp == 'l') {
    123a:	785a      	ldrb	r2, [r3, #1]
    123c:	2a6c      	cmp	r2, #108	; 0x6c
    123e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1242:	d101      	bne.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
			conv->length_mod = LENGTH_LL;
    1244:	2104      	movs	r1, #4
    1246:	e7eb      	b.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
			conv->length_mod = LENGTH_L;
    1248:	4613      	mov	r3, r2
    124a:	2203      	movs	r2, #3
    124c:	e7f0      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
		conv->length_mod = LENGTH_J;
    124e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1252:	2205      	movs	r2, #5
    1254:	e7ec      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
		conv->length_mod = LENGTH_T;
    1256:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    125a:	2207      	movs	r2, #7
    125c:	e7e8      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
		conv->unsupported = true;
    125e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1262:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1266:	f023 0302 	bic.w	r3, r3, #2
    126a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    126e:	f043 0302 	orr.w	r3, r3, #2
    1272:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1276:	e7a6      	b.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
    1278:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    127c:	2920      	cmp	r1, #32
    127e:	f200 8084 	bhi.w	138a <CONFIG_FPROTECT_BLOCK_SIZE+0x38a>
    1282:	a001      	add	r0, pc, #4	; (adr r0, 1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    1284:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1288:	0000134d 	.word	0x0000134d
    128c:	0000138b 	.word	0x0000138b
    1290:	0000138b 	.word	0x0000138b
    1294:	0000138b 	.word	0x0000138b
    1298:	0000138b 	.word	0x0000138b
    129c:	0000138b 	.word	0x0000138b
    12a0:	0000138b 	.word	0x0000138b
    12a4:	0000138b 	.word	0x0000138b
    12a8:	0000138b 	.word	0x0000138b
    12ac:	000011e9 	.word	0x000011e9
    12b0:	0000138b 	.word	0x0000138b
    12b4:	0000134d 	.word	0x0000134d
    12b8:	0000130d 	.word	0x0000130d
    12bc:	000011e9 	.word	0x000011e9
    12c0:	000011e9 	.word	0x000011e9
    12c4:	000011e9 	.word	0x000011e9
    12c8:	0000138b 	.word	0x0000138b
    12cc:	0000130d 	.word	0x0000130d
    12d0:	0000138b 	.word	0x0000138b
    12d4:	0000138b 	.word	0x0000138b
    12d8:	0000138b 	.word	0x0000138b
    12dc:	0000138b 	.word	0x0000138b
    12e0:	00001355 	.word	0x00001355
    12e4:	0000134d 	.word	0x0000134d
    12e8:	00001371 	.word	0x00001371
    12ec:	0000138b 	.word	0x0000138b
    12f0:	0000138b 	.word	0x0000138b
    12f4:	00001371 	.word	0x00001371
    12f8:	0000138b 	.word	0x0000138b
    12fc:	0000134d 	.word	0x0000134d
    1300:	0000138b 	.word	0x0000138b
    1304:	0000138b 	.word	0x0000138b
    1308:	0000134d 	.word	0x0000134d
		conv->specifier_cat = SPECIFIER_SINT;
    130c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1310:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1312:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1316:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    131a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    131c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1320:	bf02      	ittt	eq
    1322:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1326:	f041 0101 	orreq.w	r1, r1, #1
    132a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    132e:	2a63      	cmp	r2, #99	; 0x63
    1330:	d131      	bne.n	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1332:	3b00      	subs	r3, #0
    1334:	bf18      	it	ne
    1336:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1338:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    133c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1340:	430b      	orrs	r3, r1
    1342:	f363 0241 	bfi	r2, r3, #1, #1
    1346:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    134a:	e6d8      	b.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		conv->specifier_cat = SPECIFIER_UINT;
    134c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1350:	2002      	movs	r0, #2
    1352:	e7de      	b.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
		conv->specifier_cat = SPECIFIER_PTR;
    1354:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1358:	f003 0378 	and.w	r3, r3, #120	; 0x78
    135c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1360:	2103      	movs	r1, #3
    1362:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1366:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1368:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    136c:	4143      	adcs	r3, r0
    136e:	e7e3      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
		conv->specifier_cat = SPECIFIER_PTR;
    1370:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1374:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1376:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    137a:	f361 0202 	bfi	r2, r1, #0, #3
    137e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1382:	bf14      	ite	ne
    1384:	2301      	movne	r3, #1
    1386:	2300      	moveq	r3, #0
    1388:	e7d6      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
		conv->invalid = true;
    138a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    138e:	f043 0301 	orr.w	r3, r3, #1
    1392:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1396:	2300      	movs	r3, #0
    1398:	e7ce      	b.n	1338 <CONFIG_FPROTECT_BLOCK_SIZE+0x338>
		} else if (conv->width_present) {
    139a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    139e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    13a0:	bfb4      	ite	lt
    13a2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    13a6:	f04f 39ff 	movge.w	r9, #4294967295
    13aa:	e6ba      	b.n	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
		} else if (conv->prec_present) {
    13ac:	079b      	lsls	r3, r3, #30
    13ae:	f57f aec7 	bpl.w	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
			precision = conv->prec_value;
    13b2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    13b6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    13ba:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    13bc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    13c0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    13c4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    13c8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    13ca:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    13ce:	d136      	bne.n	143e <CONFIG_FPROTECT_BLOCK_SIZE+0x43e>
			switch (length_mod) {
    13d0:	1ed3      	subs	r3, r2, #3
    13d2:	2b04      	cmp	r3, #4
    13d4:	d820      	bhi.n	1418 <CONFIG_FPROTECT_BLOCK_SIZE+0x418>
    13d6:	e8df f003 	tbb	[pc, r3]
    13da:	0703      	.short	0x0703
    13dc:	1f07      	.short	0x1f07
    13de:	1f          	.byte	0x1f
    13df:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    13e0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    13e4:	17c1      	asrs	r1, r0, #31
    13e6:	e004      	b.n	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
					(sint_value_type)va_arg(ap, intmax_t);
    13e8:	3407      	adds	r4, #7
    13ea:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    13ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    13f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    13f6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    13fa:	f013 0603 	ands.w	r6, r3, #3
    13fe:	d054      	beq.n	14aa <CONFIG_FPROTECT_BLOCK_SIZE+0x4aa>
			OUTS(sp, fp);
    1400:	9802      	ldr	r0, [sp, #8]
    1402:	463b      	mov	r3, r7
    1404:	4652      	mov	r2, sl
    1406:	4659      	mov	r1, fp
    1408:	f007 fe26 	bl	9058 <outs>
    140c:	2800      	cmp	r0, #0
    140e:	f2c0 8143 	blt.w	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    1412:	4405      	add	r5, r0
			continue;
    1414:	46ba      	mov	sl, r7
    1416:	e5db      	b.n	fd0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1418:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    141c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    141e:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1422:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1426:	d105      	bne.n	1434 <CONFIG_FPROTECT_BLOCK_SIZE+0x434>
				value->uint = (unsigned char)value->uint;
    1428:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    142c:	930a      	str	r3, [sp, #40]	; 0x28
    142e:	2300      	movs	r3, #0
    1430:	930b      	str	r3, [sp, #44]	; 0x2c
    1432:	e7e0      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
			} else if (length_mod == LENGTH_H) {
    1434:	2a02      	cmp	r2, #2
    1436:	d1de      	bne.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
				value->sint = (short)value->sint;
    1438:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    143c:	e7d2      	b.n	13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    143e:	2b02      	cmp	r3, #2
    1440:	d123      	bne.n	148a <CONFIG_FPROTECT_BLOCK_SIZE+0x48a>
			switch (length_mod) {
    1442:	1ed3      	subs	r3, r2, #3
    1444:	2b04      	cmp	r3, #4
    1446:	d813      	bhi.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
    1448:	e8df f003 	tbb	[pc, r3]
    144c:	120a0a03 	.word	0x120a0a03
    1450:	12          	.byte	0x12
    1451:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1452:	6820      	ldr	r0, [r4, #0]
    1454:	900a      	str	r0, [sp, #40]	; 0x28
    1456:	2100      	movs	r1, #0
    1458:	1d23      	adds	r3, r4, #4
    145a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    145c:	461c      	mov	r4, r3
    145e:	e7ca      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
					(uint_value_type)va_arg(ap,
    1460:	3407      	adds	r4, #7
    1462:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1466:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    146a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    146e:	e7f5      	b.n	145c <CONFIG_FPROTECT_BLOCK_SIZE+0x45c>
					(uint_value_type)va_arg(ap, size_t);
    1470:	f854 3b04 	ldr.w	r3, [r4], #4
    1474:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1476:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    147e:	d0d3      	beq.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
			} else if (length_mod == LENGTH_H) {
    1480:	2a02      	cmp	r2, #2
    1482:	d1b8      	bne.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
				value->uint = (unsigned short)value->uint;
    1484:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1488:	e7d0      	b.n	142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
		} else if (specifier_cat == SPECIFIER_FP) {
    148a:	2b04      	cmp	r3, #4
    148c:	d107      	bne.n	149e <CONFIG_FPROTECT_BLOCK_SIZE+0x49e>
			if (length_mod == LENGTH_UPPER_L) {
    148e:	3407      	adds	r4, #7
    1490:	f024 0407 	bic.w	r4, r4, #7
    1494:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1498:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    149c:	e7ab      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    149e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    14a0:	bf04      	itt	eq
    14a2:	f854 3b04 	ldreq.w	r3, [r4], #4
    14a6:	930a      	streq	r3, [sp, #40]	; 0x28
    14a8:	e7a5      	b.n	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
		switch (conv->specifier) {
    14aa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    14ae:	2878      	cmp	r0, #120	; 0x78
    14b0:	d8b0      	bhi.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
    14b2:	2862      	cmp	r0, #98	; 0x62
    14b4:	d822      	bhi.n	14fc <CONFIG_FPROTECT_BLOCK_SIZE+0x4fc>
    14b6:	2825      	cmp	r0, #37	; 0x25
    14b8:	f43f ad93 	beq.w	fe2 <cbvprintf+0x22>
    14bc:	2858      	cmp	r0, #88	; 0x58
    14be:	d1a9      	bne.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
			bps = encode_uint(value->uint, conv, buf, bpe);
    14c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    14c4:	9300      	str	r3, [sp, #0]
    14c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    14ca:	ab04      	add	r3, sp, #16
    14cc:	aa0c      	add	r2, sp, #48	; 0x30
    14ce:	f007 fd78 	bl	8fc2 <encode_uint>
    14d2:	4682      	mov	sl, r0
			if (precision >= 0) {
    14d4:	f1b8 0f00 	cmp.w	r8, #0
    14d8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    14dc:	db0c      	blt.n	14f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f8>
				conv->flag_zero = false;
    14de:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    14e2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    14e6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    14ea:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    14ec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    14f0:	d902      	bls.n	14f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f8>
					conv->pad0_value = precision - (int)len;
    14f2:	eba8 0303 	sub.w	r3, r8, r3
    14f6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    14f8:	4680      	mov	r8, r0
    14fa:	e03d      	b.n	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
    14fc:	3863      	subs	r0, #99	; 0x63
    14fe:	2815      	cmp	r0, #21
    1500:	d888      	bhi.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
    1502:	a101      	add	r1, pc, #4	; (adr r1, 1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>)
    1504:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1508:	00001589 	.word	0x00001589
    150c:	000015ed 	.word	0x000015ed
    1510:	00001415 	.word	0x00001415
    1514:	00001415 	.word	0x00001415
    1518:	00001415 	.word	0x00001415
    151c:	00001415 	.word	0x00001415
    1520:	000015ed 	.word	0x000015ed
    1524:	00001415 	.word	0x00001415
    1528:	00001415 	.word	0x00001415
    152c:	00001415 	.word	0x00001415
    1530:	00001415 	.word	0x00001415
    1534:	0000164b 	.word	0x0000164b
    1538:	00001619 	.word	0x00001619
    153c:	0000161d 	.word	0x0000161d
    1540:	00001415 	.word	0x00001415
    1544:	00001415 	.word	0x00001415
    1548:	00001561 	.word	0x00001561
    154c:	00001415 	.word	0x00001415
    1550:	00001619 	.word	0x00001619
    1554:	00001415 	.word	0x00001415
    1558:	00001415 	.word	0x00001415
    155c:	00001619 	.word	0x00001619
			if (precision >= 0) {
    1560:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1564:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1568:	db0a      	blt.n	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
				len = strnlen(bps, precision);
    156a:	4641      	mov	r1, r8
    156c:	4650      	mov	r0, sl
    156e:	f007 ff47 	bl	9400 <strnlen>
			bpe = bps + len;
    1572:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1576:	2600      	movs	r6, #0
		if (bps == NULL) {
    1578:	f1ba 0f00 	cmp.w	sl, #0
    157c:	d10c      	bne.n	1598 <CONFIG_FPROTECT_BLOCK_SIZE+0x598>
    157e:	e749      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
				len = strlen(bps);
    1580:	4650      	mov	r0, sl
    1582:	f007 ff36 	bl	93f2 <strlen>
    1586:	e7f4      	b.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    158a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    158e:	2600      	movs	r6, #0
			bpe = buf + 1;
    1590:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1594:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1598:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    159c:	b106      	cbz	r6, 15a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a0>
			nj_len += 1U;
    159e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    15a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    15a4:	06d0      	lsls	r0, r2, #27
    15a6:	d56b      	bpl.n	1680 <CONFIG_FPROTECT_BLOCK_SIZE+0x680>
			nj_len += 2U;
    15a8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    15aa:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    15ac:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    15ae:	bf48      	it	mi
    15b0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    15b2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    15b4:	bf48      	it	mi
    15b6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    15b8:	f1b9 0f00 	cmp.w	r9, #0
    15bc:	dd79      	ble.n	16b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b2>
			if (!conv->flag_dash) {
    15be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    15c2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    15c6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    15ca:	9303      	str	r3, [sp, #12]
    15cc:	0753      	lsls	r3, r2, #29
    15ce:	d470      	bmi.n	16b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b2>
				if (conv->flag_zero) {
    15d0:	0650      	lsls	r0, r2, #25
    15d2:	d564      	bpl.n	169e <CONFIG_FPROTECT_BLOCK_SIZE+0x69e>
					if (sign != 0) {
    15d4:	b146      	cbz	r6, 15e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e8>
						OUTC(sign);
    15d6:	9b02      	ldr	r3, [sp, #8]
    15d8:	4659      	mov	r1, fp
    15da:	4630      	mov	r0, r6
    15dc:	4798      	blx	r3
    15de:	2800      	cmp	r0, #0
    15e0:	db5a      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
						sign = 0;
    15e2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    15e4:	3501      	adds	r5, #1
						sign = 0;
    15e6:	461e      	mov	r6, r3
					pad = '0';
    15e8:	2330      	movs	r3, #48	; 0x30
    15ea:	e059      	b.n	16a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a0>
			if (conv->flag_plus) {
    15ec:	071e      	lsls	r6, r3, #28
    15ee:	d411      	bmi.n	1614 <CONFIG_FPROTECT_BLOCK_SIZE+0x614>
				sign = ' ';
    15f0:	f013 0610 	ands.w	r6, r3, #16
    15f4:	bf18      	it	ne
    15f6:	2620      	movne	r6, #32
			sint = value->sint;
    15f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    15fc:	2a00      	cmp	r2, #0
    15fe:	f173 0100 	sbcs.w	r1, r3, #0
    1602:	f6bf af5d 	bge.w	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
				value->uint = (uint_value_type)-sint;
    1606:	4252      	negs	r2, r2
    1608:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    160c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1610:	262d      	movs	r6, #45	; 0x2d
    1612:	e755      	b.n	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
				sign = '+';
    1614:	262b      	movs	r6, #43	; 0x2b
    1616:	e7ef      	b.n	15f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f8>
		switch (conv->specifier) {
    1618:	2600      	movs	r6, #0
    161a:	e751      	b.n	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
			if (value->ptr != NULL) {
    161c:	980a      	ldr	r0, [sp, #40]	; 0x28
    161e:	b348      	cbz	r0, 1674 <CONFIG_FPROTECT_BLOCK_SIZE+0x674>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1620:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1624:	9300      	str	r3, [sp, #0]
    1626:	aa0c      	add	r2, sp, #48	; 0x30
    1628:	ab04      	add	r3, sp, #16
    162a:	2100      	movs	r1, #0
    162c:	f007 fcc9 	bl	8fc2 <encode_uint>
				conv->altform_0c = true;
    1630:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1634:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1638:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    163c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1640:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1642:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1646:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1648:	e744      	b.n	14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>
				store_count(conv, value->ptr, count);
    164a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    164c:	2a07      	cmp	r2, #7
    164e:	f63f aee1 	bhi.w	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
    1652:	e8df f002 	tbb	[pc, r2]
    1656:	040d      	.short	0x040d
    1658:	08080d06 	.word	0x08080d06
    165c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    165e:	701d      	strb	r5, [r3, #0]
		break;
    1660:	e6d8      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		*(short *)dp = (short)count;
    1662:	801d      	strh	r5, [r3, #0]
		break;
    1664:	e6d6      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		*(intmax_t *)dp = (intmax_t)count;
    1666:	4628      	mov	r0, r5
    1668:	17e9      	asrs	r1, r5, #31
    166a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    166e:	e6d1      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1670:	601d      	str	r5, [r3, #0]
		break;
    1672:	e6cf      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
			bpe = bps + 5;
    1674:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 173c <CONFIG_FPROTECT_BLOCK_SIZE+0x73c>
    1678:	4606      	mov	r6, r0
			bps = "(nil)";
    167a:	f1a8 0a05 	sub.w	sl, r8, #5
    167e:	e78b      	b.n	1598 <CONFIG_FPROTECT_BLOCK_SIZE+0x598>
		} else if (conv->altform_0) {
    1680:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1682:	bf48      	it	mi
    1684:	3301      	addmi	r3, #1
    1686:	e790      	b.n	15aa <CONFIG_FPROTECT_BLOCK_SIZE+0x5aa>
					OUTC(pad);
    1688:	4618      	mov	r0, r3
    168a:	9303      	str	r3, [sp, #12]
    168c:	4659      	mov	r1, fp
    168e:	9b02      	ldr	r3, [sp, #8]
    1690:	4798      	blx	r3
    1692:	2800      	cmp	r0, #0
    1694:	9b03      	ldr	r3, [sp, #12]
    1696:	da04      	bge.n	16a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a2>
#undef OUTS
#undef OUTC
}
    1698:	b011      	add	sp, #68	; 0x44
    169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    169e:	2320      	movs	r3, #32
    16a0:	444d      	add	r5, r9
    16a2:	464a      	mov	r2, r9
				while (width-- > 0) {
    16a4:	2a00      	cmp	r2, #0
    16a6:	eba5 0109 	sub.w	r1, r5, r9
    16aa:	f109 39ff 	add.w	r9, r9, #4294967295
    16ae:	dceb      	bgt.n	1688 <CONFIG_FPROTECT_BLOCK_SIZE+0x688>
    16b0:	460d      	mov	r5, r1
		if (sign != 0) {
    16b2:	b136      	cbz	r6, 16c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c2>
			OUTC(sign);
    16b4:	9b02      	ldr	r3, [sp, #8]
    16b6:	4659      	mov	r1, fp
    16b8:	4630      	mov	r0, r6
    16ba:	4798      	blx	r3
    16bc:	2800      	cmp	r0, #0
    16be:	dbeb      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    16c0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    16c2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    16c6:	06d9      	lsls	r1, r3, #27
    16c8:	d401      	bmi.n	16ce <CONFIG_FPROTECT_BLOCK_SIZE+0x6ce>
    16ca:	071a      	lsls	r2, r3, #28
    16cc:	d506      	bpl.n	16dc <CONFIG_FPROTECT_BLOCK_SIZE+0x6dc>
				OUTC('0');
    16ce:	9b02      	ldr	r3, [sp, #8]
    16d0:	4659      	mov	r1, fp
    16d2:	2030      	movs	r0, #48	; 0x30
    16d4:	4798      	blx	r3
    16d6:	2800      	cmp	r0, #0
    16d8:	dbde      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    16da:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    16dc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    16e0:	06db      	lsls	r3, r3, #27
    16e2:	d507      	bpl.n	16f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f4>
				OUTC(conv->specifier);
    16e4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    16e8:	9b02      	ldr	r3, [sp, #8]
    16ea:	4659      	mov	r1, fp
    16ec:	4798      	blx	r3
    16ee:	2800      	cmp	r0, #0
    16f0:	dbd2      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    16f2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    16f4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    16f6:	442e      	add	r6, r5
    16f8:	1b73      	subs	r3, r6, r5
    16fa:	2b00      	cmp	r3, #0
    16fc:	dc16      	bgt.n	172c <CONFIG_FPROTECT_BLOCK_SIZE+0x72c>
			OUTS(bps, bpe);
    16fe:	9802      	ldr	r0, [sp, #8]
    1700:	4643      	mov	r3, r8
    1702:	4652      	mov	r2, sl
    1704:	4659      	mov	r1, fp
    1706:	f007 fca7 	bl	9058 <outs>
    170a:	2800      	cmp	r0, #0
    170c:	dbc4      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    170e:	4405      	add	r5, r0
		while (width > 0) {
    1710:	44a9      	add	r9, r5
    1712:	eba9 0305 	sub.w	r3, r9, r5
    1716:	2b00      	cmp	r3, #0
    1718:	f77f ae7c 	ble.w	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
			OUTC(' ');
    171c:	9b02      	ldr	r3, [sp, #8]
    171e:	4659      	mov	r1, fp
    1720:	2020      	movs	r0, #32
    1722:	4798      	blx	r3
    1724:	2800      	cmp	r0, #0
    1726:	dbb7      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    1728:	3501      	adds	r5, #1
			--width;
    172a:	e7f2      	b.n	1712 <CONFIG_FPROTECT_BLOCK_SIZE+0x712>
				OUTC('0');
    172c:	9b02      	ldr	r3, [sp, #8]
    172e:	4659      	mov	r1, fp
    1730:	2030      	movs	r0, #48	; 0x30
    1732:	4798      	blx	r3
    1734:	2800      	cmp	r0, #0
    1736:	dbaf      	blt.n	1698 <CONFIG_FPROTECT_BLOCK_SIZE+0x698>
    1738:	3501      	adds	r5, #1
    173a:	e7dd      	b.n	16f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f8>
    173c:	0000a250 	.word	0x0000a250

00001740 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    1740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
    1742:	460d      	mov	r5, r1
    1744:	2900      	cmp	r1, #0
    1746:	d039      	beq.n	17bc <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    1748:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    174a:	1f0c      	subs	r4, r1, #4
    174c:	1ba4      	subs	r4, r4, r6
    174e:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    1750:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    1754:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    1756:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    1758:	07db      	lsls	r3, r3, #31
    175a:	d40d      	bmi.n	1778 <sys_heap_free+0x38>
    175c:	4a18      	ldr	r2, [pc, #96]	; (17c0 <sys_heap_free+0x80>)
    175e:	4919      	ldr	r1, [pc, #100]	; (17c4 <sys_heap_free+0x84>)
    1760:	4819      	ldr	r0, [pc, #100]	; (17c8 <sys_heap_free+0x88>)
    1762:	23a3      	movs	r3, #163	; 0xa3
    1764:	f007 fe15 	bl	9392 <printk>
    1768:	4818      	ldr	r0, [pc, #96]	; (17cc <sys_heap_free+0x8c>)
    176a:	4629      	mov	r1, r5
    176c:	f007 fe11 	bl	9392 <printk>
    1770:	4813      	ldr	r0, [pc, #76]	; (17c0 <sys_heap_free+0x80>)
    1772:	21a3      	movs	r1, #163	; 0xa3
    1774:	f007 fc1e 	bl	8fb4 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    1778:	4639      	mov	r1, r7
    177a:	4630      	mov	r0, r6
    177c:	f007 fc83 	bl	9086 <chunk_size>
    1780:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
    1782:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    1786:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    1788:	4287      	cmp	r7, r0
    178a:	d00d      	beq.n	17a8 <sys_heap_free+0x68>
    178c:	4a0c      	ldr	r2, [pc, #48]	; (17c0 <sys_heap_free+0x80>)
    178e:	4910      	ldr	r1, [pc, #64]	; (17d0 <sys_heap_free+0x90>)
    1790:	480d      	ldr	r0, [pc, #52]	; (17c8 <sys_heap_free+0x88>)
    1792:	23ab      	movs	r3, #171	; 0xab
    1794:	f007 fdfd 	bl	9392 <printk>
    1798:	480e      	ldr	r0, [pc, #56]	; (17d4 <sys_heap_free+0x94>)
    179a:	4629      	mov	r1, r5
    179c:	f007 fdf9 	bl	9392 <printk>
    17a0:	4807      	ldr	r0, [pc, #28]	; (17c0 <sys_heap_free+0x80>)
    17a2:	21ab      	movs	r1, #171	; 0xab
    17a4:	f007 fc06 	bl	8fb4 <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    17a8:	8863      	ldrh	r3, [r4, #2]
    17aa:	f023 0301 	bic.w	r3, r3, #1
    17ae:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
    17b0:	4639      	mov	r1, r7
    17b2:	4630      	mov	r0, r6
}
    17b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
    17b8:	f007 bd22 	b.w	9200 <free_chunk>
}
    17bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17be:	bf00      	nop
    17c0:	0000a251 	.word	0x0000a251
    17c4:	0000a272 	.word	0x0000a272
    17c8:	0000a283 	.word	0x0000a283
    17cc:	0000a2a0 	.word	0x0000a2a0
    17d0:	0000a2d8 	.word	0x0000a2d8
    17d4:	0000a2fe 	.word	0x0000a2fe

000017d8 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    17d8:	424b      	negs	r3, r1
{
    17da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
    17de:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
    17e2:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
    17e6:	6806      	ldr	r6, [r0, #0]
{
    17e8:	4614      	mov	r4, r2
	if (align != rew) {
    17ea:	d01f      	beq.n	182c <sys_heap_aligned_alloc+0x54>
		return false;
    17ec:	2f04      	cmp	r7, #4
    17ee:	463d      	mov	r5, r7
    17f0:	46b9      	mov	r9, r7
    17f2:	bf28      	it	cs
    17f4:	2504      	movcs	r5, #4
		align -= rew;
    17f6:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    17f8:	f107 3aff 	add.w	sl, r7, #4294967295
    17fc:	ea1a 0f07 	tst.w	sl, r7
    1800:	d00e      	beq.n	1820 <sys_heap_aligned_alloc+0x48>
    1802:	4933      	ldr	r1, [pc, #204]	; (18d0 <sys_heap_aligned_alloc+0xf8>)
    1804:	4a33      	ldr	r2, [pc, #204]	; (18d4 <sys_heap_aligned_alloc+0xfc>)
    1806:	4834      	ldr	r0, [pc, #208]	; (18d8 <sys_heap_aligned_alloc+0x100>)
    1808:	f240 1327 	movw	r3, #295	; 0x127
    180c:	f007 fdc1 	bl	9392 <printk>
    1810:	4832      	ldr	r0, [pc, #200]	; (18dc <sys_heap_aligned_alloc+0x104>)
    1812:	f007 fdbe 	bl	9392 <printk>
    1816:	482f      	ldr	r0, [pc, #188]	; (18d4 <sys_heap_aligned_alloc+0xfc>)
    1818:	f240 1127 	movw	r1, #295	; 0x127
    181c:	f007 fbca 	bl	8fb4 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
    1820:	b97c      	cbnz	r4, 1842 <sys_heap_aligned_alloc+0x6a>
		return NULL;
    1822:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    1826:	4648      	mov	r0, r9
    1828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
    182c:	2904      	cmp	r1, #4
    182e:	d804      	bhi.n	183a <sys_heap_aligned_alloc+0x62>
}
    1830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
    1834:	4611      	mov	r1, r2
    1836:	f007 bd14 	b.w	9262 <sys_heap_alloc>
		rew = 0;
    183a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    183e:	2504      	movs	r5, #4
    1840:	e7da      	b.n	17f8 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
    1842:	68b3      	ldr	r3, [r6, #8]
    1844:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    1848:	d9eb      	bls.n	1822 <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    184a:	f104 010b 	add.w	r1, r4, #11
    184e:	4439      	add	r1, r7
    1850:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    1852:	08c9      	lsrs	r1, r1, #3
    1854:	4630      	mov	r0, r6
    1856:	f007 fc6c 	bl	9132 <alloc_chunk>
	if (c0 == 0) {
    185a:	4680      	mov	r8, r0
    185c:	2800      	cmp	r0, #0
    185e:	d0e0      	beq.n	1822 <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    1860:	f109 0504 	add.w	r5, r9, #4
    1864:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    1868:	4435      	add	r5, r6
    186a:	4455      	add	r5, sl
    186c:	427f      	negs	r7, r7
    186e:	402f      	ands	r7, r5
    1870:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    1874:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    1876:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    187a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    187c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    187e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    1882:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    1884:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    1888:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    188c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    1890:	d208      	bcs.n	18a4 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    1892:	4601      	mov	r1, r0
    1894:	463a      	mov	r2, r7
    1896:	4630      	mov	r0, r6
    1898:	f007 fc98 	bl	91cc <split_chunks>
		free_list_add(h, c0);
    189c:	4641      	mov	r1, r8
    189e:	4630      	mov	r0, r6
    18a0:	f007 fbf6 	bl	9090 <free_list_add>
	return c + chunk_size(h, c);
    18a4:	4639      	mov	r1, r7
    18a6:	4630      	mov	r0, r6
    18a8:	f007 fbed 	bl	9086 <chunk_size>
    18ac:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    18ae:	4284      	cmp	r4, r0
    18b0:	d207      	bcs.n	18c2 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    18b2:	4630      	mov	r0, r6
    18b4:	4622      	mov	r2, r4
    18b6:	f007 fc89 	bl	91cc <split_chunks>
		free_list_add(h, c_end);
    18ba:	4621      	mov	r1, r4
    18bc:	4630      	mov	r0, r6
    18be:	f007 fbe7 	bl	9090 <free_list_add>
	void *cmem = &buf[c];
    18c2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    18c6:	8873      	ldrh	r3, [r6, #2]
    18c8:	f043 0301 	orr.w	r3, r3, #1
    18cc:	8073      	strh	r3, [r6, #2]
    18ce:	e7aa      	b.n	1826 <sys_heap_aligned_alloc+0x4e>
    18d0:	0000a33a 	.word	0x0000a33a
    18d4:	0000a251 	.word	0x0000a251
    18d8:	0000a283 	.word	0x0000a283
    18dc:	0000a355 	.word	0x0000a355

000018e0 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    18e0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    18e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18e8:	4606      	mov	r6, r0
    18ea:	460d      	mov	r5, r1
    18ec:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    18ee:	d369      	bcc.n	19c4 <sys_heap_init+0xe4>
    18f0:	493d      	ldr	r1, [pc, #244]	; (19e8 <sys_heap_init+0x108>)
    18f2:	4a3e      	ldr	r2, [pc, #248]	; (19ec <sys_heap_init+0x10c>)
    18f4:	483e      	ldr	r0, [pc, #248]	; (19f0 <sys_heap_init+0x110>)
    18f6:	f240 13a5 	movw	r3, #421	; 0x1a5
    18fa:	f007 fd4a 	bl	9392 <printk>
    18fe:	483d      	ldr	r0, [pc, #244]	; (19f4 <sys_heap_init+0x114>)
    1900:	f007 fd47 	bl	9392 <printk>
    1904:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1908:	4838      	ldr	r0, [pc, #224]	; (19ec <sys_heap_init+0x10c>)
    190a:	f007 fb53 	bl	8fb4 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    190e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1910:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1912:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1914:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1918:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    191c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    191e:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1920:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1924:	d80e      	bhi.n	1944 <sys_heap_init+0x64>
    1926:	4934      	ldr	r1, [pc, #208]	; (19f8 <sys_heap_init+0x118>)
    1928:	4a30      	ldr	r2, [pc, #192]	; (19ec <sys_heap_init+0x10c>)
    192a:	4831      	ldr	r0, [pc, #196]	; (19f0 <sys_heap_init+0x110>)
    192c:	f240 13b5 	movw	r3, #437	; 0x1b5
    1930:	f007 fd2f 	bl	9392 <printk>
    1934:	4831      	ldr	r0, [pc, #196]	; (19fc <sys_heap_init+0x11c>)
    1936:	f007 fd2c 	bl	9392 <printk>
    193a:	482c      	ldr	r0, [pc, #176]	; (19ec <sys_heap_init+0x10c>)
    193c:	f240 11b5 	movw	r1, #437	; 0x1b5
    1940:	f007 fb38 	bl	8fb4 <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1944:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1948:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
    194c:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
    1950:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1952:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
    1956:	2300      	movs	r3, #0
    1958:	08f6      	lsrs	r6, r6, #3
    195a:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    195c:	1c73      	adds	r3, r6, #1
    195e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    1960:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1962:	d90e      	bls.n	1982 <sys_heap_init+0xa2>
    1964:	4926      	ldr	r1, [pc, #152]	; (1a00 <sys_heap_init+0x120>)
    1966:	4a21      	ldr	r2, [pc, #132]	; (19ec <sys_heap_init+0x10c>)
    1968:	4821      	ldr	r0, [pc, #132]	; (19f0 <sys_heap_init+0x110>)
    196a:	f240 13c5 	movw	r3, #453	; 0x1c5
    196e:	f007 fd10 	bl	9392 <printk>
    1972:	4822      	ldr	r0, [pc, #136]	; (19fc <sys_heap_init+0x11c>)
    1974:	f007 fd0d 	bl	9392 <printk>
    1978:	481c      	ldr	r0, [pc, #112]	; (19ec <sys_heap_init+0x10c>)
    197a:	f240 11c5 	movw	r1, #453	; 0x1c5
    197e:	f007 fb19 	bl	8fb4 <assert_post_action>
    1982:	f104 0210 	add.w	r2, r4, #16
    1986:	44a0      	add	r8, r4
    1988:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
    198a:	4590      	cmp	r8, r2
    198c:	d129      	bne.n	19e2 <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    198e:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1990:	f042 0201 	orr.w	r2, r2, #1
    1994:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
    1996:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    199a:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    199c:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
    199e:	8023      	strh	r3, [r4, #0]
    19a0:	8048      	strh	r0, [r1, #2]
    19a2:	1961      	adds	r1, r4, r5
    19a4:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
    19a8:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
    19ac:	804b      	strh	r3, [r1, #2]
    19ae:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    19b0:	887b      	ldrh	r3, [r7, #2]
    19b2:	f043 0301 	orr.w	r3, r3, #1
    19b6:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    19b8:	4631      	mov	r1, r6
    19ba:	4620      	mov	r0, r4
}
    19bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    19c0:	f007 bb66 	b.w	9090 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    19c4:	2a04      	cmp	r2, #4
    19c6:	d8a2      	bhi.n	190e <sys_heap_init+0x2e>
    19c8:	490e      	ldr	r1, [pc, #56]	; (1a04 <sys_heap_init+0x124>)
    19ca:	4a08      	ldr	r2, [pc, #32]	; (19ec <sys_heap_init+0x10c>)
    19cc:	4808      	ldr	r0, [pc, #32]	; (19f0 <sys_heap_init+0x110>)
    19ce:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
    19d2:	f007 fcde 	bl	9392 <printk>
    19d6:	4809      	ldr	r0, [pc, #36]	; (19fc <sys_heap_init+0x11c>)
    19d8:	f007 fcdb 	bl	9392 <printk>
    19dc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    19e0:	e792      	b.n	1908 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    19e2:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    19e6:	e7d0      	b.n	198a <sys_heap_init+0xaa>
    19e8:	0000a372 	.word	0x0000a372
    19ec:	0000a251 	.word	0x0000a251
    19f0:	0000a283 	.word	0x0000a283
    19f4:	0000a388 	.word	0x0000a388
    19f8:	0000a3d9 	.word	0x0000a3d9
    19fc:	0000a3c0 	.word	0x0000a3c0
    1a00:	0000a402 	.word	0x0000a402
    1a04:	0000a39f 	.word	0x0000a39f

00001a08 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1a08:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1a0a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1a0e:	2b02      	cmp	r3, #2
{
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	4604      	mov	r4, r0
    1a14:	460e      	mov	r6, r1
	notify->result = res;
    1a16:	6081      	str	r1, [r0, #8]
	switch (method) {
    1a18:	d010      	beq.n	1a3c <sys_notify_finalize+0x34>
    1a1a:	2b03      	cmp	r3, #3
    1a1c:	d004      	beq.n	1a28 <sys_notify_finalize+0x20>
    1a1e:	2b01      	cmp	r3, #1
    1a20:	d10f      	bne.n	1a42 <sys_notify_finalize+0x3a>
    1a22:	2500      	movs	r5, #0
    1a24:	4628      	mov	r0, r5
    1a26:	e001      	b.n	1a2c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1a28:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    1a2a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1a2c:	2300      	movs	r3, #0
    1a2e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    1a30:	b110      	cbz	r0, 1a38 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    1a32:	4631      	mov	r1, r6
    1a34:	f004 fad4 	bl	5fe0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1a38:	4628      	mov	r0, r5
    1a3a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    1a3c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    1a3e:	2500      	movs	r5, #0
		break;
    1a40:	e7f4      	b.n	1a2c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    1a42:	4a06      	ldr	r2, [pc, #24]	; (1a5c <sys_notify_finalize+0x54>)
    1a44:	4906      	ldr	r1, [pc, #24]	; (1a60 <sys_notify_finalize+0x58>)
    1a46:	4807      	ldr	r0, [pc, #28]	; (1a64 <sys_notify_finalize+0x5c>)
    1a48:	2345      	movs	r3, #69	; 0x45
    1a4a:	f007 fca2 	bl	9392 <printk>
    1a4e:	4803      	ldr	r0, [pc, #12]	; (1a5c <sys_notify_finalize+0x54>)
    1a50:	2145      	movs	r1, #69	; 0x45
    1a52:	f007 faaf 	bl	8fb4 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1a56:	2500      	movs	r5, #0
    1a58:	e7e7      	b.n	1a2a <sys_notify_finalize+0x22>
    1a5a:	bf00      	nop
    1a5c:	0000a42d 	.word	0x0000a42d
    1a60:	0000ac19 	.word	0x0000ac19
    1a64:	0000a283 	.word	0x0000a283

00001a68 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1a68:	4801      	ldr	r0, [pc, #4]	; (1a70 <nrf_cc3xx_platform_abort_init+0x8>)
    1a6a:	f007 b911 	b.w	8c90 <nrf_cc3xx_platform_set_abort>
    1a6e:	bf00      	nop
    1a70:	00009eb8 	.word	0x00009eb8

00001a74 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1a74:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1a76:	b1d0      	cbz	r0, 1aae <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1a78:	6843      	ldr	r3, [r0, #4]
    1a7a:	2b04      	cmp	r3, #4
    1a7c:	d111      	bne.n	1aa2 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1a7e:	2200      	movs	r2, #0
    1a80:	6803      	ldr	r3, [r0, #0]
    1a82:	f3bf 8f5b 	dmb	ish
    1a86:	e853 1f00 	ldrex	r1, [r3]
    1a8a:	2901      	cmp	r1, #1
    1a8c:	d103      	bne.n	1a96 <mutex_unlock_platform+0x22>
    1a8e:	e843 2000 	strex	r0, r2, [r3]
    1a92:	2800      	cmp	r0, #0
    1a94:	d1f7      	bne.n	1a86 <mutex_unlock_platform+0x12>
    1a96:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1a9a:	4807      	ldr	r0, [pc, #28]	; (1ab8 <mutex_unlock_platform+0x44>)
    1a9c:	bf08      	it	eq
    1a9e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1aa0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1aa2:	b13b      	cbz	r3, 1ab4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1aa4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1aa6:	f004 f95d 	bl	5d64 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1aaa:	2000      	movs	r0, #0
    1aac:	e7f8      	b.n	1aa0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1aae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1ab2:	e7f5      	b.n	1aa0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1ab4:	4801      	ldr	r0, [pc, #4]	; (1abc <mutex_unlock_platform+0x48>)
    1ab6:	e7f3      	b.n	1aa0 <mutex_unlock_platform+0x2c>
    1ab8:	ffff8fe9 	.word	0xffff8fe9
    1abc:	ffff8fea 	.word	0xffff8fea

00001ac0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ac0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1ac2:	4604      	mov	r4, r0
    1ac4:	b918      	cbnz	r0, 1ace <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1ac6:	4b0d      	ldr	r3, [pc, #52]	; (1afc <mutex_free_platform+0x3c>)
    1ac8:	480d      	ldr	r0, [pc, #52]	; (1b00 <mutex_free_platform+0x40>)
    1aca:	685b      	ldr	r3, [r3, #4]
    1acc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1ace:	6861      	ldr	r1, [r4, #4]
    1ad0:	2908      	cmp	r1, #8
    1ad2:	d00d      	beq.n	1af0 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ad4:	f031 0304 	bics.w	r3, r1, #4
    1ad8:	d00a      	beq.n	1af0 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1ada:	f011 0102 	ands.w	r1, r1, #2
    1ade:	d008      	beq.n	1af2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ae0:	4808      	ldr	r0, [pc, #32]	; (1b04 <mutex_free_platform+0x44>)
    1ae2:	4621      	mov	r1, r4
    1ae4:	f003 ffda 	bl	5a9c <k_mem_slab_free>
        mutex->mutex = NULL;
    1ae8:	2300      	movs	r3, #0
    1aea:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1aec:	2300      	movs	r3, #0
    1aee:	6063      	str	r3, [r4, #4]
}
    1af0:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1af2:	6820      	ldr	r0, [r4, #0]
    1af4:	2214      	movs	r2, #20
    1af6:	f007 fca3 	bl	9440 <memset>
    1afa:	e7f7      	b.n	1aec <mutex_free_platform+0x2c>
    1afc:	2000018c 	.word	0x2000018c
    1b00:	0000a450 	.word	0x0000a450
    1b04:	20000600 	.word	0x20000600

00001b08 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1b08:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1b0a:	4604      	mov	r4, r0
    1b0c:	b918      	cbnz	r0, 1b16 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1b0e:	4b16      	ldr	r3, [pc, #88]	; (1b68 <mutex_init_platform+0x60>)
    1b10:	4816      	ldr	r0, [pc, #88]	; (1b6c <mutex_init_platform+0x64>)
    1b12:	685b      	ldr	r3, [r3, #4]
    1b14:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1b16:	6863      	ldr	r3, [r4, #4]
    1b18:	2b04      	cmp	r3, #4
    1b1a:	d023      	beq.n	1b64 <mutex_init_platform+0x5c>
    1b1c:	2b08      	cmp	r3, #8
    1b1e:	d021      	beq.n	1b64 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1b20:	b9cb      	cbnz	r3, 1b56 <mutex_init_platform+0x4e>
    1b22:	6823      	ldr	r3, [r4, #0]
    1b24:	b9bb      	cbnz	r3, 1b56 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1b26:	4812      	ldr	r0, [pc, #72]	; (1b70 <mutex_init_platform+0x68>)
    1b28:	f04f 32ff 	mov.w	r2, #4294967295
    1b2c:	f04f 33ff 	mov.w	r3, #4294967295
    1b30:	4621      	mov	r1, r4
    1b32:	f003 ff47 	bl	59c4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1b36:	b908      	cbnz	r0, 1b3c <mutex_init_platform+0x34>
    1b38:	6823      	ldr	r3, [r4, #0]
    1b3a:	b91b      	cbnz	r3, 1b44 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <mutex_init_platform+0x60>)
    1b3e:	480d      	ldr	r0, [pc, #52]	; (1b74 <mutex_init_platform+0x6c>)
    1b40:	685b      	ldr	r3, [r3, #4]
    1b42:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1b44:	6820      	ldr	r0, [r4, #0]
    1b46:	2214      	movs	r2, #20
    1b48:	2100      	movs	r1, #0
    1b4a:	f007 fc79 	bl	9440 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1b4e:	6863      	ldr	r3, [r4, #4]
    1b50:	f043 0302 	orr.w	r3, r3, #2
    1b54:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1b56:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1b58:	f007 ff5f 	bl	9a1a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1b5c:	6863      	ldr	r3, [r4, #4]
    1b5e:	f043 0301 	orr.w	r3, r3, #1
    1b62:	6063      	str	r3, [r4, #4]
}
    1b64:	bd10      	pop	{r4, pc}
    1b66:	bf00      	nop
    1b68:	2000018c 	.word	0x2000018c
    1b6c:	0000a450 	.word	0x0000a450
    1b70:	20000600 	.word	0x20000600
    1b74:	0000a476 	.word	0x0000a476

00001b78 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1b78:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1b7a:	b308      	cbz	r0, 1bc0 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1b7c:	6843      	ldr	r3, [r0, #4]
    1b7e:	2b04      	cmp	r3, #4
    1b80:	d110      	bne.n	1ba4 <mutex_lock_platform+0x2c>
    1b82:	2201      	movs	r2, #1
    1b84:	6803      	ldr	r3, [r0, #0]
    1b86:	f3bf 8f5b 	dmb	ish
    1b8a:	e853 1f00 	ldrex	r1, [r3]
    1b8e:	2900      	cmp	r1, #0
    1b90:	d103      	bne.n	1b9a <mutex_lock_platform+0x22>
    1b92:	e843 2000 	strex	r0, r2, [r3]
    1b96:	2800      	cmp	r0, #0
    1b98:	d1f7      	bne.n	1b8a <mutex_lock_platform+0x12>
    1b9a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1b9e:	d10b      	bne.n	1bb8 <mutex_lock_platform+0x40>
    1ba0:	2000      	movs	r0, #0
}
    1ba2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ba4:	b153      	cbz	r3, 1bbc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1ba6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1ba8:	f04f 32ff 	mov.w	r2, #4294967295
    1bac:	f04f 33ff 	mov.w	r3, #4294967295
    1bb0:	f003 ffd8 	bl	5b64 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1bb4:	2800      	cmp	r0, #0
    1bb6:	d0f3      	beq.n	1ba0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1bb8:	4803      	ldr	r0, [pc, #12]	; (1bc8 <mutex_lock_platform+0x50>)
    1bba:	e7f2      	b.n	1ba2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1bbc:	4803      	ldr	r0, [pc, #12]	; (1bcc <mutex_lock_platform+0x54>)
    1bbe:	e7f0      	b.n	1ba2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1bc0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1bc4:	e7ed      	b.n	1ba2 <mutex_lock_platform+0x2a>
    1bc6:	bf00      	nop
    1bc8:	ffff8fe9 	.word	0xffff8fe9
    1bcc:	ffff8fea 	.word	0xffff8fea

00001bd0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1bd0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1bd2:	4906      	ldr	r1, [pc, #24]	; (1bec <nrf_cc3xx_platform_mutex_init+0x1c>)
    1bd4:	4806      	ldr	r0, [pc, #24]	; (1bf0 <nrf_cc3xx_platform_mutex_init+0x20>)
    1bd6:	2340      	movs	r3, #64	; 0x40
    1bd8:	2214      	movs	r2, #20
    1bda:	f007 ff02 	bl	99e2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1be2:	4904      	ldr	r1, [pc, #16]	; (1bf4 <nrf_cc3xx_platform_mutex_init+0x24>)
    1be4:	4804      	ldr	r0, [pc, #16]	; (1bf8 <nrf_cc3xx_platform_mutex_init+0x28>)
    1be6:	f007 b8b5 	b.w	8d54 <nrf_cc3xx_platform_set_mutexes>
    1bea:	bf00      	nop
    1bec:	20000620 	.word	0x20000620
    1bf0:	20000600 	.word	0x20000600
    1bf4:	00009ed0 	.word	0x00009ed0
    1bf8:	00009ec0 	.word	0x00009ec0

00001bfc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c00:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1c04:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1c06:	f019 0f08 	tst.w	r9, #8
{
    1c0a:	4604      	mov	r4, r0
    1c0c:	9203      	str	r2, [sp, #12]
	if (processing) {
    1c0e:	d022      	beq.n	1c56 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1c10:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c12:	bf0c      	ite	eq
    1c14:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c18:	f049 0920 	orrne.w	r9, r9, #32
    1c1c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1c20:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1c22:	4620      	mov	r0, r4
    1c24:	f005 ffa4 	bl	7b70 <z_spin_unlock_valid>
    1c28:	b968      	cbnz	r0, 1c46 <process_event+0x4a>
    1c2a:	4a9f      	ldr	r2, [pc, #636]	; (1ea8 <process_event+0x2ac>)
    1c2c:	499f      	ldr	r1, [pc, #636]	; (1eac <process_event+0x2b0>)
    1c2e:	48a0      	ldr	r0, [pc, #640]	; (1eb0 <process_event+0x2b4>)
    1c30:	23ac      	movs	r3, #172	; 0xac
    1c32:	f007 fbae 	bl	9392 <printk>
    1c36:	489f      	ldr	r0, [pc, #636]	; (1eb4 <process_event+0x2b8>)
    1c38:	4621      	mov	r1, r4
    1c3a:	f007 fbaa 	bl	9392 <printk>
    1c3e:	489a      	ldr	r0, [pc, #616]	; (1ea8 <process_event+0x2ac>)
    1c40:	21ac      	movs	r1, #172	; 0xac
    1c42:	f007 f9b7 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c46:	9b03      	ldr	r3, [sp, #12]
    1c48:	f383 8811 	msr	BASEPRI, r3
    1c4c:	f3bf 8f6f 	isb	sy
}
    1c50:	b005      	add	sp, #20
    1c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1c56:	4f98      	ldr	r7, [pc, #608]	; (1eb8 <process_event+0x2bc>)
    1c58:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1eb0 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c5c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1c60:	2902      	cmp	r1, #2
    1c62:	d106      	bne.n	1c72 <process_event+0x76>
			evt = process_recheck(mgr);
    1c64:	4620      	mov	r0, r4
    1c66:	f007 fb3e 	bl	92e6 <process_recheck>
		if (evt == EVT_NOP) {
    1c6a:	2800      	cmp	r0, #0
    1c6c:	d0d8      	beq.n	1c20 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1c6e:	2801      	cmp	r0, #1
    1c70:	d168      	bne.n	1d44 <process_event+0x148>
			res = mgr->last_res;
    1c72:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c76:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1c78:	f1bb 0f00 	cmp.w	fp, #0
    1c7c:	da0a      	bge.n	1c94 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1c7e:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1c80:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c82:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1c86:	e9c4 6600 	strd	r6, r6, [r4]
    1c8a:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c8e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1c90:	9601      	str	r6, [sp, #4]
    1c92:	e027      	b.n	1ce4 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c94:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1c98:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1c9a:	2901      	cmp	r1, #1
    1c9c:	d834      	bhi.n	1d08 <process_event+0x10c>
	list->head = NULL;
    1c9e:	2100      	movs	r1, #0
    1ca0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1ca4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1ca6:	6825      	ldr	r5, [r4, #0]
    1ca8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    1caa:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1cae:	d10c      	bne.n	1cca <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1cb0:	428d      	cmp	r5, r1
    1cb2:	462a      	mov	r2, r5
    1cb4:	bf38      	it	cc
    1cb6:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1cb8:	b12a      	cbz	r2, 1cc6 <process_event+0xca>
				mgr->refs += 1U;
    1cba:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1cbc:	6812      	ldr	r2, [r2, #0]
    1cbe:	3101      	adds	r1, #1
    1cc0:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1cc2:	2a00      	cmp	r2, #0
    1cc4:	d1f8      	bne.n	1cb8 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cc6:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cca:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1ccc:	4620      	mov	r0, r4
    1cce:	f007 fb0a 	bl	92e6 <process_recheck>
    1cd2:	4606      	mov	r6, r0
    1cd4:	2800      	cmp	r0, #0
    1cd6:	d0db      	beq.n	1c90 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cd8:	8ba3      	ldrh	r3, [r4, #28]
    1cda:	f043 0320 	orr.w	r3, r3, #32
    1cde:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1ce0:	2300      	movs	r3, #0
    1ce2:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ce4:	8ba3      	ldrh	r3, [r4, #28]
    1ce6:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1cea:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1cec:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1cee:	d003      	beq.n	1cf8 <process_event+0xfc>
		if (do_monitors
    1cf0:	68a2      	ldr	r2, [r4, #8]
    1cf2:	2a00      	cmp	r2, #0
    1cf4:	f040 80f0 	bne.w	1ed8 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1cf8:	b91d      	cbnz	r5, 1d02 <process_event+0x106>
		    || (transit != NULL)) {
    1cfa:	9a01      	ldr	r2, [sp, #4]
    1cfc:	2a00      	cmp	r2, #0
    1cfe:	f000 8136 	beq.w	1f6e <process_event+0x372>
    1d02:	f04f 0900 	mov.w	r9, #0
    1d06:	e0e9      	b.n	1edc <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1d08:	2a04      	cmp	r2, #4
    1d0a:	d10e      	bne.n	1d2a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d0c:	f023 0307 	bic.w	r3, r3, #7
    1d10:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d12:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1d14:	4620      	mov	r0, r4
    1d16:	f007 fae6 	bl	92e6 <process_recheck>
    1d1a:	4605      	mov	r5, r0
    1d1c:	b118      	cbz	r0, 1d26 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d1e:	f042 0220 	orr.w	r2, r2, #32
    1d22:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1d24:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1d26:	9501      	str	r5, [sp, #4]
    1d28:	e7dc      	b.n	1ce4 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    1d2a:	4640      	mov	r0, r8
    1d2c:	4963      	ldr	r1, [pc, #396]	; (1ebc <process_event+0x2c0>)
    1d2e:	f240 131b 	movw	r3, #283	; 0x11b
    1d32:	463a      	mov	r2, r7
    1d34:	f007 fb2d 	bl	9392 <printk>
    1d38:	f240 111b 	movw	r1, #283	; 0x11b
    1d3c:	4638      	mov	r0, r7
    1d3e:	f007 f939 	bl	8fb4 <assert_post_action>
    1d42:	e7ef      	b.n	1d24 <process_event+0x128>
		} else if (evt == EVT_START) {
    1d44:	2803      	cmp	r0, #3
    1d46:	d135      	bne.n	1db4 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1d48:	f1b9 0f00 	cmp.w	r9, #0
    1d4c:	d00b      	beq.n	1d66 <process_event+0x16a>
    1d4e:	495c      	ldr	r1, [pc, #368]	; (1ec0 <process_event+0x2c4>)
    1d50:	4640      	mov	r0, r8
    1d52:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1d56:	463a      	mov	r2, r7
    1d58:	f007 fb1b 	bl	9392 <printk>
    1d5c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1d60:	4638      	mov	r0, r7
    1d62:	f007 f927 	bl	8fb4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1d66:	6823      	ldr	r3, [r4, #0]
    1d68:	b95b      	cbnz	r3, 1d82 <process_event+0x186>
    1d6a:	4956      	ldr	r1, [pc, #344]	; (1ec4 <process_event+0x2c8>)
    1d6c:	4640      	mov	r0, r8
    1d6e:	f240 1357 	movw	r3, #343	; 0x157
    1d72:	463a      	mov	r2, r7
    1d74:	f007 fb0d 	bl	9392 <printk>
    1d78:	f240 1157 	movw	r1, #343	; 0x157
    1d7c:	4638      	mov	r0, r7
    1d7e:	f007 f919 	bl	8fb4 <assert_post_action>
			transit = mgr->transitions->start;
    1d82:	6923      	ldr	r3, [r4, #16]
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1d88:	b95b      	cbnz	r3, 1da2 <process_event+0x1a6>
    1d8a:	494f      	ldr	r1, [pc, #316]	; (1ec8 <process_event+0x2cc>)
    1d8c:	4640      	mov	r0, r8
    1d8e:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1d92:	463a      	mov	r2, r7
    1d94:	f007 fafd 	bl	9392 <printk>
    1d98:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1d9c:	4638      	mov	r0, r7
    1d9e:	f007 f909 	bl	8fb4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1da2:	8ba3      	ldrh	r3, [r4, #28]
    1da4:	f023 0307 	bic.w	r3, r3, #7
    1da8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1dac:	83a3      	strh	r3, [r4, #28]
}
    1dae:	2500      	movs	r5, #0
		res = 0;
    1db0:	46ab      	mov	fp, r5
}
    1db2:	e797      	b.n	1ce4 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1db4:	2804      	cmp	r0, #4
    1db6:	d132      	bne.n	1e1e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1db8:	f1b9 0f02 	cmp.w	r9, #2
    1dbc:	d00b      	beq.n	1dd6 <process_event+0x1da>
    1dbe:	4943      	ldr	r1, [pc, #268]	; (1ecc <process_event+0x2d0>)
    1dc0:	4640      	mov	r0, r8
    1dc2:	f240 135d 	movw	r3, #349	; 0x15d
    1dc6:	463a      	mov	r2, r7
    1dc8:	f007 fae3 	bl	9392 <printk>
    1dcc:	f240 115d 	movw	r1, #349	; 0x15d
    1dd0:	4638      	mov	r0, r7
    1dd2:	f007 f8ef 	bl	8fb4 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1dd6:	8be3      	ldrh	r3, [r4, #30]
    1dd8:	b15b      	cbz	r3, 1df2 <process_event+0x1f6>
    1dda:	493d      	ldr	r1, [pc, #244]	; (1ed0 <process_event+0x2d4>)
    1ddc:	4640      	mov	r0, r8
    1dde:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1de2:	463a      	mov	r2, r7
    1de4:	f007 fad5 	bl	9392 <printk>
    1de8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1dec:	4638      	mov	r0, r7
    1dee:	f007 f8e1 	bl	8fb4 <assert_post_action>
			transit = mgr->transitions->stop;
    1df2:	6923      	ldr	r3, [r4, #16]
    1df4:	685b      	ldr	r3, [r3, #4]
    1df6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1df8:	b95b      	cbnz	r3, 1e12 <process_event+0x216>
    1dfa:	4933      	ldr	r1, [pc, #204]	; (1ec8 <process_event+0x2cc>)
    1dfc:	4640      	mov	r0, r8
    1dfe:	f240 1361 	movw	r3, #353	; 0x161
    1e02:	463a      	mov	r2, r7
    1e04:	f007 fac5 	bl	9392 <printk>
    1e08:	f240 1161 	movw	r1, #353	; 0x161
    1e0c:	4638      	mov	r0, r7
    1e0e:	f007 f8d1 	bl	8fb4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e12:	8ba3      	ldrh	r3, [r4, #28]
    1e14:	f023 0307 	bic.w	r3, r3, #7
    1e18:	f043 0304 	orr.w	r3, r3, #4
    1e1c:	e7c6      	b.n	1dac <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    1e1e:	2805      	cmp	r0, #5
    1e20:	d132      	bne.n	1e88 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1e22:	f1b9 0f01 	cmp.w	r9, #1
    1e26:	d00b      	beq.n	1e40 <process_event+0x244>
    1e28:	492a      	ldr	r1, [pc, #168]	; (1ed4 <process_event+0x2d8>)
    1e2a:	4640      	mov	r0, r8
    1e2c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1e30:	463a      	mov	r2, r7
    1e32:	f007 faae 	bl	9392 <printk>
    1e36:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1e3a:	4638      	mov	r0, r7
    1e3c:	f007 f8ba 	bl	8fb4 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1e40:	6823      	ldr	r3, [r4, #0]
    1e42:	b95b      	cbnz	r3, 1e5c <process_event+0x260>
    1e44:	491f      	ldr	r1, [pc, #124]	; (1ec4 <process_event+0x2c8>)
    1e46:	4640      	mov	r0, r8
    1e48:	f240 1365 	movw	r3, #357	; 0x165
    1e4c:	463a      	mov	r2, r7
    1e4e:	f007 faa0 	bl	9392 <printk>
    1e52:	f240 1165 	movw	r1, #357	; 0x165
    1e56:	4638      	mov	r0, r7
    1e58:	f007 f8ac 	bl	8fb4 <assert_post_action>
			transit = mgr->transitions->reset;
    1e5c:	6923      	ldr	r3, [r4, #16]
    1e5e:	689b      	ldr	r3, [r3, #8]
    1e60:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1e62:	b95b      	cbnz	r3, 1e7c <process_event+0x280>
    1e64:	4918      	ldr	r1, [pc, #96]	; (1ec8 <process_event+0x2cc>)
    1e66:	4640      	mov	r0, r8
    1e68:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1e6c:	463a      	mov	r2, r7
    1e6e:	f007 fa90 	bl	9392 <printk>
    1e72:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1e76:	4638      	mov	r0, r7
    1e78:	f007 f89c 	bl	8fb4 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e7c:	8ba3      	ldrh	r3, [r4, #28]
    1e7e:	f023 0307 	bic.w	r3, r3, #7
    1e82:	f043 0305 	orr.w	r3, r3, #5
    1e86:	e791      	b.n	1dac <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    1e88:	490c      	ldr	r1, [pc, #48]	; (1ebc <process_event+0x2c0>)
    1e8a:	f240 136b 	movw	r3, #363	; 0x16b
    1e8e:	463a      	mov	r2, r7
    1e90:	4640      	mov	r0, r8
    1e92:	f007 fa7e 	bl	9392 <printk>
    1e96:	2500      	movs	r5, #0
    1e98:	f240 116b 	movw	r1, #363	; 0x16b
    1e9c:	4638      	mov	r0, r7
    1e9e:	f007 f889 	bl	8fb4 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1ea2:	9501      	str	r5, [sp, #4]
    1ea4:	e784      	b.n	1db0 <process_event+0x1b4>
    1ea6:	bf00      	nop
    1ea8:	0000a546 	.word	0x0000a546
    1eac:	0000a56c 	.word	0x0000a56c
    1eb0:	0000a283 	.word	0x0000a283
    1eb4:	0000a583 	.word	0x0000a583
    1eb8:	0000a4a3 	.word	0x0000a4a3
    1ebc:	0000ac19 	.word	0x0000ac19
    1ec0:	0000a4c5 	.word	0x0000a4c5
    1ec4:	0000a4d1 	.word	0x0000a4d1
    1ec8:	0000a4f4 	.word	0x0000a4f4
    1ecc:	0000a50b 	.word	0x0000a50b
    1ed0:	0000a521 	.word	0x0000a521
    1ed4:	0000a530 	.word	0x0000a530
				   && !sys_slist_is_empty(&mgr->monitors);
    1ed8:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1edc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1ee0:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1ee4:	83a3      	strh	r3, [r4, #28]
    1ee6:	4650      	mov	r0, sl
    1ee8:	f005 fe42 	bl	7b70 <z_spin_unlock_valid>
    1eec:	b968      	cbnz	r0, 1f0a <process_event+0x30e>
    1eee:	4a3a      	ldr	r2, [pc, #232]	; (1fd8 <process_event+0x3dc>)
    1ef0:	493a      	ldr	r1, [pc, #232]	; (1fdc <process_event+0x3e0>)
    1ef2:	23ac      	movs	r3, #172	; 0xac
    1ef4:	4640      	mov	r0, r8
    1ef6:	f007 fa4c 	bl	9392 <printk>
    1efa:	4839      	ldr	r0, [pc, #228]	; (1fe0 <process_event+0x3e4>)
    1efc:	4651      	mov	r1, sl
    1efe:	f007 fa48 	bl	9392 <printk>
    1f02:	4835      	ldr	r0, [pc, #212]	; (1fd8 <process_event+0x3dc>)
    1f04:	21ac      	movs	r1, #172	; 0xac
    1f06:	f007 f855 	bl	8fb4 <assert_post_action>
    1f0a:	9b03      	ldr	r3, [sp, #12]
    1f0c:	f383 8811 	msr	BASEPRI, r3
    1f10:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1f14:	f1b9 0f00 	cmp.w	r9, #0
    1f18:	d138      	bne.n	1f8c <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    1f1a:	2d00      	cmp	r5, #0
    1f1c:	d14b      	bne.n	1fb6 <process_event+0x3ba>
			if (transit != NULL) {
    1f1e:	9b01      	ldr	r3, [sp, #4]
    1f20:	b113      	cbz	r3, 1f28 <process_event+0x32c>
				transit(mgr, transition_complete);
    1f22:	4930      	ldr	r1, [pc, #192]	; (1fe4 <process_event+0x3e8>)
    1f24:	4620      	mov	r0, r4
    1f26:	4798      	blx	r3
	__asm__ volatile(
    1f28:	f04f 0320 	mov.w	r3, #32
    1f2c:	f3ef 8b11 	mrs	fp, BASEPRI
    1f30:	f383 8812 	msr	BASEPRI_MAX, r3
    1f34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f38:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    1f3a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f3e:	f005 fe09 	bl	7b54 <z_spin_lock_valid>
    1f42:	b968      	cbnz	r0, 1f60 <process_event+0x364>
    1f44:	4a24      	ldr	r2, [pc, #144]	; (1fd8 <process_event+0x3dc>)
    1f46:	4928      	ldr	r1, [pc, #160]	; (1fe8 <process_event+0x3ec>)
    1f48:	2381      	movs	r3, #129	; 0x81
    1f4a:	4640      	mov	r0, r8
    1f4c:	f007 fa21 	bl	9392 <printk>
    1f50:	4826      	ldr	r0, [pc, #152]	; (1fec <process_event+0x3f0>)
    1f52:	4651      	mov	r1, sl
    1f54:	f007 fa1d 	bl	9392 <printk>
    1f58:	481f      	ldr	r0, [pc, #124]	; (1fd8 <process_event+0x3dc>)
    1f5a:	2181      	movs	r1, #129	; 0x81
    1f5c:	f007 f82a 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    1f60:	4650      	mov	r0, sl
    1f62:	f005 fe15 	bl	7b90 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1f66:	8ba3      	ldrh	r3, [r4, #28]
    1f68:	f023 0308 	bic.w	r3, r3, #8
    1f6c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1f6e:	8ba3      	ldrh	r3, [r4, #28]
    1f70:	06da      	lsls	r2, r3, #27
    1f72:	d528      	bpl.n	1fc6 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1f74:	f023 0310 	bic.w	r3, r3, #16
    1f78:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1f7a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1f7c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1f80:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1f84:	2900      	cmp	r1, #0
    1f86:	f47f ae6b 	bne.w	1c60 <process_event+0x64>
out:
    1f8a:	e649      	b.n	1c20 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f8c:	68a1      	ldr	r1, [r4, #8]
    1f8e:	2900      	cmp	r1, #0
    1f90:	d0c3      	beq.n	1f1a <process_event+0x31e>
	return node->next;
    1f92:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1f94:	9a02      	ldr	r2, [sp, #8]
    1f96:	2b00      	cmp	r3, #0
    1f98:	bf38      	it	cc
    1f9a:	2300      	movcc	r3, #0
    1f9c:	4699      	mov	r9, r3
    1f9e:	684b      	ldr	r3, [r1, #4]
    1fa0:	4620      	mov	r0, r4
    1fa2:	461e      	mov	r6, r3
    1fa4:	465b      	mov	r3, fp
    1fa6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1fa8:	f1b9 0f00 	cmp.w	r9, #0
    1fac:	d0b5      	beq.n	1f1a <process_event+0x31e>
    1fae:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1fb2:	4649      	mov	r1, r9
    1fb4:	e7ee      	b.n	1f94 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1fb6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1fb8:	9a02      	ldr	r2, [sp, #8]
    1fba:	682d      	ldr	r5, [r5, #0]
    1fbc:	465b      	mov	r3, fp
    1fbe:	4620      	mov	r0, r4
    1fc0:	f007 f9ad 	bl	931e <notify_one>
    1fc4:	e7a9      	b.n	1f1a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1fc6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1fca:	bf1e      	ittt	ne
    1fcc:	f023 0320 	bicne.w	r3, r3, #32
    1fd0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1fd2:	2102      	movne	r1, #2
    1fd4:	e7d2      	b.n	1f7c <process_event+0x380>
    1fd6:	bf00      	nop
    1fd8:	0000a546 	.word	0x0000a546
    1fdc:	0000a56c 	.word	0x0000a56c
    1fe0:	0000a583 	.word	0x0000a583
    1fe4:	00001ff1 	.word	0x00001ff1
    1fe8:	0000a598 	.word	0x0000a598
    1fec:	0000a5ad 	.word	0x0000a5ad

00001ff0 <transition_complete>:
{
    1ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ff2:	4604      	mov	r4, r0
    1ff4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1ff6:	f100 0614 	add.w	r6, r0, #20
    1ffa:	f04f 0320 	mov.w	r3, #32
    1ffe:	f3ef 8711 	mrs	r7, BASEPRI
    2002:	f383 8812 	msr	BASEPRI_MAX, r3
    2006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    200a:	4630      	mov	r0, r6
    200c:	f005 fda2 	bl	7b54 <z_spin_lock_valid>
    2010:	b968      	cbnz	r0, 202e <transition_complete+0x3e>
    2012:	4a0c      	ldr	r2, [pc, #48]	; (2044 <transition_complete+0x54>)
    2014:	490c      	ldr	r1, [pc, #48]	; (2048 <transition_complete+0x58>)
    2016:	480d      	ldr	r0, [pc, #52]	; (204c <transition_complete+0x5c>)
    2018:	2381      	movs	r3, #129	; 0x81
    201a:	f007 f9ba 	bl	9392 <printk>
    201e:	480c      	ldr	r0, [pc, #48]	; (2050 <transition_complete+0x60>)
    2020:	4631      	mov	r1, r6
    2022:	f007 f9b6 	bl	9392 <printk>
    2026:	4807      	ldr	r0, [pc, #28]	; (2044 <transition_complete+0x54>)
    2028:	2181      	movs	r1, #129	; 0x81
    202a:	f006 ffc3 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    202e:	4630      	mov	r0, r6
    2030:	f005 fdae 	bl	7b90 <z_spin_lock_set_owner>
	mgr->last_res = res;
    2034:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2036:	463a      	mov	r2, r7
    2038:	4620      	mov	r0, r4
    203a:	2101      	movs	r1, #1
}
    203c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    2040:	f7ff bddc 	b.w	1bfc <process_event>
    2044:	0000a546 	.word	0x0000a546
    2048:	0000a598 	.word	0x0000a598
    204c:	0000a283 	.word	0x0000a283
    2050:	0000a5ad 	.word	0x0000a5ad

00002054 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2058:	4604      	mov	r4, r0
    205a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    205c:	f007 f975 	bl	934a <validate_args>

	if (rv < 0) {
    2060:	1e05      	subs	r5, r0, #0
    2062:	db5e      	blt.n	2122 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2064:	f104 0914 	add.w	r9, r4, #20
    2068:	f04f 0320 	mov.w	r3, #32
    206c:	f3ef 8a11 	mrs	sl, BASEPRI
    2070:	f383 8812 	msr	BASEPRI_MAX, r3
    2074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2078:	4648      	mov	r0, r9
    207a:	f005 fd6b 	bl	7b54 <z_spin_lock_valid>
    207e:	b968      	cbnz	r0, 209c <onoff_request+0x48>
    2080:	4a38      	ldr	r2, [pc, #224]	; (2164 <onoff_request+0x110>)
    2082:	4939      	ldr	r1, [pc, #228]	; (2168 <onoff_request+0x114>)
    2084:	4839      	ldr	r0, [pc, #228]	; (216c <onoff_request+0x118>)
    2086:	2381      	movs	r3, #129	; 0x81
    2088:	f007 f983 	bl	9392 <printk>
    208c:	4838      	ldr	r0, [pc, #224]	; (2170 <onoff_request+0x11c>)
    208e:	4649      	mov	r1, r9
    2090:	f007 f97f 	bl	9392 <printk>
    2094:	4833      	ldr	r0, [pc, #204]	; (2164 <onoff_request+0x110>)
    2096:	2181      	movs	r1, #129	; 0x81
    2098:	f006 ff8c 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    209c:	4648      	mov	r0, r9
    209e:	f005 fd77 	bl	7b90 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    20a2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    20a4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    20a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    20aa:	428b      	cmp	r3, r1
    20ac:	f002 0607 	and.w	r6, r2, #7
    20b0:	d050      	beq.n	2154 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    20b2:	2e02      	cmp	r6, #2
    20b4:	d124      	bne.n	2100 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    20b6:	3301      	adds	r3, #1
    20b8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    20ba:	4635      	mov	r5, r6
		notify = true;
    20bc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    20c0:	4648      	mov	r0, r9
    20c2:	f005 fd55 	bl	7b70 <z_spin_unlock_valid>
    20c6:	b968      	cbnz	r0, 20e4 <onoff_request+0x90>
    20c8:	4a26      	ldr	r2, [pc, #152]	; (2164 <onoff_request+0x110>)
    20ca:	492a      	ldr	r1, [pc, #168]	; (2174 <onoff_request+0x120>)
    20cc:	4827      	ldr	r0, [pc, #156]	; (216c <onoff_request+0x118>)
    20ce:	23ac      	movs	r3, #172	; 0xac
    20d0:	f007 f95f 	bl	9392 <printk>
    20d4:	4828      	ldr	r0, [pc, #160]	; (2178 <onoff_request+0x124>)
    20d6:	4649      	mov	r1, r9
    20d8:	f007 f95b 	bl	9392 <printk>
    20dc:	4821      	ldr	r0, [pc, #132]	; (2164 <onoff_request+0x110>)
    20de:	21ac      	movs	r1, #172	; 0xac
    20e0:	f006 ff68 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    20e4:	f38a 8811 	msr	BASEPRI, sl
    20e8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    20ec:	f1b8 0f00 	cmp.w	r8, #0
    20f0:	d017      	beq.n	2122 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    20f2:	2300      	movs	r3, #0
    20f4:	4632      	mov	r2, r6
    20f6:	4639      	mov	r1, r7
    20f8:	4620      	mov	r0, r4
    20fa:	f007 f910 	bl	931e <notify_one>
    20fe:	e010      	b.n	2122 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    2100:	0793      	lsls	r3, r2, #30
    2102:	d001      	beq.n	2108 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    2104:	2e06      	cmp	r6, #6
    2106:	d10f      	bne.n	2128 <onoff_request+0xd4>
	parent->next = child;
    2108:	2300      	movs	r3, #0
    210a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    210c:	6863      	ldr	r3, [r4, #4]
    210e:	b9f3      	cbnz	r3, 214e <onoff_request+0xfa>
	list->head = node;
    2110:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2114:	4635      	mov	r5, r6
    2116:	b9fe      	cbnz	r6, 2158 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    2118:	4652      	mov	r2, sl
    211a:	2102      	movs	r1, #2
    211c:	4620      	mov	r0, r4
    211e:	f7ff fd6d 	bl	1bfc <process_event>
		}
	}

	return rv;
}
    2122:	4628      	mov	r0, r5
    2124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2128:	2e05      	cmp	r6, #5
    212a:	d018      	beq.n	215e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    212c:	2e01      	cmp	r6, #1
    212e:	d00b      	beq.n	2148 <onoff_request+0xf4>
    2130:	4912      	ldr	r1, [pc, #72]	; (217c <onoff_request+0x128>)
    2132:	480e      	ldr	r0, [pc, #56]	; (216c <onoff_request+0x118>)
    2134:	4a12      	ldr	r2, [pc, #72]	; (2180 <onoff_request+0x12c>)
    2136:	f240 13c9 	movw	r3, #457	; 0x1c9
    213a:	f007 f92a 	bl	9392 <printk>
    213e:	4810      	ldr	r0, [pc, #64]	; (2180 <onoff_request+0x12c>)
    2140:	f240 11c9 	movw	r1, #457	; 0x1c9
    2144:	f006 ff36 	bl	8fb4 <assert_post_action>
		rv = -EIO;
    2148:	f06f 0504 	mvn.w	r5, #4
    214c:	e004      	b.n	2158 <onoff_request+0x104>
	parent->next = child;
    214e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2150:	6067      	str	r7, [r4, #4]
}
    2152:	e7df      	b.n	2114 <onoff_request+0xc0>
		rv = -EAGAIN;
    2154:	f06f 050a 	mvn.w	r5, #10
    2158:	f04f 0800 	mov.w	r8, #0
    215c:	e7b0      	b.n	20c0 <onoff_request+0x6c>
		rv = -ENOTSUP;
    215e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2162:	e7f9      	b.n	2158 <onoff_request+0x104>
    2164:	0000a546 	.word	0x0000a546
    2168:	0000a598 	.word	0x0000a598
    216c:	0000a283 	.word	0x0000a283
    2170:	0000a5ad 	.word	0x0000a5ad
    2174:	0000a56c 	.word	0x0000a56c
    2178:	0000a583 	.word	0x0000a583
    217c:	0000a530 	.word	0x0000a530
    2180:	0000a4a3 	.word	0x0000a4a3

00002184 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2188:	4605      	mov	r5, r0
	__asm__ volatile(
    218a:	f04f 0320 	mov.w	r3, #32
    218e:	f3ef 8611 	mrs	r6, BASEPRI
    2192:	f383 8812 	msr	BASEPRI_MAX, r3
    2196:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    219a:	4823      	ldr	r0, [pc, #140]	; (2228 <pm_state_notify+0xa4>)
    219c:	f005 fcda 	bl	7b54 <z_spin_lock_valid>
    21a0:	b968      	cbnz	r0, 21be <pm_state_notify+0x3a>
    21a2:	4a22      	ldr	r2, [pc, #136]	; (222c <pm_state_notify+0xa8>)
    21a4:	4922      	ldr	r1, [pc, #136]	; (2230 <pm_state_notify+0xac>)
    21a6:	4823      	ldr	r0, [pc, #140]	; (2234 <pm_state_notify+0xb0>)
    21a8:	2381      	movs	r3, #129	; 0x81
    21aa:	f007 f8f2 	bl	9392 <printk>
    21ae:	491e      	ldr	r1, [pc, #120]	; (2228 <pm_state_notify+0xa4>)
    21b0:	4821      	ldr	r0, [pc, #132]	; (2238 <pm_state_notify+0xb4>)
    21b2:	f007 f8ee 	bl	9392 <printk>
    21b6:	481d      	ldr	r0, [pc, #116]	; (222c <pm_state_notify+0xa8>)
    21b8:	2181      	movs	r1, #129	; 0x81
    21ba:	f006 fefb 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    21be:	481a      	ldr	r0, [pc, #104]	; (2228 <pm_state_notify+0xa4>)
    21c0:	f005 fce6 	bl	7b90 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21c4:	4b1d      	ldr	r3, [pc, #116]	; (223c <pm_state_notify+0xb8>)
    21c6:	681c      	ldr	r4, [r3, #0]
    21c8:	2c00      	cmp	r4, #0
    21ca:	bf38      	it	cc
    21cc:	2400      	movcc	r4, #0
    21ce:	b19c      	cbz	r4, 21f8 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    21d0:	4f1b      	ldr	r7, [pc, #108]	; (2240 <pm_state_notify+0xbc>)
    21d2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 224c <pm_state_notify+0xc8>
    21d6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    21da:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    21de:	2d00      	cmp	r5, #0
    21e0:	bf08      	it	eq
    21e2:	4613      	moveq	r3, r2
		if (callback) {
    21e4:	b12b      	cbz	r3, 21f2 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    21e6:	f898 2014 	ldrb.w	r2, [r8, #20]
    21ea:	fb09 f202 	mul.w	r2, r9, r2
    21ee:	5cb8      	ldrb	r0, [r7, r2]
    21f0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    21f2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21f4:	2c00      	cmp	r4, #0
    21f6:	d1f0      	bne.n	21da <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    21f8:	480b      	ldr	r0, [pc, #44]	; (2228 <pm_state_notify+0xa4>)
    21fa:	f005 fcb9 	bl	7b70 <z_spin_unlock_valid>
    21fe:	b968      	cbnz	r0, 221c <pm_state_notify+0x98>
    2200:	4a0a      	ldr	r2, [pc, #40]	; (222c <pm_state_notify+0xa8>)
    2202:	4910      	ldr	r1, [pc, #64]	; (2244 <pm_state_notify+0xc0>)
    2204:	480b      	ldr	r0, [pc, #44]	; (2234 <pm_state_notify+0xb0>)
    2206:	23ac      	movs	r3, #172	; 0xac
    2208:	f007 f8c3 	bl	9392 <printk>
    220c:	4906      	ldr	r1, [pc, #24]	; (2228 <pm_state_notify+0xa4>)
    220e:	480e      	ldr	r0, [pc, #56]	; (2248 <pm_state_notify+0xc4>)
    2210:	f007 f8bf 	bl	9392 <printk>
    2214:	4805      	ldr	r0, [pc, #20]	; (222c <pm_state_notify+0xa8>)
    2216:	21ac      	movs	r1, #172	; 0xac
    2218:	f006 fecc 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    221c:	f386 8811 	msr	BASEPRI, r6
    2220:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2228:	20000b20 	.word	0x20000b20
    222c:	0000a546 	.word	0x0000a546
    2230:	0000a598 	.word	0x0000a598
    2234:	0000a283 	.word	0x0000a283
    2238:	0000a5ad 	.word	0x0000a5ad
    223c:	20000b24 	.word	0x20000b24
    2240:	20000b30 	.word	0x20000b30
    2244:	0000a56c 	.word	0x0000a56c
    2248:	0000a583 	.word	0x0000a583
    224c:	20000c08 	.word	0x20000c08

00002250 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2250:	f000 031f 	and.w	r3, r0, #31
    2254:	2201      	movs	r2, #1
    2256:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2258:	4b0a      	ldr	r3, [pc, #40]	; (2284 <atomic_test_and_set_bit.constprop.0+0x34>)
    225a:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    225e:	0940      	lsrs	r0, r0, #5
    2260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2264:	e850 3f00 	ldrex	r3, [r0]
    2268:	ea43 0102 	orr.w	r1, r3, r2
    226c:	e840 1c00 	strex	ip, r1, [r0]
    2270:	f1bc 0f00 	cmp.w	ip, #0
    2274:	d1f6      	bne.n	2264 <atomic_test_and_set_bit.constprop.0+0x14>
    2276:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    227a:	421a      	tst	r2, r3
}
    227c:	bf14      	ite	ne
    227e:	2001      	movne	r0, #1
    2280:	2000      	moveq	r0, #0
    2282:	4770      	bx	lr
    2284:	20000b3c 	.word	0x20000b3c

00002288 <pm_system_resume>:

void pm_system_resume(void)
{
    2288:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    228a:	4b1d      	ldr	r3, [pc, #116]	; (2300 <pm_system_resume+0x78>)
    228c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    228e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2292:	f005 031f 	and.w	r3, r5, #31
    2296:	2201      	movs	r2, #1
    2298:	409a      	lsls	r2, r3
    229a:	4b1a      	ldr	r3, [pc, #104]	; (2304 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    229c:	0969      	lsrs	r1, r5, #5
{
    229e:	b085      	sub	sp, #20
    22a0:	43d0      	mvns	r0, r2
    22a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    22a6:	e853 1f00 	ldrex	r1, [r3]
    22aa:	ea01 0400 	and.w	r4, r1, r0
    22ae:	e843 4c00 	strex	ip, r4, [r3]
    22b2:	f1bc 0f00 	cmp.w	ip, #0
    22b6:	d1f6      	bne.n	22a6 <pm_system_resume+0x1e>
    22b8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    22bc:	4211      	tst	r1, r2
    22be:	d017      	beq.n	22f0 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    22c0:	4c11      	ldr	r4, [pc, #68]	; (2308 <pm_system_resume+0x80>)
    22c2:	220c      	movs	r2, #12
    22c4:	fb02 4205 	mla	r2, r2, r5, r4
    22c8:	ca07      	ldmia	r2, {r0, r1, r2}
    22ca:	ab01      	add	r3, sp, #4
    22cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    22d0:	4a0e      	ldr	r2, [pc, #56]	; (230c <pm_system_resume+0x84>)
    22d2:	b17a      	cbz	r2, 22f4 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    22d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    22d8:	f007 f8ce 	bl	9478 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    22dc:	2000      	movs	r0, #0
    22de:	f7ff ff51 	bl	2184 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    22e2:	230c      	movs	r3, #12
    22e4:	436b      	muls	r3, r5
    22e6:	2200      	movs	r2, #0
    22e8:	18e1      	adds	r1, r4, r3
    22ea:	50e2      	str	r2, [r4, r3]
    22ec:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    22f0:	b005      	add	sp, #20
    22f2:	bd30      	pop	{r4, r5, pc}
    22f4:	f382 8811 	msr	BASEPRI, r2
    22f8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    22fc:	e7ee      	b.n	22dc <pm_system_resume+0x54>
    22fe:	bf00      	nop
    2300:	20000c08 	.word	0x20000c08
    2304:	20000b2c 	.word	0x20000b2c
    2308:	20000b30 	.word	0x20000b30
    230c:	00009479 	.word	0x00009479

00002310 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2314:	4b37      	ldr	r3, [pc, #220]	; (23f4 <pm_system_suspend+0xe4>)
    2316:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 240c <pm_system_suspend+0xfc>
    231a:	7d1c      	ldrb	r4, [r3, #20]
{
    231c:	b088      	sub	sp, #32
    231e:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2320:	4620      	mov	r0, r4
    2322:	f7ff ff95 	bl	2250 <atomic_test_and_set_bit.constprop.0>
    2326:	b960      	cbnz	r0, 2342 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2328:	466e      	mov	r6, sp
    232a:	463a      	mov	r2, r7
    232c:	4621      	mov	r1, r4
    232e:	4630      	mov	r0, r6
    2330:	f007 f83c 	bl	93ac <pm_policy_next_state>
    2334:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2338:	250c      	movs	r5, #12
    233a:	fb05 8504 	mla	r5, r5, r4, r8
    233e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    2342:	230c      	movs	r3, #12
    2344:	4363      	muls	r3, r4
    2346:	eb08 0203 	add.w	r2, r8, r3
    234a:	f818 0003 	ldrb.w	r0, [r8, r3]
    234e:	0965      	lsrs	r5, r4, #5
    2350:	f004 061f 	and.w	r6, r4, #31
    2354:	b3c8      	cbz	r0, 23ca <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2356:	1c7b      	adds	r3, r7, #1
    2358:	d00f      	beq.n	237a <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    235a:	f8d2 e008 	ldr.w	lr, [r2, #8]
    235e:	4826      	ldr	r0, [pc, #152]	; (23f8 <pm_system_suspend+0xe8>)
    2360:	4a26      	ldr	r2, [pc, #152]	; (23fc <pm_system_suspend+0xec>)
    2362:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2366:	2100      	movs	r1, #0
    2368:	2300      	movs	r3, #0
    236a:	fbec 010e 	umlal	r0, r1, ip, lr
    236e:	f7fe fabd 	bl	8ec <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2372:	2101      	movs	r1, #1
    2374:	1a38      	subs	r0, r7, r0
    2376:	f005 fdcd 	bl	7f14 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    237a:	f004 f89b 	bl	64b4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    237e:	2001      	movs	r0, #1
    2380:	f7ff ff00 	bl	2184 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2384:	f3bf 8f5b 	dmb	ish
    2388:	4b1d      	ldr	r3, [pc, #116]	; (2400 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    238a:	2201      	movs	r2, #1
    238c:	40b2      	lsls	r2, r6
    238e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    2392:	e853 1f00 	ldrex	r1, [r3]
    2396:	4311      	orrs	r1, r2
    2398:	e843 1000 	strex	r0, r1, [r3]
    239c:	2800      	cmp	r0, #0
    239e:	d1f8      	bne.n	2392 <pm_system_suspend+0x82>
    23a0:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    23a4:	230c      	movs	r3, #12
    23a6:	fb03 8404 	mla	r4, r3, r4, r8
    23aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    23ae:	ab05      	add	r3, sp, #20
    23b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    23b4:	4a13      	ldr	r2, [pc, #76]	; (2404 <pm_system_suspend+0xf4>)
    23b6:	b11a      	cbz	r2, 23c0 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    23b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    23bc:	f007 f849 	bl	9452 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    23c0:	f7ff ff62 	bl	2288 <pm_system_resume>
	k_sched_unlock();
    23c4:	f004 fdba 	bl	6f3c <k_sched_unlock>
	bool ret = true;
    23c8:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23ca:	4a0f      	ldr	r2, [pc, #60]	; (2408 <pm_system_suspend+0xf8>)
    23cc:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    23d0:	2301      	movs	r3, #1
    23d2:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    23d4:	43db      	mvns	r3, r3
    23d6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    23da:	e855 2f00 	ldrex	r2, [r5]
    23de:	401a      	ands	r2, r3
    23e0:	e845 2100 	strex	r1, r2, [r5]
    23e4:	2900      	cmp	r1, #0
    23e6:	d1f8      	bne.n	23da <pm_system_suspend+0xca>
    23e8:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    23ec:	b008      	add	sp, #32
    23ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23f2:	bf00      	nop
    23f4:	20000c08 	.word	0x20000c08
    23f8:	000f423f 	.word	0x000f423f
    23fc:	000f4240 	.word	0x000f4240
    2400:	20000b2c 	.word	0x20000b2c
    2404:	00009453 	.word	0x00009453
    2408:	20000b3c 	.word	0x20000b3c
    240c:	20000b30 	.word	0x20000b30

00002410 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2410:	680b      	ldr	r3, [r1, #0]
    2412:	3301      	adds	r3, #1
    2414:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2416:	4b01      	ldr	r3, [pc, #4]	; (241c <char_out+0xc>)
    2418:	681b      	ldr	r3, [r3, #0]
    241a:	4718      	bx	r3
    241c:	200000d0 	.word	0x200000d0

00002420 <__printk_hook_install>:
	_char_out = fn;
    2420:	4b01      	ldr	r3, [pc, #4]	; (2428 <__printk_hook_install+0x8>)
    2422:	6018      	str	r0, [r3, #0]
}
    2424:	4770      	bx	lr
    2426:	bf00      	nop
    2428:	200000d0 	.word	0x200000d0

0000242c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    242c:	b507      	push	{r0, r1, r2, lr}
    242e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2430:	2100      	movs	r1, #0
{
    2432:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2434:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2436:	4803      	ldr	r0, [pc, #12]	; (2444 <vprintk+0x18>)
    2438:	a901      	add	r1, sp, #4
    243a:	f7fe fdc1 	bl	fc0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    243e:	b003      	add	sp, #12
    2440:	f85d fb04 	ldr.w	pc, [sp], #4
    2444:	00002411 	.word	0x00002411

00002448 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2448:	b508      	push	{r3, lr}
	__asm__ volatile(
    244a:	f04f 0220 	mov.w	r2, #32
    244e:	f3ef 8311 	mrs	r3, BASEPRI
    2452:	f382 8812 	msr	BASEPRI_MAX, r2
    2456:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    245a:	f000 fca1 	bl	2da0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    245e:	4803      	ldr	r0, [pc, #12]	; (246c <sys_reboot+0x24>)
    2460:	f006 ff97 	bl	9392 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2464:	f000 f80a 	bl	247c <arch_cpu_idle>
    2468:	e7fc      	b.n	2464 <sys_reboot+0x1c>
    246a:	bf00      	nop
    246c:	0000a5c5 	.word	0x0000a5c5

00002470 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2470:	4901      	ldr	r1, [pc, #4]	; (2478 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2472:	2210      	movs	r2, #16
	str	r2, [r1]
    2474:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2476:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2478:	e000ed10 	.word	0xe000ed10

0000247c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    247c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    247e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2480:	f380 8811 	msr	BASEPRI, r0
	isb
    2484:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2488:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    248c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    248e:	b662      	cpsie	i
	isb
    2490:	f3bf 8f6f 	isb	sy

	bx	lr
    2494:	4770      	bx	lr
    2496:	bf00      	nop

00002498 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2498:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    249a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    249c:	f381 8811 	msr	BASEPRI, r1

	wfe
    24a0:	bf20      	wfe

	msr	BASEPRI, r0
    24a2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    24a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    24a8:	4770      	bx	lr
    24aa:	bf00      	nop

000024ac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    24ac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    24ae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    24b0:	4a0b      	ldr	r2, [pc, #44]	; (24e0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    24b2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    24b4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    24b6:	bf1e      	ittt	ne
	movne	r1, #0
    24b8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    24ba:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    24bc:	f007 fa8a 	blne	99d4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    24c0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    24c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    24c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    24ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    24ce:	4905      	ldr	r1, [pc, #20]	; (24e4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    24d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    24d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    24d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    24d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    24da:	4903      	ldr	r1, [pc, #12]	; (24e8 <_isr_wrapper+0x3c>)
	bx r1
    24dc:	4708      	bx	r1
    24de:	0000      	.short	0x0000
	ldr r2, =_kernel
    24e0:	20000c08 	.word	0x20000c08
	ldr r1, =_sw_isr_table
    24e4:	00009cfc 	.word	0x00009cfc
	ldr r1, =z_arm_int_exit
    24e8:	00002711 	.word	0x00002711

000024ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    24ec:	bf30      	wfi
    b z_SysNmiOnReset
    24ee:	f7ff bffd 	b.w	24ec <z_SysNmiOnReset>
    24f2:	bf00      	nop

000024f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    24f4:	4912      	ldr	r1, [pc, #72]	; (2540 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    24f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    24f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    24fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    24fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2502:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2506:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2508:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    250c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2510:	4f0c      	ldr	r7, [pc, #48]	; (2544 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2512:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2516:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2518:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    251a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    251c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    251e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2520:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2522:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2526:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2528:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    252a:	f000 fae7 	bl	2afc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    252e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2532:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2536:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    253a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    253e:	4770      	bx	lr
    ldr r1, =_kernel
    2540:	20000c08 	.word	0x20000c08
    ldr v4, =_SCS_ICSR
    2544:	e000ed04 	.word	0xe000ed04

00002548 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2548:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    254c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    254e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2552:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2556:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2558:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    255c:	2902      	cmp	r1, #2
    beq _oops
    255e:	d0ff      	beq.n	2560 <_oops>

00002560 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2560:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2562:	f006 ff34 	bl	93ce <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2566:	bd01      	pop	{r0, pc}

00002568 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2568:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    256a:	2b00      	cmp	r3, #0
    256c:	db08      	blt.n	2580 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    256e:	2201      	movs	r2, #1
    2570:	f000 001f 	and.w	r0, r0, #31
    2574:	fa02 f000 	lsl.w	r0, r2, r0
    2578:	095b      	lsrs	r3, r3, #5
    257a:	4a02      	ldr	r2, [pc, #8]	; (2584 <arch_irq_enable+0x1c>)
    257c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2580:	4770      	bx	lr
    2582:	bf00      	nop
    2584:	e000e100 	.word	0xe000e100

00002588 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2588:	4b05      	ldr	r3, [pc, #20]	; (25a0 <arch_irq_is_enabled+0x18>)
    258a:	0942      	lsrs	r2, r0, #5
    258c:	f000 001f 	and.w	r0, r0, #31
    2590:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2594:	2301      	movs	r3, #1
    2596:	fa03 f000 	lsl.w	r0, r3, r0
}
    259a:	4010      	ands	r0, r2
    259c:	4770      	bx	lr
    259e:	bf00      	nop
    25a0:	e000e100 	.word	0xe000e100

000025a4 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    25a4:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    25a6:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    25a8:	2c07      	cmp	r4, #7
{
    25aa:	4605      	mov	r5, r0
    25ac:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    25ae:	d90f      	bls.n	25d0 <z_arm_irq_priority_set+0x2c>
    25b0:	4a11      	ldr	r2, [pc, #68]	; (25f8 <z_arm_irq_priority_set+0x54>)
    25b2:	4912      	ldr	r1, [pc, #72]	; (25fc <z_arm_irq_priority_set+0x58>)
    25b4:	4812      	ldr	r0, [pc, #72]	; (2600 <z_arm_irq_priority_set+0x5c>)
    25b6:	2359      	movs	r3, #89	; 0x59
    25b8:	f006 feeb 	bl	9392 <printk>
    25bc:	4811      	ldr	r0, [pc, #68]	; (2604 <z_arm_irq_priority_set+0x60>)
    25be:	4631      	mov	r1, r6
    25c0:	2307      	movs	r3, #7
    25c2:	462a      	mov	r2, r5
    25c4:	f006 fee5 	bl	9392 <printk>
    25c8:	480b      	ldr	r0, [pc, #44]	; (25f8 <z_arm_irq_priority_set+0x54>)
    25ca:	2159      	movs	r1, #89	; 0x59
    25cc:	f006 fcf2 	bl	8fb4 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    25d0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    25d2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25d4:	bfac      	ite	ge
    25d6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25da:	4b0b      	ldrlt	r3, [pc, #44]	; (2608 <z_arm_irq_priority_set+0x64>)
    25dc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    25e0:	bfb8      	it	lt
    25e2:	f005 050f 	andlt.w	r5, r5, #15
    25e6:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25e8:	bfaa      	itet	ge
    25ea:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25ee:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25f0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    25f4:	bd70      	pop	{r4, r5, r6, pc}
    25f6:	bf00      	nop
    25f8:	0000a5ee 	.word	0x0000a5ee
    25fc:	0000a624 	.word	0x0000a624
    2600:	0000a283 	.word	0x0000a283
    2604:	0000a63f 	.word	0x0000a63f
    2608:	e000ed14 	.word	0xe000ed14

0000260c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    260c:	4a0b      	ldr	r2, [pc, #44]	; (263c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    260e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2610:	4b0b      	ldr	r3, [pc, #44]	; (2640 <z_arm_prep_c+0x34>)
    2612:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2616:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2618:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    261c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2620:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2624:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    262c:	f003 f912 	bl	5854 <z_bss_zero>
	z_data_copy();
    2630:	f006 f93e 	bl	88b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2634:	f000 f9f6 	bl	2a24 <z_arm_interrupt_init>
	z_cstart();
    2638:	f003 f916 	bl	5868 <z_cstart>
    263c:	00000000 	.word	0x00000000
    2640:	e000ed00 	.word	0xe000ed00

00002644 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2644:	4a09      	ldr	r2, [pc, #36]	; (266c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2646:	490a      	ldr	r1, [pc, #40]	; (2670 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2648:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    264a:	6809      	ldr	r1, [r1, #0]
    264c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    264e:	4909      	ldr	r1, [pc, #36]	; (2674 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2650:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2652:	684b      	ldr	r3, [r1, #4]
    2654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2658:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    265a:	2300      	movs	r3, #0
    265c:	f383 8811 	msr	BASEPRI, r3
    2660:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2664:	6893      	ldr	r3, [r2, #8]
}
    2666:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2668:	4770      	bx	lr
    266a:	bf00      	nop
    266c:	20000c08 	.word	0x20000c08
    2670:	0000a030 	.word	0x0000a030
    2674:	e000ed00 	.word	0xe000ed00

00002678 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2678:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    267c:	9b00      	ldr	r3, [sp, #0]
    267e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2682:	490a      	ldr	r1, [pc, #40]	; (26ac <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2684:	9b01      	ldr	r3, [sp, #4]
    2686:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    268a:	9b02      	ldr	r3, [sp, #8]
    268c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2690:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2698:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    269c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    26a0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    26a2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    26a4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    26a6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    26a8:	4770      	bx	lr
    26aa:	bf00      	nop
    26ac:	000093b7 	.word	0x000093b7

000026b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    26b0:	4a0b      	ldr	r2, [pc, #44]	; (26e0 <z_check_thread_stack_fail+0x30>)
{
    26b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    26b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    26b6:	b190      	cbz	r0, 26de <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26b8:	f113 0f16 	cmn.w	r3, #22
    26bc:	6e80      	ldr	r0, [r0, #104]	; 0x68
    26be:	d005      	beq.n	26cc <z_check_thread_stack_fail+0x1c>
    26c0:	f1a0 0220 	sub.w	r2, r0, #32
    26c4:	429a      	cmp	r2, r3
    26c6:	d806      	bhi.n	26d6 <z_check_thread_stack_fail+0x26>
    26c8:	4283      	cmp	r3, r0
    26ca:	d204      	bcs.n	26d6 <z_check_thread_stack_fail+0x26>
    26cc:	4281      	cmp	r1, r0
    26ce:	bf2c      	ite	cs
    26d0:	2100      	movcs	r1, #0
    26d2:	2101      	movcc	r1, #1
    26d4:	e000      	b.n	26d8 <z_check_thread_stack_fail+0x28>
    26d6:	2100      	movs	r1, #0
    26d8:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    26da:	bf08      	it	eq
    26dc:	2000      	moveq	r0, #0
}
    26de:	4770      	bx	lr
    26e0:	20000c08 	.word	0x20000c08

000026e4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    26e4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    26e6:	4b09      	ldr	r3, [pc, #36]	; (270c <arch_switch_to_main_thread+0x28>)
    26e8:	6098      	str	r0, [r3, #8]
{
    26ea:	460d      	mov	r5, r1
    26ec:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    26ee:	f000 fa05 	bl	2afc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    26f2:	4620      	mov	r0, r4
    26f4:	f385 8809 	msr	PSP, r5
    26f8:	2100      	movs	r1, #0
    26fa:	b663      	cpsie	if
    26fc:	f381 8811 	msr	BASEPRI, r1
    2700:	f3bf 8f6f 	isb	sy
    2704:	2200      	movs	r2, #0
    2706:	2300      	movs	r3, #0
    2708:	f006 fe55 	bl	93b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    270c:	20000c08 	.word	0x20000c08

00002710 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2712:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2714:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2716:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2718:	d003      	beq.n	2722 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    271a:	4903      	ldr	r1, [pc, #12]	; (2728 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    271c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2720:	600a      	str	r2, [r1, #0]

00002722 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2722:	4770      	bx	lr
	ldr r3, =_kernel
    2724:	20000c08 	.word	0x20000c08
	ldr r1, =_SCS_ICSR
    2728:	e000ed04 	.word	0xe000ed04

0000272c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    272c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2730:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2734:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2736:	4672      	mov	r2, lr
	bl z_arm_fault
    2738:	f000 f8ae 	bl	2898 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    273c:	bd01      	pop	{r0, pc}
    273e:	bf00      	nop

00002740 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2740:	2000      	movs	r0, #0
    msr CONTROL, r0
    2742:	f380 8814 	msr	CONTROL, r0
    isb
    2746:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    274a:	f007 fa41 	bl	9bd0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    274e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2750:	490d      	ldr	r1, [pc, #52]	; (2788 <__start+0x48>)
    str r0, [r1]
    2752:	6008      	str	r0, [r1, #0]
    dsb
    2754:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2758:	480c      	ldr	r0, [pc, #48]	; (278c <__start+0x4c>)
    msr msp, r0
    275a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    275e:	f000 f97d 	bl	2a5c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2762:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2764:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2768:	4809      	ldr	r0, [pc, #36]	; (2790 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    276a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    276e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2770:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2774:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2778:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    277a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    277c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2780:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2784:	f7ff ff42 	bl	260c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2788:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    278c:	20001ea0 	.word	0x20001ea0
    ldr r0, =z_interrupt_stacks
    2790:	20002020 	.word	0x20002020

00002794 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2794:	4b23      	ldr	r3, [pc, #140]	; (2824 <mem_manage_fault+0x90>)
{
    2796:	b570      	push	{r4, r5, r6, lr}
    2798:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    279a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    279c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    279e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    27a0:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    27a2:	0790      	lsls	r0, r2, #30
    27a4:	d51a      	bpl.n	27dc <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    27a6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    27a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27aa:	0612      	lsls	r2, r2, #24
    27ac:	d516      	bpl.n	27dc <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    27ae:	b119      	cbz	r1, 27b8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    27b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    27b6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    27b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    27ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27be:	06d6      	lsls	r6, r2, #27
    27c0:	d40f      	bmi.n	27e2 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    27c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27c4:	0799      	lsls	r1, r3, #30
    27c6:	d40c      	bmi.n	27e2 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27c8:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27ca:	4a16      	ldr	r2, [pc, #88]	; (2824 <mem_manage_fault+0x90>)
    27cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    27ce:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    27d2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    27d4:	2300      	movs	r3, #0
    27d6:	702b      	strb	r3, [r5, #0]

	return reason;
}
    27d8:	4620      	mov	r0, r4
    27da:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    27dc:	f06f 0015 	mvn.w	r0, #21
    27e0:	e7ea      	b.n	27b8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    27e2:	4e10      	ldr	r6, [pc, #64]	; (2824 <mem_manage_fault+0x90>)
    27e4:	6873      	ldr	r3, [r6, #4]
    27e6:	051a      	lsls	r2, r3, #20
    27e8:	d5ee      	bpl.n	27c8 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    27ea:	4621      	mov	r1, r4
    27ec:	f7ff ff60 	bl	26b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    27f0:	4604      	mov	r4, r0
    27f2:	b118      	cbz	r0, 27fc <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    27f4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    27f8:	2402      	movs	r4, #2
    27fa:	e7e6      	b.n	27ca <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    27fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    27fe:	06db      	lsls	r3, r3, #27
    2800:	d5e2      	bpl.n	27c8 <mem_manage_fault+0x34>
    2802:	4a09      	ldr	r2, [pc, #36]	; (2828 <mem_manage_fault+0x94>)
    2804:	4909      	ldr	r1, [pc, #36]	; (282c <mem_manage_fault+0x98>)
    2806:	480a      	ldr	r0, [pc, #40]	; (2830 <mem_manage_fault+0x9c>)
    2808:	f240 1349 	movw	r3, #329	; 0x149
    280c:	f006 fdc1 	bl	9392 <printk>
    2810:	4808      	ldr	r0, [pc, #32]	; (2834 <mem_manage_fault+0xa0>)
    2812:	f006 fdbe 	bl	9392 <printk>
    2816:	4804      	ldr	r0, [pc, #16]	; (2828 <mem_manage_fault+0x94>)
    2818:	f240 1149 	movw	r1, #329	; 0x149
    281c:	f006 fbca 	bl	8fb4 <assert_post_action>
    2820:	e7d3      	b.n	27ca <mem_manage_fault+0x36>
    2822:	bf00      	nop
    2824:	e000ed00 	.word	0xe000ed00
    2828:	0000a67f 	.word	0x0000a67f
    282c:	0000a6b9 	.word	0x0000a6b9
    2830:	0000a283 	.word	0x0000a283
    2834:	0000a703 	.word	0x0000a703

00002838 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2838:	4b0d      	ldr	r3, [pc, #52]	; (2870 <bus_fault.isra.0+0x38>)
    283a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    283c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    283e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2840:	0592      	lsls	r2, r2, #22
    2842:	d508      	bpl.n	2856 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2844:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2848:	0412      	lsls	r2, r2, #16
    284a:	d504      	bpl.n	2856 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    284c:	b118      	cbz	r0, 2856 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    284e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2854:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2856:	4b06      	ldr	r3, [pc, #24]	; (2870 <bus_fault.isra.0+0x38>)
    2858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    285a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    285c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    285e:	bf58      	it	pl
    2860:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2862:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2864:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2866:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    286a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    286c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    286e:	4770      	bx	lr
    2870:	e000ed00 	.word	0xe000ed00

00002874 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2874:	4b07      	ldr	r3, [pc, #28]	; (2894 <usage_fault.isra.0+0x20>)
    2876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    287a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    287c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    287e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2884:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2888:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    288c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    288e:	2000      	movs	r0, #0
    2890:	4770      	bx	lr
    2892:	bf00      	nop
    2894:	e000ed00 	.word	0xe000ed00

00002898 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2898:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    289a:	4b54      	ldr	r3, [pc, #336]	; (29ec <z_arm_fault+0x154>)
    289c:	685c      	ldr	r4, [r3, #4]
{
    289e:	b08a      	sub	sp, #40	; 0x28
    28a0:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    28a2:	f3c4 0408 	ubfx	r4, r4, #0, #9
    28a6:	2600      	movs	r6, #0
    28a8:	f386 8811 	msr	BASEPRI, r6
    28ac:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    28b0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    28b4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    28b8:	d108      	bne.n	28cc <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    28ba:	f002 030c 	and.w	r3, r2, #12
    28be:	2b08      	cmp	r3, #8
    28c0:	d004      	beq.n	28cc <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    28c2:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    28c4:	bf5c      	itt	pl
    28c6:	4605      	movpl	r5, r0
			*nested_exc = true;
    28c8:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    28ca:	b97d      	cbnz	r5, 28ec <z_arm_fault+0x54>
    28cc:	4a48      	ldr	r2, [pc, #288]	; (29f0 <z_arm_fault+0x158>)
    28ce:	4949      	ldr	r1, [pc, #292]	; (29f4 <z_arm_fault+0x15c>)
    28d0:	4849      	ldr	r0, [pc, #292]	; (29f8 <z_arm_fault+0x160>)
    28d2:	f240 33f2 	movw	r3, #1010	; 0x3f2
    28d6:	f006 fd5c 	bl	9392 <printk>
    28da:	4848      	ldr	r0, [pc, #288]	; (29fc <z_arm_fault+0x164>)
    28dc:	f006 fd59 	bl	9392 <printk>
    28e0:	4843      	ldr	r0, [pc, #268]	; (29f0 <z_arm_fault+0x158>)
    28e2:	f240 31f2 	movw	r1, #1010	; 0x3f2
    28e6:	f006 fb65 	bl	8fb4 <assert_post_action>
    28ea:	2500      	movs	r5, #0
	*recoverable = false;
    28ec:	2300      	movs	r3, #0
    28ee:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    28f2:	1ee3      	subs	r3, r4, #3
    28f4:	2b03      	cmp	r3, #3
    28f6:	d872      	bhi.n	29de <z_arm_fault+0x146>
    28f8:	e8df f003 	tbb	[pc, r3]
    28fc:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2900:	4b3a      	ldr	r3, [pc, #232]	; (29ec <z_arm_fault+0x154>)
    2902:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2904:	f014 0402 	ands.w	r4, r4, #2
    2908:	d169      	bne.n	29de <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    290c:	2a00      	cmp	r2, #0
    290e:	db18      	blt.n	2942 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2912:	005b      	lsls	r3, r3, #1
    2914:	d54e      	bpl.n	29b4 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2916:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2918:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    291c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2920:	429a      	cmp	r2, r3
    2922:	d00d      	beq.n	2940 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2924:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2928:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	b30b      	cbz	r3, 2974 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2930:	f10d 0207 	add.w	r2, sp, #7
    2934:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2936:	4628      	mov	r0, r5
    2938:	f7ff ff2c 	bl	2794 <mem_manage_fault>
		reason = usage_fault(esf);
    293c:	4604      	mov	r4, r0
		break;
    293e:	e000      	b.n	2942 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2940:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2942:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2946:	b99b      	cbnz	r3, 2970 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2948:	2220      	movs	r2, #32
    294a:	4629      	mov	r1, r5
    294c:	a802      	add	r0, sp, #8
    294e:	f006 fd6c 	bl	942a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2952:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2954:	2e00      	cmp	r6, #0
    2956:	d044      	beq.n	29e2 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2958:	f3c3 0208 	ubfx	r2, r3, #0, #9
    295c:	b922      	cbnz	r2, 2968 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    295e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2962:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2966:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2968:	a902      	add	r1, sp, #8
    296a:	4620      	mov	r0, r4
    296c:	f006 fd2d 	bl	93ca <z_arm_fatal_error>
}
    2970:	b00a      	add	sp, #40	; 0x28
    2972:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2974:	4b22      	ldr	r3, [pc, #136]	; (2a00 <z_arm_fault+0x168>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	b12b      	cbz	r3, 2986 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    297a:	f10d 0107 	add.w	r1, sp, #7
    297e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2980:	f7ff ff5a 	bl	2838 <bus_fault.isra.0>
    2984:	e7da      	b.n	293c <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    2986:	4b1f      	ldr	r3, [pc, #124]	; (2a04 <z_arm_fault+0x16c>)
    2988:	881b      	ldrh	r3, [r3, #0]
    298a:	b29b      	uxth	r3, r3
    298c:	b113      	cbz	r3, 2994 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    298e:	f7ff ff71 	bl	2874 <usage_fault.isra.0>
    2992:	e7d3      	b.n	293c <z_arm_fault+0xa4>
			__ASSERT(0,
    2994:	491c      	ldr	r1, [pc, #112]	; (2a08 <z_arm_fault+0x170>)
    2996:	4a16      	ldr	r2, [pc, #88]	; (29f0 <z_arm_fault+0x158>)
    2998:	4817      	ldr	r0, [pc, #92]	; (29f8 <z_arm_fault+0x160>)
    299a:	f240 23c3 	movw	r3, #707	; 0x2c3
    299e:	f006 fcf8 	bl	9392 <printk>
    29a2:	481a      	ldr	r0, [pc, #104]	; (2a0c <z_arm_fault+0x174>)
    29a4:	f006 fcf5 	bl	9392 <printk>
    29a8:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    29ac:	4810      	ldr	r0, [pc, #64]	; (29f0 <z_arm_fault+0x158>)
    29ae:	f006 fb01 	bl	8fb4 <assert_post_action>
    29b2:	e7c6      	b.n	2942 <z_arm_fault+0xaa>
    29b4:	4914      	ldr	r1, [pc, #80]	; (2a08 <z_arm_fault+0x170>)
    29b6:	4a0e      	ldr	r2, [pc, #56]	; (29f0 <z_arm_fault+0x158>)
    29b8:	480f      	ldr	r0, [pc, #60]	; (29f8 <z_arm_fault+0x160>)
    29ba:	f240 23c7 	movw	r3, #711	; 0x2c7
    29be:	f006 fce8 	bl	9392 <printk>
    29c2:	4813      	ldr	r0, [pc, #76]	; (2a10 <z_arm_fault+0x178>)
    29c4:	f006 fce5 	bl	9392 <printk>
    29c8:	f240 21c7 	movw	r1, #711	; 0x2c7
    29cc:	e7ee      	b.n	29ac <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    29ce:	f10d 0207 	add.w	r2, sp, #7
    29d2:	2100      	movs	r1, #0
    29d4:	e7af      	b.n	2936 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    29d6:	f10d 0107 	add.w	r1, sp, #7
    29da:	2000      	movs	r0, #0
    29dc:	e7d0      	b.n	2980 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    29de:	2400      	movs	r4, #0
    29e0:	e7af      	b.n	2942 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    29e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    29e6:	f023 0301 	bic.w	r3, r3, #1
    29ea:	e7bc      	b.n	2966 <z_arm_fault+0xce>
    29ec:	e000ed00 	.word	0xe000ed00
    29f0:	0000a67f 	.word	0x0000a67f
    29f4:	0000a726 	.word	0x0000a726
    29f8:	0000a283 	.word	0x0000a283
    29fc:	0000a739 	.word	0x0000a739
    2a00:	e000ed29 	.word	0xe000ed29
    2a04:	e000ed2a 	.word	0xe000ed2a
    2a08:	0000ac19 	.word	0x0000ac19
    2a0c:	0000a777 	.word	0x0000a777
    2a10:	0000a79b 	.word	0x0000a79b

00002a14 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a14:	4a02      	ldr	r2, [pc, #8]	; (2a20 <z_arm_fault_init+0xc>)
    2a16:	6953      	ldr	r3, [r2, #20]
    2a18:	f043 0310 	orr.w	r3, r3, #16
    2a1c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2a1e:	4770      	bx	lr
    2a20:	e000ed00 	.word	0xe000ed00

00002a24 <z_arm_interrupt_init>:
    2a24:	4804      	ldr	r0, [pc, #16]	; (2a38 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2a26:	2300      	movs	r3, #0
    2a28:	2120      	movs	r1, #32
    2a2a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a2c:	3301      	adds	r3, #1
    2a2e:	2b30      	cmp	r3, #48	; 0x30
    2a30:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a34:	d1f9      	bne.n	2a2a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a36:	4770      	bx	lr
    2a38:	e000e100 	.word	0xe000e100

00002a3c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2a3c:	4a06      	ldr	r2, [pc, #24]	; (2a58 <z_arm_clear_arm_mpu_config+0x1c>)
    2a3e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2a40:	2300      	movs	r3, #0
	int num_regions =
    2a42:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2a46:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2a48:	428b      	cmp	r3, r1
    2a4a:	d100      	bne.n	2a4e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2a4c:	4770      	bx	lr
  MPU->RNR = rnr;
    2a4e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2a50:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2a52:	3301      	adds	r3, #1
    2a54:	e7f8      	b.n	2a48 <z_arm_clear_arm_mpu_config+0xc>
    2a56:	bf00      	nop
    2a58:	e000ed90 	.word	0xe000ed90

00002a5c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2a5c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2a5e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2a60:	2300      	movs	r3, #0
    2a62:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2a66:	f7ff ffe9 	bl	2a3c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2a6a:	4b14      	ldr	r3, [pc, #80]	; (2abc <z_arm_init_arch_hw_at_boot+0x60>)
    2a6c:	f04f 32ff 	mov.w	r2, #4294967295
    2a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2a84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2a88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2a8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2a90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a94:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2a98:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2a9c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2aa0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2aa4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2aa8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2aac:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2ab0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2ab2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ab6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2aba:	bd08      	pop	{r3, pc}
    2abc:	e000e100 	.word	0xe000e100

00002ac0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2ac0:	4b06      	ldr	r3, [pc, #24]	; (2adc <z_impl_k_thread_abort+0x1c>)
    2ac2:	689b      	ldr	r3, [r3, #8]
    2ac4:	4283      	cmp	r3, r0
    2ac6:	d107      	bne.n	2ad8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2ac8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2acc:	b123      	cbz	r3, 2ad8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ace:	4a04      	ldr	r2, [pc, #16]	; (2ae0 <z_impl_k_thread_abort+0x20>)
    2ad0:	6853      	ldr	r3, [r2, #4]
    2ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2ad6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2ad8:	f004 bcf4 	b.w	74c4 <z_thread_abort>
    2adc:	20000c08 	.word	0x20000c08
    2ae0:	e000ed00 	.word	0xe000ed00

00002ae4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2ae4:	4b02      	ldr	r3, [pc, #8]	; (2af0 <z_arm_configure_static_mpu_regions+0xc>)
    2ae6:	4a03      	ldr	r2, [pc, #12]	; (2af4 <z_arm_configure_static_mpu_regions+0x10>)
    2ae8:	4803      	ldr	r0, [pc, #12]	; (2af8 <z_arm_configure_static_mpu_regions+0x14>)
    2aea:	2101      	movs	r1, #1
    2aec:	f000 b868 	b.w	2bc0 <arm_core_mpu_configure_static_mpu_regions>
    2af0:	20040000 	.word	0x20040000
    2af4:	20000000 	.word	0x20000000
    2af8:	00009ee4 	.word	0x00009ee4

00002afc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2afc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2afe:	4b05      	ldr	r3, [pc, #20]	; (2b14 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2b00:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2b02:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2b04:	4a04      	ldr	r2, [pc, #16]	; (2b18 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2b06:	2120      	movs	r1, #32
    2b08:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2b0c:	4618      	mov	r0, r3
    2b0e:	2101      	movs	r1, #1
    2b10:	f000 b87e 	b.w	2c10 <arm_core_mpu_configure_dynamic_mpu_regions>
    2b14:	20000b40 	.word	0x20000b40
    2b18:	150b0000 	.word	0x150b0000

00002b1c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2b1e:	4f1e      	ldr	r7, [pc, #120]	; (2b98 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2b20:	2600      	movs	r6, #0
    2b22:	428e      	cmp	r6, r1
    2b24:	db01      	blt.n	2b2a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2b26:	4610      	mov	r0, r2
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2b2a:	6844      	ldr	r4, [r0, #4]
    2b2c:	b384      	cbz	r4, 2b90 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2b2e:	b153      	cbz	r3, 2b46 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2b30:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2b34:	ea14 0f0c 	tst.w	r4, ip
    2b38:	d118      	bne.n	2b6c <mpu_configure_regions+0x50>
		&&
    2b3a:	2c1f      	cmp	r4, #31
    2b3c:	d916      	bls.n	2b6c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2b3e:	6805      	ldr	r5, [r0, #0]
		&&
    2b40:	ea1c 0f05 	tst.w	ip, r5
    2b44:	d112      	bne.n	2b6c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2b46:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2b48:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2b4a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2b4e:	b2d2      	uxtb	r2, r2
    2b50:	d90f      	bls.n	2b72 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2b52:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2b56:	d80e      	bhi.n	2b76 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2b58:	3c01      	subs	r4, #1
    2b5a:	fab4 f484 	clz	r4, r4
    2b5e:	f1c4 041f 	rsb	r4, r4, #31
    2b62:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2b64:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2b66:	ea4c 0404 	orr.w	r4, ip, r4
    2b6a:	d906      	bls.n	2b7a <mpu_configure_regions+0x5e>
			return -EINVAL;
    2b6c:	f06f 0215 	mvn.w	r2, #21
    2b70:	e7d9      	b.n	2b26 <mpu_configure_regions+0xa>
		return REGION_32B;
    2b72:	2408      	movs	r4, #8
    2b74:	e7f6      	b.n	2b64 <mpu_configure_regions+0x48>
		return REGION_4G;
    2b76:	243e      	movs	r4, #62	; 0x3e
    2b78:	e7f4      	b.n	2b64 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2b7a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2b7e:	4315      	orrs	r5, r2
    2b80:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2b84:	f044 0401 	orr.w	r4, r4, #1
    2b88:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2b8a:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2b8c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2b8e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2b90:	3601      	adds	r6, #1
    2b92:	300c      	adds	r0, #12
    2b94:	e7c5      	b.n	2b22 <mpu_configure_regions+0x6>
    2b96:	bf00      	nop
    2b98:	e000ed90 	.word	0xe000ed90

00002b9c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2b9c:	4b03      	ldr	r3, [pc, #12]	; (2bac <arm_core_mpu_enable+0x10>)
    2b9e:	2205      	movs	r2, #5
    2ba0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ba6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2baa:	4770      	bx	lr
    2bac:	e000ed90 	.word	0xe000ed90

00002bb0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2bb0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2bb4:	4b01      	ldr	r3, [pc, #4]	; (2bbc <arm_core_mpu_disable+0xc>)
    2bb6:	2200      	movs	r2, #0
    2bb8:	605a      	str	r2, [r3, #4]
}
    2bba:	4770      	bx	lr
    2bbc:	e000ed90 	.word	0xe000ed90

00002bc0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2bc0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2bc2:	4d0e      	ldr	r5, [pc, #56]	; (2bfc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2bc4:	2301      	movs	r3, #1
    2bc6:	782a      	ldrb	r2, [r5, #0]
    2bc8:	460c      	mov	r4, r1
    2bca:	f7ff ffa7 	bl	2b1c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2bce:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2bd0:	3016      	adds	r0, #22
    2bd2:	d111      	bne.n	2bf8 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2bd4:	f240 1311 	movw	r3, #273	; 0x111
    2bd8:	4a09      	ldr	r2, [pc, #36]	; (2c00 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2bda:	490a      	ldr	r1, [pc, #40]	; (2c04 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2bdc:	480a      	ldr	r0, [pc, #40]	; (2c08 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2bde:	f006 fbd8 	bl	9392 <printk>
    2be2:	4621      	mov	r1, r4
    2be4:	4809      	ldr	r0, [pc, #36]	; (2c0c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2be6:	f006 fbd4 	bl	9392 <printk>
			regions_num);
	}
}
    2bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2bee:	4804      	ldr	r0, [pc, #16]	; (2c00 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2bf0:	f240 1111 	movw	r1, #273	; 0x111
    2bf4:	f006 b9de 	b.w	8fb4 <assert_post_action>
}
    2bf8:	bd38      	pop	{r3, r4, r5, pc}
    2bfa:	bf00      	nop
    2bfc:	20000c7e 	.word	0x20000c7e
    2c00:	0000a7cb 	.word	0x0000a7cb
    2c04:	0000ac19 	.word	0x0000ac19
    2c08:	0000a283 	.word	0x0000a283
    2c0c:	0000a802 	.word	0x0000a802

00002c10 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2c10:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2c12:	4a12      	ldr	r2, [pc, #72]	; (2c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2c14:	2300      	movs	r3, #0
    2c16:	7812      	ldrb	r2, [r2, #0]
    2c18:	460c      	mov	r4, r1
    2c1a:	f7ff ff7f 	bl	2b1c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2c1e:	f110 0f16 	cmn.w	r0, #22
    2c22:	d008      	beq.n	2c36 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2c24:	4b0e      	ldr	r3, [pc, #56]	; (2c60 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2c26:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2c28:	2807      	cmp	r0, #7
    2c2a:	dd00      	ble.n	2c2e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2c2c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2c2e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2c30:	611a      	str	r2, [r3, #16]
    2c32:	3001      	adds	r0, #1
    2c34:	e7f8      	b.n	2c28 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2c36:	4a0b      	ldr	r2, [pc, #44]	; (2c64 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2c38:	490b      	ldr	r1, [pc, #44]	; (2c68 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2c3a:	480c      	ldr	r0, [pc, #48]	; (2c6c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2c3c:	f44f 7398 	mov.w	r3, #304	; 0x130
    2c40:	f006 fba7 	bl	9392 <printk>
    2c44:	4621      	mov	r1, r4
    2c46:	480a      	ldr	r0, [pc, #40]	; (2c70 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2c48:	f006 fba3 	bl	9392 <printk>
}
    2c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2c50:	4804      	ldr	r0, [pc, #16]	; (2c64 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2c52:	f44f 7198 	mov.w	r1, #304	; 0x130
    2c56:	f006 b9ad 	b.w	8fb4 <assert_post_action>
    2c5a:	bf00      	nop
    2c5c:	20000c7e 	.word	0x20000c7e
    2c60:	e000ed90 	.word	0xe000ed90
    2c64:	0000a7cb 	.word	0x0000a7cb
    2c68:	0000ac19 	.word	0x0000ac19
    2c6c:	0000a283 	.word	0x0000a283
    2c70:	0000a82e 	.word	0x0000a82e

00002c74 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2c74:	4925      	ldr	r1, [pc, #148]	; (2d0c <z_arm_mpu_init+0x98>)
{
    2c76:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2c78:	680c      	ldr	r4, [r1, #0]
    2c7a:	2c08      	cmp	r4, #8
    2c7c:	d913      	bls.n	2ca6 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2c7e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2c82:	4a23      	ldr	r2, [pc, #140]	; (2d10 <z_arm_mpu_init+0x9c>)
    2c84:	4923      	ldr	r1, [pc, #140]	; (2d14 <z_arm_mpu_init+0xa0>)
    2c86:	4824      	ldr	r0, [pc, #144]	; (2d18 <z_arm_mpu_init+0xa4>)
    2c88:	f006 fb83 	bl	9392 <printk>
    2c8c:	4823      	ldr	r0, [pc, #140]	; (2d1c <z_arm_mpu_init+0xa8>)
    2c8e:	2208      	movs	r2, #8
    2c90:	4621      	mov	r1, r4
    2c92:	f006 fb7e 	bl	9392 <printk>
    2c96:	481e      	ldr	r0, [pc, #120]	; (2d10 <z_arm_mpu_init+0x9c>)
    2c98:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2c9c:	f006 f98a 	bl	8fb4 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2ca0:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2ca4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2ca6:	f7ff ff83 	bl	2bb0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2caa:	6848      	ldr	r0, [r1, #4]
    2cac:	491c      	ldr	r1, [pc, #112]	; (2d20 <z_arm_mpu_init+0xac>)
    2cae:	2200      	movs	r2, #0
    2cb0:	4294      	cmp	r4, r2
    2cb2:	f100 000c 	add.w	r0, r0, #12
    2cb6:	d119      	bne.n	2cec <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2cb8:	4b1a      	ldr	r3, [pc, #104]	; (2d24 <z_arm_mpu_init+0xb0>)
    2cba:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2cbc:	f7ff ff6e 	bl	2b9c <arm_core_mpu_enable>
	__ASSERT(
    2cc0:	680b      	ldr	r3, [r1, #0]
    2cc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2cc6:	2b08      	cmp	r3, #8
    2cc8:	d00e      	beq.n	2ce8 <z_arm_mpu_init+0x74>
    2cca:	4917      	ldr	r1, [pc, #92]	; (2d28 <z_arm_mpu_init+0xb4>)
    2ccc:	4a10      	ldr	r2, [pc, #64]	; (2d10 <z_arm_mpu_init+0x9c>)
    2cce:	4812      	ldr	r0, [pc, #72]	; (2d18 <z_arm_mpu_init+0xa4>)
    2cd0:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2cd4:	f006 fb5d 	bl	9392 <printk>
    2cd8:	4814      	ldr	r0, [pc, #80]	; (2d2c <z_arm_mpu_init+0xb8>)
    2cda:	f006 fb5a 	bl	9392 <printk>
    2cde:	480c      	ldr	r0, [pc, #48]	; (2d10 <z_arm_mpu_init+0x9c>)
    2ce0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2ce4:	f006 f966 	bl	8fb4 <assert_post_action>
	return 0;
    2ce8:	2000      	movs	r0, #0
    2cea:	e7db      	b.n	2ca4 <z_arm_mpu_init+0x30>
    2cec:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2cee:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2cf2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2cf6:	4313      	orrs	r3, r2
    2cf8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2cfc:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2cfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2d02:	f043 0301 	orr.w	r3, r3, #1
    2d06:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d08:	3201      	adds	r2, #1
    2d0a:	e7d1      	b.n	2cb0 <z_arm_mpu_init+0x3c>
    2d0c:	00009ef0 	.word	0x00009ef0
    2d10:	0000a7cb 	.word	0x0000a7cb
    2d14:	0000ac19 	.word	0x0000ac19
    2d18:	0000a283 	.word	0x0000a283
    2d1c:	0000a85b 	.word	0x0000a85b
    2d20:	e000ed90 	.word	0xe000ed90
    2d24:	20000c7e 	.word	0x20000c7e
    2d28:	0000a88f 	.word	0x0000a88f
    2d2c:	0000a8df 	.word	0x0000a8df

00002d30 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2d30:	4b01      	ldr	r3, [pc, #4]	; (2d38 <__stdout_hook_install+0x8>)
    2d32:	6018      	str	r0, [r3, #0]
}
    2d34:	4770      	bx	lr
    2d36:	bf00      	nop
    2d38:	200000d4 	.word	0x200000d4

00002d3c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2d3c:	f04f 0320 	mov.w	r3, #32
    2d40:	f3ef 8111 	mrs	r1, BASEPRI
    2d44:	f383 8812 	msr	BASEPRI_MAX, r3
    2d48:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2d4c:	4a0f      	ldr	r2, [pc, #60]	; (2d8c <nordicsemi_nrf52_init+0x50>)
    2d4e:	2301      	movs	r3, #1
    2d50:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d58:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d5c:	4a0c      	ldr	r2, [pc, #48]	; (2d90 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2d5e:	6812      	ldr	r2, [r2, #0]
    2d60:	2a08      	cmp	r2, #8
    2d62:	d108      	bne.n	2d76 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d64:	4a0b      	ldr	r2, [pc, #44]	; (2d94 <nordicsemi_nrf52_init+0x58>)
    2d66:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2d68:	2a05      	cmp	r2, #5
    2d6a:	d804      	bhi.n	2d76 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2d6c:	480a      	ldr	r0, [pc, #40]	; (2d98 <nordicsemi_nrf52_init+0x5c>)
    2d6e:	5c82      	ldrb	r2, [r0, r2]
    2d70:	b10a      	cbz	r2, 2d76 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2d72:	4a0a      	ldr	r2, [pc, #40]	; (2d9c <nordicsemi_nrf52_init+0x60>)
    2d74:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d7a:	2201      	movs	r2, #1
    2d7c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2d80:	f381 8811 	msr	BASEPRI, r1
    2d84:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2d88:	2000      	movs	r0, #0
    2d8a:	4770      	bx	lr
    2d8c:	4001e000 	.word	0x4001e000
    2d90:	10000130 	.word	0x10000130
    2d94:	10000134 	.word	0x10000134
    2d98:	0000a90f 	.word	0x0000a90f
    2d9c:	40000638 	.word	0x40000638

00002da0 <sys_arch_reboot>:
    *p_gpregret = val;
    2da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2da4:	b2c0      	uxtb	r0, r0
    2da6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2daa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2dae:	4905      	ldr	r1, [pc, #20]	; (2dc4 <sys_arch_reboot+0x24>)
    2db0:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <sys_arch_reboot+0x28>)
    2db2:	68ca      	ldr	r2, [r1, #12]
    2db4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2db8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2dba:	60cb      	str	r3, [r1, #12]
    2dbc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2dc0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2dc2:	e7fd      	b.n	2dc0 <sys_arch_reboot+0x20>
    2dc4:	e000ed00 	.word	0xe000ed00
    2dc8:	05fa0004 	.word	0x05fa0004

00002dcc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2dcc:	b120      	cbz	r0, 2dd8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2dce:	4b03      	ldr	r3, [pc, #12]	; (2ddc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2dd0:	0180      	lsls	r0, r0, #6
    2dd2:	f043 0301 	orr.w	r3, r3, #1
    2dd6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2dd8:	4770      	bx	lr
    2dda:	bf00      	nop
    2ddc:	00009eb0 	.word	0x00009eb0

00002de0 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2de0:	4a05      	ldr	r2, [pc, #20]	; (2df8 <adc_context_start_sampling.isra.0+0x18>)
    2de2:	2301      	movs	r3, #1
    2de4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2de8:	b108      	cbz	r0, 2dee <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dea:	60d3      	str	r3, [r2, #12]
}
    2dec:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dee:	6013      	str	r3, [r2, #0]
    2df0:	4a02      	ldr	r2, [pc, #8]	; (2dfc <adc_context_start_sampling.isra.0+0x1c>)
    2df2:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	40007000 	.word	0x40007000
    2dfc:	40007004 	.word	0x40007004

00002e00 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2e00:	7908      	ldrb	r0, [r1, #4]
{
    2e02:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2e04:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    2e08:	2c07      	cmp	r4, #7
    2e0a:	d81f      	bhi.n	2e4c <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    2e0c:	780b      	ldrb	r3, [r1, #0]
    2e0e:	2b09      	cmp	r3, #9
    2e10:	d81c      	bhi.n	2e4c <adc_nrfx_channel_setup+0x4c>
    2e12:	e8df f003 	tbb	[pc, r3]
    2e16:	0606      	.short	0x0606
    2e18:	1b060606 	.word	0x1b060606
    2e1c:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2e20:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2e22:	784a      	ldrb	r2, [r1, #1]
    2e24:	2a03      	cmp	r2, #3
    2e26:	d018      	beq.n	2e5a <adc_nrfx_channel_setup+0x5a>
    2e28:	2a04      	cmp	r2, #4
    2e2a:	d10f      	bne.n	2e4c <adc_nrfx_channel_setup+0x4c>
    2e2c:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    2e2e:	884a      	ldrh	r2, [r1, #2]
    2e30:	f244 060a 	movw	r6, #16394	; 0x400a
    2e34:	42b2      	cmp	r2, r6
    2e36:	d044      	beq.n	2ec2 <adc_nrfx_channel_setup+0xc2>
    2e38:	d811      	bhi.n	2e5e <adc_nrfx_channel_setup+0x5e>
    2e3a:	f244 0603 	movw	r6, #16387	; 0x4003
    2e3e:	42b2      	cmp	r2, r6
    2e40:	d03b      	beq.n	2eba <adc_nrfx_channel_setup+0xba>
    2e42:	f244 0605 	movw	r6, #16389	; 0x4005
    2e46:	42b2      	cmp	r2, r6
    2e48:	d039      	beq.n	2ebe <adc_nrfx_channel_setup+0xbe>
    2e4a:	b3d2      	cbz	r2, 2ec2 <adc_nrfx_channel_setup+0xc2>
    2e4c:	f06f 0015 	mvn.w	r0, #21
    2e50:	e032      	b.n	2eb8 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2e52:	2306      	movs	r3, #6
		break;
    2e54:	e7e5      	b.n	2e22 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2e56:	2307      	movs	r3, #7
		break;
    2e58:	e7e3      	b.n	2e22 <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    2e5a:	2501      	movs	r5, #1
    2e5c:	e7e7      	b.n	2e2e <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    2e5e:	f244 0614 	movw	r6, #16404	; 0x4014
    2e62:	42b2      	cmp	r2, r6
    2e64:	d02f      	beq.n	2ec6 <adc_nrfx_channel_setup+0xc6>
    2e66:	f244 0628 	movw	r6, #16424	; 0x4028
    2e6a:	42b2      	cmp	r2, r6
    2e6c:	d02d      	beq.n	2eca <adc_nrfx_channel_setup+0xca>
    2e6e:	f244 060f 	movw	r6, #16399	; 0x400f
    2e72:	42b2      	cmp	r2, r6
    2e74:	d1ea      	bne.n	2e4c <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2e76:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2e78:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2e7c:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2e7e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2e82:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    2e8a:	0122      	lsls	r2, r4, #4
    2e8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2e90:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2e94:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2e96:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2e9a:	0123      	lsls	r3, r4, #4
    2e9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ea0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2ea4:	798a      	ldrb	r2, [r1, #6]
    2ea6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    2eaa:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    2eae:	4b08      	ldr	r3, [pc, #32]	; (2ed0 <adc_nrfx_channel_setup+0xd0>)
    2eb0:	441c      	add	r4, r3
    2eb2:	794b      	ldrb	r3, [r1, #5]
    2eb4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    2eb8:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    2eba:	2200      	movs	r2, #0
    2ebc:	e7dc      	b.n	2e78 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    2ebe:	2201      	movs	r2, #1
    2ec0:	e7da      	b.n	2e78 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2ec2:	2202      	movs	r2, #2
    2ec4:	e7d8      	b.n	2e78 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2ec6:	2204      	movs	r2, #4
    2ec8:	e7d6      	b.n	2e78 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    2eca:	2205      	movs	r2, #5
    2ecc:	e7d4      	b.n	2e78 <adc_nrfx_channel_setup+0x78>
    2ece:	bf00      	nop
    2ed0:	20000000 	.word	0x20000000

00002ed4 <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    2ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2ed6:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    2ed8:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    2eda:	b910      	cbnz	r0, 2ee2 <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    2edc:	f06f 0015 	mvn.w	r0, #21
    2ee0:	e09c      	b.n	301c <start_read.isra.0+0x148>
	if (!selected_channels ||
    2ee2:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    2ee6:	d1f9      	bne.n	2edc <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    2ee8:	4c57      	ldr	r4, [pc, #348]	; (3048 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    2eea:	4f58      	ldr	r7, [pc, #352]	; (304c <start_read.isra.0+0x178>)
	active_channels = 0U;
    2eec:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    2eee:	fa20 f302 	lsr.w	r3, r0, r2
    2ef2:	f013 0301 	ands.w	r3, r3, #1
    2ef6:	d033      	beq.n	2f60 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    2ef8:	18bb      	adds	r3, r7, r2
    2efa:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    2efe:	f1bc 0f00 	cmp.w	ip, #0
    2f02:	d0eb      	beq.n	2edc <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    2f04:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    2f08:	7c6e      	ldrb	r6, [r5, #17]
    2f0a:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    2f0e:	3e00      	subs	r6, #0
    2f10:	bf18      	it	ne
    2f12:	2601      	movne	r6, #1
    2f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2f18:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    2f1c:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    2f20:	f102 0351 	add.w	r3, r2, #81	; 0x51
    2f24:	011b      	lsls	r3, r3, #4
			++active_channels;
    2f26:	3101      	adds	r1, #1
    2f28:	f844 c003 	str.w	ip, [r4, r3]
    2f2c:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    2f2e:	3201      	adds	r2, #1
    2f30:	2a08      	cmp	r2, #8
    2f32:	d1dc      	bne.n	2eee <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    2f34:	7c2b      	ldrb	r3, [r5, #16]
    2f36:	3b08      	subs	r3, #8
    2f38:	2b06      	cmp	r3, #6
    2f3a:	d8cf      	bhi.n	2edc <start_read.isra.0+0x8>
    2f3c:	a201      	add	r2, pc, #4	; (adr r2, 2f44 <start_read.isra.0+0x70>)
    2f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2f42:	bf00      	nop
    2f44:	00003029 	.word	0x00003029
    2f48:	00002edd 	.word	0x00002edd
    2f4c:	00002f6b 	.word	0x00002f6b
    2f50:	00002edd 	.word	0x00002edd
    2f54:	00003021 	.word	0x00003021
    2f58:	00002edd 	.word	0x00002edd
    2f5c:	00003025 	.word	0x00003025
    2f60:	f102 0651 	add.w	r6, r2, #81	; 0x51
    2f64:	0136      	lsls	r6, r6, #4
    2f66:	51a3      	str	r3, [r4, r6]
}
    2f68:	e7e1      	b.n	2f2e <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    2f6a:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    2f6c:	4b36      	ldr	r3, [pc, #216]	; (3048 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2f6e:	2901      	cmp	r1, #1
    2f70:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    2f74:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    2f76:	d959      	bls.n	302c <start_read.isra.0+0x158>
    2f78:	2a00      	cmp	r2, #0
    2f7a:	d1af      	bne.n	2edc <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    2f7c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    2f80:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    2f82:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    2f84:	b112      	cbz	r2, 2f8c <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    2f86:	8992      	ldrh	r2, [r2, #12]
    2f88:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    2f8c:	68ea      	ldr	r2, [r5, #12]
    2f8e:	429a      	cmp	r2, r3
    2f90:	d356      	bcc.n	3040 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2f92:	4b2d      	ldr	r3, [pc, #180]	; (3048 <start_read.isra.0+0x174>)
    2f94:	68aa      	ldr	r2, [r5, #8]
    2f96:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    2f9a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    2f9c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    2fa0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2fa2:	4c2a      	ldr	r4, [pc, #168]	; (304c <start_read.isra.0+0x178>)
    2fa4:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    2fa8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2faa:	683b      	ldr	r3, [r7, #0]
    2fac:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    2fae:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    2fb0:	2600      	movs	r6, #0
    2fb2:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d03c      	beq.n	3032 <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    2fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2fba:	f104 0590 	add.w	r5, r4, #144	; 0x90
    2fbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    2fc2:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    2fc4:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    2fc8:	b398      	cbz	r0, 3032 <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2fca:	f3bf 8f5b 	dmb	ish
    2fce:	e854 3f00 	ldrex	r3, [r4]
    2fd2:	e844 6200 	strex	r2, r6, [r4]
    2fd6:	2a00      	cmp	r2, #0
    2fd8:	d1f9      	bne.n	2fce <start_read.isra.0+0xfa>
    2fda:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    2fde:	481c      	ldr	r0, [pc, #112]	; (3050 <start_read.isra.0+0x17c>)
    2fe0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    2fe4:	4a1b      	ldr	r2, [pc, #108]	; (3054 <start_read.isra.0+0x180>)
    2fe6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2fea:	2100      	movs	r1, #0
    2fec:	2300      	movs	r3, #0
    2fee:	fbe5 0106 	umlal	r0, r1, r5, r6
    2ff2:	f7fd fc7b 	bl	8ec <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    2ff6:	2200      	movs	r2, #0
    2ff8:	e9cd 0100 	strd	r0, r1, [sp]
    2ffc:	2300      	movs	r3, #0
    2ffe:	f104 0008 	add.w	r0, r4, #8
    3002:	f005 f9a7 	bl	8354 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    3006:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    300a:	b9bb      	cbnz	r3, 303c <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    300c:	4812      	ldr	r0, [pc, #72]	; (3058 <start_read.isra.0+0x184>)
    300e:	f04f 32ff 	mov.w	r2, #4294967295
    3012:	f04f 33ff 	mov.w	r3, #4294967295
    3016:	f004 fbb7 	bl	7788 <z_impl_k_sem_take>
	return ctx->status;
    301a:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    301c:	b003      	add	sp, #12
    301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3020:	2202      	movs	r2, #2
		break;
    3022:	e7a3      	b.n	2f6c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3024:	2203      	movs	r2, #3
		break;
    3026:	e7a1      	b.n	2f6c <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3028:	2200      	movs	r2, #0
    302a:	e79f      	b.n	2f6c <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    302c:	2a08      	cmp	r2, #8
    302e:	d9a5      	bls.n	2f7c <start_read.isra.0+0xa8>
    3030:	e754      	b.n	2edc <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3032:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    3036:	f7ff fed3 	bl	2de0 <adc_context_start_sampling.isra.0>
    303a:	e7e4      	b.n	3006 <start_read.isra.0+0x132>
		return 0;
    303c:	2000      	movs	r0, #0
	return error;
    303e:	e7ed      	b.n	301c <start_read.isra.0+0x148>
		return -ENOMEM;
    3040:	f06f 000b 	mvn.w	r0, #11
    3044:	e7ea      	b.n	301c <start_read.isra.0+0x148>
    3046:	bf00      	nop
    3048:	40007000 	.word	0x40007000
    304c:	20000000 	.word	0x20000000
    3050:	000f423f 	.word	0x000f423f
    3054:	000f4240 	.word	0x000f4240
    3058:	20000058 	.word	0x20000058

0000305c <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    305c:	b570      	push	{r4, r5, r6, lr}
    305e:	460c      	mov	r4, r1
    3060:	4616      	mov	r6, r2
    3062:	4d0d      	ldr	r5, [pc, #52]	; (3098 <adc_nrfx_read_async+0x3c>)
    3064:	f04f 32ff 	mov.w	r2, #4294967295
    3068:	f04f 33ff 	mov.w	r3, #4294967295
    306c:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3070:	f004 fb8a 	bl	7788 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3074:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    3076:	4620      	mov	r0, r4
    3078:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    307c:	676e      	str	r6, [r5, #116]	; 0x74
    307e:	f7ff ff29 	bl	2ed4 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3082:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3086:	4604      	mov	r4, r0
    3088:	b103      	cbz	r3, 308c <adc_nrfx_read_async+0x30>
    308a:	b110      	cbz	r0, 3092 <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    308c:	4803      	ldr	r0, [pc, #12]	; (309c <adc_nrfx_read_async+0x40>)
    308e:	f004 fb37 	bl	7700 <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3092:	4620      	mov	r0, r4
    3094:	bd70      	pop	{r4, r5, r6, pc}
    3096:	bf00      	nop
    3098:	20000000 	.word	0x20000000
    309c:	20000040 	.word	0x20000040

000030a0 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30a0:	4b0d      	ldr	r3, [pc, #52]	; (30d8 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    30a2:	b510      	push	{r4, lr}
    30a4:	2400      	movs	r4, #0
    30a6:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    30a8:	681b      	ldr	r3, [r3, #0]
    30aa:	4b0c      	ldr	r3, [pc, #48]	; (30dc <init_saadc+0x3c>)
    30ac:	601c      	str	r4, [r3, #0]
    30ae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    30b0:	4b0b      	ldr	r3, [pc, #44]	; (30e0 <init_saadc+0x40>)
    30b2:	2212      	movs	r2, #18
    30b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    30b8:	2007      	movs	r0, #7
    30ba:	f7ff fa55 	bl	2568 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    30be:	4622      	mov	r2, r4
    30c0:	2101      	movs	r1, #1
    30c2:	2007      	movs	r0, #7
    30c4:	f7ff fa6e 	bl	25a4 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    30c8:	4806      	ldr	r0, [pc, #24]	; (30e4 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    30ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
    30cc:	b913      	cbnz	r3, 30d4 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    30ce:	3040      	adds	r0, #64	; 0x40
    30d0:	f004 fb16 	bl	7700 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    30d4:	2000      	movs	r0, #0
    30d6:	bd10      	pop	{r4, pc}
    30d8:	40007104 	.word	0x40007104
    30dc:	40007110 	.word	0x40007110
    30e0:	40007000 	.word	0x40007000
    30e4:	20000000 	.word	0x20000000

000030e8 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    30e8:	4b34      	ldr	r3, [pc, #208]	; (31bc <saadc_irq_handler+0xd4>)
    30ea:	681a      	ldr	r2, [r3, #0]
{
    30ec:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    30ee:	2a00      	cmp	r2, #0
    30f0:	d055      	beq.n	319e <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30f2:	2200      	movs	r2, #0
    30f4:	601a      	str	r2, [r3, #0]
    30f6:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    30f8:	4c31      	ldr	r4, [pc, #196]	; (31c0 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30fa:	4b32      	ldr	r3, [pc, #200]	; (31c4 <saadc_irq_handler+0xdc>)
    30fc:	2101      	movs	r1, #1
    30fe:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3100:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    3104:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    3106:	b3db      	cbz	r3, 3180 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3108:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    310c:	b143      	cbz	r3, 3120 <saadc_irq_handler+0x38>
			action = callback(dev,
    310e:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    3112:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    3116:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3118:	2801      	cmp	r0, #1
    311a:	d014      	beq.n	3146 <saadc_irq_handler+0x5e>
    311c:	2802      	cmp	r0, #2
    311e:	d029      	beq.n	3174 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3120:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    3124:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    3128:	429a      	cmp	r2, r3
    312a:	d923      	bls.n	3174 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    312c:	3301      	adds	r3, #1
    312e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3132:	4b25      	ldr	r3, [pc, #148]	; (31c8 <saadc_irq_handler+0xe0>)
    3134:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3138:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    313c:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    313e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3142:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3146:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    314a:	b92b      	cbnz	r3, 3158 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    314c:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    3150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3154:	f7ff be44 	b.w	2de0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3158:	f3bf 8f5b 	dmb	ish
    315c:	e854 3f00 	ldrex	r3, [r4]
    3160:	1e5a      	subs	r2, r3, #1
    3162:	e844 2100 	strex	r1, r2, [r4]
    3166:	2900      	cmp	r1, #0
    3168:	d1f8      	bne.n	315c <saadc_irq_handler+0x74>
    316a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    316e:	2b01      	cmp	r3, #1
    3170:	dcec      	bgt.n	314c <saadc_irq_handler+0x64>
    3172:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3174:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3178:	b113      	cbz	r3, 3180 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    317a:	4814      	ldr	r0, [pc, #80]	; (31cc <saadc_irq_handler+0xe4>)
    317c:	f006 fcf4 	bl	9b68 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    3180:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3184:	b14b      	cbz	r3, 319a <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    3186:	6f60      	ldr	r0, [r4, #116]	; 0x74
    3188:	b110      	cbz	r0, 3190 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    318a:	2100      	movs	r1, #0
    318c:	f002 ff28 	bl	5fe0 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    3190:	480f      	ldr	r0, [pc, #60]	; (31d0 <saadc_irq_handler+0xe8>)
    3192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3196:	f004 bab3 	b.w	7700 <z_impl_k_sem_give>
    319a:	480e      	ldr	r0, [pc, #56]	; (31d4 <saadc_irq_handler+0xec>)
    319c:	e7f9      	b.n	3192 <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    319e:	4b0e      	ldr	r3, [pc, #56]	; (31d8 <saadc_irq_handler+0xf0>)
    31a0:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    31a2:	2900      	cmp	r1, #0
    31a4:	d0e5      	beq.n	3172 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31a6:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31a8:	4a06      	ldr	r2, [pc, #24]	; (31c4 <saadc_irq_handler+0xdc>)
    31aa:	681b      	ldr	r3, [r3, #0]
    31ac:	2301      	movs	r3, #1
    31ae:	6013      	str	r3, [r2, #0]
    31b0:	f842 3c08 	str.w	r3, [r2, #-8]
    31b4:	f842 3c04 	str.w	r3, [r2, #-4]
}
    31b8:	e7db      	b.n	3172 <saadc_irq_handler+0x8a>
    31ba:	bf00      	nop
    31bc:	40007104 	.word	0x40007104
    31c0:	20000000 	.word	0x20000000
    31c4:	40007008 	.word	0x40007008
    31c8:	40007000 	.word	0x40007000
    31cc:	20000008 	.word	0x20000008
    31d0:	20000040 	.word	0x20000040
    31d4:	20000058 	.word	0x20000058
    31d8:	40007110 	.word	0x40007110

000031dc <adc_nrfx_read>:
{
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    31e0:	4d0c      	ldr	r5, [pc, #48]	; (3214 <adc_nrfx_read+0x38>)
    31e2:	f04f 32ff 	mov.w	r2, #4294967295
    31e6:	f04f 33ff 	mov.w	r3, #4294967295
    31ea:	f105 0040 	add.w	r0, r5, #64	; 0x40
    31ee:	f004 facb 	bl	7788 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    31f2:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    31f4:	4620      	mov	r0, r4
    31f6:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    31fa:	676b      	str	r3, [r5, #116]	; 0x74
    31fc:	f7ff fe6a 	bl	2ed4 <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3200:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3204:	4604      	mov	r4, r0
    3206:	b103      	cbz	r3, 320a <adc_nrfx_read+0x2e>
    3208:	b110      	cbz	r0, 3210 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    320a:	4803      	ldr	r0, [pc, #12]	; (3218 <adc_nrfx_read+0x3c>)
    320c:	f004 fa78 	bl	7700 <z_impl_k_sem_give>
}
    3210:	4620      	mov	r0, r4
    3212:	bd38      	pop	{r3, r4, r5, pc}
    3214:	20000000 	.word	0x20000000
    3218:	20000040 	.word	0x20000040

0000321c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3220:	4c10      	ldr	r4, [pc, #64]	; (3264 <onoff_start+0x48>)
    3222:	1b07      	subs	r7, r0, r4
    3224:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3228:	f04f 080c 	mov.w	r8, #12
    322c:	fb08 f807 	mul.w	r8, r8, r7
{
    3230:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    3232:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    3236:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3238:	4420      	add	r0, r4
    323a:	2140      	movs	r1, #64	; 0x40
    323c:	f006 f93e 	bl	94bc <set_starting_state>
	if (err < 0) {
    3240:	1e01      	subs	r1, r0, #0
    3242:	db09      	blt.n	3258 <onoff_start+0x3c>
	subdata->cb = cb;
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <onoff_start+0x4c>)
    3246:	4444      	add	r4, r8
	subdata->user_data = user_data;
    3248:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    324c:	4b07      	ldr	r3, [pc, #28]	; (326c <onoff_start+0x50>)
    324e:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3256:	4718      	bx	r3
		notify(mgr, err);
    3258:	4630      	mov	r0, r6
    325a:	462b      	mov	r3, r5
}
    325c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3260:	4718      	bx	r3
    3262:	bf00      	nop
    3264:	20000b5c 	.word	0x20000b5c
    3268:	0000951f 	.word	0x0000951f
    326c:	00009f38 	.word	0x00009f38

00003270 <get_status>:
{
    3270:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3272:	b2cc      	uxtb	r4, r1
    3274:	2c01      	cmp	r4, #1
{
    3276:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3278:	d909      	bls.n	328e <get_status+0x1e>
    327a:	4909      	ldr	r1, [pc, #36]	; (32a0 <get_status+0x30>)
    327c:	4809      	ldr	r0, [pc, #36]	; (32a4 <get_status+0x34>)
    327e:	4a0a      	ldr	r2, [pc, #40]	; (32a8 <get_status+0x38>)
    3280:	2379      	movs	r3, #121	; 0x79
    3282:	f006 f886 	bl	9392 <printk>
    3286:	4808      	ldr	r0, [pc, #32]	; (32a8 <get_status+0x38>)
    3288:	2179      	movs	r1, #121	; 0x79
    328a:	f005 fe93 	bl	8fb4 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    328e:	692b      	ldr	r3, [r5, #16]
    3290:	210c      	movs	r1, #12
    3292:	fb04 3401 	mla	r4, r4, r1, r3
    3296:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    3298:	f000 0007 	and.w	r0, r0, #7
    329c:	bd38      	pop	{r3, r4, r5, pc}
    329e:	bf00      	nop
    32a0:	0000a952 	.word	0x0000a952
    32a4:	0000a283 	.word	0x0000a283
    32a8:	0000a915 	.word	0x0000a915

000032ac <stop>:
{
    32ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32ae:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    32b0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    32b2:	6907      	ldr	r7, [r0, #16]
{
    32b4:	4605      	mov	r5, r0
    32b6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    32b8:	d90b      	bls.n	32d2 <stop+0x26>
    32ba:	4918      	ldr	r1, [pc, #96]	; (331c <stop+0x70>)
    32bc:	4818      	ldr	r0, [pc, #96]	; (3320 <stop+0x74>)
    32be:	4a19      	ldr	r2, [pc, #100]	; (3324 <stop+0x78>)
    32c0:	f240 134d 	movw	r3, #333	; 0x14d
    32c4:	f006 f865 	bl	9392 <printk>
    32c8:	4816      	ldr	r0, [pc, #88]	; (3324 <stop+0x78>)
    32ca:	f240 114d 	movw	r1, #333	; 0x14d
    32ce:	f005 fe71 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    32d2:	f04f 0320 	mov.w	r3, #32
    32d6:	f3ef 8211 	mrs	r2, BASEPRI
    32da:	f383 8812 	msr	BASEPRI_MAX, r3
    32de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    32e2:	230c      	movs	r3, #12
    32e4:	fb03 7104 	mla	r1, r3, r4, r7
    32e8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    32ea:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    32ee:	d001      	beq.n	32f4 <stop+0x48>
    32f0:	428e      	cmp	r6, r1
    32f2:	d110      	bne.n	3316 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    32f4:	fb03 7304 	mla	r3, r3, r4, r7
    32f8:	2101      	movs	r1, #1
    32fa:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    32fc:	2000      	movs	r0, #0
	__asm__ volatile(
    32fe:	f382 8811 	msr	BASEPRI, r2
    3302:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3306:	b928      	cbnz	r0, 3314 <stop+0x68>
	get_sub_config(dev, type)->stop();
    3308:	6869      	ldr	r1, [r5, #4]
    330a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    330e:	6863      	ldr	r3, [r4, #4]
    3310:	4798      	blx	r3
	return 0;
    3312:	2000      	movs	r0, #0
}
    3314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3316:	f04f 30ff 	mov.w	r0, #4294967295
    331a:	e7f0      	b.n	32fe <stop+0x52>
    331c:	0000a952 	.word	0x0000a952
    3320:	0000a283 	.word	0x0000a283
    3324:	0000a915 	.word	0x0000a915

00003328 <onoff_stop>:
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    332c:	4906      	ldr	r1, [pc, #24]	; (3348 <onoff_stop+0x20>)
    332e:	1a41      	subs	r1, r0, r1
{
    3330:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3332:	1149      	asrs	r1, r1, #5
    3334:	4805      	ldr	r0, [pc, #20]	; (334c <onoff_stop+0x24>)
    3336:	2240      	movs	r2, #64	; 0x40
    3338:	f7ff ffb8 	bl	32ac <stop>
	notify(mgr, res);
    333c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    333e:	4601      	mov	r1, r0
	notify(mgr, res);
    3340:	4620      	mov	r0, r4
}
    3342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3346:	4718      	bx	r3
    3348:	20000b5c 	.word	0x20000b5c
    334c:	00009c54 	.word	0x00009c54

00003350 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3350:	2200      	movs	r2, #0
{
    3352:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3354:	2101      	movs	r1, #1
{
    3356:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3358:	4610      	mov	r0, r2
    335a:	f7ff f923 	bl	25a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    335e:	2000      	movs	r0, #0
    3360:	f7ff f902 	bl	2568 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3364:	480f      	ldr	r0, [pc, #60]	; (33a4 <clk_init+0x54>)
    3366:	f001 f8c3 	bl	44f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    336a:	4b0f      	ldr	r3, [pc, #60]	; (33a8 <clk_init+0x58>)
    336c:	4298      	cmp	r0, r3
    336e:	d115      	bne.n	339c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3370:	f001 f8e2 	bl	4538 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3374:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3376:	490d      	ldr	r1, [pc, #52]	; (33ac <clk_init+0x5c>)
    3378:	4630      	mov	r0, r6
    337a:	f005 fff5 	bl	9368 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    337e:	2800      	cmp	r0, #0
    3380:	db0b      	blt.n	339a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3382:	2501      	movs	r5, #1
    3384:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    3386:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3388:	4908      	ldr	r1, [pc, #32]	; (33ac <clk_init+0x5c>)
    338a:	f104 0020 	add.w	r0, r4, #32
    338e:	f005 ffeb 	bl	9368 <onoff_manager_init>
		if (err < 0) {
    3392:	2800      	cmp	r0, #0
    3394:	db01      	blt.n	339a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3396:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3398:	2000      	movs	r0, #0
}
    339a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    339c:	f06f 0004 	mvn.w	r0, #4
    33a0:	e7fb      	b.n	339a <clk_init+0x4a>
    33a2:	bf00      	nop
    33a4:	000033e5 	.word	0x000033e5
    33a8:	0bad0000 	.word	0x0bad0000
    33ac:	00009f48 	.word	0x00009f48

000033b0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    33b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    33b2:	230c      	movs	r3, #12
    33b4:	4809      	ldr	r0, [pc, #36]	; (33dc <clkstarted_handle.constprop.0+0x2c>)
    33b6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    33b8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    33ba:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    33bc:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    33c0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    33c2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    33c4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    33c6:	4418      	add	r0, r3
    33c8:	f006 f896 	bl	94f8 <set_on_state>
	if (callback) {
    33cc:	b12d      	cbz	r5, 33da <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    33ce:	4632      	mov	r2, r6
    33d0:	462b      	mov	r3, r5
    33d2:	4803      	ldr	r0, [pc, #12]	; (33e0 <clkstarted_handle.constprop.0+0x30>)
}
    33d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    33d8:	4718      	bx	r3
}
    33da:	bd70      	pop	{r4, r5, r6, pc}
    33dc:	20000b5c 	.word	0x20000b5c
    33e0:	00009c54 	.word	0x00009c54

000033e4 <clock_event_handler>:
	switch (event) {
    33e4:	2801      	cmp	r0, #1
{
    33e6:	b508      	push	{r3, lr}
	switch (event) {
    33e8:	d006      	beq.n	33f8 <clock_event_handler+0x14>
    33ea:	2803      	cmp	r0, #3
    33ec:	d008      	beq.n	3400 <clock_event_handler+0x1c>
    33ee:	b9a8      	cbnz	r0, 341c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    33f0:	4b10      	ldr	r3, [pc, #64]	; (3434 <clock_event_handler+0x50>)
    33f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    33f4:	075b      	lsls	r3, r3, #29
    33f6:	d11b      	bne.n	3430 <clock_event_handler+0x4c>
}
    33f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    33fc:	f7ff bfd8 	b.w	33b0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3400:	490d      	ldr	r1, [pc, #52]	; (3438 <clock_event_handler+0x54>)
    3402:	4a0e      	ldr	r2, [pc, #56]	; (343c <clock_event_handler+0x58>)
    3404:	480e      	ldr	r0, [pc, #56]	; (3440 <clock_event_handler+0x5c>)
    3406:	f240 235e 	movw	r3, #606	; 0x25e
    340a:	f005 ffc2 	bl	9392 <printk>
    340e:	f240 215e 	movw	r1, #606	; 0x25e
}
    3412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3416:	4809      	ldr	r0, [pc, #36]	; (343c <clock_event_handler+0x58>)
    3418:	f005 bdcc 	b.w	8fb4 <assert_post_action>
    341c:	4906      	ldr	r1, [pc, #24]	; (3438 <clock_event_handler+0x54>)
    341e:	4a07      	ldr	r2, [pc, #28]	; (343c <clock_event_handler+0x58>)
    3420:	4807      	ldr	r0, [pc, #28]	; (3440 <clock_event_handler+0x5c>)
    3422:	f240 2362 	movw	r3, #610	; 0x262
    3426:	f005 ffb4 	bl	9392 <printk>
    342a:	f240 2162 	movw	r1, #610	; 0x262
    342e:	e7f0      	b.n	3412 <clock_event_handler+0x2e>
}
    3430:	bd08      	pop	{r3, pc}
    3432:	bf00      	nop
    3434:	20000b5c 	.word	0x20000b5c
    3438:	0000ac19 	.word	0x0000ac19
    343c:	0000a915 	.word	0x0000a915
    3440:	0000a283 	.word	0x0000a283

00003444 <generic_hfclk_start>:
{
    3444:	b508      	push	{r3, lr}
	__asm__ volatile(
    3446:	f04f 0320 	mov.w	r3, #32
    344a:	f3ef 8111 	mrs	r1, BASEPRI
    344e:	f383 8812 	msr	BASEPRI_MAX, r3
    3452:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3456:	4a12      	ldr	r2, [pc, #72]	; (34a0 <generic_hfclk_start+0x5c>)
    3458:	6813      	ldr	r3, [r2, #0]
    345a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    345e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3462:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3464:	d00c      	beq.n	3480 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    346a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    346e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3472:	f013 0301 	ands.w	r3, r3, #1
    3476:	d003      	beq.n	3480 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3478:	480a      	ldr	r0, [pc, #40]	; (34a4 <generic_hfclk_start+0x60>)
    347a:	f006 f83d 	bl	94f8 <set_on_state>
			already_started = true;
    347e:	2301      	movs	r3, #1
	__asm__ volatile(
    3480:	f381 8811 	msr	BASEPRI, r1
    3484:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3488:	b123      	cbz	r3, 3494 <generic_hfclk_start+0x50>
}
    348a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    348e:	2000      	movs	r0, #0
    3490:	f7ff bf8e 	b.w	33b0 <clkstarted_handle.constprop.0>
}
    3494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3498:	2001      	movs	r0, #1
    349a:	f001 b86d 	b.w	4578 <nrfx_clock_start>
    349e:	bf00      	nop
    34a0:	20000bb4 	.word	0x20000bb4
    34a4:	20000ba4 	.word	0x20000ba4

000034a8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    34a8:	4b09      	ldr	r3, [pc, #36]	; (34d0 <generic_hfclk_stop+0x28>)
    34aa:	f3bf 8f5b 	dmb	ish
    34ae:	e853 2f00 	ldrex	r2, [r3]
    34b2:	f022 0102 	bic.w	r1, r2, #2
    34b6:	e843 1000 	strex	r0, r1, [r3]
    34ba:	2800      	cmp	r0, #0
    34bc:	d1f7      	bne.n	34ae <generic_hfclk_stop+0x6>
    34be:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    34c2:	07d3      	lsls	r3, r2, #31
    34c4:	d402      	bmi.n	34cc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    34c6:	2001      	movs	r0, #1
    34c8:	f001 b8aa 	b.w	4620 <nrfx_clock_stop>
}
    34cc:	4770      	bx	lr
    34ce:	bf00      	nop
    34d0:	20000bb4 	.word	0x20000bb4

000034d4 <api_blocking_start>:
{
    34d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34d6:	2200      	movs	r2, #0
    34d8:	2301      	movs	r3, #1
    34da:	e9cd 2302 	strd	r2, r3, [sp, #8]
    34de:	ab04      	add	r3, sp, #16
    34e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    34e4:	4a09      	ldr	r2, [pc, #36]	; (350c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34e6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    34ea:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34ec:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    34f0:	f006 f827 	bl	9542 <api_start>
	if (err < 0) {
    34f4:	2800      	cmp	r0, #0
    34f6:	db05      	blt.n	3504 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    34f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    34fc:	2300      	movs	r3, #0
    34fe:	4668      	mov	r0, sp
    3500:	f004 f942 	bl	7788 <z_impl_k_sem_take>
}
    3504:	b007      	add	sp, #28
    3506:	f85d fb04 	ldr.w	pc, [sp], #4
    350a:	bf00      	nop
    350c:	0000953d 	.word	0x0000953d

00003510 <z_nrf_clock_control_lf_on>:
{
    3510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3514:	4949      	ldr	r1, [pc, #292]	; (363c <z_nrf_clock_control_lf_on+0x12c>)
    3516:	f3bf 8f5b 	dmb	ish
    351a:	4605      	mov	r5, r0
    351c:	2201      	movs	r2, #1
    351e:	e851 3f00 	ldrex	r3, [r1]
    3522:	e841 2000 	strex	r0, r2, [r1]
    3526:	2800      	cmp	r0, #0
    3528:	d1f9      	bne.n	351e <z_nrf_clock_control_lf_on+0xe>
    352a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    352e:	b9a3      	cbnz	r3, 355a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3530:	4943      	ldr	r1, [pc, #268]	; (3640 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    3532:	4844      	ldr	r0, [pc, #272]	; (3644 <z_nrf_clock_control_lf_on+0x134>)
    3534:	604b      	str	r3, [r1, #4]
    3536:	60cb      	str	r3, [r1, #12]
    3538:	608a      	str	r2, [r1, #8]
    353a:	f7fe fd8b 	bl	2054 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    353e:	2800      	cmp	r0, #0
    3540:	da0b      	bge.n	355a <z_nrf_clock_control_lf_on+0x4a>
    3542:	4941      	ldr	r1, [pc, #260]	; (3648 <z_nrf_clock_control_lf_on+0x138>)
    3544:	4841      	ldr	r0, [pc, #260]	; (364c <z_nrf_clock_control_lf_on+0x13c>)
    3546:	4a42      	ldr	r2, [pc, #264]	; (3650 <z_nrf_clock_control_lf_on+0x140>)
    3548:	f44f 7308 	mov.w	r3, #544	; 0x220
    354c:	f005 ff21 	bl	9392 <printk>
    3550:	483f      	ldr	r0, [pc, #252]	; (3650 <z_nrf_clock_control_lf_on+0x140>)
    3552:	f44f 7108 	mov.w	r1, #544	; 0x220
    3556:	f005 fd2d 	bl	8fb4 <assert_post_action>
	switch (start_mode) {
    355a:	b3ad      	cbz	r5, 35c8 <z_nrf_clock_control_lf_on+0xb8>
    355c:	1e6b      	subs	r3, r5, #1
    355e:	2b01      	cmp	r3, #1
    3560:	d856      	bhi.n	3610 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3562:	2d01      	cmp	r5, #1
    3564:	d107      	bne.n	3576 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    356a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    356e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3572:	2b01      	cmp	r3, #1
    3574:	d028      	beq.n	35c8 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3576:	f006 fab9 	bl	9aec <k_is_in_isr>
    357a:	4604      	mov	r4, r0
    357c:	b918      	cbnz	r0, 3586 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    357e:	4b35      	ldr	r3, [pc, #212]	; (3654 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    3580:	781b      	ldrb	r3, [r3, #0]
    3582:	2b00      	cmp	r3, #0
    3584:	d152      	bne.n	362c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    3586:	f04f 0320 	mov.w	r3, #32
    358a:	f3ef 8611 	mrs	r6, BASEPRI
    358e:	f383 8812 	msr	BASEPRI_MAX, r3
    3592:	f3bf 8f6f 	isb	sy
    3596:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3598:	4f2f      	ldr	r7, [pc, #188]	; (3658 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    359a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3660 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    359e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3664 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    35a6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35aa:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    35ae:	03d2      	lsls	r2, r2, #15
    35b0:	d50c      	bpl.n	35cc <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    35b2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    35b6:	2b01      	cmp	r3, #1
    35b8:	d001      	beq.n	35be <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    35ba:	2d01      	cmp	r5, #1
    35bc:	d106      	bne.n	35cc <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    35be:	b30c      	cbz	r4, 3604 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    35c0:	f386 8811 	msr	BASEPRI, r6
    35c4:	f3bf 8f6f 	isb	sy
}
    35c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    35cc:	b1ac      	cbz	r4, 35fa <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    35ce:	4630      	mov	r0, r6
    35d0:	f7fe ff62 	bl	2498 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    35d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    35d8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    35dc:	2b00      	cmp	r3, #0
    35de:	d1e0      	bne.n	35a2 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35e0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    35e2:	2900      	cmp	r1, #0
    35e4:	d0dd      	beq.n	35a2 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35e6:	603b      	str	r3, [r7, #0]
    35e8:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    35ea:	2301      	movs	r3, #1
    35ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    35f0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35f4:	f8c9 3000 	str.w	r3, [r9]
}
    35f8:	e7d3      	b.n	35a2 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    35fa:	2100      	movs	r1, #0
    35fc:	2021      	movs	r0, #33	; 0x21
    35fe:	f003 ff13 	bl	7428 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3602:	e7e7      	b.n	35d4 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    3604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3608:	2202      	movs	r2, #2
    360a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    360e:	e7db      	b.n	35c8 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    3610:	4912      	ldr	r1, [pc, #72]	; (365c <z_nrf_clock_control_lf_on+0x14c>)
    3612:	480e      	ldr	r0, [pc, #56]	; (364c <z_nrf_clock_control_lf_on+0x13c>)
    3614:	4a0e      	ldr	r2, [pc, #56]	; (3650 <z_nrf_clock_control_lf_on+0x140>)
    3616:	f240 2332 	movw	r3, #562	; 0x232
    361a:	f005 feba 	bl	9392 <printk>
}
    361e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    3622:	480b      	ldr	r0, [pc, #44]	; (3650 <z_nrf_clock_control_lf_on+0x140>)
    3624:	f240 2132 	movw	r1, #562	; 0x232
    3628:	f005 bcc4 	b.w	8fb4 <assert_post_action>
    p_reg->INTENCLR = mask;
    362c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3630:	2202      	movs	r2, #2
    3632:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3636:	4606      	mov	r6, r0
}
    3638:	e7ae      	b.n	3598 <z_nrf_clock_control_lf_on+0x88>
    363a:	bf00      	nop
    363c:	20000bb8 	.word	0x20000bb8
    3640:	20000b4c 	.word	0x20000b4c
    3644:	20000b7c 	.word	0x20000b7c
    3648:	0000a976 	.word	0x0000a976
    364c:	0000a283 	.word	0x0000a283
    3650:	0000a915 	.word	0x0000a915
    3654:	20000c7f 	.word	0x20000c7f
    3658:	40000104 	.word	0x40000104
    365c:	0000ac19 	.word	0x0000ac19
    3660:	e000e100 	.word	0xe000e100
    3664:	40000008 	.word	0x40000008

00003668 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3668:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    366a:	4b08      	ldr	r3, [pc, #32]	; (368c <uart_console_init+0x24>)
    366c:	4808      	ldr	r0, [pc, #32]	; (3690 <uart_console_init+0x28>)
    366e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    3670:	f006 f9a6 	bl	99c0 <z_device_ready>
    3674:	b138      	cbz	r0, 3686 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3676:	4807      	ldr	r0, [pc, #28]	; (3694 <uart_console_init+0x2c>)
    3678:	f7ff fb5a 	bl	2d30 <__stdout_hook_install>
	__printk_hook_install(console_out);
    367c:	4805      	ldr	r0, [pc, #20]	; (3694 <uart_console_init+0x2c>)
    367e:	f7fe fecf 	bl	2420 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3682:	2000      	movs	r0, #0
}
    3684:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3686:	f06f 0012 	mvn.w	r0, #18
    368a:	e7fb      	b.n	3684 <uart_console_init+0x1c>
    368c:	20000bbc 	.word	0x20000bbc
    3690:	00009cb4 	.word	0x00009cb4
    3694:	00003699 	.word	0x00003699

00003698 <console_out>:
	if ('\n' == c) {
    3698:	280a      	cmp	r0, #10
{
    369a:	b538      	push	{r3, r4, r5, lr}
    369c:	4d07      	ldr	r5, [pc, #28]	; (36bc <console_out+0x24>)
    369e:	4604      	mov	r4, r0
	if ('\n' == c) {
    36a0:	d104      	bne.n	36ac <console_out+0x14>
    36a2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    36a4:	6883      	ldr	r3, [r0, #8]
    36a6:	210d      	movs	r1, #13
    36a8:	685b      	ldr	r3, [r3, #4]
    36aa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    36ac:	6828      	ldr	r0, [r5, #0]
    36ae:	6883      	ldr	r3, [r0, #8]
    36b0:	b2e1      	uxtb	r1, r4
    36b2:	685b      	ldr	r3, [r3, #4]
    36b4:	4798      	blx	r3
}
    36b6:	4620      	mov	r0, r4
    36b8:	bd38      	pop	{r3, r4, r5, pc}
    36ba:	bf00      	nop
    36bc:	20000bbc 	.word	0x20000bbc

000036c0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    36c0:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    36c2:	6905      	ldr	r5, [r0, #16]
{
    36c4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    36c6:	460c      	mov	r4, r1
    36c8:	b961      	cbnz	r1, 36e4 <gpio_nrfx_manage_callback+0x24>
    36ca:	4922      	ldr	r1, [pc, #136]	; (3754 <gpio_nrfx_manage_callback+0x94>)
    36cc:	4a22      	ldr	r2, [pc, #136]	; (3758 <gpio_nrfx_manage_callback+0x98>)
    36ce:	4823      	ldr	r0, [pc, #140]	; (375c <gpio_nrfx_manage_callback+0x9c>)
    36d0:	2324      	movs	r3, #36	; 0x24
    36d2:	f005 fe5e 	bl	9392 <printk>
    36d6:	4822      	ldr	r0, [pc, #136]	; (3760 <gpio_nrfx_manage_callback+0xa0>)
    36d8:	f005 fe5b 	bl	9392 <printk>
    36dc:	481e      	ldr	r0, [pc, #120]	; (3758 <gpio_nrfx_manage_callback+0x98>)
    36de:	2124      	movs	r1, #36	; 0x24
    36e0:	f005 fc68 	bl	8fb4 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    36e4:	6863      	ldr	r3, [r4, #4]
    36e6:	b963      	cbnz	r3, 3702 <gpio_nrfx_manage_callback+0x42>
    36e8:	491e      	ldr	r1, [pc, #120]	; (3764 <gpio_nrfx_manage_callback+0xa4>)
    36ea:	4a1b      	ldr	r2, [pc, #108]	; (3758 <gpio_nrfx_manage_callback+0x98>)
    36ec:	481b      	ldr	r0, [pc, #108]	; (375c <gpio_nrfx_manage_callback+0x9c>)
    36ee:	2325      	movs	r3, #37	; 0x25
    36f0:	f005 fe4f 	bl	9392 <printk>
    36f4:	481c      	ldr	r0, [pc, #112]	; (3768 <gpio_nrfx_manage_callback+0xa8>)
    36f6:	f005 fe4c 	bl	9392 <printk>
    36fa:	4817      	ldr	r0, [pc, #92]	; (3758 <gpio_nrfx_manage_callback+0x98>)
    36fc:	2125      	movs	r1, #37	; 0x25
    36fe:	f005 fc59 	bl	8fb4 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    3702:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3704:	b15b      	cbz	r3, 371e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3706:	2200      	movs	r2, #0
    3708:	429c      	cmp	r4, r3
    370a:	d113      	bne.n	3734 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    370c:	6823      	ldr	r3, [r4, #0]
    370e:	b95a      	cbnz	r2, 3728 <gpio_nrfx_manage_callback+0x68>
    3710:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    3712:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3714:	4294      	cmp	r4, r2
    3716:	d100      	bne.n	371a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    3718:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    371a:	2300      	movs	r3, #0
    371c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    371e:	b976      	cbnz	r6, 373e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3720:	2000      	movs	r0, #0
				     callback, set);
}
    3722:	bd70      	pop	{r4, r5, r6, pc}
    3724:	460b      	mov	r3, r1
    3726:	e7ef      	b.n	3708 <gpio_nrfx_manage_callback+0x48>
    3728:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    372a:	68ab      	ldr	r3, [r5, #8]
    372c:	429c      	cmp	r4, r3
	list->tail = node;
    372e:	bf08      	it	eq
    3730:	60aa      	streq	r2, [r5, #8]
}
    3732:	e7f2      	b.n	371a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3734:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3736:	461a      	mov	r2, r3
    3738:	2900      	cmp	r1, #0
    373a:	d1f3      	bne.n	3724 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    373c:	b13e      	cbz	r6, 374e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    373e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    3740:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    3742:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    3744:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3746:	2800      	cmp	r0, #0
    3748:	d1ea      	bne.n	3720 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    374a:	60ac      	str	r4, [r5, #8]
}
    374c:	e7e9      	b.n	3722 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    374e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3752:	e7e6      	b.n	3722 <gpio_nrfx_manage_callback+0x62>
    3754:	0000a9b2 	.word	0x0000a9b2
    3758:	0000a985 	.word	0x0000a985
    375c:	0000a283 	.word	0x0000a283
    3760:	0000a9bb 	.word	0x0000a9bb
    3764:	0000a9ca 	.word	0x0000a9ca
    3768:	0000a9dc 	.word	0x0000a9dc

0000376c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    376c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    376e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3772:	d003      	beq.n	377c <nrfx_gpio_handler+0x10>
    3774:	2b01      	cmp	r3, #1
    3776:	d036      	beq.n	37e6 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    377c:	4f1b      	ldr	r7, [pc, #108]	; (37ec <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    377e:	693b      	ldr	r3, [r7, #16]
    3780:	685c      	ldr	r4, [r3, #4]
    3782:	2c00      	cmp	r4, #0
    3784:	d0f8      	beq.n	3778 <nrfx_gpio_handler+0xc>
    3786:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3788:	f8df 806c 	ldr.w	r8, [pc, #108]	; 37f8 <nrfx_gpio_handler+0x8c>
    378c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 37fc <nrfx_gpio_handler+0x90>
    3790:	f8df a06c 	ldr.w	sl, [pc, #108]	; 3800 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3794:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3798:	2601      	movs	r6, #1
    379a:	2d00      	cmp	r5, #0
    379c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    37a0:	bf38      	it	cc
    37a2:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    37a4:	68a3      	ldr	r3, [r4, #8]
    37a6:	421e      	tst	r6, r3
    37a8:	d014      	beq.n	37d4 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    37aa:	6863      	ldr	r3, [r4, #4]
    37ac:	b963      	cbnz	r3, 37c8 <nrfx_gpio_handler+0x5c>
    37ae:	4649      	mov	r1, r9
    37b0:	2345      	movs	r3, #69	; 0x45
    37b2:	4642      	mov	r2, r8
    37b4:	4650      	mov	r0, sl
    37b6:	f005 fdec 	bl	9392 <printk>
    37ba:	480d      	ldr	r0, [pc, #52]	; (37f0 <nrfx_gpio_handler+0x84>)
    37bc:	f005 fde9 	bl	9392 <printk>
    37c0:	2145      	movs	r1, #69	; 0x45
    37c2:	4640      	mov	r0, r8
    37c4:	f005 fbf6 	bl	8fb4 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    37c8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    37cc:	4621      	mov	r1, r4
    37ce:	4032      	ands	r2, r6
    37d0:	4638      	mov	r0, r7
    37d2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37d4:	2d00      	cmp	r5, #0
    37d6:	d0cf      	beq.n	3778 <nrfx_gpio_handler+0xc>
    37d8:	682b      	ldr	r3, [r5, #0]
    37da:	2b00      	cmp	r3, #0
    37dc:	bf38      	it	cc
    37de:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    37e0:	462c      	mov	r4, r5
    37e2:	461d      	mov	r5, r3
    37e4:	e7de      	b.n	37a4 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    37e6:	4f03      	ldr	r7, [pc, #12]	; (37f4 <nrfx_gpio_handler+0x88>)
    37e8:	e7c9      	b.n	377e <nrfx_gpio_handler+0x12>
    37ea:	bf00      	nop
    37ec:	00009c6c 	.word	0x00009c6c
    37f0:	0000a9dc 	.word	0x0000a9dc
    37f4:	00009c84 	.word	0x00009c84
    37f8:	0000a985 	.word	0x0000a985
    37fc:	0000a9f3 	.word	0x0000a9f3
    3800:	0000a283 	.word	0x0000a283

00003804 <gpio_nrfx_pin_interrupt_configure>:
{
    3804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3806:	6840      	ldr	r0, [r0, #4]
    3808:	7b05      	ldrb	r5, [r0, #12]
    380a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    380e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3812:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3816:	f04f 0500 	mov.w	r5, #0
    381a:	d104      	bne.n	3826 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    381c:	4620      	mov	r0, r4
    381e:	f001 fa97 	bl	4d50 <nrfx_gpiote_trigger_disable>
	return 0;
    3822:	2000      	movs	r0, #0
    3824:	e054      	b.n	38d0 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3826:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    382a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    382e:	d151      	bne.n	38d4 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3834:	bf0c      	ite	eq
    3836:	2304      	moveq	r3, #4
    3838:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    383a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    383e:	6883      	ldr	r3, [r0, #8]
    3840:	fa23 f101 	lsr.w	r1, r3, r1
    3844:	f011 0101 	ands.w	r1, r1, #1
    3848:	d155      	bne.n	38f6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    384a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    384e:	d152      	bne.n	38f6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    3850:	0966      	lsrs	r6, r4, #5
    3852:	d04a      	beq.n	38ea <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    3854:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3858:	2e01      	cmp	r6, #1
    385a:	bf08      	it	eq
    385c:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    385e:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3862:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3864:	07ca      	lsls	r2, r1, #31
    3866:	d40b      	bmi.n	3880 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3868:	492b      	ldr	r1, [pc, #172]	; (3918 <gpio_nrfx_pin_interrupt_configure+0x114>)
    386a:	482c      	ldr	r0, [pc, #176]	; (391c <gpio_nrfx_pin_interrupt_configure+0x118>)
    386c:	4a2c      	ldr	r2, [pc, #176]	; (3920 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    386e:	f240 2329 	movw	r3, #553	; 0x229
    3872:	f005 fd8e 	bl	9392 <printk>
    3876:	482a      	ldr	r0, [pc, #168]	; (3920 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3878:	f240 2129 	movw	r1, #553	; 0x229
    387c:	f005 fb9a 	bl	8fb4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3880:	b16e      	cbz	r6, 389e <gpio_nrfx_pin_interrupt_configure+0x9a>
    3882:	2e01      	cmp	r6, #1
    3884:	d034      	beq.n	38f0 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    3886:	4927      	ldr	r1, [pc, #156]	; (3924 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3888:	4824      	ldr	r0, [pc, #144]	; (391c <gpio_nrfx_pin_interrupt_configure+0x118>)
    388a:	4a25      	ldr	r2, [pc, #148]	; (3920 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    388c:	f240 232e 	movw	r3, #558	; 0x22e
    3890:	f005 fd7f 	bl	9392 <printk>
    3894:	4822      	ldr	r0, [pc, #136]	; (3920 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3896:	f240 212e 	movw	r1, #558	; 0x22e
    389a:	f005 fb8b 	bl	8fb4 <assert_post_action>
        case 0: return NRF_P0;
    389e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    38a2:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    38a6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    38aa:	07db      	lsls	r3, r3, #31
    38ac:	d423      	bmi.n	38f6 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38ae:	f10d 0507 	add.w	r5, sp, #7
    38b2:	4629      	mov	r1, r5
    38b4:	4620      	mov	r0, r4
    38b6:	f001 f975 	bl	4ba4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    38ba:	4b1b      	ldr	r3, [pc, #108]	; (3928 <gpio_nrfx_pin_interrupt_configure+0x124>)
    38bc:	4298      	cmp	r0, r3
    38be:	d119      	bne.n	38f4 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    38c0:	4628      	mov	r0, r5
    38c2:	f001 f9cf 	bl	4c64 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    38c6:	4b19      	ldr	r3, [pc, #100]	; (392c <gpio_nrfx_pin_interrupt_configure+0x128>)
    38c8:	4298      	cmp	r0, r3
    38ca:	d013      	beq.n	38f4 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    38cc:	f06f 000b 	mvn.w	r0, #11
}
    38d0:	b004      	add	sp, #16
    38d2:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    38d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    38d8:	d005      	beq.n	38e6 <gpio_nrfx_pin_interrupt_configure+0xe2>
    38da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    38de:	bf0c      	ite	eq
    38e0:	2302      	moveq	r3, #2
    38e2:	2301      	movne	r3, #1
    38e4:	e7a9      	b.n	383a <gpio_nrfx_pin_interrupt_configure+0x36>
    38e6:	2303      	movs	r3, #3
    38e8:	e7a7      	b.n	383a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    38ea:	f04f 31ff 	mov.w	r1, #4294967295
    38ee:	e7b6      	b.n	385e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    38f0:	4b0f      	ldr	r3, [pc, #60]	; (3930 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    38f2:	e7d6      	b.n	38a2 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    38f4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    38f6:	2300      	movs	r3, #0
    38f8:	4619      	mov	r1, r3
    38fa:	aa02      	add	r2, sp, #8
    38fc:	4620      	mov	r0, r4
    38fe:	f001 f833 	bl	4968 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3902:	4b0a      	ldr	r3, [pc, #40]	; (392c <gpio_nrfx_pin_interrupt_configure+0x128>)
    3904:	4298      	cmp	r0, r3
    3906:	d104      	bne.n	3912 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3908:	2101      	movs	r1, #1
    390a:	4620      	mov	r0, r4
    390c:	f001 f9b0 	bl	4c70 <nrfx_gpiote_trigger_enable>
    3910:	e787      	b.n	3822 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3912:	f06f 0004 	mvn.w	r0, #4
    3916:	e7db      	b.n	38d0 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3918:	0000aa32 	.word	0x0000aa32
    391c:	0000a283 	.word	0x0000a283
    3920:	0000a9ff 	.word	0x0000a9ff
    3924:	0000ac19 	.word	0x0000ac19
    3928:	0bad0004 	.word	0x0bad0004
    392c:	0bad0000 	.word	0x0bad0000
    3930:	50000300 	.word	0x50000300

00003934 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3934:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3936:	f001 f985 	bl	4c44 <nrfx_gpiote_is_init>
    393a:	4604      	mov	r4, r0
    393c:	b968      	cbnz	r0, 395a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    393e:	f001 f959 	bl	4bf4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3942:	4b08      	ldr	r3, [pc, #32]	; (3964 <gpio_nrfx_init+0x30>)
    3944:	4298      	cmp	r0, r3
    3946:	d10a      	bne.n	395e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3948:	4807      	ldr	r0, [pc, #28]	; (3968 <gpio_nrfx_init+0x34>)
    394a:	4621      	mov	r1, r4
    394c:	f001 f924 	bl	4b98 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3950:	4622      	mov	r2, r4
    3952:	2105      	movs	r1, #5
    3954:	2006      	movs	r0, #6
    3956:	f7fe fe25 	bl	25a4 <z_arm_irq_priority_set>
		return 0;
    395a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    395c:	bd10      	pop	{r4, pc}
		return -EIO;
    395e:	f06f 0004 	mvn.w	r0, #4
    3962:	e7fb      	b.n	395c <gpio_nrfx_init+0x28>
    3964:	0bad0000 	.word	0x0bad0000
    3968:	0000376d 	.word	0x0000376d

0000396c <gpio_nrfx_pin_configure>:
{
    396c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3970:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3972:	7b3b      	ldrb	r3, [r7, #12]
    3974:	f001 051f 	and.w	r5, r1, #31
{
    3978:	b085      	sub	sp, #20
    397a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    397c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3980:	4614      	mov	r4, r2
    3982:	b9ca      	cbnz	r2, 39b8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3984:	a902      	add	r1, sp, #8
    3986:	4628      	mov	r0, r5
    3988:	f001 f90c 	bl	4ba4 <nrfx_gpiote_channel_get>
    398c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    398e:	4628      	mov	r0, r5
    3990:	f001 fa00 	bl	4d94 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3994:	4b48      	ldr	r3, [pc, #288]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3996:	4298      	cmp	r0, r3
    3998:	d004      	beq.n	39a4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    399a:	f06f 0004 	mvn.w	r0, #4
}
    399e:	b005      	add	sp, #20
    39a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    39a4:	4284      	cmp	r4, r0
    39a6:	d105      	bne.n	39b4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    39a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    39ac:	f001 f954 	bl	4c58 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    39b0:	42a0      	cmp	r0, r4
    39b2:	d1f2      	bne.n	399a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    39b4:	2000      	movs	r0, #0
    39b6:	e7f2      	b.n	399e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    39b8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    39bc:	f10d 0103 	add.w	r1, sp, #3
    39c0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    39c2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    39c6:	f001 f8ed 	bl	4ba4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39ca:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    39cc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39ce:	aa02      	add	r2, sp, #8
    39d0:	4649      	mov	r1, r9
    39d2:	4628      	mov	r0, r5
    39d4:	f000 ffc8 	bl	4968 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    39d8:	4b37      	ldr	r3, [pc, #220]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    39da:	4298      	cmp	r0, r3
    39dc:	d002      	beq.n	39e4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39de:	f06f 0015 	mvn.w	r0, #21
    39e2:	e7dc      	b.n	399e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    39e4:	4580      	cmp	r8, r0
    39e6:	d103      	bne.n	39f0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    39e8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    39ec:	f001 f934 	bl	4c58 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    39f0:	05a3      	lsls	r3, r4, #22
    39f2:	d54e      	bpl.n	3a92 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39f4:	4b31      	ldr	r3, [pc, #196]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    39f6:	4a32      	ldr	r2, [pc, #200]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    39f8:	4023      	ands	r3, r4
    39fa:	4293      	cmp	r3, r2
    39fc:	d03a      	beq.n	3a74 <gpio_nrfx_pin_configure+0x108>
    39fe:	d80c      	bhi.n	3a1a <gpio_nrfx_pin_configure+0xae>
    3a00:	2b06      	cmp	r3, #6
    3a02:	d014      	beq.n	3a2e <gpio_nrfx_pin_configure+0xc2>
    3a04:	d804      	bhi.n	3a10 <gpio_nrfx_pin_configure+0xa4>
    3a06:	b193      	cbz	r3, 3a2e <gpio_nrfx_pin_configure+0xc2>
    3a08:	2b02      	cmp	r3, #2
    3a0a:	d1e8      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
    3a0c:	2304      	movs	r3, #4
    3a0e:	e00e      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
    3a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3a14:	d1e3      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3a16:	2301      	movs	r3, #1
    3a18:	e009      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3a1a:	4a2a      	ldr	r2, [pc, #168]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a1c:	4293      	cmp	r3, r2
    3a1e:	d02b      	beq.n	3a78 <gpio_nrfx_pin_configure+0x10c>
    3a20:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3a24:	d02a      	beq.n	3a7c <gpio_nrfx_pin_configure+0x110>
    3a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3a2a:	d1d8      	bne.n	39de <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3a2c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3a2e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3a32:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3a36:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3a3a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3a3c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3a40:	bf54      	ite	pl
    3a42:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3a46:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a48:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3a4a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a4e:	d517      	bpl.n	3a80 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	2101      	movs	r1, #1
    3a54:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3a58:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3a5c:	2200      	movs	r2, #0
    3a5e:	a901      	add	r1, sp, #4
    3a60:	4628      	mov	r0, r5
    3a62:	f001 f829 	bl	4ab8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3a66:	4b14      	ldr	r3, [pc, #80]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a68:	4298      	cmp	r0, r3
    3a6a:	bf14      	ite	ne
    3a6c:	f06f 0015 	mvnne.w	r0, #21
    3a70:	2000      	moveq	r0, #0
    3a72:	e794      	b.n	399e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3a74:	2307      	movs	r3, #7
    3a76:	e7da      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3a78:	2305      	movs	r3, #5
    3a7a:	e7d8      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3a7c:	2303      	movs	r3, #3
    3a7e:	e7d6      	b.n	3a2e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3a80:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3a82:	bf41      	itttt	mi
    3a84:	687b      	ldrmi	r3, [r7, #4]
    3a86:	2101      	movmi	r1, #1
    3a88:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3a8c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3a90:	e7e4      	b.n	3a5c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3a92:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3a94:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3a98:	bf54      	ite	pl
    3a9a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3a9e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3aa0:	461a      	mov	r2, r3
    3aa2:	a901      	add	r1, sp, #4
    3aa4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3aa6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3aaa:	f000 ff5d 	bl	4968 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3aae:	4b02      	ldr	r3, [pc, #8]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3ab0:	4298      	cmp	r0, r3
    3ab2:	f43f af7f 	beq.w	39b4 <gpio_nrfx_pin_configure+0x48>
    3ab6:	e792      	b.n	39de <gpio_nrfx_pin_configure+0x72>
    3ab8:	0bad0000 	.word	0x0bad0000
    3abc:	00f00006 	.word	0x00f00006
    3ac0:	00100006 	.word	0x00100006
    3ac4:	00400002 	.word	0x00400002

00003ac8 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3ac8:	4802      	ldr	r0, [pc, #8]	; (3ad4 <pwm_nrfx_get_cycles_per_sec+0xc>)
    3aca:	2100      	movs	r1, #0
    3acc:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3ad0:	2000      	movs	r0, #0
    3ad2:	4770      	bx	lr
    3ad4:	00f42400 	.word	0x00f42400

00003ad8 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3ad8:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    3ada:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3adc:	6912      	ldr	r2, [r2, #16]
{
    3ade:	b538      	push	{r3, r4, r5, lr}
    3ae0:	f100 0308 	add.w	r3, r0, #8
    3ae4:	3204      	adds	r2, #4
    3ae6:	f100 040c 	add.w	r4, r0, #12
    3aea:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3aec:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3af0:	2d00      	cmp	r5, #0
    3af2:	bfb4      	ite	lt
    3af4:	2500      	movlt	r5, #0
    3af6:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3afa:	42a3      	cmp	r3, r4

		data->current[i] = value;
    3afc:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3b00:	d1f4      	bne.n	3aec <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3b02:	2300      	movs	r3, #0
    3b04:	461a      	mov	r2, r3
    3b06:	f001 fb07 	bl	5118 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3b0a:	4b03      	ldr	r3, [pc, #12]	; (3b18 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    3b0c:	4298      	cmp	r0, r3
	}

	return 0;
}
    3b0e:	bf14      	ite	ne
    3b10:	f06f 000f 	mvnne.w	r0, #15
    3b14:	2000      	moveq	r0, #0
    3b16:	bd38      	pop	{r3, r4, r5, pc}
    3b18:	0bad0000 	.word	0x0bad0000

00003b1c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b1c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3b1e:	0953      	lsrs	r3, r2, #5
{
    3b20:	b510      	push	{r4, lr}
    3b22:	4604      	mov	r4, r0
    switch (port)
    3b24:	d02c      	beq.n	3b80 <nrf_gpio_pin_port_decode+0x64>
    3b26:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b2c:	bf18      	it	ne
    3b2e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3b30:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3b34:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b36:	07db      	lsls	r3, r3, #31
    3b38:	d40b      	bmi.n	3b52 <nrf_gpio_pin_port_decode+0x36>
    3b3a:	4914      	ldr	r1, [pc, #80]	; (3b8c <nrf_gpio_pin_port_decode+0x70>)
    3b3c:	4814      	ldr	r0, [pc, #80]	; (3b90 <nrf_gpio_pin_port_decode+0x74>)
    3b3e:	4a15      	ldr	r2, [pc, #84]	; (3b94 <nrf_gpio_pin_port_decode+0x78>)
    3b40:	f240 2329 	movw	r3, #553	; 0x229
    3b44:	f005 fc25 	bl	9392 <printk>
    3b48:	4812      	ldr	r0, [pc, #72]	; (3b94 <nrf_gpio_pin_port_decode+0x78>)
    3b4a:	f240 2129 	movw	r1, #553	; 0x229
    3b4e:	f005 fa31 	bl	8fb4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3b52:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3b54:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b58:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3b5a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b5c:	d00d      	beq.n	3b7a <nrf_gpio_pin_port_decode+0x5e>
    3b5e:	2b01      	cmp	r3, #1
    3b60:	d011      	beq.n	3b86 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3b62:	490d      	ldr	r1, [pc, #52]	; (3b98 <nrf_gpio_pin_port_decode+0x7c>)
    3b64:	480a      	ldr	r0, [pc, #40]	; (3b90 <nrf_gpio_pin_port_decode+0x74>)
    3b66:	4a0b      	ldr	r2, [pc, #44]	; (3b94 <nrf_gpio_pin_port_decode+0x78>)
    3b68:	f240 232e 	movw	r3, #558	; 0x22e
    3b6c:	f005 fc11 	bl	9392 <printk>
    3b70:	4808      	ldr	r0, [pc, #32]	; (3b94 <nrf_gpio_pin_port_decode+0x78>)
    3b72:	f240 212e 	movw	r1, #558	; 0x22e
    3b76:	f005 fa1d 	bl	8fb4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3b7e:	bd10      	pop	{r4, pc}
    switch (port)
    3b80:	f04f 33ff 	mov.w	r3, #4294967295
    3b84:	e7d4      	b.n	3b30 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3b86:	4805      	ldr	r0, [pc, #20]	; (3b9c <nrf_gpio_pin_port_decode+0x80>)
    3b88:	e7f9      	b.n	3b7e <nrf_gpio_pin_port_decode+0x62>
    3b8a:	bf00      	nop
    3b8c:	0000aa32 	.word	0x0000aa32
    3b90:	0000a283 	.word	0x0000a283
    3b94:	0000a9ff 	.word	0x0000a9ff
    3b98:	0000ac19 	.word	0x0000ac19
    3b9c:	50000300 	.word	0x50000300

00003ba0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3ba2:	794b      	ldrb	r3, [r1, #5]
    3ba4:	2b01      	cmp	r3, #1
    3ba6:	d026      	beq.n	3bf6 <uarte_nrfx_configure+0x56>
    3ba8:	2b03      	cmp	r3, #3
    3baa:	d121      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3bac:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3bae:	798b      	ldrb	r3, [r1, #6]
    3bb0:	2b03      	cmp	r3, #3
    3bb2:	d11d      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3bb4:	79cc      	ldrb	r4, [r1, #7]
    3bb6:	b10c      	cbz	r4, 3bbc <uarte_nrfx_configure+0x1c>
    3bb8:	2c01      	cmp	r4, #1
    3bba:	d119      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3bbc:	790a      	ldrb	r2, [r1, #4]
    3bbe:	b112      	cbz	r2, 3bc6 <uarte_nrfx_configure+0x26>
    3bc0:	2a02      	cmp	r2, #2
    3bc2:	d115      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3bc4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3bc6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3bc8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3bca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3bce:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3bd0:	d065      	beq.n	3c9e <uarte_nrfx_configure+0xfe>
    3bd2:	d82d      	bhi.n	3c30 <uarte_nrfx_configure+0x90>
    3bd4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3bd8:	d064      	beq.n	3ca4 <uarte_nrfx_configure+0x104>
    3bda:	d816      	bhi.n	3c0a <uarte_nrfx_configure+0x6a>
    3bdc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3be0:	d062      	beq.n	3ca8 <uarte_nrfx_configure+0x108>
    3be2:	d80a      	bhi.n	3bfa <uarte_nrfx_configure+0x5a>
    3be4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3be8:	d061      	beq.n	3cae <uarte_nrfx_configure+0x10e>
    3bea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3bee:	d061      	beq.n	3cb4 <uarte_nrfx_configure+0x114>
    3bf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3bf4:	e052      	b.n	3c9c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3bf6:	2600      	movs	r6, #0
    3bf8:	e7d9      	b.n	3bae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3bfa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3bfe:	d05c      	beq.n	3cba <uarte_nrfx_configure+0x11a>
    3c00:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3c04:	d1f4      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3c06:	4b37      	ldr	r3, [pc, #220]	; (3ce4 <uarte_nrfx_configure+0x144>)
    3c08:	e03c      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c0a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3c0e:	d057      	beq.n	3cc0 <uarte_nrfx_configure+0x120>
    3c10:	d807      	bhi.n	3c22 <uarte_nrfx_configure+0x82>
    3c12:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3c16:	d055      	beq.n	3cc4 <uarte_nrfx_configure+0x124>
    3c18:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3c1c:	d1e8      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3c1e:	4b32      	ldr	r3, [pc, #200]	; (3ce8 <uarte_nrfx_configure+0x148>)
    3c20:	e030      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c22:	f647 2712 	movw	r7, #31250	; 0x7a12
    3c26:	42bb      	cmp	r3, r7
    3c28:	d1e2      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3c2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3c2e:	e029      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c30:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3c34:	d048      	beq.n	3cc8 <uarte_nrfx_configure+0x128>
    3c36:	d813      	bhi.n	3c60 <uarte_nrfx_configure+0xc0>
    3c38:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3c3c:	d047      	beq.n	3cce <uarte_nrfx_configure+0x12e>
    3c3e:	d809      	bhi.n	3c54 <uarte_nrfx_configure+0xb4>
    3c40:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3c44:	42bb      	cmp	r3, r7
    3c46:	d044      	beq.n	3cd2 <uarte_nrfx_configure+0x132>
    3c48:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c4c:	d1d0      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3c4e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3c52:	e017      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c54:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c58:	d1ca      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3c5a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3c5e:	e011      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c60:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3c64:	d038      	beq.n	3cd8 <uarte_nrfx_configure+0x138>
    3c66:	d808      	bhi.n	3c7a <uarte_nrfx_configure+0xda>
    3c68:	4f20      	ldr	r7, [pc, #128]	; (3cec <uarte_nrfx_configure+0x14c>)
    3c6a:	42bb      	cmp	r3, r7
    3c6c:	d037      	beq.n	3cde <uarte_nrfx_configure+0x13e>
    3c6e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3c72:	d1bd      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3c74:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3c78:	e004      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c7a:	4f1d      	ldr	r7, [pc, #116]	; (3cf0 <uarte_nrfx_configure+0x150>)
    3c7c:	42bb      	cmp	r3, r7
    3c7e:	d1b7      	bne.n	3bf0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3c84:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3c88:	6903      	ldr	r3, [r0, #16]
    3c8a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3c8c:	4334      	orrs	r4, r6
    3c8e:	4322      	orrs	r2, r4
    3c90:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3c92:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3c96:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3c9a:	2000      	movs	r0, #0
}
    3c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3c9e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3ca2:	e7ef      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3ca4:	4b13      	ldr	r3, [pc, #76]	; (3cf4 <uarte_nrfx_configure+0x154>)
    3ca6:	e7ed      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3ca8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3cac:	e7ea      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3cae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3cb2:	e7e7      	b.n	3c84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3cb4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3cb8:	e7e4      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3cba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3cbe:	e7e1      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3cc0:	4b0d      	ldr	r3, [pc, #52]	; (3cf8 <uarte_nrfx_configure+0x158>)
    3cc2:	e7df      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3cc4:	4b0d      	ldr	r3, [pc, #52]	; (3cfc <uarte_nrfx_configure+0x15c>)
    3cc6:	e7dd      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3cc8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3ccc:	e7da      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3cce:	4b0c      	ldr	r3, [pc, #48]	; (3d00 <uarte_nrfx_configure+0x160>)
    3cd0:	e7d8      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3cd2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3cd6:	e7d5      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3cd8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3cdc:	e7d2      	b.n	3c84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3cde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3ce2:	e7cf      	b.n	3c84 <uarte_nrfx_configure+0xe4>
    3ce4:	0013b000 	.word	0x0013b000
    3ce8:	004ea000 	.word	0x004ea000
    3cec:	0003d090 	.word	0x0003d090
    3cf0:	000f4240 	.word	0x000f4240
    3cf4:	00275000 	.word	0x00275000
    3cf8:	0075c000 	.word	0x0075c000
    3cfc:	003af000 	.word	0x003af000
    3d00:	013a9000 	.word	0x013a9000

00003d04 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d04:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3d06:	0953      	lsrs	r3, r2, #5
{
    3d08:	b510      	push	{r4, lr}
    3d0a:	4604      	mov	r4, r0
    switch (port)
    3d0c:	d02c      	beq.n	3d68 <nrf_gpio_pin_port_decode+0x64>
    3d0e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3d14:	bf18      	it	ne
    3d16:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3d18:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3d1c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d1e:	07db      	lsls	r3, r3, #31
    3d20:	d40b      	bmi.n	3d3a <nrf_gpio_pin_port_decode+0x36>
    3d22:	4914      	ldr	r1, [pc, #80]	; (3d74 <nrf_gpio_pin_port_decode+0x70>)
    3d24:	4814      	ldr	r0, [pc, #80]	; (3d78 <nrf_gpio_pin_port_decode+0x74>)
    3d26:	4a15      	ldr	r2, [pc, #84]	; (3d7c <nrf_gpio_pin_port_decode+0x78>)
    3d28:	f240 2329 	movw	r3, #553	; 0x229
    3d2c:	f005 fb31 	bl	9392 <printk>
    3d30:	4812      	ldr	r0, [pc, #72]	; (3d7c <nrf_gpio_pin_port_decode+0x78>)
    3d32:	f240 2129 	movw	r1, #553	; 0x229
    3d36:	f005 f93d 	bl	8fb4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3d3a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3d3c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d40:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3d42:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d44:	d00d      	beq.n	3d62 <nrf_gpio_pin_port_decode+0x5e>
    3d46:	2b01      	cmp	r3, #1
    3d48:	d011      	beq.n	3d6e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3d4a:	490d      	ldr	r1, [pc, #52]	; (3d80 <nrf_gpio_pin_port_decode+0x7c>)
    3d4c:	480a      	ldr	r0, [pc, #40]	; (3d78 <nrf_gpio_pin_port_decode+0x74>)
    3d4e:	4a0b      	ldr	r2, [pc, #44]	; (3d7c <nrf_gpio_pin_port_decode+0x78>)
    3d50:	f240 232e 	movw	r3, #558	; 0x22e
    3d54:	f005 fb1d 	bl	9392 <printk>
    3d58:	4808      	ldr	r0, [pc, #32]	; (3d7c <nrf_gpio_pin_port_decode+0x78>)
    3d5a:	f240 212e 	movw	r1, #558	; 0x22e
    3d5e:	f005 f929 	bl	8fb4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d62:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3d66:	bd10      	pop	{r4, pc}
    switch (port)
    3d68:	f04f 33ff 	mov.w	r3, #4294967295
    3d6c:	e7d4      	b.n	3d18 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3d6e:	4805      	ldr	r0, [pc, #20]	; (3d84 <nrf_gpio_pin_port_decode+0x80>)
    3d70:	e7f9      	b.n	3d66 <nrf_gpio_pin_port_decode+0x62>
    3d72:	bf00      	nop
    3d74:	0000aa32 	.word	0x0000aa32
    3d78:	0000a283 	.word	0x0000a283
    3d7c:	0000a9ff 	.word	0x0000a9ff
    3d80:	0000ac19 	.word	0x0000ac19
    3d84:	50000300 	.word	0x50000300

00003d88 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3d8a:	6906      	ldr	r6, [r0, #16]
{
    3d8c:	4605      	mov	r5, r0
    3d8e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3d90:	f005 feac 	bl	9aec <k_is_in_isr>
    3d94:	b910      	cbnz	r0, 3d9c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3d96:	4b2c      	ldr	r3, [pc, #176]	; (3e48 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3d98:	781b      	ldrb	r3, [r3, #0]
    3d9a:	b983      	cbnz	r3, 3dbe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3d9c:	f04f 0320 	mov.w	r3, #32
    3da0:	f3ef 8411 	mrs	r4, BASEPRI
    3da4:	f383 8812 	msr	BASEPRI_MAX, r3
    3da8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3dac:	4628      	mov	r0, r5
    3dae:	f005 fd20 	bl	97f2 <is_tx_ready>
    3db2:	bb28      	cbnz	r0, 3e00 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3db4:	f384 8811 	msr	BASEPRI, r4
    3db8:	f3bf 8f6f 	isb	sy
}
    3dbc:	e7ee      	b.n	3d9c <uarte_nrfx_poll_out+0x14>
{
    3dbe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3dc0:	4628      	mov	r0, r5
    3dc2:	f005 fd16 	bl	97f2 <is_tx_ready>
    3dc6:	b970      	cbnz	r0, 3de6 <uarte_nrfx_poll_out+0x5e>
    3dc8:	2001      	movs	r0, #1
    3dca:	f005 fd64 	bl	9896 <nrfx_busy_wait>
    3dce:	3c01      	subs	r4, #1
    3dd0:	d1f6      	bne.n	3dc0 <uarte_nrfx_poll_out+0x38>
    3dd2:	2100      	movs	r1, #0
    3dd4:	2021      	movs	r0, #33	; 0x21
    3dd6:	f003 fb27 	bl	7428 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3dda:	e7f0      	b.n	3dbe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3ddc:	f384 8811 	msr	BASEPRI, r4
    3de0:	f3bf 8f6f 	isb	sy
}
    3de4:	e7f5      	b.n	3dd2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3de6:	f04f 0320 	mov.w	r3, #32
    3dea:	f3ef 8411 	mrs	r4, BASEPRI
    3dee:	f383 8812 	msr	BASEPRI_MAX, r3
    3df2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3df6:	4628      	mov	r0, r5
    3df8:	f005 fcfb 	bl	97f2 <is_tx_ready>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d0ed      	beq.n	3ddc <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3e00:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3e04:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3e06:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3e08:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e0a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e0e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e12:	2200      	movs	r2, #0
    3e14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3e18:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3e1c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3e20:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3e24:	684a      	ldr	r2, [r1, #4]
    3e26:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3e28:	bf41      	itttt	mi
    3e2a:	2208      	movmi	r2, #8
    3e2c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3e30:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3e34:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e38:	2201      	movs	r2, #1
    3e3a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3e3c:	f384 8811 	msr	BASEPRI, r4
    3e40:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e46:	bf00      	nop
    3e48:	20000c7f 	.word	0x20000c7f

00003e4c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3e50:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3e54:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3e56:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3e5a:	2300      	movs	r3, #0
    3e5c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3e60:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3e62:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3e64:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3e66:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3e68:	1c58      	adds	r0, r3, #1
    3e6a:	d013      	beq.n	3e94 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e6c:	a801      	add	r0, sp, #4
    3e6e:	9301      	str	r3, [sp, #4]
    3e70:	f7ff ff48 	bl	3d04 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3e74:	9a01      	ldr	r2, [sp, #4]
    3e76:	2301      	movs	r3, #1
    3e78:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3e7a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3e7e:	68eb      	ldr	r3, [r5, #12]
    3e80:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e82:	a801      	add	r0, sp, #4
    3e84:	f7ff ff3e 	bl	3d04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3e88:	9b01      	ldr	r3, [sp, #4]
    3e8a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3e8e:	2203      	movs	r2, #3
    3e90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3e94:	692b      	ldr	r3, [r5, #16]
    3e96:	1c59      	adds	r1, r3, #1
    3e98:	d011      	beq.n	3ebe <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3e9a:	7f2a      	ldrb	r2, [r5, #28]
    3e9c:	9301      	str	r3, [sp, #4]
    3e9e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ea0:	a801      	add	r0, sp, #4
    3ea2:	bf14      	ite	ne
    3ea4:	f04f 0903 	movne.w	r9, #3
    3ea8:	f04f 0900 	moveq.w	r9, #0
    3eac:	f7ff ff2a 	bl	3d04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3eb0:	9b01      	ldr	r3, [sp, #4]
    3eb2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3eb6:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3eba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3ebe:	696b      	ldr	r3, [r5, #20]
    3ec0:	1c5a      	adds	r2, r3, #1
    3ec2:	d013      	beq.n	3eec <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ec4:	a801      	add	r0, sp, #4
    3ec6:	9301      	str	r3, [sp, #4]
    3ec8:	f7ff ff1c 	bl	3d04 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3ecc:	9a01      	ldr	r2, [sp, #4]
    3ece:	2301      	movs	r3, #1
    3ed0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3ed2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3ed6:	696b      	ldr	r3, [r5, #20]
    3ed8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3eda:	a801      	add	r0, sp, #4
    3edc:	f7ff ff12 	bl	3d04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ee0:	9b01      	ldr	r3, [sp, #4]
    3ee2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3ee6:	2203      	movs	r2, #3
    3ee8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3eec:	69ab      	ldr	r3, [r5, #24]
    3eee:	1c58      	adds	r0, r3, #1
    3ef0:	d011      	beq.n	3f16 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3ef2:	7f6a      	ldrb	r2, [r5, #29]
    3ef4:	9301      	str	r3, [sp, #4]
    3ef6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ef8:	a801      	add	r0, sp, #4
    3efa:	bf14      	ite	ne
    3efc:	f04f 0903 	movne.w	r9, #3
    3f00:	f04f 0900 	moveq.w	r9, #0
    3f04:	f7ff fefe 	bl	3d04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f08:	9b01      	ldr	r3, [sp, #4]
    3f0a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f0e:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3f12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3f16:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3f1a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3f1c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3f20:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3f24:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3f28:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3f2c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3f2e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3f32:	3104      	adds	r1, #4
    3f34:	4630      	mov	r0, r6
    3f36:	f7ff fe33 	bl	3ba0 <uarte_nrfx_configure>
	if (err) {
    3f3a:	4605      	mov	r5, r0
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d146      	bne.n	3fce <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3f40:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3f44:	0799      	lsls	r1, r3, #30
    3f46:	d519      	bpl.n	3f7c <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3f48:	f107 0012 	add.w	r0, r7, #18
    3f4c:	f001 f820 	bl	4f90 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3f50:	4b22      	ldr	r3, [pc, #136]	; (3fdc <uarte_instance_init.isra.0+0x190>)
    3f52:	4298      	cmp	r0, r3
    3f54:	d13f      	bne.n	3fd6 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3f56:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3f58:	00c3      	lsls	r3, r0, #3
    3f5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f5e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3f62:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3f66:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3f6a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3f6e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3f72:	4a1b      	ldr	r2, [pc, #108]	; (3fe0 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3f74:	2301      	movs	r3, #1
    3f76:	4083      	lsls	r3, r0
    3f78:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3f7c:	2308      	movs	r3, #8
    3f7e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3f82:	f898 3008 	ldrb.w	r3, [r8, #8]
    3f86:	b95b      	cbnz	r3, 3fa0 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f88:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3f8c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3f90:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3f94:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3f98:	2301      	movs	r3, #1
    3f9a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f9e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3fa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3fa4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3fa6:	bf5c      	itt	pl
    3fa8:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3fac:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3fb0:	06db      	lsls	r3, r3, #27
    3fb2:	bf44      	itt	mi
    3fb4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3fb8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3fbc:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    3fbe:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3fc0:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3fc4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fc8:	2301      	movs	r3, #1
    3fca:	60a3      	str	r3, [r4, #8]
    3fcc:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3fce:	4628      	mov	r0, r5
    3fd0:	b003      	add	sp, #12
    3fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3fd6:	f06f 0504 	mvn.w	r5, #4
    3fda:	e7f8      	b.n	3fce <uarte_instance_init.isra.0+0x182>
    3fdc:	0bad0000 	.word	0x0bad0000
    3fe0:	4001f000 	.word	0x4001f000

00003fe4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3fe4:	4919      	ldr	r1, [pc, #100]	; (404c <sys_clock_timeout_handler+0x68>)
{
    3fe6:	b570      	push	{r4, r5, r6, lr}
    3fe8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3fea:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3fee:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3ff0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3ff4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3ff8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3ffa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3ffe:	f04f 0500 	mov.w	r5, #0
    4002:	d20a      	bcs.n	401a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4004:	4b12      	ldr	r3, [pc, #72]	; (4050 <sys_clock_timeout_handler+0x6c>)
    4006:	6819      	ldr	r1, [r3, #0]
    4008:	060a      	lsls	r2, r1, #24
    400a:	0a0b      	lsrs	r3, r1, #8
    400c:	1992      	adds	r2, r2, r6
    400e:	4911      	ldr	r1, [pc, #68]	; (4054 <sys_clock_timeout_handler+0x70>)
    4010:	f143 0300 	adc.w	r3, r3, #0
    4014:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4018:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    401a:	f003 ffcb 	bl	7fb4 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    401e:	00a3      	lsls	r3, r4, #2
    4020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4024:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4028:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    402c:	42b2      	cmp	r2, r6
    402e:	d10b      	bne.n	4048 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4030:	b91d      	cbnz	r5, 403a <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    4032:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4036:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    403a:	4b07      	ldr	r3, [pc, #28]	; (4058 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    403c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4040:	fa00 f404 	lsl.w	r4, r0, r4
    4044:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4048:	bd70      	pop	{r4, r5, r6, pc}
    404a:	bf00      	nop
    404c:	20000408 	.word	0x20000408
    4050:	20000bf0 	.word	0x20000bf0
    4054:	200003f0 	.word	0x200003f0
    4058:	40011000 	.word	0x40011000

0000405c <compare_int_lock>:
{
    405c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    405e:	2301      	movs	r3, #1
    4060:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4062:	4a11      	ldr	r2, [pc, #68]	; (40a8 <compare_int_lock+0x4c>)
    4064:	f3bf 8f5b 	dmb	ish
    4068:	43dc      	mvns	r4, r3
    406a:	e852 1f00 	ldrex	r1, [r2]
    406e:	ea01 0c04 	and.w	ip, r1, r4
    4072:	e842 ce00 	strex	lr, ip, [r2]
    4076:	f1be 0f00 	cmp.w	lr, #0
    407a:	d1f6      	bne.n	406a <compare_int_lock+0xe>
    407c:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4080:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4084:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4088:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    408c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4090:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4094:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4098:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    409c:	420b      	tst	r3, r1
}
    409e:	bf14      	ite	ne
    40a0:	2001      	movne	r0, #1
    40a2:	2000      	moveq	r0, #0
    40a4:	bd10      	pop	{r4, pc}
    40a6:	bf00      	nop
    40a8:	20000bec 	.word	0x20000bec

000040ac <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    40ac:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    40ae:	4a12      	ldr	r2, [pc, #72]	; (40f8 <compare_int_unlock.part.0+0x4c>)
    40b0:	f3bf 8f5b 	dmb	ish
    40b4:	4083      	lsls	r3, r0
    40b6:	e852 1f00 	ldrex	r1, [r2]
    40ba:	4319      	orrs	r1, r3
    40bc:	e842 1c00 	strex	ip, r1, [r2]
    40c0:	f1bc 0f00 	cmp.w	ip, #0
    40c4:	d1f7      	bne.n	40b6 <compare_int_unlock.part.0+0xa>
    40c6:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    40ca:	4a0c      	ldr	r2, [pc, #48]	; (40fc <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    40cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    40d0:	4083      	lsls	r3, r0
    40d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    40d6:	4b0a      	ldr	r3, [pc, #40]	; (4100 <compare_int_unlock.part.0+0x54>)
    40d8:	f3bf 8f5b 	dmb	ish
    40dc:	681b      	ldr	r3, [r3, #0]
    40de:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    40e2:	fa23 f000 	lsr.w	r0, r3, r0
    40e6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    40e8:	bf42      	ittt	mi
    40ea:	4b06      	ldrmi	r3, [pc, #24]	; (4104 <compare_int_unlock.part.0+0x58>)
    40ec:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    40f0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	20000bec 	.word	0x20000bec
    40fc:	40011000 	.word	0x40011000
    4100:	20000be8 	.word	0x20000be8
    4104:	e000e100 	.word	0xe000e100

00004108 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4108:	4b0d      	ldr	r3, [pc, #52]	; (4140 <z_nrf_rtc_timer_read+0x38>)
    410a:	681b      	ldr	r3, [r3, #0]
    410c:	0a19      	lsrs	r1, r3, #8
    410e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4110:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4114:	4b0b      	ldr	r3, [pc, #44]	; (4144 <z_nrf_rtc_timer_read+0x3c>)
    4116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    411a:	18c0      	adds	r0, r0, r3
    411c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4124:	d20a      	bcs.n	413c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4126:	4b08      	ldr	r3, [pc, #32]	; (4148 <z_nrf_rtc_timer_read+0x40>)
    4128:	e9d3 2300 	ldrd	r2, r3, [r3]
    412c:	4299      	cmp	r1, r3
    412e:	bf08      	it	eq
    4130:	4290      	cmpeq	r0, r2
    4132:	d203      	bcs.n	413c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4134:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4138:	f141 0100 	adc.w	r1, r1, #0
}
    413c:	4770      	bx	lr
    413e:	bf00      	nop
    4140:	20000bf0 	.word	0x20000bf0
    4144:	40011000 	.word	0x40011000
    4148:	200003f0 	.word	0x200003f0

0000414c <compare_set>:
{
    414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4150:	b085      	sub	sp, #20
    4152:	4616      	mov	r6, r2
    4154:	461f      	mov	r7, r3
    4156:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4158:	f7ff ff80 	bl	405c <compare_int_lock>
    415c:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    415e:	f7ff ffd3 	bl	4108 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4162:	42b9      	cmp	r1, r7
    4164:	bf08      	it	eq
    4166:	42b0      	cmpeq	r0, r6
    4168:	d27f      	bcs.n	426a <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    416a:	ebb6 0800 	subs.w	r8, r6, r0
    416e:	eb67 0901 	sbc.w	r9, r7, r1
    4172:	2300      	movs	r3, #0
    4174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4178:	454b      	cmp	r3, r9
    417a:	bf08      	it	eq
    417c:	4542      	cmpeq	r2, r8
    417e:	f0c0 8085 	bcc.w	428c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    4182:	4b44      	ldr	r3, [pc, #272]	; (4294 <compare_set+0x148>)
    4184:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4188:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    418c:	429f      	cmp	r7, r3
    418e:	bf08      	it	eq
    4190:	4296      	cmpeq	r6, r2
    4192:	d054      	beq.n	423e <compare_set+0xf2>
    4194:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4198:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    419c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    41a0:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41a4:	fa0b f205 	lsl.w	r2, fp, r5
    41a8:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    41ac:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41b0:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41b4:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    41b6:	4a38      	ldr	r2, [pc, #224]	; (4298 <compare_set+0x14c>)
    return p_reg->CC[ch];
    41b8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    41bc:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41c0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    41c4:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    41c8:	461c      	mov	r4, r3
    41ca:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    41cc:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    41d0:	eba0 000a 	sub.w	r0, r0, sl
    41d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    41d8:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    41dc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    41de:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    41e2:	d105      	bne.n	41f0 <compare_set+0xa4>
    41e4:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    41e6:	2013      	movs	r0, #19
    41e8:	f005 fc91 	bl	9b0e <z_impl_k_busy_wait>
    41ec:	4a2a      	ldr	r2, [pc, #168]	; (4298 <compare_set+0x14c>)
    41ee:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    41f0:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    41f2:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    41f6:	eba4 000c 	sub.w	r0, r4, ip
    41fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    41fe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4202:	bf88      	it	hi
    4204:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4206:	2000      	movs	r0, #0
    4208:	f8c8 0000 	str.w	r0, [r8]
    420c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    4210:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4214:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4218:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    421c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4220:	4582      	cmp	sl, r0
    4222:	d006      	beq.n	4232 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    4224:	1a20      	subs	r0, r4, r0
    4226:	3802      	subs	r0, #2
    4228:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    422c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4230:	d819      	bhi.n	4266 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    4232:	1ae4      	subs	r4, r4, r3
    4234:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4238:	1932      	adds	r2, r6, r4
    423a:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    423e:	4c15      	ldr	r4, [pc, #84]	; (4294 <compare_set+0x148>)
    4240:	0129      	lsls	r1, r5, #4
    4242:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4246:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    424a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    424c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    424e:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    4250:	6043      	str	r3, [r0, #4]
	return ret;
    4252:	2400      	movs	r4, #0
	if (key) {
    4254:	9b01      	ldr	r3, [sp, #4]
    4256:	b113      	cbz	r3, 425e <compare_set+0x112>
    4258:	4628      	mov	r0, r5
    425a:	f7ff ff27 	bl	40ac <compare_int_unlock.part.0>
}
    425e:	4620      	mov	r0, r4
    4260:	b005      	add	sp, #20
    4262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4266:	4620      	mov	r0, r4
    4268:	e7b0      	b.n	41cc <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    426a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    426c:	4a0b      	ldr	r2, [pc, #44]	; (429c <compare_set+0x150>)
    426e:	f3bf 8f5b 	dmb	ish
    4272:	40ab      	lsls	r3, r5
    4274:	e852 1f00 	ldrex	r1, [r2]
    4278:	4319      	orrs	r1, r3
    427a:	e842 1000 	strex	r0, r1, [r2]
    427e:	2800      	cmp	r0, #0
    4280:	d1f8      	bne.n	4274 <compare_set+0x128>
    4282:	f3bf 8f5b 	dmb	ish
    4286:	4632      	mov	r2, r6
    4288:	463b      	mov	r3, r7
    428a:	e7d8      	b.n	423e <compare_set+0xf2>
			return -EINVAL;
    428c:	f06f 0415 	mvn.w	r4, #21
    4290:	e7e0      	b.n	4254 <compare_set+0x108>
    4292:	bf00      	nop
    4294:	200003f8 	.word	0x200003f8
    4298:	40011000 	.word	0x40011000
    429c:	20000be8 	.word	0x20000be8

000042a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    42a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    42a2:	4b19      	ldr	r3, [pc, #100]	; (4308 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    42a4:	4d19      	ldr	r5, [pc, #100]	; (430c <sys_clock_driver_init+0x6c>)
    42a6:	2400      	movs	r4, #0
    42a8:	f04f 30ff 	mov.w	r0, #4294967295
    42ac:	f04f 31ff 	mov.w	r1, #4294967295
    42b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    42b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    42b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42c0:	4b13      	ldr	r3, [pc, #76]	; (4310 <sys_clock_driver_init+0x70>)
    42c2:	2602      	movs	r6, #2
    42c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    42c8:	2101      	movs	r1, #1
    42ca:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    42ce:	2011      	movs	r0, #17
    42d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    42d4:	4622      	mov	r2, r4
    42d6:	f7fe f965 	bl	25a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    42da:	2011      	movs	r0, #17
    42dc:	f7fe f944 	bl	2568 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    42e0:	4a0c      	ldr	r2, [pc, #48]	; (4314 <sys_clock_driver_init+0x74>)
    42e2:	2301      	movs	r3, #1
    42e4:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    42e6:	4a0c      	ldr	r2, [pc, #48]	; (4318 <sys_clock_driver_init+0x78>)
    42e8:	602b      	str	r3, [r5, #0]
    42ea:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    42ec:	4b0b      	ldr	r3, [pc, #44]	; (431c <sys_clock_driver_init+0x7c>)
    42ee:	4a0c      	ldr	r2, [pc, #48]	; (4320 <sys_clock_driver_init+0x80>)
    42f0:	9300      	str	r3, [sp, #0]
    42f2:	9401      	str	r4, [sp, #4]
    42f4:	2300      	movs	r3, #0
    42f6:	4620      	mov	r0, r4
    42f8:	f7ff ff28 	bl	414c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    42fc:	4630      	mov	r0, r6
    42fe:	f7ff f907 	bl	3510 <z_nrf_clock_control_lf_on>

	return 0;
}
    4302:	4620      	mov	r0, r4
    4304:	b002      	add	sp, #8
    4306:	bd70      	pop	{r4, r5, r6, pc}
    4308:	200003f8 	.word	0x200003f8
    430c:	40011000 	.word	0x40011000
    4310:	e000e100 	.word	0xe000e100
    4314:	40011008 	.word	0x40011008
    4318:	20000bec 	.word	0x20000bec
    431c:	00003fe5 	.word	0x00003fe5
    4320:	007fffff 	.word	0x007fffff

00004324 <rtc_nrf_isr>:
{
    4324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4328:	4c34      	ldr	r4, [pc, #208]	; (43fc <rtc_nrf_isr+0xd8>)
    432a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    432e:	079a      	lsls	r2, r3, #30
    4330:	d509      	bpl.n	4346 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4332:	4b33      	ldr	r3, [pc, #204]	; (4400 <rtc_nrf_isr+0xdc>)
    4334:	681a      	ldr	r2, [r3, #0]
    4336:	b132      	cbz	r2, 4346 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4338:	2200      	movs	r2, #0
    433a:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    433c:	4a31      	ldr	r2, [pc, #196]	; (4404 <rtc_nrf_isr+0xe0>)
    433e:	681b      	ldr	r3, [r3, #0]
    4340:	6813      	ldr	r3, [r2, #0]
    4342:	3301      	adds	r3, #1
    4344:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4346:	f04f 0320 	mov.w	r3, #32
    434a:	f3ef 8211 	mrs	r2, BASEPRI
    434e:	f383 8812 	msr	BASEPRI_MAX, r3
    4352:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4356:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    435a:	03db      	lsls	r3, r3, #15
    435c:	d512      	bpl.n	4384 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    435e:	f3bf 8f5b 	dmb	ish
    4362:	4b29      	ldr	r3, [pc, #164]	; (4408 <rtc_nrf_isr+0xe4>)
    4364:	e853 1f00 	ldrex	r1, [r3]
    4368:	f021 0001 	bic.w	r0, r1, #1
    436c:	e843 0600 	strex	r6, r0, [r3]
    4370:	2e00      	cmp	r6, #0
    4372:	d1f7      	bne.n	4364 <rtc_nrf_isr+0x40>
    4374:	f3bf 8f5b 	dmb	ish
    4378:	4b24      	ldr	r3, [pc, #144]	; (440c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    437a:	2900      	cmp	r1, #0
    437c:	d136      	bne.n	43ec <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    437e:	6819      	ldr	r1, [r3, #0]
		if (result) {
    4380:	2900      	cmp	r1, #0
    4382:	d133      	bne.n	43ec <rtc_nrf_isr+0xc8>
{
    4384:	2300      	movs	r3, #0
	__asm__ volatile(
    4386:	f382 8811 	msr	BASEPRI, r2
    438a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    438e:	b353      	cbz	r3, 43e6 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    4390:	f7ff feba 	bl	4108 <z_nrf_rtc_timer_read>
    4394:	4606      	mov	r6, r0
	__asm__ volatile(
    4396:	f04f 0320 	mov.w	r3, #32
    439a:	f3ef 8011 	mrs	r0, BASEPRI
    439e:	f383 8812 	msr	BASEPRI_MAX, r3
    43a2:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    43a6:	4b1a      	ldr	r3, [pc, #104]	; (4410 <rtc_nrf_isr+0xec>)
    43a8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    43ac:	4549      	cmp	r1, r9
    43ae:	bf08      	it	eq
    43b0:	4546      	cmpeq	r6, r8
    43b2:	f04f 0200 	mov.w	r2, #0
    43b6:	d31e      	bcc.n	43f6 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    43b8:	f04f 36ff 	mov.w	r6, #4294967295
    43bc:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    43c0:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    43c4:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    43c8:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    43ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43ce:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    43d2:	f380 8811 	msr	BASEPRI, r0
    43d6:	f3bf 8f6f 	isb	sy
		if (handler) {
    43da:	b121      	cbz	r1, 43e6 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    43dc:	9500      	str	r5, [sp, #0]
    43de:	4642      	mov	r2, r8
    43e0:	464b      	mov	r3, r9
    43e2:	2000      	movs	r0, #0
    43e4:	4788      	blx	r1
}
    43e6:	b003      	add	sp, #12
    43e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    43ec:	2100      	movs	r1, #0
    43ee:	6019      	str	r1, [r3, #0]
    43f0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    43f2:	2301      	movs	r3, #1
}
    43f4:	e7c7      	b.n	4386 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    43f6:	4611      	mov	r1, r2
    43f8:	e7eb      	b.n	43d2 <rtc_nrf_isr+0xae>
    43fa:	bf00      	nop
    43fc:	40011000 	.word	0x40011000
    4400:	40011104 	.word	0x40011104
    4404:	20000bf0 	.word	0x20000bf0
    4408:	20000be8 	.word	0x20000be8
    440c:	40011140 	.word	0x40011140
    4410:	200003f8 	.word	0x200003f8

00004414 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4414:	4b14      	ldr	r3, [pc, #80]	; (4468 <sys_clock_set_timeout+0x54>)
{
    4416:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4418:	f1b0 3fff 	cmp.w	r0, #4294967295
    441c:	bf08      	it	eq
    441e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4420:	1e44      	subs	r4, r0, #1
    4422:	2c00      	cmp	r4, #0
    4424:	dd1e      	ble.n	4464 <sys_clock_set_timeout+0x50>
    4426:	429c      	cmp	r4, r3
    4428:	bfa8      	it	ge
    442a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    442c:	f7ff fe6c 	bl	4108 <z_nrf_rtc_timer_read>
    4430:	4b0e      	ldr	r3, [pc, #56]	; (446c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4432:	490f      	ldr	r1, [pc, #60]	; (4470 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4434:	e9d3 2300 	ldrd	r2, r3, [r3]
    4438:	1a80      	subs	r0, r0, r2
		ticks = 0;
    443a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    443e:	bf28      	it	cs
    4440:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4442:	3001      	adds	r0, #1
    4444:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4446:	4808      	ldr	r0, [pc, #32]	; (4468 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4448:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    444a:	4284      	cmp	r4, r0
    444c:	bf28      	it	cs
    444e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4450:	1912      	adds	r2, r2, r4
    4452:	f04f 0000 	mov.w	r0, #0
    4456:	9001      	str	r0, [sp, #4]
    4458:	f143 0300 	adc.w	r3, r3, #0
    445c:	f7ff fe76 	bl	414c <compare_set>
}
    4460:	b002      	add	sp, #8
    4462:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4464:	2400      	movs	r4, #0
    4466:	e7e1      	b.n	442c <sys_clock_set_timeout+0x18>
    4468:	007fffff 	.word	0x007fffff
    446c:	20000408 	.word	0x20000408
    4470:	00003fe5 	.word	0x00003fe5

00004474 <sys_clock_elapsed>:
{
    4474:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4476:	f7ff fe47 	bl	4108 <z_nrf_rtc_timer_read>
    447a:	4b02      	ldr	r3, [pc, #8]	; (4484 <sys_clock_elapsed+0x10>)
    447c:	681b      	ldr	r3, [r3, #0]
}
    447e:	1ac0      	subs	r0, r0, r3
    4480:	bd08      	pop	{r3, pc}
    4482:	bf00      	nop
    4484:	20000408 	.word	0x20000408

00004488 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    4488:	b508      	push	{r3, lr}
    switch (domain)
    448a:	b178      	cbz	r0, 44ac <nrf_clock_is_running.constprop.0+0x24>
    448c:	2801      	cmp	r0, #1
    448e:	d01c      	beq.n	44ca <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    4490:	4a14      	ldr	r2, [pc, #80]	; (44e4 <nrf_clock_is_running.constprop.0+0x5c>)
    4492:	4915      	ldr	r1, [pc, #84]	; (44e8 <nrf_clock_is_running.constprop.0+0x60>)
    4494:	4815      	ldr	r0, [pc, #84]	; (44ec <nrf_clock_is_running.constprop.0+0x64>)
    4496:	f44f 734f 	mov.w	r3, #828	; 0x33c
    449a:	f004 ff7a 	bl	9392 <printk>
    449e:	4811      	ldr	r0, [pc, #68]	; (44e4 <nrf_clock_is_running.constprop.0+0x5c>)
    44a0:	f44f 714f 	mov.w	r1, #828	; 0x33c
    44a4:	f004 fd86 	bl	8fb4 <assert_post_action>
            return false;
    44a8:	2000      	movs	r0, #0
    44aa:	e00d      	b.n	44c8 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    44ac:	b131      	cbz	r1, 44bc <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    44ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    44b6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    44ba:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    44bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44c0:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    44c4:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    44c8:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    44ca:	b131      	cbz	r1, 44da <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    44cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    44d4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    44d8:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    44da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44de:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    44e2:	e7ef      	b.n	44c4 <nrf_clock_is_running.constprop.0+0x3c>
    44e4:	0000aa71 	.word	0x0000aa71
    44e8:	0000ac19 	.word	0x0000ac19
    44ec:	0000a283 	.word	0x0000a283

000044f0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    44f0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    44f2:	4604      	mov	r4, r0
    44f4:	b948      	cbnz	r0, 450a <nrfx_clock_init+0x1a>
    44f6:	490a      	ldr	r1, [pc, #40]	; (4520 <nrfx_clock_init+0x30>)
    44f8:	480a      	ldr	r0, [pc, #40]	; (4524 <nrfx_clock_init+0x34>)
    44fa:	4a0b      	ldr	r2, [pc, #44]	; (4528 <nrfx_clock_init+0x38>)
    44fc:	23bd      	movs	r3, #189	; 0xbd
    44fe:	f004 ff48 	bl	9392 <printk>
    4502:	4809      	ldr	r0, [pc, #36]	; (4528 <nrfx_clock_init+0x38>)
    4504:	21bd      	movs	r1, #189	; 0xbd
    4506:	f004 fd55 	bl	8fb4 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    450a:	4b08      	ldr	r3, [pc, #32]	; (452c <nrfx_clock_init+0x3c>)
    450c:	791a      	ldrb	r2, [r3, #4]
    450e:	b922      	cbnz	r2, 451a <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4510:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4512:	4807      	ldr	r0, [pc, #28]	; (4530 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    4514:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4516:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4518:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    451a:	4806      	ldr	r0, [pc, #24]	; (4534 <nrfx_clock_init+0x44>)
    return err_code;
    451c:	e7fc      	b.n	4518 <nrfx_clock_init+0x28>
    451e:	bf00      	nop
    4520:	0000aae2 	.word	0x0000aae2
    4524:	0000a283 	.word	0x0000a283
    4528:	0000aaa5 	.word	0x0000aaa5
    452c:	20000bf4 	.word	0x20000bf4
    4530:	0bad0000 	.word	0x0bad0000
    4534:	0bad000c 	.word	0x0bad000c

00004538 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4538:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    453a:	4b0b      	ldr	r3, [pc, #44]	; (4568 <nrfx_clock_enable+0x30>)
    453c:	791b      	ldrb	r3, [r3, #4]
    453e:	b94b      	cbnz	r3, 4554 <nrfx_clock_enable+0x1c>
    4540:	490a      	ldr	r1, [pc, #40]	; (456c <nrfx_clock_enable+0x34>)
    4542:	480b      	ldr	r0, [pc, #44]	; (4570 <nrfx_clock_enable+0x38>)
    4544:	4a0b      	ldr	r2, [pc, #44]	; (4574 <nrfx_clock_enable+0x3c>)
    4546:	23d6      	movs	r3, #214	; 0xd6
    4548:	f004 ff23 	bl	9392 <printk>
    454c:	4809      	ldr	r0, [pc, #36]	; (4574 <nrfx_clock_enable+0x3c>)
    454e:	21d6      	movs	r1, #214	; 0xd6
    4550:	f004 fd30 	bl	8fb4 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4554:	2000      	movs	r0, #0
    4556:	f7fe f817 	bl	2588 <arch_irq_is_enabled>
    455a:	b918      	cbnz	r0, 4564 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    455c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4560:	f7fe b802 	b.w	2568 <arch_irq_enable>
    4564:	bd08      	pop	{r3, pc}
    4566:	bf00      	nop
    4568:	20000bf4 	.word	0x20000bf4
    456c:	0000aaf0 	.word	0x0000aaf0
    4570:	0000a283 	.word	0x0000a283
    4574:	0000aaa5 	.word	0x0000aaa5

00004578 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4578:	4b22      	ldr	r3, [pc, #136]	; (4604 <nrfx_clock_start+0x8c>)
    457a:	791b      	ldrb	r3, [r3, #4]
{
    457c:	b513      	push	{r0, r1, r4, lr}
    457e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4580:	b95b      	cbnz	r3, 459a <nrfx_clock_start+0x22>
    4582:	4921      	ldr	r1, [pc, #132]	; (4608 <nrfx_clock_start+0x90>)
    4584:	4821      	ldr	r0, [pc, #132]	; (460c <nrfx_clock_start+0x94>)
    4586:	4a22      	ldr	r2, [pc, #136]	; (4610 <nrfx_clock_start+0x98>)
    4588:	f44f 7389 	mov.w	r3, #274	; 0x112
    458c:	f004 ff01 	bl	9392 <printk>
    4590:	481f      	ldr	r0, [pc, #124]	; (4610 <nrfx_clock_start+0x98>)
    4592:	f44f 7189 	mov.w	r1, #274	; 0x112
    4596:	f004 fd0d 	bl	8fb4 <assert_post_action>
    switch (domain)
    459a:	b174      	cbz	r4, 45ba <nrfx_clock_start+0x42>
    459c:	2c01      	cmp	r4, #1
    459e:	d027      	beq.n	45f0 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    45a0:	4a1b      	ldr	r2, [pc, #108]	; (4610 <nrfx_clock_start+0x98>)
    45a2:	491c      	ldr	r1, [pc, #112]	; (4614 <nrfx_clock_start+0x9c>)
    45a4:	4819      	ldr	r0, [pc, #100]	; (460c <nrfx_clock_start+0x94>)
    45a6:	f44f 73a2 	mov.w	r3, #324	; 0x144
    45aa:	f004 fef2 	bl	9392 <printk>
    45ae:	4818      	ldr	r0, [pc, #96]	; (4610 <nrfx_clock_start+0x98>)
    45b0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    45b4:	f004 fcfe 	bl	8fb4 <assert_post_action>
            break;
    }
}
    45b8:	e016      	b.n	45e8 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    45ba:	a901      	add	r1, sp, #4
    45bc:	4620      	mov	r0, r4
    45be:	f7ff ff63 	bl	4488 <nrf_clock_is_running.constprop.0>
    45c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45c6:	b188      	cbz	r0, 45ec <nrfx_clock_start+0x74>
    45c8:	9a01      	ldr	r2, [sp, #4]
    45ca:	2a01      	cmp	r2, #1
    45cc:	d10e      	bne.n	45ec <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    45ce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45d2:	4b11      	ldr	r3, [pc, #68]	; (4618 <nrfx_clock_start+0xa0>)
    45d4:	2200      	movs	r2, #0
    45d6:	601a      	str	r2, [r3, #0]
    45d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    45da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45de:	2202      	movs	r2, #2
    45e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45e4:	2201      	movs	r2, #1
    45e6:	609a      	str	r2, [r3, #8]
}
    45e8:	b002      	add	sp, #8
    45ea:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    45ec:	2200      	movs	r2, #0
    45ee:	e7ee      	b.n	45ce <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45f0:	4b0a      	ldr	r3, [pc, #40]	; (461c <nrfx_clock_start+0xa4>)
    45f2:	2200      	movs	r2, #0
    45f4:	601a      	str	r2, [r3, #0]
    45f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    45f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45fc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4600:	601c      	str	r4, [r3, #0]
}
    4602:	e7f1      	b.n	45e8 <nrfx_clock_start+0x70>
    4604:	20000bf4 	.word	0x20000bf4
    4608:	0000aaf0 	.word	0x0000aaf0
    460c:	0000a283 	.word	0x0000a283
    4610:	0000aaa5 	.word	0x0000aaa5
    4614:	0000ac19 	.word	0x0000ac19
    4618:	40000104 	.word	0x40000104
    461c:	40000100 	.word	0x40000100

00004620 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4620:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4622:	4d2f      	ldr	r5, [pc, #188]	; (46e0 <nrfx_clock_stop+0xc0>)
    4624:	792a      	ldrb	r2, [r5, #4]
{
    4626:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4628:	b95a      	cbnz	r2, 4642 <nrfx_clock_stop+0x22>
    462a:	492e      	ldr	r1, [pc, #184]	; (46e4 <nrfx_clock_stop+0xc4>)
    462c:	482e      	ldr	r0, [pc, #184]	; (46e8 <nrfx_clock_stop+0xc8>)
    462e:	4a2f      	ldr	r2, [pc, #188]	; (46ec <nrfx_clock_stop+0xcc>)
    4630:	f240 134b 	movw	r3, #331	; 0x14b
    4634:	f004 fead 	bl	9392 <printk>
    4638:	482c      	ldr	r0, [pc, #176]	; (46ec <nrfx_clock_stop+0xcc>)
    463a:	f240 114b 	movw	r1, #331	; 0x14b
    463e:	f004 fcb9 	bl	8fb4 <assert_post_action>
    switch (domain)
    4642:	b17c      	cbz	r4, 4664 <nrfx_clock_stop+0x44>
    4644:	2c01      	cmp	r4, #1
    4646:	d028      	beq.n	469a <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4648:	4929      	ldr	r1, [pc, #164]	; (46f0 <nrfx_clock_stop+0xd0>)
    464a:	4827      	ldr	r0, [pc, #156]	; (46e8 <nrfx_clock_stop+0xc8>)
    464c:	4a27      	ldr	r2, [pc, #156]	; (46ec <nrfx_clock_stop+0xcc>)
    464e:	f240 1367 	movw	r3, #359	; 0x167
    4652:	f004 fe9e 	bl	9392 <printk>
    4656:	4825      	ldr	r0, [pc, #148]	; (46ec <nrfx_clock_stop+0xcc>)
    4658:	f240 1167 	movw	r1, #359	; 0x167
    465c:	f004 fcaa 	bl	8fb4 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4660:	b003      	add	sp, #12
    4662:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4668:	2202      	movs	r2, #2
    466a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    466e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    4672:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4676:	2201      	movs	r2, #1
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	4b1e      	ldr	r3, [pc, #120]	; (46f4 <nrfx_clock_stop+0xd4>)
    467c:	f242 7410 	movw	r4, #10000	; 0x2710
    4680:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4682:	2100      	movs	r1, #0
    4684:	4608      	mov	r0, r1
    4686:	f7ff feff 	bl	4488 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    468a:	2800      	cmp	r0, #0
    468c:	d0e8      	beq.n	4660 <nrfx_clock_stop+0x40>
    468e:	2001      	movs	r0, #1
    4690:	f005 f901 	bl	9896 <nrfx_busy_wait>
    4694:	3c01      	subs	r4, #1
    4696:	d1f4      	bne.n	4682 <nrfx_clock_stop+0x62>
    4698:	e7e2      	b.n	4660 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    469a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    469e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    46a0:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    46a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    46ac:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46ae:	4b12      	ldr	r3, [pc, #72]	; (46f8 <nrfx_clock_stop+0xd8>)
    46b0:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    46b2:	f88d 4007 	strb.w	r4, [sp, #7]
    46b6:	f242 7410 	movw	r4, #10000	; 0x2710
    46ba:	f10d 0107 	add.w	r1, sp, #7
    46be:	2001      	movs	r0, #1
    46c0:	f7ff fee2 	bl	4488 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    46c4:	b910      	cbnz	r0, 46cc <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    46c6:	2300      	movs	r3, #0
    46c8:	716b      	strb	r3, [r5, #5]
    46ca:	e7c9      	b.n	4660 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    46cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    46d0:	2801      	cmp	r0, #1
    46d2:	d1f8      	bne.n	46c6 <nrfx_clock_stop+0xa6>
    46d4:	f005 f8df 	bl	9896 <nrfx_busy_wait>
    46d8:	3c01      	subs	r4, #1
    46da:	d1ee      	bne.n	46ba <nrfx_clock_stop+0x9a>
    46dc:	e7f3      	b.n	46c6 <nrfx_clock_stop+0xa6>
    46de:	bf00      	nop
    46e0:	20000bf4 	.word	0x20000bf4
    46e4:	0000aaf0 	.word	0x0000aaf0
    46e8:	0000a283 	.word	0x0000a283
    46ec:	0000aaa5 	.word	0x0000aaa5
    46f0:	0000ac19 	.word	0x0000ac19
    46f4:	4000000c 	.word	0x4000000c
    46f8:	40000004 	.word	0x40000004

000046fc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    46fc:	4b16      	ldr	r3, [pc, #88]	; (4758 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    46fe:	b507      	push	{r0, r1, r2, lr}
    4700:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4702:	b16a      	cbz	r2, 4720 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4704:	2200      	movs	r2, #0
    4706:	601a      	str	r2, [r3, #0]
    4708:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    470a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    470e:	2201      	movs	r2, #1
    4710:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4714:	4b11      	ldr	r3, [pc, #68]	; (475c <nrfx_power_clock_irq_handler+0x60>)
    4716:	7958      	ldrb	r0, [r3, #5]
    4718:	b910      	cbnz	r0, 4720 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    471a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    471c:	681b      	ldr	r3, [r3, #0]
    471e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4720:	4b0f      	ldr	r3, [pc, #60]	; (4760 <nrfx_power_clock_irq_handler+0x64>)
    4722:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4724:	b16a      	cbz	r2, 4742 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4726:	2000      	movs	r0, #0
    4728:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    472a:	a901      	add	r1, sp, #4
    472c:	681b      	ldr	r3, [r3, #0]
    472e:	f7ff feab 	bl	4488 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4732:	9a01      	ldr	r2, [sp, #4]
    4734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4738:	b932      	cbnz	r2, 4748 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    473a:	2201      	movs	r2, #1
    473c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4740:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4742:	b003      	add	sp, #12
    4744:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    4748:	2202      	movs	r2, #2
    474a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    474e:	4b03      	ldr	r3, [pc, #12]	; (475c <nrfx_power_clock_irq_handler+0x60>)
    4750:	2001      	movs	r0, #1
    4752:	681b      	ldr	r3, [r3, #0]
    4754:	4798      	blx	r3
}
    4756:	e7f4      	b.n	4742 <nrfx_power_clock_irq_handler+0x46>
    4758:	40000100 	.word	0x40000100
    475c:	20000bf4 	.word	0x20000bf4
    4760:	40000104 	.word	0x40000104

00004764 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4764:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4766:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4768:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    476a:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    476e:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4770:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4774:	d014      	beq.n	47a0 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4776:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    477a:	fa05 f204 	lsl.w	r2, r5, r4
    477e:	ea23 0202 	bic.w	r2, r3, r2
    4782:	e850 6f00 	ldrex	r6, [r0]
    4786:	429e      	cmp	r6, r3
    4788:	d104      	bne.n	4794 <nrfx_flag32_alloc+0x30>
    478a:	e840 2c00 	strex	ip, r2, [r0]
    478e:	f1bc 0f00 	cmp.w	ip, #0
    4792:	d1f6      	bne.n	4782 <nrfx_flag32_alloc+0x1e>
    4794:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4798:	d1e6      	bne.n	4768 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    479a:	4802      	ldr	r0, [pc, #8]	; (47a4 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    479c:	700c      	strb	r4, [r1, #0]
}
    479e:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    47a0:	4801      	ldr	r0, [pc, #4]	; (47a8 <nrfx_flag32_alloc+0x44>)
    47a2:	e7fc      	b.n	479e <nrfx_flag32_alloc+0x3a>
    47a4:	0bad0000 	.word	0x0bad0000
    47a8:	0bad0002 	.word	0x0bad0002

000047ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    47ac:	6803      	ldr	r3, [r0, #0]
    47ae:	40cb      	lsrs	r3, r1
    47b0:	07db      	lsls	r3, r3, #31
{
    47b2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    47b4:	d415      	bmi.n	47e2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    47b6:	2301      	movs	r3, #1
    47b8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    47bc:	6803      	ldr	r3, [r0, #0]
    47be:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    47c2:	ea41 0203 	orr.w	r2, r1, r3
    47c6:	e850 4f00 	ldrex	r4, [r0]
    47ca:	429c      	cmp	r4, r3
    47cc:	d104      	bne.n	47d8 <nrfx_flag32_free+0x2c>
    47ce:	e840 2c00 	strex	ip, r2, [r0]
    47d2:	f1bc 0f00 	cmp.w	ip, #0
    47d6:	d1f6      	bne.n	47c6 <nrfx_flag32_free+0x1a>
    47d8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    47dc:	d1ee      	bne.n	47bc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    47de:	4802      	ldr	r0, [pc, #8]	; (47e8 <nrfx_flag32_free+0x3c>)
}
    47e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47e2:	4802      	ldr	r0, [pc, #8]	; (47ec <nrfx_flag32_free+0x40>)
    47e4:	e7fc      	b.n	47e0 <nrfx_flag32_free+0x34>
    47e6:	bf00      	nop
    47e8:	0bad0000 	.word	0x0bad0000
    47ec:	0bad0004 	.word	0x0bad0004

000047f0 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    47f0:	4b05      	ldr	r3, [pc, #20]	; (4808 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47f2:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    47f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    47f8:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    47fc:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4800:	4258      	negs	r0, r3
    4802:	4158      	adcs	r0, r3
    4804:	4770      	bx	lr
    4806:	bf00      	nop
    4808:	20000100 	.word	0x20000100

0000480c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    480c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    480e:	f100 0308 	add.w	r3, r0, #8
    4812:	4c0c      	ldr	r4, [pc, #48]	; (4844 <call_handler+0x38>)
    4814:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4818:	05da      	lsls	r2, r3, #23
{
    481a:	4605      	mov	r5, r0
    481c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    481e:	d507      	bpl.n	4830 <call_handler+0x24>
    4820:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4824:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4828:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    482c:	6852      	ldr	r2, [r2, #4]
    482e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4830:	68a3      	ldr	r3, [r4, #8]
    4832:	b12b      	cbz	r3, 4840 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4834:	68e2      	ldr	r2, [r4, #12]
    4836:	4631      	mov	r1, r6
    4838:	4628      	mov	r0, r5
    }
}
    483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    483e:	4718      	bx	r3
}
    4840:	bd70      	pop	{r4, r5, r6, pc}
    4842:	bf00      	nop
    4844:	20000100 	.word	0x20000100

00004848 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4848:	4b19      	ldr	r3, [pc, #100]	; (48b0 <release_handler+0x68>)
    484a:	3008      	adds	r0, #8
{
    484c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    484e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4852:	05d1      	lsls	r1, r2, #23
    4854:	d51d      	bpl.n	4892 <release_handler+0x4a>
    4856:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    485a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    485e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4862:	f103 0410 	add.w	r4, r3, #16
    4866:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4868:	f834 2b02 	ldrh.w	r2, [r4], #2
    486c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4870:	d003      	beq.n	487a <release_handler+0x32>
    4872:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4876:	4291      	cmp	r1, r2
    4878:	d00b      	beq.n	4892 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    487a:	3001      	adds	r0, #1
    487c:	2830      	cmp	r0, #48	; 0x30
    487e:	d1f3      	bne.n	4868 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4880:	2200      	movs	r2, #0
    4882:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4886:	480b      	ldr	r0, [pc, #44]	; (48b4 <release_handler+0x6c>)
    4888:	f7ff ff90 	bl	47ac <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    488c:	4b0a      	ldr	r3, [pc, #40]	; (48b8 <release_handler+0x70>)
    488e:	4298      	cmp	r0, r3
    4890:	d100      	bne.n	4894 <release_handler+0x4c>
}
    4892:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4894:	4909      	ldr	r1, [pc, #36]	; (48bc <release_handler+0x74>)
    4896:	480a      	ldr	r0, [pc, #40]	; (48c0 <release_handler+0x78>)
    4898:	4a0a      	ldr	r2, [pc, #40]	; (48c4 <release_handler+0x7c>)
    489a:	f44f 7399 	mov.w	r3, #306	; 0x132
    489e:	f004 fd78 	bl	9392 <printk>
}
    48a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    48a6:	4807      	ldr	r0, [pc, #28]	; (48c4 <release_handler+0x7c>)
    48a8:	f44f 7199 	mov.w	r1, #306	; 0x132
    48ac:	f004 bb82 	b.w	8fb4 <assert_post_action>
    48b0:	20000100 	.word	0x20000100
    48b4:	20000174 	.word	0x20000174
    48b8:	0bad0000 	.word	0x0bad0000
    48bc:	0000ab72 	.word	0x0000ab72
    48c0:	0000a283 	.word	0x0000a283
    48c4:	0000ab0e 	.word	0x0000ab0e

000048c8 <pin_handler_trigger_uninit>:
{
    48c8:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    48ca:	4c0a      	ldr	r4, [pc, #40]	; (48f4 <pin_handler_trigger_uninit+0x2c>)
    48cc:	f100 0508 	add.w	r5, r0, #8
    48d0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    48d4:	069a      	lsls	r2, r3, #26
    48d6:	d506      	bpl.n	48e6 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    48d8:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    48da:	4a07      	ldr	r2, [pc, #28]	; (48f8 <pin_handler_trigger_uninit+0x30>)
    48dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    48e0:	2100      	movs	r1, #0
    48e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    48e6:	f7ff ffaf 	bl	4848 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    48ea:	2300      	movs	r3, #0
    48ec:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    48f0:	bd38      	pop	{r3, r4, r5, pc}
    48f2:	bf00      	nop
    48f4:	20000100 	.word	0x20000100
    48f8:	40006000 	.word	0x40006000

000048fc <nrf_gpio_pin_port_decode>:
{
    48fc:	b510      	push	{r4, lr}
    48fe:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4900:	6800      	ldr	r0, [r0, #0]
    4902:	f004 ffca 	bl	989a <nrf_gpio_pin_present_check>
    4906:	b958      	cbnz	r0, 4920 <nrf_gpio_pin_port_decode+0x24>
    4908:	4912      	ldr	r1, [pc, #72]	; (4954 <nrf_gpio_pin_port_decode+0x58>)
    490a:	4813      	ldr	r0, [pc, #76]	; (4958 <nrf_gpio_pin_port_decode+0x5c>)
    490c:	4a13      	ldr	r2, [pc, #76]	; (495c <nrf_gpio_pin_port_decode+0x60>)
    490e:	f240 2329 	movw	r3, #553	; 0x229
    4912:	f004 fd3e 	bl	9392 <printk>
    4916:	4811      	ldr	r0, [pc, #68]	; (495c <nrf_gpio_pin_port_decode+0x60>)
    4918:	f240 2129 	movw	r1, #553	; 0x229
    491c:	f004 fb4a 	bl	8fb4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4920:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4922:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4926:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4928:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    492a:	d00d      	beq.n	4948 <nrf_gpio_pin_port_decode+0x4c>
    492c:	2b01      	cmp	r3, #1
    492e:	d00e      	beq.n	494e <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4930:	490b      	ldr	r1, [pc, #44]	; (4960 <nrf_gpio_pin_port_decode+0x64>)
    4932:	4809      	ldr	r0, [pc, #36]	; (4958 <nrf_gpio_pin_port_decode+0x5c>)
    4934:	4a09      	ldr	r2, [pc, #36]	; (495c <nrf_gpio_pin_port_decode+0x60>)
    4936:	f240 232e 	movw	r3, #558	; 0x22e
    493a:	f004 fd2a 	bl	9392 <printk>
    493e:	4807      	ldr	r0, [pc, #28]	; (495c <nrf_gpio_pin_port_decode+0x60>)
    4940:	f240 212e 	movw	r1, #558	; 0x22e
    4944:	f004 fb36 	bl	8fb4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4948:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    494c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    494e:	4805      	ldr	r0, [pc, #20]	; (4964 <nrf_gpio_pin_port_decode+0x68>)
    4950:	e7fc      	b.n	494c <nrf_gpio_pin_port_decode+0x50>
    4952:	bf00      	nop
    4954:	0000aa32 	.word	0x0000aa32
    4958:	0000a283 	.word	0x0000a283
    495c:	0000a9ff 	.word	0x0000a9ff
    4960:	0000ac19 	.word	0x0000ac19
    4964:	50000300 	.word	0x50000300

00004968 <nrfx_gpiote_input_configure>:
{
    4968:	b5f0      	push	{r4, r5, r6, r7, lr}
    496a:	4604      	mov	r4, r0
    496c:	b085      	sub	sp, #20
    496e:	4617      	mov	r7, r2
    4970:	461d      	mov	r5, r3
    if (p_input_config)
    4972:	b1f1      	cbz	r1, 49b2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4974:	f7ff ff3c 	bl	47f0 <pin_is_task_output>
    4978:	b110      	cbz	r0, 4980 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    497a:	484a      	ldr	r0, [pc, #296]	; (4aa4 <nrfx_gpiote_input_configure+0x13c>)
}
    497c:	b005      	add	sp, #20
    497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4980:	460b      	mov	r3, r1
    4982:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4986:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    498a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    498e:	f10d 020f 	add.w	r2, sp, #15
    4992:	f10d 010e 	add.w	r1, sp, #14
    4996:	4620      	mov	r0, r4
    4998:	f004 ff94 	bl	98c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    499c:	4a42      	ldr	r2, [pc, #264]	; (4aa8 <nrfx_gpiote_input_configure+0x140>)
    499e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    49a2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    49a6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    49aa:	f043 0301 	orr.w	r3, r3, #1
    49ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    49b2:	b197      	cbz	r7, 49da <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    49b4:	4b3c      	ldr	r3, [pc, #240]	; (4aa8 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    49b6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    49b8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    49ba:	f104 0008 	add.w	r0, r4, #8
    49be:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    49c2:	078f      	lsls	r7, r1, #30
    49c4:	d50c      	bpl.n	49e0 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    49c6:	2a00      	cmp	r2, #0
    49c8:	d1d7      	bne.n	497a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    49ca:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    49ce:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    49d2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    49d6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    49da:	bbcd      	cbnz	r5, 4a50 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    49dc:	4833      	ldr	r0, [pc, #204]	; (4aac <nrfx_gpiote_input_configure+0x144>)
    49de:	e7cd      	b.n	497c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    49e0:	f021 0120 	bic.w	r1, r1, #32
    49e4:	04c9      	lsls	r1, r1, #19
    49e6:	0cc9      	lsrs	r1, r1, #19
    49e8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    49ec:	2a00      	cmp	r2, #0
    49ee:	d0ec      	beq.n	49ca <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    49f0:	2e03      	cmp	r6, #3
    49f2:	d8c2      	bhi.n	497a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    49f4:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    49f6:	b92e      	cbnz	r6, 4a04 <nrfx_gpiote_input_configure+0x9c>
    49f8:	4a2d      	ldr	r2, [pc, #180]	; (4ab0 <nrfx_gpiote_input_configure+0x148>)
    49fa:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    49fe:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4a02:	e7e2      	b.n	49ca <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4a04:	00ba      	lsls	r2, r7, #2
    4a06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4a0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4a0e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4a12:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4a16:	f02c 0c03 	bic.w	ip, ip, #3
    4a1a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4a1e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4a22:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4a26:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4a2a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4a2e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4a32:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4a36:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4a3a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4a3e:	ea4c 0c0e 	orr.w	ip, ip, lr
    4a42:	f041 0120 	orr.w	r1, r1, #32
    4a46:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4a4a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4a4e:	e7bc      	b.n	49ca <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4a50:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4a54:	4620      	mov	r0, r4
    4a56:	f7ff fef7 	bl	4848 <release_handler>
    if (!handler)
    4a5a:	2e00      	cmp	r6, #0
    4a5c:	d0be      	beq.n	49dc <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4a5e:	4d12      	ldr	r5, [pc, #72]	; (4aa8 <nrfx_gpiote_input_configure+0x140>)
    4a60:	682b      	ldr	r3, [r5, #0]
    4a62:	429e      	cmp	r6, r3
    4a64:	d104      	bne.n	4a70 <nrfx_gpiote_input_configure+0x108>
    4a66:	686b      	ldr	r3, [r5, #4]
    4a68:	429f      	cmp	r7, r3
    4a6a:	d101      	bne.n	4a70 <nrfx_gpiote_input_configure+0x108>
    4a6c:	2200      	movs	r2, #0
    4a6e:	e00a      	b.n	4a86 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4a70:	4810      	ldr	r0, [pc, #64]	; (4ab4 <nrfx_gpiote_input_configure+0x14c>)
    4a72:	f10d 010f 	add.w	r1, sp, #15
    4a76:	f7ff fe75 	bl	4764 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4a7a:	4b0c      	ldr	r3, [pc, #48]	; (4aac <nrfx_gpiote_input_configure+0x144>)
    4a7c:	4298      	cmp	r0, r3
    4a7e:	f47f af7d 	bne.w	497c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4a82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4a86:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4a8a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4a8e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4a90:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4a92:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4a96:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4a9e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4aa2:	e79b      	b.n	49dc <nrfx_gpiote_input_configure+0x74>
    4aa4:	0bad0004 	.word	0x0bad0004
    4aa8:	20000100 	.word	0x20000100
    4aac:	0bad0000 	.word	0x0bad0000
    4ab0:	40006000 	.word	0x40006000
    4ab4:	20000174 	.word	0x20000174

00004ab8 <nrfx_gpiote_output_configure>:
{
    4ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aba:	4604      	mov	r4, r0
    4abc:	b085      	sub	sp, #20
    4abe:	4615      	mov	r5, r2
    if (p_config)
    4ac0:	b309      	cbz	r1, 4b06 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ac2:	f100 0708 	add.w	r7, r0, #8
    4ac6:	4e31      	ldr	r6, [pc, #196]	; (4b8c <nrfx_gpiote_output_configure+0xd4>)
    4ac8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4acc:	0798      	lsls	r0, r3, #30
    4ace:	d401      	bmi.n	4ad4 <nrfx_gpiote_output_configure+0x1c>
    4ad0:	069a      	lsls	r2, r3, #26
    4ad2:	d458      	bmi.n	4b86 <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4ad4:	f013 0f1c 	tst.w	r3, #28
    4ad8:	d002      	beq.n	4ae0 <nrfx_gpiote_output_configure+0x28>
    4ada:	784b      	ldrb	r3, [r1, #1]
    4adc:	2b01      	cmp	r3, #1
    4ade:	d052      	beq.n	4b86 <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4ae0:	2301      	movs	r3, #1
    4ae2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4ae6:	2300      	movs	r3, #0
    4ae8:	e9cd 1300 	strd	r1, r3, [sp]
    4aec:	1c4a      	adds	r2, r1, #1
    4aee:	1c8b      	adds	r3, r1, #2
    4af0:	4620      	mov	r0, r4
    4af2:	f10d 010f 	add.w	r1, sp, #15
    4af6:	f004 fee5 	bl	98c4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4afa:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4afe:	f043 0303 	orr.w	r3, r3, #3
    4b02:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4b06:	b915      	cbnz	r5, 4b0e <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4b08:	4821      	ldr	r0, [pc, #132]	; (4b90 <nrfx_gpiote_output_configure+0xd8>)
}
    4b0a:	b005      	add	sp, #20
    4b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b0e:	4e1f      	ldr	r6, [pc, #124]	; (4b8c <nrfx_gpiote_output_configure+0xd4>)
    4b10:	f104 0708 	add.w	r7, r4, #8
    4b14:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4b18:	0783      	lsls	r3, r0, #30
    4b1a:	d534      	bpl.n	4b86 <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    4b1c:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4b20:	4661      	mov	r1, ip
    4b22:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4b24:	f020 0020 	bic.w	r0, r0, #32
    4b28:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4b2c:	04c0      	lsls	r0, r0, #19
    4b2e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4b32:	0cc0      	lsrs	r0, r0, #19
    4b34:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4b38:	2300      	movs	r3, #0
    4b3a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4b3e:	786a      	ldrb	r2, [r5, #1]
    4b40:	2a00      	cmp	r2, #0
    4b42:	d0e1      	beq.n	4b08 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4b44:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4b48:	78ad      	ldrb	r5, [r5, #2]
    4b4a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4b4e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4b52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b56:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4b5a:	0223      	lsls	r3, r4, #8
    4b5c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4b60:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b62:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4b66:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4b6a:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b6c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4b6e:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4b72:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b76:	432b      	orrs	r3, r5
    4b78:	f040 0020 	orr.w	r0, r0, #32
    4b7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4b80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4b84:	e7c0      	b.n	4b08 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4b86:	4803      	ldr	r0, [pc, #12]	; (4b94 <nrfx_gpiote_output_configure+0xdc>)
    4b88:	e7bf      	b.n	4b0a <nrfx_gpiote_output_configure+0x52>
    4b8a:	bf00      	nop
    4b8c:	20000100 	.word	0x20000100
    4b90:	0bad0000 	.word	0x0bad0000
    4b94:	0bad0004 	.word	0x0bad0004

00004b98 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4b98:	4b01      	ldr	r3, [pc, #4]	; (4ba0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4b9a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4b9e:	4770      	bx	lr
    4ba0:	20000100 	.word	0x20000100

00004ba4 <nrfx_gpiote_channel_get>:
{
    4ba4:	b538      	push	{r3, r4, r5, lr}
    4ba6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4ba8:	460d      	mov	r5, r1
    4baa:	b959      	cbnz	r1, 4bc4 <nrfx_gpiote_channel_get+0x20>
    4bac:	490b      	ldr	r1, [pc, #44]	; (4bdc <nrfx_gpiote_channel_get+0x38>)
    4bae:	480c      	ldr	r0, [pc, #48]	; (4be0 <nrfx_gpiote_channel_get+0x3c>)
    4bb0:	4a0c      	ldr	r2, [pc, #48]	; (4be4 <nrfx_gpiote_channel_get+0x40>)
    4bb2:	f240 2335 	movw	r3, #565	; 0x235
    4bb6:	f004 fbec 	bl	9392 <printk>
    4bba:	480a      	ldr	r0, [pc, #40]	; (4be4 <nrfx_gpiote_channel_get+0x40>)
    4bbc:	f240 2135 	movw	r1, #565	; 0x235
    4bc0:	f004 f9f8 	bl	8fb4 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4bc4:	3408      	adds	r4, #8
    4bc6:	4b08      	ldr	r3, [pc, #32]	; (4be8 <nrfx_gpiote_channel_get+0x44>)
    4bc8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    4bcc:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4bce:	bf43      	ittte	mi
    4bd0:	0b5b      	lsrmi	r3, r3, #13
    4bd2:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4bd4:	4805      	ldrmi	r0, [pc, #20]	; (4bec <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4bd6:	4806      	ldrpl	r0, [pc, #24]	; (4bf0 <nrfx_gpiote_channel_get+0x4c>)
}
    4bd8:	bd38      	pop	{r3, r4, r5, pc}
    4bda:	bf00      	nop
    4bdc:	0000ab86 	.word	0x0000ab86
    4be0:	0000a283 	.word	0x0000a283
    4be4:	0000ab0e 	.word	0x0000ab0e
    4be8:	20000100 	.word	0x20000100
    4bec:	0bad0000 	.word	0x0bad0000
    4bf0:	0bad0004 	.word	0x0bad0004

00004bf4 <nrfx_gpiote_init>:
{
    4bf4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4bf6:	4c0e      	ldr	r4, [pc, #56]	; (4c30 <nrfx_gpiote_init+0x3c>)
    4bf8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4bfc:	b9b5      	cbnz	r5, 4c2c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4bfe:	2260      	movs	r2, #96	; 0x60
    4c00:	4629      	mov	r1, r5
    4c02:	f104 0010 	add.w	r0, r4, #16
    4c06:	f004 fc1b 	bl	9440 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4c0a:	2006      	movs	r0, #6
    4c0c:	f7fd fcac 	bl	2568 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c10:	4b08      	ldr	r3, [pc, #32]	; (4c34 <nrfx_gpiote_init+0x40>)
    return err_code;
    4c12:	4809      	ldr	r0, [pc, #36]	; (4c38 <nrfx_gpiote_init+0x44>)
    4c14:	601d      	str	r5, [r3, #0]
    4c16:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4c18:	4b08      	ldr	r3, [pc, #32]	; (4c3c <nrfx_gpiote_init+0x48>)
    4c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4c22:	2301      	movs	r3, #1
    4c24:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4c28:	6763      	str	r3, [r4, #116]	; 0x74
}
    4c2a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4c2c:	4804      	ldr	r0, [pc, #16]	; (4c40 <nrfx_gpiote_init+0x4c>)
    4c2e:	e7fc      	b.n	4c2a <nrfx_gpiote_init+0x36>
    4c30:	20000100 	.word	0x20000100
    4c34:	4000617c 	.word	0x4000617c
    4c38:	0bad0000 	.word	0x0bad0000
    4c3c:	40006000 	.word	0x40006000
    4c40:	0bad0005 	.word	0x0bad0005

00004c44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4c44:	4b03      	ldr	r3, [pc, #12]	; (4c54 <nrfx_gpiote_is_init+0x10>)
    4c46:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4c4a:	3800      	subs	r0, #0
    4c4c:	bf18      	it	ne
    4c4e:	2001      	movne	r0, #1
    4c50:	4770      	bx	lr
    4c52:	bf00      	nop
    4c54:	20000100 	.word	0x20000100

00004c58 <nrfx_gpiote_channel_free>:
{
    4c58:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4c5a:	4801      	ldr	r0, [pc, #4]	; (4c60 <nrfx_gpiote_channel_free+0x8>)
    4c5c:	f7ff bda6 	b.w	47ac <nrfx_flag32_free>
    4c60:	20000170 	.word	0x20000170

00004c64 <nrfx_gpiote_channel_alloc>:
{
    4c64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4c66:	4801      	ldr	r0, [pc, #4]	; (4c6c <nrfx_gpiote_channel_alloc+0x8>)
    4c68:	f7ff bd7c 	b.w	4764 <nrfx_flag32_alloc>
    4c6c:	20000170 	.word	0x20000170

00004c70 <nrfx_gpiote_trigger_enable>:
{
    4c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4c72:	4d31      	ldr	r5, [pc, #196]	; (4d38 <nrfx_gpiote_trigger_enable+0xc8>)
    4c74:	f100 0708 	add.w	r7, r0, #8
{
    4c78:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4c7a:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    4c7e:	f013 0f1c 	tst.w	r3, #28
{
    4c82:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4c84:	d10b      	bne.n	4c9e <nrfx_gpiote_trigger_enable+0x2e>
    4c86:	492d      	ldr	r1, [pc, #180]	; (4d3c <nrfx_gpiote_trigger_enable+0xcc>)
    4c88:	482d      	ldr	r0, [pc, #180]	; (4d40 <nrfx_gpiote_trigger_enable+0xd0>)
    4c8a:	4a2e      	ldr	r2, [pc, #184]	; (4d44 <nrfx_gpiote_trigger_enable+0xd4>)
    4c8c:	f240 33df 	movw	r3, #991	; 0x3df
    4c90:	f004 fb7f 	bl	9392 <printk>
    4c94:	482b      	ldr	r0, [pc, #172]	; (4d44 <nrfx_gpiote_trigger_enable+0xd4>)
    4c96:	f240 31df 	movw	r1, #991	; 0x3df
    4c9a:	f004 f98b 	bl	8fb4 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4c9e:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ca2:	0683      	lsls	r3, r0, #26
    4ca4:	d51f      	bpl.n	4ce6 <nrfx_gpiote_trigger_enable+0x76>
    4ca6:	f010 0302 	ands.w	r3, r0, #2
    4caa:	d11c      	bne.n	4ce6 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4cac:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    4cae:	4608      	mov	r0, r1
    4cb0:	f004 fe04 	bl	98bc <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4cb4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4cb8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4cbc:	6003      	str	r3, [r0, #0]
    4cbe:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4cc0:	008b      	lsls	r3, r1, #2
    4cc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4cc6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4cca:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4cce:	f042 0201 	orr.w	r2, r2, #1
    4cd2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4cd6:	b126      	cbz	r6, 4ce2 <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    4cd8:	4a1b      	ldr	r2, [pc, #108]	; (4d48 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4cda:	2301      	movs	r3, #1
    4cdc:	408b      	lsls	r3, r1
    4cde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4ce2:	b003      	add	sp, #12
    4ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4ce6:	b95e      	cbnz	r6, 4d00 <nrfx_gpiote_trigger_enable+0x90>
    4ce8:	4918      	ldr	r1, [pc, #96]	; (4d4c <nrfx_gpiote_trigger_enable+0xdc>)
    4cea:	4815      	ldr	r0, [pc, #84]	; (4d40 <nrfx_gpiote_trigger_enable+0xd0>)
    4cec:	4a15      	ldr	r2, [pc, #84]	; (4d44 <nrfx_gpiote_trigger_enable+0xd4>)
    4cee:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4cf2:	f004 fb4e 	bl	9392 <printk>
    4cf6:	4813      	ldr	r0, [pc, #76]	; (4d44 <nrfx_gpiote_trigger_enable+0xd4>)
    4cf8:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4cfc:	f004 f95a 	bl	8fb4 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4d00:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4d04:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4d08:	2b04      	cmp	r3, #4
    4d0a:	d010      	beq.n	4d2e <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4d0c:	2b05      	cmp	r3, #5
    4d0e:	d010      	beq.n	4d32 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4d10:	a801      	add	r0, sp, #4
    4d12:	9401      	str	r4, [sp, #4]
    4d14:	f7ff fdf2 	bl	48fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d18:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4d1a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d1e:	40d9      	lsrs	r1, r3
    4d20:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4d24:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d26:	4620      	mov	r0, r4
    4d28:	f004 fe17 	bl	995a <nrf_gpio_cfg_sense_set>
}
    4d2c:	e7d9      	b.n	4ce2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4d2e:	2103      	movs	r1, #3
    4d30:	e7f9      	b.n	4d26 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d32:	2102      	movs	r1, #2
    4d34:	e7f7      	b.n	4d26 <nrfx_gpiote_trigger_enable+0xb6>
    4d36:	bf00      	nop
    4d38:	20000100 	.word	0x20000100
    4d3c:	0000ab90 	.word	0x0000ab90
    4d40:	0000a283 	.word	0x0000a283
    4d44:	0000ab0e 	.word	0x0000ab0e
    4d48:	40006000 	.word	0x40006000
    4d4c:	0000aba5 	.word	0x0000aba5

00004d50 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4d50:	4b0e      	ldr	r3, [pc, #56]	; (4d8c <nrfx_gpiote_trigger_disable+0x3c>)
    4d52:	f100 0208 	add.w	r2, r0, #8
    4d56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d5a:	0699      	lsls	r1, r3, #26
    4d5c:	d513      	bpl.n	4d86 <nrfx_gpiote_trigger_disable+0x36>
    4d5e:	079a      	lsls	r2, r3, #30
    4d60:	d411      	bmi.n	4d86 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d62:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4d64:	2201      	movs	r2, #1
    4d66:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4d68:	009b      	lsls	r3, r3, #2
    4d6a:	4909      	ldr	r1, [pc, #36]	; (4d90 <nrfx_gpiote_trigger_disable+0x40>)
    4d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d70:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4d74:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4d78:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4d7c:	f022 0203 	bic.w	r2, r2, #3
    4d80:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4d84:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4d86:	2100      	movs	r1, #0
    4d88:	f004 bde7 	b.w	995a <nrf_gpio_cfg_sense_set>
    4d8c:	20000100 	.word	0x20000100
    4d90:	40006000 	.word	0x40006000

00004d94 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4d94:	4b0e      	ldr	r3, [pc, #56]	; (4dd0 <nrfx_gpiote_pin_uninit+0x3c>)
    4d96:	f100 0208 	add.w	r2, r0, #8
{
    4d9a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4d9c:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4da0:	07db      	lsls	r3, r3, #31
{
    4da2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4da4:	d511      	bpl.n	4dca <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4da6:	f7ff ffd3 	bl	4d50 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4daa:	4620      	mov	r0, r4
    4dac:	f7ff fd8c 	bl	48c8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4db0:	a801      	add	r0, sp, #4
    4db2:	9401      	str	r4, [sp, #4]
    4db4:	f7ff fda2 	bl	48fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4db8:	9b01      	ldr	r3, [sp, #4]
    4dba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4dbe:	2202      	movs	r2, #2
    4dc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4dc4:	4803      	ldr	r0, [pc, #12]	; (4dd4 <nrfx_gpiote_pin_uninit+0x40>)
}
    4dc6:	b002      	add	sp, #8
    4dc8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4dca:	4803      	ldr	r0, [pc, #12]	; (4dd8 <nrfx_gpiote_pin_uninit+0x44>)
    4dcc:	e7fb      	b.n	4dc6 <nrfx_gpiote_pin_uninit+0x32>
    4dce:	bf00      	nop
    4dd0:	20000100 	.word	0x20000100
    4dd4:	0bad0000 	.word	0x0bad0000
    4dd8:	0bad0004 	.word	0x0bad0004

00004ddc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de0:	4b65      	ldr	r3, [pc, #404]	; (4f78 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    4de2:	4866      	ldr	r0, [pc, #408]	; (4f7c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4de4:	4966      	ldr	r1, [pc, #408]	; (4f80 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    4de6:	2500      	movs	r5, #0
{
    4de8:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4dea:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dec:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dee:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4df0:	b136      	cbz	r6, 4e00 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4df2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4df6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4df8:	bf1e      	ittt	ne
    4dfa:	601c      	strne	r4, [r3, #0]
    4dfc:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4dfe:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4e00:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e02:	428b      	cmp	r3, r1
        mask <<= 1;
    4e04:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e08:	d1f1      	bne.n	4dee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e0a:	4f5e      	ldr	r7, [pc, #376]	; (4f84 <nrfx_gpiote_irq_handler+0x1a8>)
    4e0c:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4e0e:	b37b      	cbz	r3, 4e70 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4e10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e14:	4e5c      	ldr	r6, [pc, #368]	; (4f88 <nrfx_gpiote_irq_handler+0x1ac>)
    4e16:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4e1a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4e1c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4e20:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4e24:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4e26:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4e2a:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4e2c:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e30:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4e34:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4e38:	f8d9 3000 	ldr.w	r3, [r9]
    4e3c:	b9f3      	cbnz	r3, 4e7c <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4e3e:	f108 0820 	add.w	r8, r8, #32
    4e42:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    4e46:	f109 0904 	add.w	r9, r9, #4
    4e4a:	d1f5      	bne.n	4e38 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e4c:	603b      	str	r3, [r7, #0]
    4e4e:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4e50:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    4e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4e56:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4e5a:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4e5c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4e60:	9b01      	ldr	r3, [sp, #4]
    4e62:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4e66:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4e68:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4e6c:	4313      	orrs	r3, r2
    4e6e:	d1dd      	bne.n	4e2c <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4e70:	2401      	movs	r4, #1
    while (mask)
    4e72:	2d00      	cmp	r5, #0
    4e74:	d168      	bne.n	4f48 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4e76:	b009      	add	sp, #36	; 0x24
    4e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4e7c:	fa93 f3a3 	rbit	r3, r3
    4e80:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    4e84:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e88:	f106 0208 	add.w	r2, r6, #8
    4e8c:	4b3f      	ldr	r3, [pc, #252]	; (4f8c <nrfx_gpiote_irq_handler+0x1b0>)
    4e8e:	9605      	str	r6, [sp, #20]
    4e90:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    4e94:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4e98:	08f4      	lsrs	r4, r6, #3
    4e9a:	9302      	str	r3, [sp, #8]
    4e9c:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    4e9e:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    4ea0:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4ea4:	fa0b fc00 	lsl.w	ip, fp, r0
    4ea8:	5d18      	ldrb	r0, [r3, r4]
    4eaa:	ea20 000c 	bic.w	r0, r0, ip
    4eae:	5518      	strb	r0, [r3, r4]
    4eb0:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4eb2:	a805      	add	r0, sp, #20
    4eb4:	9103      	str	r1, [sp, #12]
    4eb6:	f7ff fd21 	bl	48fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4eba:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    4ebc:	9903      	ldr	r1, [sp, #12]
    4ebe:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4ec2:	074b      	lsls	r3, r1, #29
    4ec4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4ec8:	f3c4 4401 	ubfx	r4, r4, #16, #2
    4ecc:	d523      	bpl.n	4f16 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    4ece:	4651      	mov	r1, sl
    4ed0:	4630      	mov	r0, r6
    4ed2:	f7ff fc9b 	bl	480c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ed6:	a805      	add	r0, sp, #20
    4ed8:	9605      	str	r6, [sp, #20]
    4eda:	f7ff fd0f 	bl	48fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ede:	9a05      	ldr	r2, [sp, #20]
    4ee0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    4ee4:	b2e4      	uxtb	r4, r4
    4ee6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4eea:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4eee:	4294      	cmp	r4, r2
    4ef0:	d107      	bne.n	4f02 <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ef2:	2100      	movs	r1, #0
    4ef4:	4630      	mov	r0, r6
    4ef6:	f004 fd30 	bl	995a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4efa:	4621      	mov	r1, r4
    4efc:	4630      	mov	r0, r6
    4efe:	f004 fd2c 	bl	995a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f02:	a805      	add	r0, sp, #20
    4f04:	9605      	str	r6, [sp, #20]
    4f06:	f7ff fcf9 	bl	48fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4f0a:	9b05      	ldr	r3, [sp, #20]
    4f0c:	fa0b f303 	lsl.w	r3, fp, r3
    4f10:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    4f14:	e790      	b.n	4e38 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f16:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4f18:	bf0c      	ite	eq
    4f1a:	2103      	moveq	r1, #3
    4f1c:	2102      	movne	r1, #2
    4f1e:	4630      	mov	r0, r6
    4f20:	f004 fd1b 	bl	995a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4f24:	9b02      	ldr	r3, [sp, #8]
    4f26:	2b03      	cmp	r3, #3
    4f28:	d004      	beq.n	4f34 <nrfx_gpiote_irq_handler+0x158>
    4f2a:	2c02      	cmp	r4, #2
    4f2c:	d107      	bne.n	4f3e <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f2e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4f32:	d1e6      	bne.n	4f02 <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    4f34:	4651      	mov	r1, sl
    4f36:	4630      	mov	r0, r6
    4f38:	f7ff fc68 	bl	480c <call_handler>
    4f3c:	e7e1      	b.n	4f02 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4f3e:	2c03      	cmp	r4, #3
    4f40:	d1df      	bne.n	4f02 <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4f42:	f1ba 0f02 	cmp.w	sl, #2
    4f46:	e7f4      	b.n	4f32 <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    4f48:	fa95 f3a5 	rbit	r3, r5
    4f4c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4f50:	fa04 f203 	lsl.w	r2, r4, r3
    4f54:	009b      	lsls	r3, r3, #2
    4f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4f5a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4f5e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4f62:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4f66:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4f6a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4f6e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4f72:	f7ff fc4b 	bl	480c <call_handler>
    4f76:	e77c      	b.n	4e72 <nrfx_gpiote_irq_handler+0x96>
    4f78:	40006100 	.word	0x40006100
    4f7c:	40006000 	.word	0x40006000
    4f80:	40006120 	.word	0x40006120
    4f84:	4000617c 	.word	0x4000617c
    4f88:	50000300 	.word	0x50000300
    4f8c:	20000100 	.word	0x20000100

00004f90 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4f90:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4f92:	4801      	ldr	r0, [pc, #4]	; (4f98 <nrfx_ppi_channel_alloc+0x8>)
    4f94:	f7ff bbe6 	b.w	4764 <nrfx_flag32_alloc>
    4f98:	2000017c 	.word	0x2000017c

00004f9c <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    4f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fa0:	4604      	mov	r4, r0
    4fa2:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    4fa4:	4615      	mov	r5, r2
    4fa6:	b95a      	cbnz	r2, 4fc0 <nrf_pwm_sequence_set+0x24>
    4fa8:	4932      	ldr	r1, [pc, #200]	; (5074 <nrf_pwm_sequence_set+0xd8>)
    4faa:	4833      	ldr	r0, [pc, #204]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    4fac:	4a33      	ldr	r2, [pc, #204]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4fae:	f240 23a7 	movw	r3, #679	; 0x2a7
    4fb2:	f004 f9ee 	bl	9392 <printk>
    4fb6:	4831      	ldr	r0, [pc, #196]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4fb8:	f240 21a7 	movw	r1, #679	; 0x2a7
    4fbc:	f003 fffa 	bl	8fb4 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    4fc0:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    4fc2:	b95f      	cbnz	r7, 4fdc <nrf_pwm_sequence_set+0x40>
    4fc4:	492e      	ldr	r1, [pc, #184]	; (5080 <nrf_pwm_sequence_set+0xe4>)
    4fc6:	482c      	ldr	r0, [pc, #176]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    4fc8:	4a2c      	ldr	r2, [pc, #176]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4fca:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    4fce:	f004 f9e0 	bl	9392 <printk>
    4fd2:	482a      	ldr	r0, [pc, #168]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4fd4:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    4fd8:	f003 ffec 	bl	8fb4 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    4fdc:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    4fe0:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    4fe4:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    4fe6:	2f00      	cmp	r7, #0
    4fe8:	d138      	bne.n	505c <nrf_pwm_sequence_set+0xc0>
    4fea:	4926      	ldr	r1, [pc, #152]	; (5084 <nrf_pwm_sequence_set+0xe8>)
    4fec:	4a23      	ldr	r2, [pc, #140]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4fee:	4822      	ldr	r0, [pc, #136]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    4ff0:	f240 23bd 	movw	r3, #701	; 0x2bd
    4ff4:	f004 f9cd 	bl	9392 <printk>
    4ff8:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    4ffc:	481f      	ldr	r0, [pc, #124]	; (507c <nrf_pwm_sequence_set+0xe0>)
    4ffe:	f003 ffd9 	bl	8fb4 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    5002:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    5006:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    5008:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    500c:	d30b      	bcc.n	5026 <nrf_pwm_sequence_set+0x8a>
    500e:	491e      	ldr	r1, [pc, #120]	; (5088 <nrf_pwm_sequence_set+0xec>)
    5010:	4819      	ldr	r0, [pc, #100]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    5012:	4a1a      	ldr	r2, [pc, #104]	; (507c <nrf_pwm_sequence_set+0xe0>)
    5014:	f240 23c7 	movw	r3, #711	; 0x2c7
    5018:	f004 f9bb 	bl	9392 <printk>
    501c:	4817      	ldr	r0, [pc, #92]	; (507c <nrf_pwm_sequence_set+0xe0>)
    501e:	f240 21c7 	movw	r1, #711	; 0x2c7
    5022:	f003 ffc7 	bl	8fb4 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    5026:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    5028:	ea4f 1846 	mov.w	r8, r6, lsl #5
    502c:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5030:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    5034:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5038:	d30b      	bcc.n	5052 <nrf_pwm_sequence_set+0xb6>
    503a:	4914      	ldr	r1, [pc, #80]	; (508c <nrf_pwm_sequence_set+0xf0>)
    503c:	480e      	ldr	r0, [pc, #56]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    503e:	4a0f      	ldr	r2, [pc, #60]	; (507c <nrf_pwm_sequence_set+0xe0>)
    5040:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    5044:	f004 f9a5 	bl	9392 <printk>
    5048:	480c      	ldr	r0, [pc, #48]	; (507c <nrf_pwm_sequence_set+0xe0>)
    504a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    504e:	f003 ffb1 	bl	8fb4 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    5052:	4444      	add	r4, r8
    5054:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    5058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    505c:	043b      	lsls	r3, r7, #16
    505e:	d5d0      	bpl.n	5002 <nrf_pwm_sequence_set+0x66>
    5060:	490b      	ldr	r1, [pc, #44]	; (5090 <nrf_pwm_sequence_set+0xf4>)
    5062:	4a06      	ldr	r2, [pc, #24]	; (507c <nrf_pwm_sequence_set+0xe0>)
    5064:	4804      	ldr	r0, [pc, #16]	; (5078 <nrf_pwm_sequence_set+0xdc>)
    5066:	f240 23be 	movw	r3, #702	; 0x2be
    506a:	f004 f992 	bl	9392 <printk>
    506e:	f240 21be 	movw	r1, #702	; 0x2be
    5072:	e7c3      	b.n	4ffc <nrf_pwm_sequence_set+0x60>
    5074:	0000abe2 	.word	0x0000abe2
    5078:	0000a283 	.word	0x0000a283
    507c:	0000abb0 	.word	0x0000abb0
    5080:	0000abf7 	.word	0x0000abf7
    5084:	0000ac0f 	.word	0x0000ac0f
    5088:	0000ac39 	.word	0x0000ac39
    508c:	0000ac5a 	.word	0x0000ac5a
    5090:	0000ac1b 	.word	0x0000ac1b

00005094 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5094:	6802      	ldr	r2, [r0, #0]
    switch (port)
    5096:	0953      	lsrs	r3, r2, #5
{
    5098:	b510      	push	{r4, lr}
    509a:	4604      	mov	r4, r0
    switch (port)
    509c:	d02c      	beq.n	50f8 <nrf_gpio_pin_port_decode+0x64>
    509e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    50a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    50a4:	bf18      	it	ne
    50a6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    50a8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50ac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50ae:	07db      	lsls	r3, r3, #31
    50b0:	d40b      	bmi.n	50ca <nrf_gpio_pin_port_decode+0x36>
    50b2:	4914      	ldr	r1, [pc, #80]	; (5104 <nrf_gpio_pin_port_decode+0x70>)
    50b4:	4814      	ldr	r0, [pc, #80]	; (5108 <nrf_gpio_pin_port_decode+0x74>)
    50b6:	4a15      	ldr	r2, [pc, #84]	; (510c <nrf_gpio_pin_port_decode+0x78>)
    50b8:	f240 2329 	movw	r3, #553	; 0x229
    50bc:	f004 f969 	bl	9392 <printk>
    50c0:	4812      	ldr	r0, [pc, #72]	; (510c <nrf_gpio_pin_port_decode+0x78>)
    50c2:	f240 2129 	movw	r1, #553	; 0x229
    50c6:	f003 ff75 	bl	8fb4 <assert_post_action>
    uint32_t pin_number = *p_pin;
    50ca:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    50cc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50d0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    50d2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50d4:	d00d      	beq.n	50f2 <nrf_gpio_pin_port_decode+0x5e>
    50d6:	2b01      	cmp	r3, #1
    50d8:	d011      	beq.n	50fe <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    50da:	490d      	ldr	r1, [pc, #52]	; (5110 <nrf_gpio_pin_port_decode+0x7c>)
    50dc:	480a      	ldr	r0, [pc, #40]	; (5108 <nrf_gpio_pin_port_decode+0x74>)
    50de:	4a0b      	ldr	r2, [pc, #44]	; (510c <nrf_gpio_pin_port_decode+0x78>)
    50e0:	f240 232e 	movw	r3, #558	; 0x22e
    50e4:	f004 f955 	bl	9392 <printk>
    50e8:	4808      	ldr	r0, [pc, #32]	; (510c <nrf_gpio_pin_port_decode+0x78>)
    50ea:	f240 212e 	movw	r1, #558	; 0x22e
    50ee:	f003 ff61 	bl	8fb4 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50f2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    50f6:	bd10      	pop	{r4, pc}
    switch (port)
    50f8:	f04f 33ff 	mov.w	r3, #4294967295
    50fc:	e7d4      	b.n	50a8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    50fe:	4805      	ldr	r0, [pc, #20]	; (5114 <nrf_gpio_pin_port_decode+0x80>)
    5100:	e7f9      	b.n	50f6 <nrf_gpio_pin_port_decode+0x62>
    5102:	bf00      	nop
    5104:	0000aa32 	.word	0x0000aa32
    5108:	0000a283 	.word	0x0000a283
    510c:	0000a9ff 	.word	0x0000a9ff
    5110:	0000ac19 	.word	0x0000ac19
    5114:	50000300 	.word	0x50000300

00005118 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    511c:	4606      	mov	r6, r0
    511e:	b087      	sub	sp, #28
    5120:	4691      	mov	r9, r2
    5122:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    5124:	460c      	mov	r4, r1
    5126:	b949      	cbnz	r1, 513c <nrfx_pwm_init+0x24>
    5128:	4959      	ldr	r1, [pc, #356]	; (5290 <nrfx_pwm_init+0x178>)
    512a:	485a      	ldr	r0, [pc, #360]	; (5294 <nrfx_pwm_init+0x17c>)
    512c:	4a5a      	ldr	r2, [pc, #360]	; (5298 <nrfx_pwm_init+0x180>)
    512e:	238c      	movs	r3, #140	; 0x8c
    5130:	f004 f92f 	bl	9392 <printk>
    5134:	4858      	ldr	r0, [pc, #352]	; (5298 <nrfx_pwm_init+0x180>)
    5136:	218c      	movs	r1, #140	; 0x8c
    5138:	f003 ff3c 	bl	8fb4 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    513c:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    513e:	4d57      	ldr	r5, [pc, #348]	; (529c <nrfx_pwm_init+0x184>)
    5140:	210c      	movs	r1, #12
    5142:	4379      	muls	r1, r7
    5144:	186b      	adds	r3, r5, r1
    5146:	7a1a      	ldrb	r2, [r3, #8]
    5148:	2a00      	cmp	r2, #0
    514a:	f040 809f 	bne.w	528c <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    514e:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    5150:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    5154:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5158:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    515a:	2a00      	cmp	r2, #0
    515c:	d04d      	beq.n	51fa <nrfx_pwm_init+0xe2>
    515e:	7b63      	ldrb	r3, [r4, #13]
    5160:	2b00      	cmp	r3, #0
    5162:	d04a      	beq.n	51fa <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    5164:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    5168:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    516c:	2301      	movs	r3, #1
    516e:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    5172:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    5176:	f894 b005 	ldrb.w	fp, [r4, #5]
    517a:	f894 a006 	ldrb.w	sl, [r4, #6]
    517e:	2b00      	cmp	r3, #0
    5180:	da0b      	bge.n	519a <nrfx_pwm_init+0x82>
    5182:	4947      	ldr	r1, [pc, #284]	; (52a0 <nrfx_pwm_init+0x188>)
    5184:	4843      	ldr	r0, [pc, #268]	; (5294 <nrfx_pwm_init+0x17c>)
    5186:	4a47      	ldr	r2, [pc, #284]	; (52a4 <nrfx_pwm_init+0x18c>)
    5188:	f44f 7327 	mov.w	r3, #668	; 0x29c
    518c:	f004 f901 	bl	9392 <printk>
    5190:	4844      	ldr	r0, [pc, #272]	; (52a4 <nrfx_pwm_init+0x18c>)
    5192:	f44f 7127 	mov.w	r1, #668	; 0x29c
    5196:	f003 ff0d 	bl	8fb4 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    519a:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    519e:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    51a0:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    51a4:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    51a8:	8963      	ldrh	r3, [r4, #10]
    51aa:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    51ae:	2300      	movs	r3, #0
    51b0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    51b4:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51b8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    51bc:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    51c0:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    51c4:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    51c8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    51cc:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    51d0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    51d4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    51d8:	230c      	movs	r3, #12
    51da:	437b      	muls	r3, r7
    51dc:	58eb      	ldr	r3, [r5, r3]
    51de:	b11b      	cbz	r3, 51e8 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    51e0:	f340 3007 	sbfx	r0, r0, #12, #8
    51e4:	f7fd f9c0 	bl	2568 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    51e8:	230c      	movs	r3, #12
    51ea:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    51ee:	482e      	ldr	r0, [pc, #184]	; (52a8 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    51f0:	2301      	movs	r3, #1
    51f2:	722b      	strb	r3, [r5, #8]
}
    51f4:	b007      	add	sp, #28
    51f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51fa:	f104 39ff 	add.w	r9, r4, #4294967295
    51fe:	f10d 0808 	add.w	r8, sp, #8
    5202:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    5206:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    520a:	2aff      	cmp	r2, #255	; 0xff
    520c:	d039      	beq.n	5282 <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    520e:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    5210:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    5214:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    5218:	b9b1      	cbnz	r1, 5248 <nrfx_pwm_init+0x130>
    if (value == 0)
    521a:	0613      	lsls	r3, r2, #24
    521c:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5220:	a801      	add	r0, sp, #4
    if (value == 0)
    5222:	d426      	bmi.n	5272 <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5224:	f7ff ff36 	bl	5094 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5228:	9901      	ldr	r1, [sp, #4]
    522a:	2201      	movs	r2, #1
    522c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    522e:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5232:	a801      	add	r0, sp, #4
    5234:	f8cd b004 	str.w	fp, [sp, #4]
    5238:	f7ff ff2c 	bl	5094 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    523c:	9b01      	ldr	r3, [sp, #4]
    523e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5242:	2203      	movs	r2, #3
    5244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5248:	45d1      	cmp	r9, sl
    524a:	f108 0804 	add.w	r8, r8, #4
    524e:	d1da      	bne.n	5206 <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    5250:	7b63      	ldrb	r3, [r4, #13]
    5252:	2b00      	cmp	r3, #0
    5254:	d186      	bne.n	5164 <nrfx_pwm_init+0x4c>
    5256:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    5258:	9a02      	ldr	r2, [sp, #8]
    525a:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    525e:	9a03      	ldr	r2, [sp, #12]
    5260:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    5264:	9a04      	ldr	r2, [sp, #16]
    5266:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    526a:	9a05      	ldr	r2, [sp, #20]
    526c:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5270:	e778      	b.n	5164 <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5272:	f7ff ff0f 	bl	5094 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5276:	9901      	ldr	r1, [sp, #4]
    5278:	2201      	movs	r2, #1
    527a:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    527c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    5280:	e7d7      	b.n	5232 <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    5282:	f04f 33ff 	mov.w	r3, #4294967295
    5286:	f8c8 3000 	str.w	r3, [r8]
    528a:	e7dd      	b.n	5248 <nrfx_pwm_init+0x130>
        return err_code;
    528c:	4807      	ldr	r0, [pc, #28]	; (52ac <nrfx_pwm_init+0x194>)
    528e:	e7b1      	b.n	51f4 <nrfx_pwm_init+0xdc>
    5290:	0000acb8 	.word	0x0000acb8
    5294:	0000a283 	.word	0x0000a283
    5298:	0000ac7d 	.word	0x0000ac7d
    529c:	20000bfc 	.word	0x20000bfc
    52a0:	0000acc1 	.word	0x0000acc1
    52a4:	0000abb0 	.word	0x0000abb0
    52a8:	0bad0000 	.word	0x0bad0000
    52ac:	0bad0005 	.word	0x0bad0005

000052b0 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    52b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52b4:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    52b6:	7903      	ldrb	r3, [r0, #4]
{
    52b8:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    52ba:	4a31      	ldr	r2, [pc, #196]	; (5380 <nrfx_pwm_simple_playback+0xd0>)
{
    52bc:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    52be:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    52c2:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    52c6:	210c      	movs	r1, #12
    52c8:	fb01 2303 	mla	r3, r1, r3, r2
{
    52cc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    52ce:	7a1b      	ldrb	r3, [r3, #8]
    52d0:	b95b      	cbnz	r3, 52ea <nrfx_pwm_simple_playback+0x3a>
    52d2:	492c      	ldr	r1, [pc, #176]	; (5384 <nrfx_pwm_simple_playback+0xd4>)
    52d4:	482c      	ldr	r0, [pc, #176]	; (5388 <nrfx_pwm_simple_playback+0xd8>)
    52d6:	4a2d      	ldr	r2, [pc, #180]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    52d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
    52dc:	f004 f859 	bl	9392 <printk>
    52e0:	482a      	ldr	r0, [pc, #168]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    52e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    52e6:	f003 fe65 	bl	8fb4 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    52ea:	b95c      	cbnz	r4, 5304 <nrfx_pwm_simple_playback+0x54>
    52ec:	4928      	ldr	r1, [pc, #160]	; (5390 <nrfx_pwm_simple_playback+0xe0>)
    52ee:	4826      	ldr	r0, [pc, #152]	; (5388 <nrfx_pwm_simple_playback+0xd8>)
    52f0:	4a26      	ldr	r2, [pc, #152]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    52f2:	f240 132d 	movw	r3, #301	; 0x12d
    52f6:	f004 f84c 	bl	9392 <printk>
    52fa:	4824      	ldr	r0, [pc, #144]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    52fc:	f240 112d 	movw	r1, #301	; 0x12d
    5300:	f003 fe58 	bl	8fb4 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5304:	6833      	ldr	r3, [r6, #0]
    5306:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    530a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    530e:	d00b      	beq.n	5328 <nrfx_pwm_simple_playback+0x78>
    5310:	4920      	ldr	r1, [pc, #128]	; (5394 <nrfx_pwm_simple_playback+0xe4>)
    5312:	481d      	ldr	r0, [pc, #116]	; (5388 <nrfx_pwm_simple_playback+0xd8>)
    5314:	4a1d      	ldr	r2, [pc, #116]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    5316:	f44f 7397 	mov.w	r3, #302	; 0x12e
    531a:	f004 f83a 	bl	9392 <printk>
    531e:	481b      	ldr	r0, [pc, #108]	; (538c <nrfx_pwm_simple_playback+0xdc>)
    5320:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5324:	f003 fe46 	bl	8fb4 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    5328:	6828      	ldr	r0, [r5, #0]
    532a:	4632      	mov	r2, r6
    532c:	2100      	movs	r1, #0
    532e:	f7ff fe35 	bl	4f9c <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    5332:	6828      	ldr	r0, [r5, #0]
    5334:	4632      	mov	r2, r6
    5336:	2101      	movs	r1, #1
    5338:	f7ff fe30 	bl	4f9c <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    533c:	6828      	ldr	r0, [r5, #0]
    533e:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    5342:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    5346:	f018 0f01 	tst.w	r8, #1
    534a:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    534e:	d114      	bne.n	537a <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    5350:	f018 0202 	ands.w	r2, r8, #2
    5354:	d003      	beq.n	535e <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    5356:	2b00      	cmp	r3, #0
    5358:	bf14      	ite	ne
    535a:	2208      	movne	r2, #8
    535c:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    535e:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5360:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    5364:	4639      	mov	r1, r7
    5366:	fa5f f288 	uxtb.w	r2, r8
    536a:	bf18      	it	ne
    536c:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    536e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    5372:	bf08      	it	eq
    5374:	2308      	moveq	r3, #8
    5376:	f004 baff 	b.w	9978 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    537a:	2210      	movs	r2, #16
    537c:	e7ef      	b.n	535e <nrfx_pwm_simple_playback+0xae>
    537e:	bf00      	nop
    5380:	20000bfc 	.word	0x20000bfc
    5384:	0000ace2 	.word	0x0000ace2
    5388:	0000a283 	.word	0x0000a283
    538c:	0000ac7d 	.word	0x0000ac7d
    5390:	0000ad0e 	.word	0x0000ad0e
    5394:	0000ad21 	.word	0x0000ad21

00005398 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    5398:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    539a:	4e12      	ldr	r6, [pc, #72]	; (53e4 <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    539c:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    539e:	220c      	movs	r2, #12
    53a0:	fb02 6204 	mla	r2, r2, r4, r6
{
    53a4:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    53a6:	7a12      	ldrb	r2, [r2, #8]
    53a8:	b95a      	cbnz	r2, 53c2 <nrfx_pwm_is_stopped+0x2a>
    53aa:	490f      	ldr	r1, [pc, #60]	; (53e8 <nrfx_pwm_is_stopped+0x50>)
    53ac:	480f      	ldr	r0, [pc, #60]	; (53ec <nrfx_pwm_is_stopped+0x54>)
    53ae:	4a10      	ldr	r2, [pc, #64]	; (53f0 <nrfx_pwm_is_stopped+0x58>)
    53b0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    53b4:	f003 ffed 	bl	9392 <printk>
    53b8:	480d      	ldr	r0, [pc, #52]	; (53f0 <nrfx_pwm_is_stopped+0x58>)
    53ba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    53be:	f003 fdf9 	bl	8fb4 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    53c2:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    53c4:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    53c6:	fb03 6404 	mla	r4, r3, r4, r6
    53ca:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    53cc:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    53d0:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    53d2:	b91a      	cbnz	r2, 53dc <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    53d4:	1e98      	subs	r0, r3, #2
    53d6:	bf18      	it	ne
    53d8:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    53da:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    53dc:	2001      	movs	r0, #1
    53de:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    53e0:	e7fb      	b.n	53da <nrfx_pwm_is_stopped+0x42>
    53e2:	bf00      	nop
    53e4:	20000bfc 	.word	0x20000bfc
    53e8:	0000ace2 	.word	0x0000ace2
    53ec:	0000a283 	.word	0x0000a283
    53f0:	0000ac7d 	.word	0x0000ac7d

000053f4 <nrfx_pwm_stop>:
{
    53f4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    53f6:	4a14      	ldr	r2, [pc, #80]	; (5448 <nrfx_pwm_stop+0x54>)
    53f8:	7903      	ldrb	r3, [r0, #4]
{
    53fa:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    53fc:	210c      	movs	r1, #12
    53fe:	fb01 2303 	mla	r3, r1, r3, r2
{
    5402:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5404:	7a1b      	ldrb	r3, [r3, #8]
    5406:	b95b      	cbnz	r3, 5420 <nrfx_pwm_stop+0x2c>
    5408:	4910      	ldr	r1, [pc, #64]	; (544c <nrfx_pwm_stop+0x58>)
    540a:	4811      	ldr	r0, [pc, #68]	; (5450 <nrfx_pwm_stop+0x5c>)
    540c:	4a11      	ldr	r2, [pc, #68]	; (5454 <nrfx_pwm_stop+0x60>)
    540e:	f240 1385 	movw	r3, #389	; 0x185
    5412:	f003 ffbe 	bl	9392 <printk>
    5416:	480f      	ldr	r0, [pc, #60]	; (5454 <nrfx_pwm_stop+0x60>)
    5418:	f240 1185 	movw	r1, #389	; 0x185
    541c:	f003 fdca 	bl	8fb4 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    5420:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    5422:	2200      	movs	r2, #0
    5424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5428:	2201      	movs	r2, #1
    542a:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    542c:	4620      	mov	r0, r4
    542e:	f7ff ffb3 	bl	5398 <nrfx_pwm_is_stopped>
    5432:	b938      	cbnz	r0, 5444 <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    5434:	4620      	mov	r0, r4
    5436:	f7ff ffaf 	bl	5398 <nrfx_pwm_is_stopped>
    543a:	b918      	cbnz	r0, 5444 <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    543c:	2d00      	cmp	r5, #0
    543e:	d1f9      	bne.n	5434 <nrfx_pwm_stop+0x40>
}
    5440:	4628      	mov	r0, r5
    5442:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    5444:	2501      	movs	r5, #1
    5446:	e7fb      	b.n	5440 <nrfx_pwm_stop+0x4c>
    5448:	20000bfc 	.word	0x20000bfc
    544c:	0000ad4a 	.word	0x0000ad4a
    5450:	0000a283 	.word	0x0000a283
    5454:	0000ac7d 	.word	0x0000ac7d

00005458 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5458:	4b03      	ldr	r3, [pc, #12]	; (5468 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    545a:	6818      	ldr	r0, [r3, #0]
}
    545c:	f1a0 0308 	sub.w	r3, r0, #8
    5460:	4258      	negs	r0, r3
    5462:	4158      	adcs	r0, r3
    5464:	4770      	bx	lr
    5466:	bf00      	nop
    5468:	10000130 	.word	0x10000130

0000546c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    546c:	4b06      	ldr	r3, [pc, #24]	; (5488 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	2b08      	cmp	r3, #8
    5472:	d106      	bne.n	5482 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5474:	4b05      	ldr	r3, [pc, #20]	; (548c <nrf52_errata_103+0x20>)
    5476:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    5478:	2b05      	cmp	r3, #5
    547a:	d802      	bhi.n	5482 <nrf52_errata_103+0x16>
    547c:	4a04      	ldr	r2, [pc, #16]	; (5490 <nrf52_errata_103+0x24>)
    547e:	5cd0      	ldrb	r0, [r2, r3]
    5480:	4770      	bx	lr
        return false;
    5482:	2000      	movs	r0, #0
}
    5484:	4770      	bx	lr
    5486:	bf00      	nop
    5488:	10000130 	.word	0x10000130
    548c:	10000134 	.word	0x10000134
    5490:	0000ad95 	.word	0x0000ad95

00005494 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5494:	4a02      	ldr	r2, [pc, #8]	; (54a0 <nvmc_wait+0xc>)
    5496:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    549a:	2b00      	cmp	r3, #0
    549c:	d0fb      	beq.n	5496 <nvmc_wait+0x2>
}
    549e:	4770      	bx	lr
    54a0:	4001e000 	.word	0x4001e000

000054a4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    54a4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    54a6:	f7ff ffd7 	bl	5458 <nrf52_errata_136>
    54aa:	b140      	cbz	r0, 54be <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    54ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54b0:	2200      	movs	r2, #0
    54b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    54b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    54ba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    54be:	f7ff ffcb 	bl	5458 <nrf52_errata_136>
    54c2:	2800      	cmp	r0, #0
    54c4:	d046      	beq.n	5554 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    54c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54ca:	4b5b      	ldr	r3, [pc, #364]	; (5638 <SystemInit+0x194>)
    54cc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    54d0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    54d4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    54d8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    54dc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    54e0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    54e4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    54e8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    54ec:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    54f0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    54f4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    54f8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    54fc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5500:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5504:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5508:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    550c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5510:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5514:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5518:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    551c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5520:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5524:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5528:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    552c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5530:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5534:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5538:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    553c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5540:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5544:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5548:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    554c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5550:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5554:	f7ff ff8a 	bl	546c <nrf52_errata_103>
    5558:	b110      	cbz	r0, 5560 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    555a:	4b38      	ldr	r3, [pc, #224]	; (563c <SystemInit+0x198>)
    555c:	4a38      	ldr	r2, [pc, #224]	; (5640 <SystemInit+0x19c>)
    555e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5560:	f7ff ff84 	bl	546c <nrf52_errata_103>
    5564:	b118      	cbz	r0, 556e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5566:	4b37      	ldr	r3, [pc, #220]	; (5644 <SystemInit+0x1a0>)
    5568:	22fb      	movs	r2, #251	; 0xfb
    556a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    556e:	f7ff ff7d 	bl	546c <nrf52_errata_103>
    5572:	b148      	cbz	r0, 5588 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5574:	4934      	ldr	r1, [pc, #208]	; (5648 <SystemInit+0x1a4>)
    5576:	4b35      	ldr	r3, [pc, #212]	; (564c <SystemInit+0x1a8>)
    5578:	680a      	ldr	r2, [r1, #0]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	f022 020f 	bic.w	r2, r2, #15
    5580:	f003 030f 	and.w	r3, r3, #15
    5584:	4313      	orrs	r3, r2
    5586:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5588:	f7ff ff70 	bl	546c <nrf52_errata_103>
    558c:	b118      	cbz	r0, 5596 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    558e:	4b30      	ldr	r3, [pc, #192]	; (5650 <SystemInit+0x1ac>)
    5590:	f44f 7200 	mov.w	r2, #512	; 0x200
    5594:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5596:	f7ff ff5f 	bl	5458 <nrf52_errata_136>
    559a:	b148      	cbz	r0, 55b0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    559c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    55a4:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    55a6:	bf44      	itt	mi
    55a8:	f06f 0201 	mvnmi.w	r2, #1
    55ac:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    55b0:	4b28      	ldr	r3, [pc, #160]	; (5654 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	2b08      	cmp	r3, #8
    55b6:	d10e      	bne.n	55d6 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    55b8:	4b27      	ldr	r3, [pc, #156]	; (5658 <SystemInit+0x1b4>)
    55ba:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    55bc:	2b05      	cmp	r3, #5
    55be:	d802      	bhi.n	55c6 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    55c0:	4a26      	ldr	r2, [pc, #152]	; (565c <SystemInit+0x1b8>)
    55c2:	5cd3      	ldrb	r3, [r2, r3]
    55c4:	b13b      	cbz	r3, 55d6 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    55c6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    55ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55d2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55d6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    55de:	2a00      	cmp	r2, #0
    55e0:	db03      	blt.n	55ea <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    55e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55e6:	2b00      	cmp	r3, #0
    55e8:	da22      	bge.n	5630 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    55ea:	491d      	ldr	r1, [pc, #116]	; (5660 <SystemInit+0x1bc>)
    55ec:	2301      	movs	r3, #1
    55ee:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    55f2:	f7ff ff4f 	bl	5494 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    55f6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    55fa:	2412      	movs	r4, #18
    55fc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5600:	f7ff ff48 	bl	5494 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5604:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5608:	f7ff ff44 	bl	5494 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    560c:	2300      	movs	r3, #0
    560e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5612:	f7ff ff3f 	bl	5494 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5616:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    561a:	4912      	ldr	r1, [pc, #72]	; (5664 <SystemInit+0x1c0>)
    561c:	4b12      	ldr	r3, [pc, #72]	; (5668 <SystemInit+0x1c4>)
    561e:	68ca      	ldr	r2, [r1, #12]
    5620:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5624:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5626:	60cb      	str	r3, [r1, #12]
    5628:	f3bf 8f4f 	dsb	sy
    __NOP();
    562c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    562e:	e7fd      	b.n	562c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5630:	4b0e      	ldr	r3, [pc, #56]	; (566c <SystemInit+0x1c8>)
    5632:	4a0f      	ldr	r2, [pc, #60]	; (5670 <SystemInit+0x1cc>)
    5634:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5636:	bd10      	pop	{r4, pc}
    5638:	4000c000 	.word	0x4000c000
    563c:	4000568c 	.word	0x4000568c
    5640:	00038148 	.word	0x00038148
    5644:	4000f000 	.word	0x4000f000
    5648:	40000ee4 	.word	0x40000ee4
    564c:	10000258 	.word	0x10000258
    5650:	40029640 	.word	0x40029640
    5654:	10000130 	.word	0x10000130
    5658:	10000134 	.word	0x10000134
    565c:	0000ad8f 	.word	0x0000ad8f
    5660:	4001e000 	.word	0x4001e000
    5664:	e000ed00 	.word	0xe000ed00
    5668:	05fa0004 	.word	0x05fa0004
    566c:	20000180 	.word	0x20000180
    5670:	03d09000 	.word	0x03d09000

00005674 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5674:	4b0e      	ldr	r3, [pc, #56]	; (56b0 <z_sys_init_run_level+0x3c>)
{
    5676:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5678:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    567c:	3001      	adds	r0, #1
    567e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5682:	42a6      	cmp	r6, r4
    5684:	d800      	bhi.n	5688 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5686:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5688:	e9d4 3500 	ldrd	r3, r5, [r4]
    568c:	4628      	mov	r0, r5
    568e:	4798      	blx	r3
		if (dev != NULL) {
    5690:	b165      	cbz	r5, 56ac <z_sys_init_run_level+0x38>
			if (rc != 0) {
    5692:	68eb      	ldr	r3, [r5, #12]
    5694:	b130      	cbz	r0, 56a4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5696:	2800      	cmp	r0, #0
    5698:	bfb8      	it	lt
    569a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    569c:	28ff      	cmp	r0, #255	; 0xff
    569e:	bfa8      	it	ge
    56a0:	20ff      	movge	r0, #255	; 0xff
    56a2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    56a4:	785a      	ldrb	r2, [r3, #1]
    56a6:	f042 0201 	orr.w	r2, r2, #1
    56aa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56ac:	3408      	adds	r4, #8
    56ae:	e7e8      	b.n	5682 <z_sys_init_run_level+0xe>
    56b0:	0000a01c 	.word	0x0000a01c

000056b4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    56b4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    56b6:	4605      	mov	r5, r0
    56b8:	b910      	cbnz	r0, 56c0 <z_impl_device_get_binding+0xc>
		return NULL;
    56ba:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    56bc:	4620      	mov	r0, r4
    56be:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    56c0:	7803      	ldrb	r3, [r0, #0]
    56c2:	2b00      	cmp	r3, #0
    56c4:	d0f9      	beq.n	56ba <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    56c6:	4a0f      	ldr	r2, [pc, #60]	; (5704 <z_impl_device_get_binding+0x50>)
    56c8:	4c0f      	ldr	r4, [pc, #60]	; (5708 <z_impl_device_get_binding+0x54>)
    56ca:	4616      	mov	r6, r2
    56cc:	4294      	cmp	r4, r2
    56ce:	d108      	bne.n	56e2 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    56d0:	4c0d      	ldr	r4, [pc, #52]	; (5708 <z_impl_device_get_binding+0x54>)
    56d2:	42b4      	cmp	r4, r6
    56d4:	d0f1      	beq.n	56ba <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    56d6:	4620      	mov	r0, r4
    56d8:	f004 f972 	bl	99c0 <z_device_ready>
    56dc:	b950      	cbnz	r0, 56f4 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    56de:	3418      	adds	r4, #24
    56e0:	e7f7      	b.n	56d2 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    56e2:	4620      	mov	r0, r4
    56e4:	f004 f96c 	bl	99c0 <z_device_ready>
    56e8:	b110      	cbz	r0, 56f0 <z_impl_device_get_binding+0x3c>
    56ea:	6823      	ldr	r3, [r4, #0]
    56ec:	42ab      	cmp	r3, r5
    56ee:	d0e5      	beq.n	56bc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    56f0:	3418      	adds	r4, #24
    56f2:	e7eb      	b.n	56cc <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    56f4:	6821      	ldr	r1, [r4, #0]
    56f6:	4628      	mov	r0, r5
    56f8:	f003 fe8b 	bl	9412 <strcmp>
    56fc:	2800      	cmp	r0, #0
    56fe:	d1ee      	bne.n	56de <z_impl_device_get_binding+0x2a>
    5700:	e7dc      	b.n	56bc <z_impl_device_get_binding+0x8>
    5702:	bf00      	nop
    5704:	00009cfc 	.word	0x00009cfc
    5708:	00009c54 	.word	0x00009c54

0000570c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    570e:	4604      	mov	r4, r0
    5710:	460e      	mov	r6, r1
	__asm__ volatile(
    5712:	f04f 0320 	mov.w	r3, #32
    5716:	f3ef 8711 	mrs	r7, BASEPRI
    571a:	f383 8812 	msr	BASEPRI_MAX, r3
    571e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5722:	f001 feb9 	bl	7498 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5726:	4631      	mov	r1, r6
    5728:	4605      	mov	r5, r0
    572a:	4620      	mov	r0, r4
    572c:	f004 f8a3 	bl	9876 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5730:	2c04      	cmp	r4, #4
    5732:	d10c      	bne.n	574e <z_fatal_error+0x42>
    5734:	490a      	ldr	r1, [pc, #40]	; (5760 <z_fatal_error+0x54>)
    5736:	4a0b      	ldr	r2, [pc, #44]	; (5764 <z_fatal_error+0x58>)
    5738:	480b      	ldr	r0, [pc, #44]	; (5768 <z_fatal_error+0x5c>)
    573a:	238f      	movs	r3, #143	; 0x8f
    573c:	f003 fe29 	bl	9392 <printk>
    5740:	480a      	ldr	r0, [pc, #40]	; (576c <z_fatal_error+0x60>)
    5742:	f003 fe26 	bl	9392 <printk>
    5746:	4807      	ldr	r0, [pc, #28]	; (5764 <z_fatal_error+0x58>)
    5748:	218f      	movs	r1, #143	; 0x8f
    574a:	f003 fc33 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    574e:	f387 8811 	msr	BASEPRI, r7
    5752:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5756:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    575c:	f7fd b9b0 	b.w	2ac0 <z_impl_k_thread_abort>
    5760:	0000adbd 	.word	0x0000adbd
    5764:	0000ad9b 	.word	0x0000ad9b
    5768:	0000a283 	.word	0x0000a283
    576c:	0000adda 	.word	0x0000adda

00005770 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5770:	4c11      	ldr	r4, [pc, #68]	; (57b8 <idle+0x48>)
    5772:	68a2      	ldr	r2, [r4, #8]
    5774:	f992 200e 	ldrsb.w	r2, [r2, #14]
    5778:	2a00      	cmp	r2, #0
{
    577a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    577c:	da09      	bge.n	5792 <idle+0x22>
    577e:	490f      	ldr	r1, [pc, #60]	; (57bc <idle+0x4c>)
    5780:	480f      	ldr	r0, [pc, #60]	; (57c0 <idle+0x50>)
    5782:	4a10      	ldr	r2, [pc, #64]	; (57c4 <idle+0x54>)
    5784:	2327      	movs	r3, #39	; 0x27
    5786:	f003 fe04 	bl	9392 <printk>
    578a:	480e      	ldr	r0, [pc, #56]	; (57c4 <idle+0x54>)
    578c:	2127      	movs	r1, #39	; 0x27
    578e:	f003 fc11 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5792:	f04f 0220 	mov.w	r2, #32
    5796:	f3ef 8311 	mrs	r3, BASEPRI
    579a:	f382 8812 	msr	BASEPRI_MAX, r2
    579e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    57a2:	f002 fb6f 	bl	7e84 <z_get_next_timeout_expiry>
    57a6:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    57a8:	f7fc fdb2 	bl	2310 <pm_system_suspend>
    57ac:	2800      	cmp	r0, #0
    57ae:	d1f0      	bne.n	5792 <idle+0x22>
	arch_cpu_idle();
    57b0:	f7fc fe64 	bl	247c <arch_cpu_idle>
}
    57b4:	e7ed      	b.n	5792 <idle+0x22>
    57b6:	bf00      	nop
    57b8:	20000c08 	.word	0x20000c08
    57bc:	0000ae30 	.word	0x0000ae30
    57c0:	0000a283 	.word	0x0000a283
    57c4:	0000ae0f 	.word	0x0000ae0f

000057c8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    57c8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    57ca:	2300      	movs	r3, #0
{
    57cc:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    57ce:	2201      	movs	r2, #1
    57d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    57d4:	220f      	movs	r2, #15
    57d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    57da:	4c0d      	ldr	r4, [pc, #52]	; (5810 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57dc:	4a0d      	ldr	r2, [pc, #52]	; (5814 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    57de:	9301      	str	r3, [sp, #4]
    57e0:	490d      	ldr	r1, [pc, #52]	; (5818 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57e2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    57e4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57e8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    57ec:	f44f 75b0 	mov.w	r5, #352	; 0x160
    57f0:	9300      	str	r3, [sp, #0]
    57f2:	fb05 1100 	mla	r1, r5, r0, r1
    57f6:	4b09      	ldr	r3, [pc, #36]	; (581c <init_idle_thread+0x54>)
    57f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    57fc:	4620      	mov	r0, r4
    57fe:	f002 f867 	bl	78d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5802:	7b63      	ldrb	r3, [r4, #13]
    5804:	f023 0304 	bic.w	r3, r3, #4
    5808:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    580a:	b007      	add	sp, #28
    580c:	bd30      	pop	{r4, r5, pc}
    580e:	bf00      	nop
    5810:	20000410 	.word	0x20000410
    5814:	20000c08 	.word	0x20000c08
    5818:	20001ec0 	.word	0x20001ec0
    581c:	00005771 	.word	0x00005771

00005820 <bg_thread_main>:
{
    5820:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5822:	4b0a      	ldr	r3, [pc, #40]	; (584c <bg_thread_main+0x2c>)
    5824:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5826:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5828:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    582a:	f7ff ff23 	bl	5674 <z_sys_init_run_level>
	boot_banner();
    582e:	f003 f859 	bl	88e4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5832:	2003      	movs	r0, #3
    5834:	f7ff ff1e 	bl	5674 <z_sys_init_run_level>
	z_init_static_threads();
    5838:	f002 f8fc 	bl	7a34 <z_init_static_threads>
	main();
    583c:	f7fb fb44 	bl	ec8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5840:	4a03      	ldr	r2, [pc, #12]	; (5850 <bg_thread_main+0x30>)
    5842:	7b13      	ldrb	r3, [r2, #12]
    5844:	f023 0301 	bic.w	r3, r3, #1
    5848:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    584a:	bd08      	pop	{r3, pc}
    584c:	20000c7f 	.word	0x20000c7f
    5850:	20000490 	.word	0x20000490

00005854 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5854:	4802      	ldr	r0, [pc, #8]	; (5860 <z_bss_zero+0xc>)
    5856:	4a03      	ldr	r2, [pc, #12]	; (5864 <z_bss_zero+0x10>)
    5858:	2100      	movs	r1, #0
    585a:	1a12      	subs	r2, r2, r0
    585c:	f003 bdf0 	b.w	9440 <memset>
    5860:	20000270 	.word	0x20000270
    5864:	20000e3c 	.word	0x20000e3c

00005868 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5868:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    586a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5944 <z_cstart+0xdc>
    586e:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5870:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5874:	4d2d      	ldr	r5, [pc, #180]	; (592c <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5876:	4e2e      	ldr	r6, [pc, #184]	; (5930 <z_cstart+0xc8>)
    5878:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    587a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5948 <z_cstart+0xe0>
    587e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5882:	2400      	movs	r4, #0
    5884:	616b      	str	r3, [r5, #20]
    5886:	23e0      	movs	r3, #224	; 0xe0
    5888:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    588c:	77ec      	strb	r4, [r5, #31]
    588e:	762c      	strb	r4, [r5, #24]
    5890:	766c      	strb	r4, [r5, #25]
    5892:	76ac      	strb	r4, [r5, #26]
    5894:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    589a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    589e:	626b      	str	r3, [r5, #36]	; 0x24
    58a0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    58a4:	f7fd f8b6 	bl	2a14 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    58a8:	f7fc fde2 	bl	2470 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    58ac:	f04f 33ff 	mov.w	r3, #4294967295
    58b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    58b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    58b4:	f7fd f9de 	bl	2c74 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    58b8:	f7fd f914 	bl	2ae4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    58bc:	f240 1301 	movw	r3, #257	; 0x101
    58c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    58c4:	ab06      	add	r3, sp, #24
    58c6:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    58c8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    58cc:	f004 f877 	bl	99be <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    58d0:	4620      	mov	r0, r4
    58d2:	f7ff fecf 	bl	5674 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    58d6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    58d8:	4d16      	ldr	r5, [pc, #88]	; (5934 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    58da:	f7ff fecb 	bl	5674 <z_sys_init_run_level>
	z_sched_init();
    58de:	f001 fc45 	bl	716c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    58e2:	4b15      	ldr	r3, [pc, #84]	; (5938 <z_cstart+0xd0>)
    58e4:	9305      	str	r3, [sp, #20]
    58e6:	2301      	movs	r3, #1
    58e8:	4914      	ldr	r1, [pc, #80]	; (593c <z_cstart+0xd4>)
    58ea:	9400      	str	r4, [sp, #0]
    58ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    58f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    58f4:	464b      	mov	r3, r9
    58f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    58fa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    58fc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    58fe:	f001 ffe7 	bl	78d0 <z_setup_new_thread>
    5902:	7b6a      	ldrb	r2, [r5, #13]
    5904:	f022 0204 	bic.w	r2, r2, #4
    5908:	736a      	strb	r2, [r5, #13]
    590a:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    590c:	4628      	mov	r0, r5
    590e:	f001 f82d 	bl	696c <z_ready_thread>
		init_idle_thread(i);
    5912:	4620      	mov	r0, r4
    5914:	f7ff ff58 	bl	57c8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5918:	4b09      	ldr	r3, [pc, #36]	; (5940 <z_cstart+0xd8>)
    591a:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    591c:	464a      	mov	r2, r9
    591e:	4639      	mov	r1, r7
    5920:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5922:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5924:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5928:	f7fc fedc 	bl	26e4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    592c:	e000ed00 	.word	0xe000ed00
    5930:	20000c08 	.word	0x20000c08
    5934:	20000490 	.word	0x20000490
    5938:	0000ae58 	.word	0x0000ae58
    593c:	20001aa0 	.word	0x20001aa0
    5940:	20000410 	.word	0x20000410
    5944:	20002840 	.word	0x20002840
    5948:	00005821 	.word	0x00005821

0000594c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5950:	4d16      	ldr	r5, [pc, #88]	; (59ac <init_mem_slab_module+0x60>)
    5952:	4c17      	ldr	r4, [pc, #92]	; (59b0 <init_mem_slab_module+0x64>)
    5954:	4e17      	ldr	r6, [pc, #92]	; (59b4 <init_mem_slab_module+0x68>)
    5956:	46a8      	mov	r8, r5
    5958:	42ac      	cmp	r4, r5
    595a:	d90c      	bls.n	5976 <init_mem_slab_module+0x2a>
    595c:	4916      	ldr	r1, [pc, #88]	; (59b8 <init_mem_slab_module+0x6c>)
    595e:	4817      	ldr	r0, [pc, #92]	; (59bc <init_mem_slab_module+0x70>)
    5960:	233c      	movs	r3, #60	; 0x3c
    5962:	4632      	mov	r2, r6
    5964:	f003 fd15 	bl	9392 <printk>
    5968:	4815      	ldr	r0, [pc, #84]	; (59c0 <init_mem_slab_module+0x74>)
    596a:	f003 fd12 	bl	9392 <printk>
    596e:	213c      	movs	r1, #60	; 0x3c
    5970:	4630      	mov	r0, r6
    5972:	f003 fb1f 	bl	8fb4 <assert_post_action>
    5976:	4544      	cmp	r4, r8
    5978:	d302      	bcc.n	5980 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    597a:	2000      	movs	r0, #0
	return rc;
}
    597c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5980:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5984:	ea41 0302 	orr.w	r3, r1, r2
    5988:	f013 0303 	ands.w	r3, r3, #3
    598c:	d10b      	bne.n	59a6 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    598e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5990:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5992:	4283      	cmp	r3, r0
    5994:	d101      	bne.n	599a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5996:	3420      	adds	r4, #32
    5998:	e7de      	b.n	5958 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    599a:	69a7      	ldr	r7, [r4, #24]
    599c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    599e:	3301      	adds	r3, #1
		slab->free_list = p;
    59a0:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    59a2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    59a4:	e7f5      	b.n	5992 <init_mem_slab_module+0x46>
		return -EINVAL;
    59a6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    59aa:	e7e7      	b.n	597c <init_mem_slab_module+0x30>
    59ac:	20000208 	.word	0x20000208
    59b0:	20000208 	.word	0x20000208
    59b4:	0000ae5d 	.word	0x0000ae5d
    59b8:	0000ae82 	.word	0x0000ae82
    59bc:	0000a283 	.word	0x0000a283
    59c0:	0000ae9f 	.word	0x0000ae9f

000059c4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    59c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    59c8:	4604      	mov	r4, r0
    59ca:	460e      	mov	r6, r1
    59cc:	4690      	mov	r8, r2
    59ce:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    59d0:	f100 0508 	add.w	r5, r0, #8
    59d4:	f04f 0320 	mov.w	r3, #32
    59d8:	f3ef 8711 	mrs	r7, BASEPRI
    59dc:	f383 8812 	msr	BASEPRI_MAX, r3
    59e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59e4:	4628      	mov	r0, r5
    59e6:	f002 f8b5 	bl	7b54 <z_spin_lock_valid>
    59ea:	b968      	cbnz	r0, 5a08 <k_mem_slab_alloc+0x44>
    59ec:	4a24      	ldr	r2, [pc, #144]	; (5a80 <k_mem_slab_alloc+0xbc>)
    59ee:	4925      	ldr	r1, [pc, #148]	; (5a84 <k_mem_slab_alloc+0xc0>)
    59f0:	4825      	ldr	r0, [pc, #148]	; (5a88 <k_mem_slab_alloc+0xc4>)
    59f2:	2381      	movs	r3, #129	; 0x81
    59f4:	f003 fccd 	bl	9392 <printk>
    59f8:	4824      	ldr	r0, [pc, #144]	; (5a8c <k_mem_slab_alloc+0xc8>)
    59fa:	4629      	mov	r1, r5
    59fc:	f003 fcc9 	bl	9392 <printk>
    5a00:	481f      	ldr	r0, [pc, #124]	; (5a80 <k_mem_slab_alloc+0xbc>)
    5a02:	2181      	movs	r1, #129	; 0x81
    5a04:	f003 fad6 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5a08:	4628      	mov	r0, r5
    5a0a:	f002 f8c1 	bl	7b90 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5a0e:	69a3      	ldr	r3, [r4, #24]
    5a10:	b1eb      	cbz	r3, 5a4e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5a12:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5a18:	69e3      	ldr	r3, [r4, #28]
    5a1a:	3301      	adds	r3, #1
    5a1c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5a1e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a20:	4628      	mov	r0, r5
    5a22:	f002 f8a5 	bl	7b70 <z_spin_unlock_valid>
    5a26:	b968      	cbnz	r0, 5a44 <k_mem_slab_alloc+0x80>
    5a28:	4a15      	ldr	r2, [pc, #84]	; (5a80 <k_mem_slab_alloc+0xbc>)
    5a2a:	4919      	ldr	r1, [pc, #100]	; (5a90 <k_mem_slab_alloc+0xcc>)
    5a2c:	4816      	ldr	r0, [pc, #88]	; (5a88 <k_mem_slab_alloc+0xc4>)
    5a2e:	23ac      	movs	r3, #172	; 0xac
    5a30:	f003 fcaf 	bl	9392 <printk>
    5a34:	4817      	ldr	r0, [pc, #92]	; (5a94 <k_mem_slab_alloc+0xd0>)
    5a36:	4629      	mov	r1, r5
    5a38:	f003 fcab 	bl	9392 <printk>
    5a3c:	4810      	ldr	r0, [pc, #64]	; (5a80 <k_mem_slab_alloc+0xbc>)
    5a3e:	21ac      	movs	r1, #172	; 0xac
    5a40:	f003 fab8 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5a44:	f387 8811 	msr	BASEPRI, r7
    5a48:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5a4c:	e013      	b.n	5a76 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5a4e:	ea58 0209 	orrs.w	r2, r8, r9
    5a52:	d103      	bne.n	5a5c <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5a54:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5a56:	f06f 040b 	mvn.w	r4, #11
    5a5a:	e7e1      	b.n	5a20 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5a5c:	4622      	mov	r2, r4
    5a5e:	e9cd 8900 	strd	r8, r9, [sp]
    5a62:	4639      	mov	r1, r7
    5a64:	4628      	mov	r0, r5
    5a66:	f001 f933 	bl	6cd0 <z_pend_curr>
		if (result == 0) {
    5a6a:	4604      	mov	r4, r0
    5a6c:	b918      	cbnz	r0, 5a76 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    5a6e:	4b0a      	ldr	r3, [pc, #40]	; (5a98 <k_mem_slab_alloc+0xd4>)
    5a70:	689b      	ldr	r3, [r3, #8]
    5a72:	695b      	ldr	r3, [r3, #20]
    5a74:	6033      	str	r3, [r6, #0]
}
    5a76:	4620      	mov	r0, r4
    5a78:	b003      	add	sp, #12
    5a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5a7e:	bf00      	nop
    5a80:	0000a546 	.word	0x0000a546
    5a84:	0000a598 	.word	0x0000a598
    5a88:	0000a283 	.word	0x0000a283
    5a8c:	0000a5ad 	.word	0x0000a5ad
    5a90:	0000a56c 	.word	0x0000a56c
    5a94:	0000a583 	.word	0x0000a583
    5a98:	20000c08 	.word	0x20000c08

00005a9c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aa0:	4604      	mov	r4, r0
    5aa2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5aa4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5aa8:	f04f 0320 	mov.w	r3, #32
    5aac:	f3ef 8711 	mrs	r7, BASEPRI
    5ab0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ab8:	4628      	mov	r0, r5
    5aba:	f002 f84b 	bl	7b54 <z_spin_lock_valid>
    5abe:	b968      	cbnz	r0, 5adc <k_mem_slab_free+0x40>
    5ac0:	4a22      	ldr	r2, [pc, #136]	; (5b4c <k_mem_slab_free+0xb0>)
    5ac2:	4923      	ldr	r1, [pc, #140]	; (5b50 <k_mem_slab_free+0xb4>)
    5ac4:	4823      	ldr	r0, [pc, #140]	; (5b54 <k_mem_slab_free+0xb8>)
    5ac6:	2381      	movs	r3, #129	; 0x81
    5ac8:	f003 fc63 	bl	9392 <printk>
    5acc:	4822      	ldr	r0, [pc, #136]	; (5b58 <k_mem_slab_free+0xbc>)
    5ace:	4629      	mov	r1, r5
    5ad0:	f003 fc5f 	bl	9392 <printk>
    5ad4:	481d      	ldr	r0, [pc, #116]	; (5b4c <k_mem_slab_free+0xb0>)
    5ad6:	2181      	movs	r1, #129	; 0x81
    5ad8:	f003 fa6c 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5adc:	4628      	mov	r0, r5
    5ade:	f002 f857 	bl	7b90 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5ae2:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5ae6:	f1b8 0f00 	cmp.w	r8, #0
    5aea:	d10f      	bne.n	5b0c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5aec:	4620      	mov	r0, r4
    5aee:	f001 faed 	bl	70cc <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5af2:	b158      	cbz	r0, 5b0c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5af4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5af6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5af8:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    5afc:	f000 ff36 	bl	696c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5b00:	4639      	mov	r1, r7
    5b02:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5b08:	f000 bc90 	b.w	642c <z_reschedule>
	**(char ***) mem = slab->free_list;
    5b0c:	6833      	ldr	r3, [r6, #0]
    5b0e:	69a2      	ldr	r2, [r4, #24]
    5b10:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5b12:	6833      	ldr	r3, [r6, #0]
    5b14:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5b16:	69e3      	ldr	r3, [r4, #28]
    5b18:	3b01      	subs	r3, #1
    5b1a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b1c:	4628      	mov	r0, r5
    5b1e:	f002 f827 	bl	7b70 <z_spin_unlock_valid>
    5b22:	b968      	cbnz	r0, 5b40 <k_mem_slab_free+0xa4>
    5b24:	4a09      	ldr	r2, [pc, #36]	; (5b4c <k_mem_slab_free+0xb0>)
    5b26:	490d      	ldr	r1, [pc, #52]	; (5b5c <k_mem_slab_free+0xc0>)
    5b28:	480a      	ldr	r0, [pc, #40]	; (5b54 <k_mem_slab_free+0xb8>)
    5b2a:	23ac      	movs	r3, #172	; 0xac
    5b2c:	f003 fc31 	bl	9392 <printk>
    5b30:	480b      	ldr	r0, [pc, #44]	; (5b60 <k_mem_slab_free+0xc4>)
    5b32:	4629      	mov	r1, r5
    5b34:	f003 fc2d 	bl	9392 <printk>
    5b38:	4804      	ldr	r0, [pc, #16]	; (5b4c <k_mem_slab_free+0xb0>)
    5b3a:	21ac      	movs	r1, #172	; 0xac
    5b3c:	f003 fa3a 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5b40:	f387 8811 	msr	BASEPRI, r7
    5b44:	f3bf 8f6f 	isb	sy
}
    5b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b4c:	0000a546 	.word	0x0000a546
    5b50:	0000a598 	.word	0x0000a598
    5b54:	0000a283 	.word	0x0000a283
    5b58:	0000a5ad 	.word	0x0000a5ad
    5b5c:	0000a56c 	.word	0x0000a56c
    5b60:	0000a583 	.word	0x0000a583

00005b64 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5b68:	4604      	mov	r4, r0
    5b6a:	4616      	mov	r6, r2
    5b6c:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5b6e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5b72:	b163      	cbz	r3, 5b8e <z_impl_k_mutex_lock+0x2a>
    5b74:	4970      	ldr	r1, [pc, #448]	; (5d38 <z_impl_k_mutex_lock+0x1d4>)
    5b76:	4a71      	ldr	r2, [pc, #452]	; (5d3c <z_impl_k_mutex_lock+0x1d8>)
    5b78:	4871      	ldr	r0, [pc, #452]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5b7a:	2365      	movs	r3, #101	; 0x65
    5b7c:	f003 fc09 	bl	9392 <printk>
    5b80:	4870      	ldr	r0, [pc, #448]	; (5d44 <z_impl_k_mutex_lock+0x1e0>)
    5b82:	f003 fc06 	bl	9392 <printk>
    5b86:	486d      	ldr	r0, [pc, #436]	; (5d3c <z_impl_k_mutex_lock+0x1d8>)
    5b88:	2165      	movs	r1, #101	; 0x65
    5b8a:	f003 fa13 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5b8e:	f04f 0320 	mov.w	r3, #32
    5b92:	f3ef 8811 	mrs	r8, BASEPRI
    5b96:	f383 8812 	msr	BASEPRI_MAX, r3
    5b9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b9e:	486a      	ldr	r0, [pc, #424]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5ba0:	f001 ffd8 	bl	7b54 <z_spin_lock_valid>
    5ba4:	b968      	cbnz	r0, 5bc2 <z_impl_k_mutex_lock+0x5e>
    5ba6:	4a69      	ldr	r2, [pc, #420]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5ba8:	4969      	ldr	r1, [pc, #420]	; (5d50 <z_impl_k_mutex_lock+0x1ec>)
    5baa:	4865      	ldr	r0, [pc, #404]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5bac:	2381      	movs	r3, #129	; 0x81
    5bae:	f003 fbf0 	bl	9392 <printk>
    5bb2:	4965      	ldr	r1, [pc, #404]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5bb4:	4867      	ldr	r0, [pc, #412]	; (5d54 <z_impl_k_mutex_lock+0x1f0>)
    5bb6:	f003 fbec 	bl	9392 <printk>
    5bba:	4864      	ldr	r0, [pc, #400]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5bbc:	2181      	movs	r1, #129	; 0x81
    5bbe:	f003 f9f9 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5bc2:	4861      	ldr	r0, [pc, #388]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5bc4:	f001 ffe4 	bl	7b90 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5bc8:	68e3      	ldr	r3, [r4, #12]
    5bca:	4a63      	ldr	r2, [pc, #396]	; (5d58 <z_impl_k_mutex_lock+0x1f4>)
    5bcc:	b1fb      	cbz	r3, 5c0e <z_impl_k_mutex_lock+0xaa>
    5bce:	68a0      	ldr	r0, [r4, #8]
    5bd0:	6891      	ldr	r1, [r2, #8]
    5bd2:	4288      	cmp	r0, r1
    5bd4:	d03d      	beq.n	5c52 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5bd6:	ea56 0307 	orrs.w	r3, r6, r7
    5bda:	d13c      	bne.n	5c56 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bdc:	485a      	ldr	r0, [pc, #360]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5bde:	f001 ffc7 	bl	7b70 <z_spin_unlock_valid>
    5be2:	b968      	cbnz	r0, 5c00 <z_impl_k_mutex_lock+0x9c>
    5be4:	4a59      	ldr	r2, [pc, #356]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5be6:	495d      	ldr	r1, [pc, #372]	; (5d5c <z_impl_k_mutex_lock+0x1f8>)
    5be8:	4855      	ldr	r0, [pc, #340]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5bea:	23ac      	movs	r3, #172	; 0xac
    5bec:	f003 fbd1 	bl	9392 <printk>
    5bf0:	4955      	ldr	r1, [pc, #340]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5bf2:	485b      	ldr	r0, [pc, #364]	; (5d60 <z_impl_k_mutex_lock+0x1fc>)
    5bf4:	f003 fbcd 	bl	9392 <printk>
    5bf8:	4854      	ldr	r0, [pc, #336]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5bfa:	21ac      	movs	r1, #172	; 0xac
    5bfc:	f003 f9da 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5c00:	f388 8811 	msr	BASEPRI, r8
    5c04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5c08:	f06f 000f 	mvn.w	r0, #15
    5c0c:	e01e      	b.n	5c4c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    5c0e:	6891      	ldr	r1, [r2, #8]
    5c10:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5c14:	484c      	ldr	r0, [pc, #304]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5c16:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5c18:	3301      	adds	r3, #1
    5c1a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5c1c:	6893      	ldr	r3, [r2, #8]
    5c1e:	60a3      	str	r3, [r4, #8]
    5c20:	f001 ffa6 	bl	7b70 <z_spin_unlock_valid>
    5c24:	b968      	cbnz	r0, 5c42 <z_impl_k_mutex_lock+0xde>
    5c26:	4a49      	ldr	r2, [pc, #292]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5c28:	494c      	ldr	r1, [pc, #304]	; (5d5c <z_impl_k_mutex_lock+0x1f8>)
    5c2a:	4845      	ldr	r0, [pc, #276]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5c2c:	23ac      	movs	r3, #172	; 0xac
    5c2e:	f003 fbb0 	bl	9392 <printk>
    5c32:	4945      	ldr	r1, [pc, #276]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5c34:	484a      	ldr	r0, [pc, #296]	; (5d60 <z_impl_k_mutex_lock+0x1fc>)
    5c36:	f003 fbac 	bl	9392 <printk>
    5c3a:	4844      	ldr	r0, [pc, #272]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5c3c:	21ac      	movs	r1, #172	; 0xac
    5c3e:	f003 f9b9 	bl	8fb4 <assert_post_action>
    5c42:	f388 8811 	msr	BASEPRI, r8
    5c46:	f3bf 8f6f 	isb	sy
		return 0;
    5c4a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5c4c:	b002      	add	sp, #8
    5c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5c52:	6921      	ldr	r1, [r4, #16]
    5c54:	e7de      	b.n	5c14 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5c56:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5c5a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5c5e:	4299      	cmp	r1, r3
    5c60:	bfa8      	it	ge
    5c62:	4619      	movge	r1, r3
    5c64:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5c68:	4291      	cmp	r1, r2
    5c6a:	bfb8      	it	lt
    5c6c:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5c6e:	428b      	cmp	r3, r1
    5c70:	dd44      	ble.n	5cfc <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5c72:	f001 f85d 	bl	6d30 <z_set_prio>
    5c76:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5c78:	e9cd 6700 	strd	r6, r7, [sp]
    5c7c:	4832      	ldr	r0, [pc, #200]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5c7e:	4622      	mov	r2, r4
    5c80:	4641      	mov	r1, r8
    5c82:	f001 f825 	bl	6cd0 <z_pend_curr>
	if (got_mutex == 0) {
    5c86:	2800      	cmp	r0, #0
    5c88:	d0e0      	beq.n	5c4c <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5c8a:	f04f 0320 	mov.w	r3, #32
    5c8e:	f3ef 8611 	mrs	r6, BASEPRI
    5c92:	f383 8812 	msr	BASEPRI_MAX, r3
    5c96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c9a:	482b      	ldr	r0, [pc, #172]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5c9c:	f001 ff5a 	bl	7b54 <z_spin_lock_valid>
    5ca0:	b968      	cbnz	r0, 5cbe <z_impl_k_mutex_lock+0x15a>
    5ca2:	4a2a      	ldr	r2, [pc, #168]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5ca4:	492a      	ldr	r1, [pc, #168]	; (5d50 <z_impl_k_mutex_lock+0x1ec>)
    5ca6:	4826      	ldr	r0, [pc, #152]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5ca8:	2381      	movs	r3, #129	; 0x81
    5caa:	f003 fb72 	bl	9392 <printk>
    5cae:	4926      	ldr	r1, [pc, #152]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5cb0:	4828      	ldr	r0, [pc, #160]	; (5d54 <z_impl_k_mutex_lock+0x1f0>)
    5cb2:	f003 fb6e 	bl	9392 <printk>
    5cb6:	4825      	ldr	r0, [pc, #148]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5cb8:	2181      	movs	r1, #129	; 0x81
    5cba:	f003 f97b 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5cbe:	4822      	ldr	r0, [pc, #136]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5cc0:	f001 ff66 	bl	7b90 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5cc4:	6823      	ldr	r3, [r4, #0]
    5cc6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cc8:	429c      	cmp	r4, r3
    5cca:	d00a      	beq.n	5ce2 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5ccc:	b14b      	cbz	r3, 5ce2 <z_impl_k_mutex_lock+0x17e>
    5cce:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5cd2:	4299      	cmp	r1, r3
    5cd4:	bfa8      	it	ge
    5cd6:	4619      	movge	r1, r3
    5cd8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5cdc:	4299      	cmp	r1, r3
    5cde:	bfb8      	it	lt
    5ce0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5ce2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5ce4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5ce8:	4299      	cmp	r1, r3
    5cea:	d109      	bne.n	5d00 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    5cec:	b16d      	cbz	r5, 5d0a <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    5cee:	4816      	ldr	r0, [pc, #88]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5cf0:	4631      	mov	r1, r6
    5cf2:	f000 fb9b 	bl	642c <z_reschedule>
	return -EAGAIN;
    5cf6:	f06f 000a 	mvn.w	r0, #10
    5cfa:	e7a7      	b.n	5c4c <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    5cfc:	2500      	movs	r5, #0
    5cfe:	e7bb      	b.n	5c78 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5d00:	f001 f816 	bl	6d30 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5d04:	2800      	cmp	r0, #0
    5d06:	d1f2      	bne.n	5cee <z_impl_k_mutex_lock+0x18a>
    5d08:	e7f0      	b.n	5cec <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d0a:	480f      	ldr	r0, [pc, #60]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5d0c:	f001 ff30 	bl	7b70 <z_spin_unlock_valid>
    5d10:	b968      	cbnz	r0, 5d2e <z_impl_k_mutex_lock+0x1ca>
    5d12:	4a0e      	ldr	r2, [pc, #56]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5d14:	4911      	ldr	r1, [pc, #68]	; (5d5c <z_impl_k_mutex_lock+0x1f8>)
    5d16:	480a      	ldr	r0, [pc, #40]	; (5d40 <z_impl_k_mutex_lock+0x1dc>)
    5d18:	23ac      	movs	r3, #172	; 0xac
    5d1a:	f003 fb3a 	bl	9392 <printk>
    5d1e:	490a      	ldr	r1, [pc, #40]	; (5d48 <z_impl_k_mutex_lock+0x1e4>)
    5d20:	480f      	ldr	r0, [pc, #60]	; (5d60 <z_impl_k_mutex_lock+0x1fc>)
    5d22:	f003 fb36 	bl	9392 <printk>
    5d26:	4809      	ldr	r0, [pc, #36]	; (5d4c <z_impl_k_mutex_lock+0x1e8>)
    5d28:	21ac      	movs	r1, #172	; 0xac
    5d2a:	f003 f943 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5d2e:	f386 8811 	msr	BASEPRI, r6
    5d32:	f3bf 8f6f 	isb	sy
    5d36:	e7de      	b.n	5cf6 <z_impl_k_mutex_lock+0x192>
    5d38:	0000aee0 	.word	0x0000aee0
    5d3c:	0000aebe 	.word	0x0000aebe
    5d40:	0000a283 	.word	0x0000a283
    5d44:	0000aef2 	.word	0x0000aef2
    5d48:	20000c30 	.word	0x20000c30
    5d4c:	0000a546 	.word	0x0000a546
    5d50:	0000a598 	.word	0x0000a598
    5d54:	0000a5ad 	.word	0x0000a5ad
    5d58:	20000c08 	.word	0x20000c08
    5d5c:	0000a56c 	.word	0x0000a56c
    5d60:	0000a583 	.word	0x0000a583

00005d64 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5d64:	b538      	push	{r3, r4, r5, lr}
    5d66:	4604      	mov	r4, r0
    5d68:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5d6c:	b163      	cbz	r3, 5d88 <z_impl_k_mutex_unlock+0x24>
    5d6e:	4952      	ldr	r1, [pc, #328]	; (5eb8 <z_impl_k_mutex_unlock+0x154>)
    5d70:	4a52      	ldr	r2, [pc, #328]	; (5ebc <z_impl_k_mutex_unlock+0x158>)
    5d72:	4853      	ldr	r0, [pc, #332]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5d74:	23c7      	movs	r3, #199	; 0xc7
    5d76:	f003 fb0c 	bl	9392 <printk>
    5d7a:	4852      	ldr	r0, [pc, #328]	; (5ec4 <z_impl_k_mutex_unlock+0x160>)
    5d7c:	f003 fb09 	bl	9392 <printk>
    5d80:	484e      	ldr	r0, [pc, #312]	; (5ebc <z_impl_k_mutex_unlock+0x158>)
    5d82:	21c7      	movs	r1, #199	; 0xc7
    5d84:	f003 f916 	bl	8fb4 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5d88:	68a3      	ldr	r3, [r4, #8]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	f000 808d 	beq.w	5eaa <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5d90:	4d4d      	ldr	r5, [pc, #308]	; (5ec8 <z_impl_k_mutex_unlock+0x164>)
    5d92:	68aa      	ldr	r2, [r5, #8]
    5d94:	4293      	cmp	r3, r2
    5d96:	f040 808b 	bne.w	5eb0 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5d9a:	68e3      	ldr	r3, [r4, #12]
    5d9c:	b94b      	cbnz	r3, 5db2 <z_impl_k_mutex_unlock+0x4e>
    5d9e:	494b      	ldr	r1, [pc, #300]	; (5ecc <z_impl_k_mutex_unlock+0x168>)
    5da0:	4847      	ldr	r0, [pc, #284]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5da2:	4a46      	ldr	r2, [pc, #280]	; (5ebc <z_impl_k_mutex_unlock+0x158>)
    5da4:	23df      	movs	r3, #223	; 0xdf
    5da6:	f003 faf4 	bl	9392 <printk>
    5daa:	4844      	ldr	r0, [pc, #272]	; (5ebc <z_impl_k_mutex_unlock+0x158>)
    5dac:	21df      	movs	r1, #223	; 0xdf
    5dae:	f003 f901 	bl	8fb4 <assert_post_action>
    5db2:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5db6:	b163      	cbz	r3, 5dd2 <z_impl_k_mutex_unlock+0x6e>
    5db8:	493f      	ldr	r1, [pc, #252]	; (5eb8 <z_impl_k_mutex_unlock+0x154>)
    5dba:	4a45      	ldr	r2, [pc, #276]	; (5ed0 <z_impl_k_mutex_unlock+0x16c>)
    5dbc:	4840      	ldr	r0, [pc, #256]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5dbe:	23fd      	movs	r3, #253	; 0xfd
    5dc0:	f003 fae7 	bl	9392 <printk>
    5dc4:	4843      	ldr	r0, [pc, #268]	; (5ed4 <z_impl_k_mutex_unlock+0x170>)
    5dc6:	f003 fae4 	bl	9392 <printk>
    5dca:	4841      	ldr	r0, [pc, #260]	; (5ed0 <z_impl_k_mutex_unlock+0x16c>)
    5dcc:	21fd      	movs	r1, #253	; 0xfd
    5dce:	f003 f8f1 	bl	8fb4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5dd2:	68ab      	ldr	r3, [r5, #8]
    5dd4:	7bdb      	ldrb	r3, [r3, #15]
    5dd6:	2b01      	cmp	r3, #1
    5dd8:	d10c      	bne.n	5df4 <z_impl_k_mutex_unlock+0x90>
    5dda:	493f      	ldr	r1, [pc, #252]	; (5ed8 <z_impl_k_mutex_unlock+0x174>)
    5ddc:	4a3c      	ldr	r2, [pc, #240]	; (5ed0 <z_impl_k_mutex_unlock+0x16c>)
    5dde:	4838      	ldr	r0, [pc, #224]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5de0:	23fe      	movs	r3, #254	; 0xfe
    5de2:	f003 fad6 	bl	9392 <printk>
    5de6:	483b      	ldr	r0, [pc, #236]	; (5ed4 <z_impl_k_mutex_unlock+0x170>)
    5de8:	f003 fad3 	bl	9392 <printk>
    5dec:	4838      	ldr	r0, [pc, #224]	; (5ed0 <z_impl_k_mutex_unlock+0x16c>)
    5dee:	21fe      	movs	r1, #254	; 0xfe
    5df0:	f003 f8e0 	bl	8fb4 <assert_post_action>

	--_current->base.sched_locked;
    5df4:	68aa      	ldr	r2, [r5, #8]
    5df6:	7bd3      	ldrb	r3, [r2, #15]
    5df8:	3b01      	subs	r3, #1
    5dfa:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5dfc:	68e3      	ldr	r3, [r4, #12]
    5dfe:	2b01      	cmp	r3, #1
    5e00:	d905      	bls.n	5e0e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5e02:	3b01      	subs	r3, #1
    5e04:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5e06:	f001 f899 	bl	6f3c <k_sched_unlock>

	return 0;
    5e0a:	2000      	movs	r0, #0
}
    5e0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5e0e:	f04f 0320 	mov.w	r3, #32
    5e12:	f3ef 8511 	mrs	r5, BASEPRI
    5e16:	f383 8812 	msr	BASEPRI_MAX, r3
    5e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e1e:	482f      	ldr	r0, [pc, #188]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e20:	f001 fe98 	bl	7b54 <z_spin_lock_valid>
    5e24:	b968      	cbnz	r0, 5e42 <z_impl_k_mutex_unlock+0xde>
    5e26:	4a2e      	ldr	r2, [pc, #184]	; (5ee0 <z_impl_k_mutex_unlock+0x17c>)
    5e28:	492e      	ldr	r1, [pc, #184]	; (5ee4 <z_impl_k_mutex_unlock+0x180>)
    5e2a:	4825      	ldr	r0, [pc, #148]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5e2c:	2381      	movs	r3, #129	; 0x81
    5e2e:	f003 fab0 	bl	9392 <printk>
    5e32:	492a      	ldr	r1, [pc, #168]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e34:	482c      	ldr	r0, [pc, #176]	; (5ee8 <z_impl_k_mutex_unlock+0x184>)
    5e36:	f003 faac 	bl	9392 <printk>
    5e3a:	4829      	ldr	r0, [pc, #164]	; (5ee0 <z_impl_k_mutex_unlock+0x17c>)
    5e3c:	2181      	movs	r1, #129	; 0x81
    5e3e:	f003 f8b9 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e42:	4826      	ldr	r0, [pc, #152]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e44:	f001 fea4 	bl	7b90 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5e48:	68a0      	ldr	r0, [r4, #8]
    5e4a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    5e4c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5e50:	4299      	cmp	r1, r3
    5e52:	d001      	beq.n	5e58 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    5e54:	f000 ff6c 	bl	6d30 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5e58:	4620      	mov	r0, r4
    5e5a:	f001 f937 	bl	70cc <z_unpend_first_thread>
	mutex->owner = new_owner;
    5e5e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5e60:	b158      	cbz	r0, 5e7a <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    5e62:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5e66:	6122      	str	r2, [r4, #16]
    5e68:	2200      	movs	r2, #0
    5e6a:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    5e6c:	f000 fd7e 	bl	696c <z_ready_thread>
		z_reschedule(&lock, key);
    5e70:	481a      	ldr	r0, [pc, #104]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e72:	4629      	mov	r1, r5
    5e74:	f000 fada 	bl	642c <z_reschedule>
    5e78:	e7c5      	b.n	5e06 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    5e7a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e7c:	4817      	ldr	r0, [pc, #92]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e7e:	f001 fe77 	bl	7b70 <z_spin_unlock_valid>
    5e82:	b968      	cbnz	r0, 5ea0 <z_impl_k_mutex_unlock+0x13c>
    5e84:	4a16      	ldr	r2, [pc, #88]	; (5ee0 <z_impl_k_mutex_unlock+0x17c>)
    5e86:	4919      	ldr	r1, [pc, #100]	; (5eec <z_impl_k_mutex_unlock+0x188>)
    5e88:	480d      	ldr	r0, [pc, #52]	; (5ec0 <z_impl_k_mutex_unlock+0x15c>)
    5e8a:	23ac      	movs	r3, #172	; 0xac
    5e8c:	f003 fa81 	bl	9392 <printk>
    5e90:	4912      	ldr	r1, [pc, #72]	; (5edc <z_impl_k_mutex_unlock+0x178>)
    5e92:	4817      	ldr	r0, [pc, #92]	; (5ef0 <z_impl_k_mutex_unlock+0x18c>)
    5e94:	f003 fa7d 	bl	9392 <printk>
    5e98:	4811      	ldr	r0, [pc, #68]	; (5ee0 <z_impl_k_mutex_unlock+0x17c>)
    5e9a:	21ac      	movs	r1, #172	; 0xac
    5e9c:	f003 f88a 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    5ea0:	f385 8811 	msr	BASEPRI, r5
    5ea4:	f3bf 8f6f 	isb	sy
    5ea8:	e7ad      	b.n	5e06 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    5eaa:	f06f 0015 	mvn.w	r0, #21
    5eae:	e7ad      	b.n	5e0c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5eb0:	f04f 30ff 	mov.w	r0, #4294967295
    5eb4:	e7aa      	b.n	5e0c <z_impl_k_mutex_unlock+0xa8>
    5eb6:	bf00      	nop
    5eb8:	0000aee0 	.word	0x0000aee0
    5ebc:	0000aebe 	.word	0x0000aebe
    5ec0:	0000a283 	.word	0x0000a283
    5ec4:	0000aef2 	.word	0x0000aef2
    5ec8:	20000c08 	.word	0x20000c08
    5ecc:	0000af17 	.word	0x0000af17
    5ed0:	0000af2e 	.word	0x0000af2e
    5ed4:	0000af59 	.word	0x0000af59
    5ed8:	0000af5c 	.word	0x0000af5c
    5edc:	20000c30 	.word	0x20000c30
    5ee0:	0000a546 	.word	0x0000a546
    5ee4:	0000a598 	.word	0x0000a598
    5ee8:	0000a5ad 	.word	0x0000a5ad
    5eec:	0000a56c 	.word	0x0000a56c
    5ef0:	0000a583 	.word	0x0000a583

00005ef4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    5ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    5ef8:	6884      	ldr	r4, [r0, #8]
{
    5efa:	4605      	mov	r5, r0
    5efc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    5efe:	b1d4      	cbz	r4, 5f36 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    5f00:	7863      	ldrb	r3, [r4, #1]
    5f02:	2b01      	cmp	r3, #1
    5f04:	d14b      	bne.n	5f9e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    5f06:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    5f0a:	d10e      	bne.n	5f2a <signal_poll_event+0x36>
    5f0c:	4a30      	ldr	r2, [pc, #192]	; (5fd0 <signal_poll_event+0xdc>)
    5f0e:	4931      	ldr	r1, [pc, #196]	; (5fd4 <signal_poll_event+0xe0>)
    5f10:	4831      	ldr	r0, [pc, #196]	; (5fd8 <signal_poll_event+0xe4>)
    5f12:	23f9      	movs	r3, #249	; 0xf9
    5f14:	f003 fa3d 	bl	9392 <printk>
    5f18:	4830      	ldr	r0, [pc, #192]	; (5fdc <signal_poll_event+0xe8>)
    5f1a:	f003 fa3a 	bl	9392 <printk>
    5f1e:	482c      	ldr	r0, [pc, #176]	; (5fd0 <signal_poll_event+0xdc>)
    5f20:	21f9      	movs	r1, #249	; 0xf9
    5f22:	f003 f847 	bl	8fb4 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    5f26:	7b7b      	ldrb	r3, [r7, #13]
    5f28:	deff      	udf	#255	; 0xff
    5f2a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5f2e:	f013 0302 	ands.w	r3, r3, #2
    5f32:	d10a      	bne.n	5f4a <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    5f34:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    5f36:	68eb      	ldr	r3, [r5, #12]
    5f38:	f3c3 3145 	ubfx	r1, r3, #13, #6
    5f3c:	430e      	orrs	r6, r1
	event->poller = NULL;
    5f3e:	2000      	movs	r0, #0
	event->state |= state;
    5f40:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    5f44:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    5f46:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    5f48:	e00d      	b.n	5f66 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    5f4a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    5f4e:	f04f 31ff 	mov.w	r1, #4294967295
    5f52:	f06f 0001 	mvn.w	r0, #1
    5f56:	428b      	cmp	r3, r1
    5f58:	bf08      	it	eq
    5f5a:	4282      	cmpeq	r2, r0
    5f5c:	d105      	bne.n	5f6a <signal_poll_event+0x76>
		poller->is_polling = false;
    5f5e:	2300      	movs	r3, #0
    5f60:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    5f62:	f06f 000a 	mvn.w	r0, #10
}
    5f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    5f6a:	4638      	mov	r0, r7
    5f6c:	f000 fb5a 	bl	6624 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    5f70:	2e08      	cmp	r6, #8
    5f72:	bf0c      	ite	eq
    5f74:	f06f 0303 	mvneq.w	r3, #3
    5f78:	2300      	movne	r3, #0
    5f7a:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5f7c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    5f80:	06db      	lsls	r3, r3, #27
    5f82:	d104      	bne.n	5f8e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    5f84:	f854 8c48 	ldr.w	r8, [r4, #-72]
    5f88:	f1b8 0f00 	cmp.w	r8, #0
    5f8c:	d001      	beq.n	5f92 <signal_poll_event+0x9e>
		poller->is_polling = false;
    5f8e:	2300      	movs	r3, #0
    5f90:	e7d0      	b.n	5f34 <signal_poll_event+0x40>
	z_ready_thread(thread);
    5f92:	4638      	mov	r0, r7
    5f94:	f000 fcea 	bl	696c <z_ready_thread>
		poller->is_polling = false;
    5f98:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    5f9c:	e7cb      	b.n	5f36 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    5f9e:	2b02      	cmp	r3, #2
    5fa0:	d1f5      	bne.n	5f8e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    5fa2:	7823      	ldrb	r3, [r4, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d0c6      	beq.n	5f36 <signal_poll_event+0x42>
    5fa8:	f854 7c04 	ldr.w	r7, [r4, #-4]
    5fac:	b177      	cbz	r7, 5fcc <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    5fae:	f1a4 0914 	sub.w	r9, r4, #20
    5fb2:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    5fb6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    5fba:	f001 ff15 	bl	7de8 <z_abort_timeout>
		twork->poll_result = 0;
    5fbe:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    5fc2:	4649      	mov	r1, r9
    5fc4:	4638      	mov	r0, r7
    5fc6:	f002 fb9d 	bl	8704 <k_work_submit_to_queue>
    5fca:	e7e5      	b.n	5f98 <signal_poll_event+0xa4>
		poller->is_polling = false;
    5fcc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    5fce:	e7b2      	b.n	5f36 <signal_poll_event+0x42>
    5fd0:	0000af8d 	.word	0x0000af8d
    5fd4:	0000b088 	.word	0x0000b088
    5fd8:	0000a283 	.word	0x0000a283
    5fdc:	0000b09e 	.word	0x0000b09e

00005fe0 <z_impl_k_poll_signal_raise>:
{
    5fe0:	b570      	push	{r4, r5, r6, lr}
    5fe2:	4604      	mov	r4, r0
    5fe4:	460d      	mov	r5, r1
	__asm__ volatile(
    5fe6:	f04f 0320 	mov.w	r3, #32
    5fea:	f3ef 8611 	mrs	r6, BASEPRI
    5fee:	f383 8812 	msr	BASEPRI_MAX, r3
    5ff2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ff6:	4821      	ldr	r0, [pc, #132]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    5ff8:	f001 fdac 	bl	7b54 <z_spin_lock_valid>
    5ffc:	b968      	cbnz	r0, 601a <z_impl_k_poll_signal_raise+0x3a>
    5ffe:	4a20      	ldr	r2, [pc, #128]	; (6080 <z_impl_k_poll_signal_raise+0xa0>)
    6000:	4920      	ldr	r1, [pc, #128]	; (6084 <z_impl_k_poll_signal_raise+0xa4>)
    6002:	4821      	ldr	r0, [pc, #132]	; (6088 <z_impl_k_poll_signal_raise+0xa8>)
    6004:	2381      	movs	r3, #129	; 0x81
    6006:	f003 f9c4 	bl	9392 <printk>
    600a:	491c      	ldr	r1, [pc, #112]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    600c:	481f      	ldr	r0, [pc, #124]	; (608c <z_impl_k_poll_signal_raise+0xac>)
    600e:	f003 f9c0 	bl	9392 <printk>
    6012:	481b      	ldr	r0, [pc, #108]	; (6080 <z_impl_k_poll_signal_raise+0xa0>)
    6014:	2181      	movs	r1, #129	; 0x81
    6016:	f002 ffcd 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    601a:	4818      	ldr	r0, [pc, #96]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    601c:	f001 fdb8 	bl	7b90 <z_spin_lock_set_owner>
	return list->head == list;
    6020:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    6022:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    6024:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    6026:	4284      	cmp	r4, r0
    6028:	60a1      	str	r1, [r4, #8]
    602a:	d117      	bne.n	605c <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    602c:	4813      	ldr	r0, [pc, #76]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    602e:	f001 fd9f 	bl	7b70 <z_spin_unlock_valid>
    6032:	b968      	cbnz	r0, 6050 <z_impl_k_poll_signal_raise+0x70>
    6034:	4a12      	ldr	r2, [pc, #72]	; (6080 <z_impl_k_poll_signal_raise+0xa0>)
    6036:	4916      	ldr	r1, [pc, #88]	; (6090 <z_impl_k_poll_signal_raise+0xb0>)
    6038:	4813      	ldr	r0, [pc, #76]	; (6088 <z_impl_k_poll_signal_raise+0xa8>)
    603a:	23ac      	movs	r3, #172	; 0xac
    603c:	f003 f9a9 	bl	9392 <printk>
    6040:	490e      	ldr	r1, [pc, #56]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    6042:	4814      	ldr	r0, [pc, #80]	; (6094 <z_impl_k_poll_signal_raise+0xb4>)
    6044:	f003 f9a5 	bl	9392 <printk>
    6048:	480d      	ldr	r0, [pc, #52]	; (6080 <z_impl_k_poll_signal_raise+0xa0>)
    604a:	21ac      	movs	r1, #172	; 0xac
    604c:	f002 ffb2 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6050:	f386 8811 	msr	BASEPRI, r6
    6054:	f3bf 8f6f 	isb	sy
		return 0;
    6058:	2400      	movs	r4, #0
    605a:	e00d      	b.n	6078 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    605c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6060:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6062:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6064:	2300      	movs	r3, #0
	node->prev = NULL;
    6066:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    606a:	f7ff ff43 	bl	5ef4 <signal_poll_event>
	z_reschedule(&lock, key);
    606e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    6070:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    6072:	4802      	ldr	r0, [pc, #8]	; (607c <z_impl_k_poll_signal_raise+0x9c>)
    6074:	f000 f9da 	bl	642c <z_reschedule>
}
    6078:	4620      	mov	r0, r4
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	20000c34 	.word	0x20000c34
    6080:	0000a546 	.word	0x0000a546
    6084:	0000a598 	.word	0x0000a598
    6088:	0000a283 	.word	0x0000a283
    608c:	0000a5ad 	.word	0x0000a5ad
    6090:	0000a56c 	.word	0x0000a56c
    6094:	0000a583 	.word	0x0000a583

00006098 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
    6098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    609c:	4604      	mov	r4, r0
    609e:	f89d a020 	ldrb.w	sl, [sp, #32]
    60a2:	460e      	mov	r6, r1
    60a4:	4690      	mov	r8, r2
    60a6:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    60a8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    60ac:	f04f 0320 	mov.w	r3, #32
    60b0:	f3ef 8711 	mrs	r7, BASEPRI
    60b4:	f383 8812 	msr	BASEPRI_MAX, r3
    60b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60bc:	4628      	mov	r0, r5
    60be:	f001 fd49 	bl	7b54 <z_spin_lock_valid>
    60c2:	b968      	cbnz	r0, 60e0 <queue_insert+0x48>
    60c4:	4a3b      	ldr	r2, [pc, #236]	; (61b4 <queue_insert+0x11c>)
    60c6:	493c      	ldr	r1, [pc, #240]	; (61b8 <queue_insert+0x120>)
    60c8:	483c      	ldr	r0, [pc, #240]	; (61bc <queue_insert+0x124>)
    60ca:	2381      	movs	r3, #129	; 0x81
    60cc:	f003 f961 	bl	9392 <printk>
    60d0:	483b      	ldr	r0, [pc, #236]	; (61c0 <queue_insert+0x128>)
    60d2:	4629      	mov	r1, r5
    60d4:	f003 f95d 	bl	9392 <printk>
    60d8:	4836      	ldr	r0, [pc, #216]	; (61b4 <queue_insert+0x11c>)
    60da:	2181      	movs	r1, #129	; 0x81
    60dc:	f002 ff6a 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    60e0:	4628      	mov	r0, r5
    60e2:	f001 fd55 	bl	7b90 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
    60e6:	f1ba 0f00 	cmp.w	sl, #0
    60ea:	d000      	beq.n	60ee <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
    60ec:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    60ee:	f104 000c 	add.w	r0, r4, #12
    60f2:	f000 ffeb 	bl	70cc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
    60f6:	b158      	cbz	r0, 6110 <queue_insert+0x78>
    60f8:	2400      	movs	r4, #0
    60fa:	67c4      	str	r4, [r0, #124]	; 0x7c
    60fc:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    6100:	f000 fc34 	bl	696c <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
    6104:	4628      	mov	r0, r5
    6106:	4639      	mov	r1, r7
    6108:	f000 f990 	bl	642c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
    610c:	2000      	movs	r0, #0
    610e:	e01e      	b.n	614e <queue_insert+0xb6>
	if (alloc) {
    6110:	f1b9 0f00 	cmp.w	r9, #0
    6114:	d02d      	beq.n	6172 <queue_insert+0xda>
	return z_thread_aligned_alloc(0, size);
    6116:	2108      	movs	r1, #8
    6118:	f002 fc26 	bl	8968 <z_thread_aligned_alloc>
		if (anode == NULL) {
    611c:	b9c8      	cbnz	r0, 6152 <queue_insert+0xba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    611e:	4628      	mov	r0, r5
    6120:	f001 fd26 	bl	7b70 <z_spin_unlock_valid>
    6124:	b968      	cbnz	r0, 6142 <queue_insert+0xaa>
    6126:	4a23      	ldr	r2, [pc, #140]	; (61b4 <queue_insert+0x11c>)
    6128:	4926      	ldr	r1, [pc, #152]	; (61c4 <queue_insert+0x12c>)
    612a:	4824      	ldr	r0, [pc, #144]	; (61bc <queue_insert+0x124>)
    612c:	23ac      	movs	r3, #172	; 0xac
    612e:	f003 f930 	bl	9392 <printk>
    6132:	4825      	ldr	r0, [pc, #148]	; (61c8 <queue_insert+0x130>)
    6134:	4629      	mov	r1, r5
    6136:	f003 f92c 	bl	9392 <printk>
    613a:	481e      	ldr	r0, [pc, #120]	; (61b4 <queue_insert+0x11c>)
    613c:	21ac      	movs	r1, #172	; 0xac
    613e:	f002 ff39 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6142:	f387 8811 	msr	BASEPRI, r7
    6146:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    614a:	f06f 000b 	mvn.w	r0, #11
}
    614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
    6152:	2301      	movs	r3, #1
		anode->data = data;
    6154:	f8c0 8004 	str.w	r8, [r0, #4]
    6158:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
    615a:	6803      	ldr	r3, [r0, #0]
    615c:	f003 0303 	and.w	r3, r3, #3
    6160:	b95e      	cbnz	r6, 617a <queue_insert+0xe2>
	parent->next_and_flags = cur_flags | (unative_t)child;
    6162:	6822      	ldr	r2, [r4, #0]
    6164:	4313      	orrs	r3, r2
    6166:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    6168:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    616a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    616c:	b973      	cbnz	r3, 618c <queue_insert+0xf4>
	list->tail = node;
    616e:	6060      	str	r0, [r4, #4]
}
    6170:	e00c      	b.n	618c <queue_insert+0xf4>
	node->next_and_flags = flags;
    6172:	f8c8 9000 	str.w	r9, [r8]
}
    6176:	4640      	mov	r0, r8
    6178:	e7ef      	b.n	615a <queue_insert+0xc2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    617a:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    617c:	f032 0203 	bics.w	r2, r2, #3
    6180:	d110      	bne.n	61a4 <queue_insert+0x10c>
Z_GENLIST_APPEND(sflist, sfnode)
    6182:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
    6184:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
    6186:	b93a      	cbnz	r2, 6198 <queue_insert+0x100>
	list->head = node;
    6188:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
    618c:	2104      	movs	r1, #4
    618e:	f104 0014 	add.w	r0, r4, #20
    6192:	f003 fc49 	bl	9a28 <z_handle_obj_poll_events>
    6196:	e7b5      	b.n	6104 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    6198:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    619a:	f003 0303 	and.w	r3, r3, #3
    619e:	4303      	orrs	r3, r0
    61a0:	6013      	str	r3, [r2, #0]
    61a2:	e7e4      	b.n	616e <queue_insert+0xd6>
    61a4:	4313      	orrs	r3, r2
    61a6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    61a8:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    61aa:	f003 0303 	and.w	r3, r3, #3
    61ae:	4303      	orrs	r3, r0
    61b0:	6033      	str	r3, [r6, #0]
}
    61b2:	e7eb      	b.n	618c <queue_insert+0xf4>
    61b4:	0000a546 	.word	0x0000a546
    61b8:	0000a598 	.word	0x0000a598
    61bc:	0000a283 	.word	0x0000a283
    61c0:	0000a5ad 	.word	0x0000a5ad
    61c4:	0000a56c 	.word	0x0000a56c
    61c8:	0000a583 	.word	0x0000a583

000061cc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    61cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    61d0:	4606      	mov	r6, r0
    61d2:	4690      	mov	r8, r2
    61d4:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    61d6:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    61da:	f04f 0320 	mov.w	r3, #32
    61de:	f3ef 8711 	mrs	r7, BASEPRI
    61e2:	f383 8812 	msr	BASEPRI_MAX, r3
    61e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61ea:	4628      	mov	r0, r5
    61ec:	f001 fcb2 	bl	7b54 <z_spin_lock_valid>
    61f0:	b968      	cbnz	r0, 620e <z_impl_k_queue_get+0x42>
    61f2:	4a25      	ldr	r2, [pc, #148]	; (6288 <z_impl_k_queue_get+0xbc>)
    61f4:	4925      	ldr	r1, [pc, #148]	; (628c <z_impl_k_queue_get+0xc0>)
    61f6:	4826      	ldr	r0, [pc, #152]	; (6290 <z_impl_k_queue_get+0xc4>)
    61f8:	2381      	movs	r3, #129	; 0x81
    61fa:	f003 f8ca 	bl	9392 <printk>
    61fe:	4825      	ldr	r0, [pc, #148]	; (6294 <z_impl_k_queue_get+0xc8>)
    6200:	4629      	mov	r1, r5
    6202:	f003 f8c6 	bl	9392 <printk>
    6206:	4820      	ldr	r0, [pc, #128]	; (6288 <z_impl_k_queue_get+0xbc>)
    6208:	2181      	movs	r1, #129	; 0x81
    620a:	f002 fed3 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    620e:	4628      	mov	r0, r5
    6210:	f001 fcbe 	bl	7b90 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
    6214:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    6216:	b334      	cbz	r4, 6266 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    6218:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    621a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    621c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    6220:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    6222:	4620      	mov	r0, r4
	list->head = node;
    6224:	6033      	str	r3, [r6, #0]
	list->tail = node;
    6226:	bf08      	it	eq
    6228:	6073      	streq	r3, [r6, #4]
    622a:	2101      	movs	r1, #1
    622c:	f003 fc0a 	bl	9a44 <z_queue_node_peek>
    6230:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6232:	4628      	mov	r0, r5
    6234:	f001 fc9c 	bl	7b70 <z_spin_unlock_valid>
    6238:	b968      	cbnz	r0, 6256 <z_impl_k_queue_get+0x8a>
    623a:	4a13      	ldr	r2, [pc, #76]	; (6288 <z_impl_k_queue_get+0xbc>)
    623c:	4916      	ldr	r1, [pc, #88]	; (6298 <z_impl_k_queue_get+0xcc>)
    623e:	4814      	ldr	r0, [pc, #80]	; (6290 <z_impl_k_queue_get+0xc4>)
    6240:	23ac      	movs	r3, #172	; 0xac
    6242:	f003 f8a6 	bl	9392 <printk>
    6246:	4815      	ldr	r0, [pc, #84]	; (629c <z_impl_k_queue_get+0xd0>)
    6248:	4629      	mov	r1, r5
    624a:	f003 f8a2 	bl	9392 <printk>
    624e:	480e      	ldr	r0, [pc, #56]	; (6288 <z_impl_k_queue_get+0xbc>)
    6250:	21ac      	movs	r1, #172	; 0xac
    6252:	f002 feaf 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6256:	f387 8811 	msr	BASEPRI, r7
    625a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    625e:	4620      	mov	r0, r4
    6260:	b003      	add	sp, #12
    6262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6266:	ea58 0309 	orrs.w	r3, r8, r9
    626a:	d0e2      	beq.n	6232 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    626c:	e9cd 8900 	strd	r8, r9, [sp]
    6270:	f106 020c 	add.w	r2, r6, #12
    6274:	4639      	mov	r1, r7
    6276:	4628      	mov	r0, r5
    6278:	f000 fd2a 	bl	6cd0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    627c:	2800      	cmp	r0, #0
    627e:	d1ee      	bne.n	625e <z_impl_k_queue_get+0x92>
    6280:	4b07      	ldr	r3, [pc, #28]	; (62a0 <z_impl_k_queue_get+0xd4>)
    6282:	689b      	ldr	r3, [r3, #8]
    6284:	695c      	ldr	r4, [r3, #20]
    6286:	e7ea      	b.n	625e <z_impl_k_queue_get+0x92>
    6288:	0000a546 	.word	0x0000a546
    628c:	0000a598 	.word	0x0000a598
    6290:	0000a283 	.word	0x0000a283
    6294:	0000a5ad 	.word	0x0000a5ad
    6298:	0000a56c 	.word	0x0000a56c
    629c:	0000a583 	.word	0x0000a583
    62a0:	20000c08 	.word	0x20000c08

000062a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    62a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    62a6:	4c08      	ldr	r4, [pc, #32]	; (62c8 <z_reset_time_slice+0x24>)
    62a8:	6823      	ldr	r3, [r4, #0]
    62aa:	b15b      	cbz	r3, 62c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    62ac:	f7fe f8e2 	bl	4474 <sys_clock_elapsed>
    62b0:	4603      	mov	r3, r0
    62b2:	6820      	ldr	r0, [r4, #0]
    62b4:	4a05      	ldr	r2, [pc, #20]	; (62cc <z_reset_time_slice+0x28>)
    62b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    62b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    62bc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    62be:	2100      	movs	r1, #0
    62c0:	f001 be28 	b.w	7f14 <z_set_timeout_expiry>
}
    62c4:	bd10      	pop	{r4, pc}
    62c6:	bf00      	nop
    62c8:	20000c44 	.word	0x20000c44
    62cc:	20000c08 	.word	0x20000c08

000062d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    62d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62d2:	4604      	mov	r4, r0
    62d4:	460d      	mov	r5, r1
	__asm__ volatile(
    62d6:	f04f 0320 	mov.w	r3, #32
    62da:	f3ef 8611 	mrs	r6, BASEPRI
    62de:	f383 8812 	msr	BASEPRI_MAX, r3
    62e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62e6:	4823      	ldr	r0, [pc, #140]	; (6374 <k_sched_time_slice_set+0xa4>)
    62e8:	f001 fc34 	bl	7b54 <z_spin_lock_valid>
    62ec:	b968      	cbnz	r0, 630a <k_sched_time_slice_set+0x3a>
    62ee:	4a22      	ldr	r2, [pc, #136]	; (6378 <k_sched_time_slice_set+0xa8>)
    62f0:	4922      	ldr	r1, [pc, #136]	; (637c <k_sched_time_slice_set+0xac>)
    62f2:	4823      	ldr	r0, [pc, #140]	; (6380 <k_sched_time_slice_set+0xb0>)
    62f4:	2381      	movs	r3, #129	; 0x81
    62f6:	f003 f84c 	bl	9392 <printk>
    62fa:	491e      	ldr	r1, [pc, #120]	; (6374 <k_sched_time_slice_set+0xa4>)
    62fc:	4821      	ldr	r0, [pc, #132]	; (6384 <k_sched_time_slice_set+0xb4>)
    62fe:	f003 f848 	bl	9392 <printk>
    6302:	481d      	ldr	r0, [pc, #116]	; (6378 <k_sched_time_slice_set+0xa8>)
    6304:	2181      	movs	r1, #129	; 0x81
    6306:	f002 fe55 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    630a:	481a      	ldr	r0, [pc, #104]	; (6374 <k_sched_time_slice_set+0xa4>)
    630c:	f001 fc40 	bl	7b90 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6310:	4b1d      	ldr	r3, [pc, #116]	; (6388 <k_sched_time_slice_set+0xb8>)
    6312:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6314:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6318:	f240 30e7 	movw	r0, #999	; 0x3e7
    631c:	2100      	movs	r1, #0
    631e:	611a      	str	r2, [r3, #16]
    6320:	fbe7 0104 	umlal	r0, r1, r7, r4
    6324:	2300      	movs	r3, #0
    6326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    632a:	f7fa fadf 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    632e:	2c00      	cmp	r4, #0
    6330:	4b16      	ldr	r3, [pc, #88]	; (638c <k_sched_time_slice_set+0xbc>)
    6332:	dc1b      	bgt.n	636c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    6334:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6336:	4b16      	ldr	r3, [pc, #88]	; (6390 <k_sched_time_slice_set+0xc0>)
    6338:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    633a:	f7ff ffb3 	bl	62a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    633e:	480d      	ldr	r0, [pc, #52]	; (6374 <k_sched_time_slice_set+0xa4>)
    6340:	f001 fc16 	bl	7b70 <z_spin_unlock_valid>
    6344:	b968      	cbnz	r0, 6362 <k_sched_time_slice_set+0x92>
    6346:	4a0c      	ldr	r2, [pc, #48]	; (6378 <k_sched_time_slice_set+0xa8>)
    6348:	4912      	ldr	r1, [pc, #72]	; (6394 <k_sched_time_slice_set+0xc4>)
    634a:	480d      	ldr	r0, [pc, #52]	; (6380 <k_sched_time_slice_set+0xb0>)
    634c:	23ac      	movs	r3, #172	; 0xac
    634e:	f003 f820 	bl	9392 <printk>
    6352:	4908      	ldr	r1, [pc, #32]	; (6374 <k_sched_time_slice_set+0xa4>)
    6354:	4810      	ldr	r0, [pc, #64]	; (6398 <k_sched_time_slice_set+0xc8>)
    6356:	f003 f81c 	bl	9392 <printk>
    635a:	4807      	ldr	r0, [pc, #28]	; (6378 <k_sched_time_slice_set+0xa8>)
    635c:	21ac      	movs	r1, #172	; 0xac
    635e:	f002 fe29 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6362:	f386 8811 	msr	BASEPRI, r6
    6366:	f3bf 8f6f 	isb	sy
	}
}
    636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    636c:	2802      	cmp	r0, #2
    636e:	bfb8      	it	lt
    6370:	2002      	movlt	r0, #2
    6372:	e7df      	b.n	6334 <k_sched_time_slice_set+0x64>
    6374:	20000c3c 	.word	0x20000c3c
    6378:	0000a546 	.word	0x0000a546
    637c:	0000a598 	.word	0x0000a598
    6380:	0000a283 	.word	0x0000a283
    6384:	0000a5ad 	.word	0x0000a5ad
    6388:	20000c08 	.word	0x20000c08
    638c:	20000c44 	.word	0x20000c44
    6390:	20000c40 	.word	0x20000c40
    6394:	0000a56c 	.word	0x0000a56c
    6398:	0000a583 	.word	0x0000a583

0000639c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    639c:	b538      	push	{r3, r4, r5, lr}
    639e:	4604      	mov	r4, r0
	__asm__ volatile(
    63a0:	f04f 0320 	mov.w	r3, #32
    63a4:	f3ef 8511 	mrs	r5, BASEPRI
    63a8:	f383 8812 	msr	BASEPRI_MAX, r3
    63ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63b0:	4817      	ldr	r0, [pc, #92]	; (6410 <z_unpend_thread_no_timeout+0x74>)
    63b2:	f001 fbcf 	bl	7b54 <z_spin_lock_valid>
    63b6:	b968      	cbnz	r0, 63d4 <z_unpend_thread_no_timeout+0x38>
    63b8:	4a16      	ldr	r2, [pc, #88]	; (6414 <z_unpend_thread_no_timeout+0x78>)
    63ba:	4917      	ldr	r1, [pc, #92]	; (6418 <z_unpend_thread_no_timeout+0x7c>)
    63bc:	4817      	ldr	r0, [pc, #92]	; (641c <z_unpend_thread_no_timeout+0x80>)
    63be:	2381      	movs	r3, #129	; 0x81
    63c0:	f002 ffe7 	bl	9392 <printk>
    63c4:	4912      	ldr	r1, [pc, #72]	; (6410 <z_unpend_thread_no_timeout+0x74>)
    63c6:	4816      	ldr	r0, [pc, #88]	; (6420 <z_unpend_thread_no_timeout+0x84>)
    63c8:	f002 ffe3 	bl	9392 <printk>
    63cc:	4811      	ldr	r0, [pc, #68]	; (6414 <z_unpend_thread_no_timeout+0x78>)
    63ce:	2181      	movs	r1, #129	; 0x81
    63d0:	f002 fdf0 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    63d4:	480e      	ldr	r0, [pc, #56]	; (6410 <z_unpend_thread_no_timeout+0x74>)
    63d6:	f001 fbdb 	bl	7b90 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    63da:	4620      	mov	r0, r4
    63dc:	f000 f900 	bl	65e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63e0:	480b      	ldr	r0, [pc, #44]	; (6410 <z_unpend_thread_no_timeout+0x74>)
    63e2:	f001 fbc5 	bl	7b70 <z_spin_unlock_valid>
    63e6:	b968      	cbnz	r0, 6404 <z_unpend_thread_no_timeout+0x68>
    63e8:	4a0a      	ldr	r2, [pc, #40]	; (6414 <z_unpend_thread_no_timeout+0x78>)
    63ea:	490e      	ldr	r1, [pc, #56]	; (6424 <z_unpend_thread_no_timeout+0x88>)
    63ec:	480b      	ldr	r0, [pc, #44]	; (641c <z_unpend_thread_no_timeout+0x80>)
    63ee:	23ac      	movs	r3, #172	; 0xac
    63f0:	f002 ffcf 	bl	9392 <printk>
    63f4:	4906      	ldr	r1, [pc, #24]	; (6410 <z_unpend_thread_no_timeout+0x74>)
    63f6:	480c      	ldr	r0, [pc, #48]	; (6428 <z_unpend_thread_no_timeout+0x8c>)
    63f8:	f002 ffcb 	bl	9392 <printk>
    63fc:	4805      	ldr	r0, [pc, #20]	; (6414 <z_unpend_thread_no_timeout+0x78>)
    63fe:	21ac      	movs	r1, #172	; 0xac
    6400:	f002 fdd8 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6404:	f385 8811 	msr	BASEPRI, r5
    6408:	f3bf 8f6f 	isb	sy
	}
}
    640c:	bd38      	pop	{r3, r4, r5, pc}
    640e:	bf00      	nop
    6410:	20000c3c 	.word	0x20000c3c
    6414:	0000a546 	.word	0x0000a546
    6418:	0000a598 	.word	0x0000a598
    641c:	0000a283 	.word	0x0000a283
    6420:	0000a5ad 	.word	0x0000a5ad
    6424:	0000a56c 	.word	0x0000a56c
    6428:	0000a583 	.word	0x0000a583

0000642c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    642c:	b538      	push	{r3, r4, r5, lr}
    642e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6430:	460d      	mov	r5, r1
    6432:	b9e9      	cbnz	r1, 6470 <z_reschedule+0x44>
    6434:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    6438:	b9d3      	cbnz	r3, 6470 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    643a:	4b19      	ldr	r3, [pc, #100]	; (64a0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    643c:	69da      	ldr	r2, [r3, #28]
    643e:	689b      	ldr	r3, [r3, #8]
    6440:	429a      	cmp	r2, r3
    6442:	d015      	beq.n	6470 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6444:	f001 fb94 	bl	7b70 <z_spin_unlock_valid>
    6448:	b968      	cbnz	r0, 6466 <z_reschedule+0x3a>
    644a:	4a16      	ldr	r2, [pc, #88]	; (64a4 <z_reschedule+0x78>)
    644c:	4916      	ldr	r1, [pc, #88]	; (64a8 <z_reschedule+0x7c>)
    644e:	4817      	ldr	r0, [pc, #92]	; (64ac <z_reschedule+0x80>)
    6450:	23c3      	movs	r3, #195	; 0xc3
    6452:	f002 ff9e 	bl	9392 <printk>
    6456:	4816      	ldr	r0, [pc, #88]	; (64b0 <z_reschedule+0x84>)
    6458:	4621      	mov	r1, r4
    645a:	f002 ff9a 	bl	9392 <printk>
    645e:	4811      	ldr	r0, [pc, #68]	; (64a4 <z_reschedule+0x78>)
    6460:	21c3      	movs	r1, #195	; 0xc3
    6462:	f002 fda7 	bl	8fb4 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    646a:	2000      	movs	r0, #0
    646c:	f7fc b8ea 	b.w	2644 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6470:	4620      	mov	r0, r4
    6472:	f001 fb7d 	bl	7b70 <z_spin_unlock_valid>
    6476:	b968      	cbnz	r0, 6494 <z_reschedule+0x68>
    6478:	4a0a      	ldr	r2, [pc, #40]	; (64a4 <z_reschedule+0x78>)
    647a:	490b      	ldr	r1, [pc, #44]	; (64a8 <z_reschedule+0x7c>)
    647c:	480b      	ldr	r0, [pc, #44]	; (64ac <z_reschedule+0x80>)
    647e:	23ac      	movs	r3, #172	; 0xac
    6480:	f002 ff87 	bl	9392 <printk>
    6484:	480a      	ldr	r0, [pc, #40]	; (64b0 <z_reschedule+0x84>)
    6486:	4621      	mov	r1, r4
    6488:	f002 ff83 	bl	9392 <printk>
    648c:	4805      	ldr	r0, [pc, #20]	; (64a4 <z_reschedule+0x78>)
    648e:	21ac      	movs	r1, #172	; 0xac
    6490:	f002 fd90 	bl	8fb4 <assert_post_action>
    6494:	f385 8811 	msr	BASEPRI, r5
    6498:	f3bf 8f6f 	isb	sy
    649c:	bd38      	pop	{r3, r4, r5, pc}
    649e:	bf00      	nop
    64a0:	20000c08 	.word	0x20000c08
    64a4:	0000a546 	.word	0x0000a546
    64a8:	0000a56c 	.word	0x0000a56c
    64ac:	0000a283 	.word	0x0000a283
    64b0:	0000a583 	.word	0x0000a583

000064b4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    64b4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    64b6:	f04f 0320 	mov.w	r3, #32
    64ba:	f3ef 8511 	mrs	r5, BASEPRI
    64be:	f383 8812 	msr	BASEPRI_MAX, r3
    64c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64c6:	4829      	ldr	r0, [pc, #164]	; (656c <k_sched_lock+0xb8>)
    64c8:	f001 fb44 	bl	7b54 <z_spin_lock_valid>
    64cc:	b968      	cbnz	r0, 64ea <k_sched_lock+0x36>
    64ce:	4a28      	ldr	r2, [pc, #160]	; (6570 <k_sched_lock+0xbc>)
    64d0:	4928      	ldr	r1, [pc, #160]	; (6574 <k_sched_lock+0xc0>)
    64d2:	4829      	ldr	r0, [pc, #164]	; (6578 <k_sched_lock+0xc4>)
    64d4:	2381      	movs	r3, #129	; 0x81
    64d6:	f002 ff5c 	bl	9392 <printk>
    64da:	4924      	ldr	r1, [pc, #144]	; (656c <k_sched_lock+0xb8>)
    64dc:	4827      	ldr	r0, [pc, #156]	; (657c <k_sched_lock+0xc8>)
    64de:	f002 ff58 	bl	9392 <printk>
    64e2:	4823      	ldr	r0, [pc, #140]	; (6570 <k_sched_lock+0xbc>)
    64e4:	2181      	movs	r1, #129	; 0x81
    64e6:	f002 fd65 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    64ea:	4820      	ldr	r0, [pc, #128]	; (656c <k_sched_lock+0xb8>)
    64ec:	f001 fb50 	bl	7b90 <z_spin_lock_set_owner>
    64f0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    64f4:	b163      	cbz	r3, 6510 <k_sched_lock+0x5c>
    64f6:	4922      	ldr	r1, [pc, #136]	; (6580 <k_sched_lock+0xcc>)
    64f8:	4a22      	ldr	r2, [pc, #136]	; (6584 <k_sched_lock+0xd0>)
    64fa:	481f      	ldr	r0, [pc, #124]	; (6578 <k_sched_lock+0xc4>)
    64fc:	23fd      	movs	r3, #253	; 0xfd
    64fe:	f002 ff48 	bl	9392 <printk>
    6502:	4821      	ldr	r0, [pc, #132]	; (6588 <k_sched_lock+0xd4>)
    6504:	f002 ff45 	bl	9392 <printk>
    6508:	481e      	ldr	r0, [pc, #120]	; (6584 <k_sched_lock+0xd0>)
    650a:	21fd      	movs	r1, #253	; 0xfd
    650c:	f002 fd52 	bl	8fb4 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6510:	4c1e      	ldr	r4, [pc, #120]	; (658c <k_sched_lock+0xd8>)
    6512:	68a2      	ldr	r2, [r4, #8]
    6514:	7bd2      	ldrb	r2, [r2, #15]
    6516:	2a01      	cmp	r2, #1
    6518:	d10c      	bne.n	6534 <k_sched_lock+0x80>
    651a:	491d      	ldr	r1, [pc, #116]	; (6590 <k_sched_lock+0xdc>)
    651c:	4a19      	ldr	r2, [pc, #100]	; (6584 <k_sched_lock+0xd0>)
    651e:	4816      	ldr	r0, [pc, #88]	; (6578 <k_sched_lock+0xc4>)
    6520:	23fe      	movs	r3, #254	; 0xfe
    6522:	f002 ff36 	bl	9392 <printk>
    6526:	4818      	ldr	r0, [pc, #96]	; (6588 <k_sched_lock+0xd4>)
    6528:	f002 ff33 	bl	9392 <printk>
    652c:	4815      	ldr	r0, [pc, #84]	; (6584 <k_sched_lock+0xd0>)
    652e:	21fe      	movs	r1, #254	; 0xfe
    6530:	f002 fd40 	bl	8fb4 <assert_post_action>
	--_current->base.sched_locked;
    6534:	68a2      	ldr	r2, [r4, #8]
    6536:	7bd3      	ldrb	r3, [r2, #15]
    6538:	3b01      	subs	r3, #1
    653a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    653c:	480b      	ldr	r0, [pc, #44]	; (656c <k_sched_lock+0xb8>)
    653e:	f001 fb17 	bl	7b70 <z_spin_unlock_valid>
    6542:	b968      	cbnz	r0, 6560 <k_sched_lock+0xac>
    6544:	4a0a      	ldr	r2, [pc, #40]	; (6570 <k_sched_lock+0xbc>)
    6546:	4913      	ldr	r1, [pc, #76]	; (6594 <k_sched_lock+0xe0>)
    6548:	480b      	ldr	r0, [pc, #44]	; (6578 <k_sched_lock+0xc4>)
    654a:	23ac      	movs	r3, #172	; 0xac
    654c:	f002 ff21 	bl	9392 <printk>
    6550:	4906      	ldr	r1, [pc, #24]	; (656c <k_sched_lock+0xb8>)
    6552:	4811      	ldr	r0, [pc, #68]	; (6598 <k_sched_lock+0xe4>)
    6554:	f002 ff1d 	bl	9392 <printk>
    6558:	4805      	ldr	r0, [pc, #20]	; (6570 <k_sched_lock+0xbc>)
    655a:	21ac      	movs	r1, #172	; 0xac
    655c:	f002 fd2a 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6560:	f385 8811 	msr	BASEPRI, r5
    6564:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6568:	bd38      	pop	{r3, r4, r5, pc}
    656a:	bf00      	nop
    656c:	20000c3c 	.word	0x20000c3c
    6570:	0000a546 	.word	0x0000a546
    6574:	0000a598 	.word	0x0000a598
    6578:	0000a283 	.word	0x0000a283
    657c:	0000a5ad 	.word	0x0000a5ad
    6580:	0000aee0 	.word	0x0000aee0
    6584:	0000af2e 	.word	0x0000af2e
    6588:	0000af59 	.word	0x0000af59
    658c:	20000c08 	.word	0x20000c08
    6590:	0000af5c 	.word	0x0000af5c
    6594:	0000a56c 	.word	0x0000a56c
    6598:	0000a583 	.word	0x0000a583

0000659c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    659c:	4b0c      	ldr	r3, [pc, #48]	; (65d0 <z_priq_dumb_remove+0x34>)
    659e:	4299      	cmp	r1, r3
{
    65a0:	b510      	push	{r4, lr}
    65a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    65a4:	d10b      	bne.n	65be <z_priq_dumb_remove+0x22>
    65a6:	490b      	ldr	r1, [pc, #44]	; (65d4 <z_priq_dumb_remove+0x38>)
    65a8:	480b      	ldr	r0, [pc, #44]	; (65d8 <z_priq_dumb_remove+0x3c>)
    65aa:	4a0c      	ldr	r2, [pc, #48]	; (65dc <z_priq_dumb_remove+0x40>)
    65ac:	f240 33e7 	movw	r3, #999	; 0x3e7
    65b0:	f002 feef 	bl	9392 <printk>
    65b4:	4809      	ldr	r0, [pc, #36]	; (65dc <z_priq_dumb_remove+0x40>)
    65b6:	f240 31e7 	movw	r1, #999	; 0x3e7
    65ba:	f002 fcfb 	bl	8fb4 <assert_post_action>
	sys_dnode_t *const next = node->next;
    65be:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    65c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    65c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    65c6:	2300      	movs	r3, #0
	node->prev = NULL;
    65c8:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    65cc:	bd10      	pop	{r4, pc}
    65ce:	bf00      	nop
    65d0:	20000410 	.word	0x20000410
    65d4:	0000b0df 	.word	0x0000b0df
    65d8:	0000a283 	.word	0x0000a283
    65dc:	0000b0bd 	.word	0x0000b0bd

000065e0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    65e0:	6883      	ldr	r3, [r0, #8]
{
    65e2:	b510      	push	{r4, lr}
    65e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    65e6:	b95b      	cbnz	r3, 6600 <unpend_thread_no_timeout+0x20>
    65e8:	490b      	ldr	r1, [pc, #44]	; (6618 <unpend_thread_no_timeout+0x38>)
    65ea:	480c      	ldr	r0, [pc, #48]	; (661c <unpend_thread_no_timeout+0x3c>)
    65ec:	4a0c      	ldr	r2, [pc, #48]	; (6620 <unpend_thread_no_timeout+0x40>)
    65ee:	f240 2383 	movw	r3, #643	; 0x283
    65f2:	f002 fece 	bl	9392 <printk>
    65f6:	480a      	ldr	r0, [pc, #40]	; (6620 <unpend_thread_no_timeout+0x40>)
    65f8:	f240 2183 	movw	r1, #643	; 0x283
    65fc:	f002 fcda 	bl	8fb4 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6600:	68a0      	ldr	r0, [r4, #8]
    6602:	4621      	mov	r1, r4
    6604:	f7ff ffca 	bl	659c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6608:	7b63      	ldrb	r3, [r4, #13]
    660a:	f023 0302 	bic.w	r3, r3, #2
    660e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6610:	2300      	movs	r3, #0
    6612:	60a3      	str	r3, [r4, #8]
}
    6614:	bd10      	pop	{r4, pc}
    6616:	bf00      	nop
    6618:	0000b100 	.word	0x0000b100
    661c:	0000a283 	.word	0x0000a283
    6620:	0000b0bd 	.word	0x0000b0bd

00006624 <z_unpend_thread>:
{
    6624:	b538      	push	{r3, r4, r5, lr}
    6626:	4604      	mov	r4, r0
	__asm__ volatile(
    6628:	f04f 0320 	mov.w	r3, #32
    662c:	f3ef 8511 	mrs	r5, BASEPRI
    6630:	f383 8812 	msr	BASEPRI_MAX, r3
    6634:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6638:	4819      	ldr	r0, [pc, #100]	; (66a0 <z_unpend_thread+0x7c>)
    663a:	f001 fa8b 	bl	7b54 <z_spin_lock_valid>
    663e:	b968      	cbnz	r0, 665c <z_unpend_thread+0x38>
    6640:	4a18      	ldr	r2, [pc, #96]	; (66a4 <z_unpend_thread+0x80>)
    6642:	4919      	ldr	r1, [pc, #100]	; (66a8 <z_unpend_thread+0x84>)
    6644:	4819      	ldr	r0, [pc, #100]	; (66ac <z_unpend_thread+0x88>)
    6646:	2381      	movs	r3, #129	; 0x81
    6648:	f002 fea3 	bl	9392 <printk>
    664c:	4914      	ldr	r1, [pc, #80]	; (66a0 <z_unpend_thread+0x7c>)
    664e:	4818      	ldr	r0, [pc, #96]	; (66b0 <z_unpend_thread+0x8c>)
    6650:	f002 fe9f 	bl	9392 <printk>
    6654:	4813      	ldr	r0, [pc, #76]	; (66a4 <z_unpend_thread+0x80>)
    6656:	2181      	movs	r1, #129	; 0x81
    6658:	f002 fcac 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    665c:	4810      	ldr	r0, [pc, #64]	; (66a0 <z_unpend_thread+0x7c>)
    665e:	f001 fa97 	bl	7b90 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    6662:	4620      	mov	r0, r4
    6664:	f7ff ffbc 	bl	65e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6668:	480d      	ldr	r0, [pc, #52]	; (66a0 <z_unpend_thread+0x7c>)
    666a:	f001 fa81 	bl	7b70 <z_spin_unlock_valid>
    666e:	b968      	cbnz	r0, 668c <z_unpend_thread+0x68>
    6670:	4a0c      	ldr	r2, [pc, #48]	; (66a4 <z_unpend_thread+0x80>)
    6672:	4910      	ldr	r1, [pc, #64]	; (66b4 <z_unpend_thread+0x90>)
    6674:	480d      	ldr	r0, [pc, #52]	; (66ac <z_unpend_thread+0x88>)
    6676:	23ac      	movs	r3, #172	; 0xac
    6678:	f002 fe8b 	bl	9392 <printk>
    667c:	4908      	ldr	r1, [pc, #32]	; (66a0 <z_unpend_thread+0x7c>)
    667e:	480e      	ldr	r0, [pc, #56]	; (66b8 <z_unpend_thread+0x94>)
    6680:	f002 fe87 	bl	9392 <printk>
    6684:	4807      	ldr	r0, [pc, #28]	; (66a4 <z_unpend_thread+0x80>)
    6686:	21ac      	movs	r1, #172	; 0xac
    6688:	f002 fc94 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    668c:	f385 8811 	msr	BASEPRI, r5
    6690:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6694:	f104 0018 	add.w	r0, r4, #24
}
    6698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    669c:	f001 bba4 	b.w	7de8 <z_abort_timeout>
    66a0:	20000c3c 	.word	0x20000c3c
    66a4:	0000a546 	.word	0x0000a546
    66a8:	0000a598 	.word	0x0000a598
    66ac:	0000a283 	.word	0x0000a283
    66b0:	0000a5ad 	.word	0x0000a5ad
    66b4:	0000a56c 	.word	0x0000a56c
    66b8:	0000a583 	.word	0x0000a583

000066bc <update_cache>:
{
    66bc:	b538      	push	{r3, r4, r5, lr}
    66be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    66c0:	4814      	ldr	r0, [pc, #80]	; (6714 <update_cache+0x58>)
    66c2:	4d15      	ldr	r5, [pc, #84]	; (6718 <update_cache+0x5c>)
    66c4:	f003 f9f8 	bl	9ab8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    66c8:	4604      	mov	r4, r0
    66ca:	b900      	cbnz	r0, 66ce <update_cache+0x12>
    66cc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    66ce:	b9ca      	cbnz	r2, 6704 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    66d0:	68ab      	ldr	r3, [r5, #8]
    66d2:	b963      	cbnz	r3, 66ee <update_cache+0x32>
    66d4:	4911      	ldr	r1, [pc, #68]	; (671c <update_cache+0x60>)
    66d6:	4a12      	ldr	r2, [pc, #72]	; (6720 <update_cache+0x64>)
    66d8:	4812      	ldr	r0, [pc, #72]	; (6724 <update_cache+0x68>)
    66da:	2389      	movs	r3, #137	; 0x89
    66dc:	f002 fe59 	bl	9392 <printk>
    66e0:	4811      	ldr	r0, [pc, #68]	; (6728 <update_cache+0x6c>)
    66e2:	f002 fe56 	bl	9392 <printk>
    66e6:	480e      	ldr	r0, [pc, #56]	; (6720 <update_cache+0x64>)
    66e8:	2189      	movs	r1, #137	; 0x89
    66ea:	f002 fc63 	bl	8fb4 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    66ee:	68ab      	ldr	r3, [r5, #8]
    66f0:	7b5a      	ldrb	r2, [r3, #13]
    66f2:	06d2      	lsls	r2, r2, #27
    66f4:	d106      	bne.n	6704 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    66f6:	69a2      	ldr	r2, [r4, #24]
    66f8:	b922      	cbnz	r2, 6704 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    66fa:	89da      	ldrh	r2, [r3, #14]
    66fc:	2a7f      	cmp	r2, #127	; 0x7f
    66fe:	d901      	bls.n	6704 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    6700:	61eb      	str	r3, [r5, #28]
}
    6702:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6704:	68ab      	ldr	r3, [r5, #8]
    6706:	42a3      	cmp	r3, r4
    6708:	d001      	beq.n	670e <update_cache+0x52>
			z_reset_time_slice();
    670a:	f7ff fdcb 	bl	62a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    670e:	61ec      	str	r4, [r5, #28]
}
    6710:	e7f7      	b.n	6702 <update_cache+0x46>
    6712:	bf00      	nop
    6714:	20000c28 	.word	0x20000c28
    6718:	20000c08 	.word	0x20000c08
    671c:	0000b117 	.word	0x0000b117
    6720:	0000b0bd 	.word	0x0000b0bd
    6724:	0000a283 	.word	0x0000a283
    6728:	0000af59 	.word	0x0000af59

0000672c <move_thread_to_end_of_prio_q>:
{
    672c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    672e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6732:	7b43      	ldrb	r3, [r0, #13]
    6734:	2a00      	cmp	r2, #0
{
    6736:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6738:	da06      	bge.n	6748 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    673a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    673e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6740:	4601      	mov	r1, r0
    6742:	481f      	ldr	r0, [pc, #124]	; (67c0 <move_thread_to_end_of_prio_q+0x94>)
    6744:	f7ff ff2a 	bl	659c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6748:	7b63      	ldrb	r3, [r4, #13]
    674a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    674e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6750:	4b1c      	ldr	r3, [pc, #112]	; (67c4 <move_thread_to_end_of_prio_q+0x98>)
    6752:	429c      	cmp	r4, r3
    6754:	d109      	bne.n	676a <move_thread_to_end_of_prio_q+0x3e>
    6756:	491c      	ldr	r1, [pc, #112]	; (67c8 <move_thread_to_end_of_prio_q+0x9c>)
    6758:	481c      	ldr	r0, [pc, #112]	; (67cc <move_thread_to_end_of_prio_q+0xa0>)
    675a:	4a1d      	ldr	r2, [pc, #116]	; (67d0 <move_thread_to_end_of_prio_q+0xa4>)
    675c:	23ba      	movs	r3, #186	; 0xba
    675e:	f002 fe18 	bl	9392 <printk>
    6762:	481b      	ldr	r0, [pc, #108]	; (67d0 <move_thread_to_end_of_prio_q+0xa4>)
    6764:	21ba      	movs	r1, #186	; 0xba
    6766:	f002 fc25 	bl	8fb4 <assert_post_action>
	return list->head == list;
    676a:	4a1a      	ldr	r2, [pc, #104]	; (67d4 <move_thread_to_end_of_prio_q+0xa8>)
    676c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    676e:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    6770:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6774:	428b      	cmp	r3, r1
    6776:	bf08      	it	eq
    6778:	2300      	moveq	r3, #0
    677a:	2b00      	cmp	r3, #0
    677c:	bf38      	it	cc
    677e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6780:	b1cb      	cbz	r3, 67b6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    6782:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6786:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    678a:	4286      	cmp	r6, r0
    678c:	d00f      	beq.n	67ae <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    678e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6790:	2800      	cmp	r0, #0
    6792:	dd0c      	ble.n	67ae <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    6794:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6796:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    679a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    679c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    679e:	6890      	ldr	r0, [r2, #8]
    67a0:	1b03      	subs	r3, r0, r4
    67a2:	4258      	negs	r0, r3
}
    67a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    67a8:	4158      	adcs	r0, r3
    67aa:	f7ff bf87 	b.w	66bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    67ae:	42ab      	cmp	r3, r5
    67b0:	d001      	beq.n	67b6 <move_thread_to_end_of_prio_q+0x8a>
    67b2:	681b      	ldr	r3, [r3, #0]
    67b4:	e7e4      	b.n	6780 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    67b6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    67ba:	602c      	str	r4, [r5, #0]
	list->tail = node;
    67bc:	6254      	str	r4, [r2, #36]	; 0x24
}
    67be:	e7ee      	b.n	679e <move_thread_to_end_of_prio_q+0x72>
    67c0:	20000c28 	.word	0x20000c28
    67c4:	20000410 	.word	0x20000410
    67c8:	0000b0df 	.word	0x0000b0df
    67cc:	0000a283 	.word	0x0000a283
    67d0:	0000b0bd 	.word	0x0000b0bd
    67d4:	20000c08 	.word	0x20000c08

000067d8 <z_time_slice>:
{
    67d8:	b570      	push	{r4, r5, r6, lr}
    67da:	4604      	mov	r4, r0
	__asm__ volatile(
    67dc:	f04f 0320 	mov.w	r3, #32
    67e0:	f3ef 8511 	mrs	r5, BASEPRI
    67e4:	f383 8812 	msr	BASEPRI_MAX, r3
    67e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67ec:	482a      	ldr	r0, [pc, #168]	; (6898 <z_time_slice+0xc0>)
    67ee:	f001 f9b1 	bl	7b54 <z_spin_lock_valid>
    67f2:	b968      	cbnz	r0, 6810 <z_time_slice+0x38>
    67f4:	4a29      	ldr	r2, [pc, #164]	; (689c <z_time_slice+0xc4>)
    67f6:	492a      	ldr	r1, [pc, #168]	; (68a0 <z_time_slice+0xc8>)
    67f8:	482a      	ldr	r0, [pc, #168]	; (68a4 <z_time_slice+0xcc>)
    67fa:	2381      	movs	r3, #129	; 0x81
    67fc:	f002 fdc9 	bl	9392 <printk>
    6800:	4925      	ldr	r1, [pc, #148]	; (6898 <z_time_slice+0xc0>)
    6802:	4829      	ldr	r0, [pc, #164]	; (68a8 <z_time_slice+0xd0>)
    6804:	f002 fdc5 	bl	9392 <printk>
    6808:	4824      	ldr	r0, [pc, #144]	; (689c <z_time_slice+0xc4>)
    680a:	2181      	movs	r1, #129	; 0x81
    680c:	f002 fbd2 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6810:	4821      	ldr	r0, [pc, #132]	; (6898 <z_time_slice+0xc0>)
    6812:	f001 f9bd 	bl	7b90 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6816:	4b25      	ldr	r3, [pc, #148]	; (68ac <z_time_slice+0xd4>)
    6818:	4a25      	ldr	r2, [pc, #148]	; (68b0 <z_time_slice+0xd8>)
    681a:	6898      	ldr	r0, [r3, #8]
    681c:	6811      	ldr	r1, [r2, #0]
    681e:	4288      	cmp	r0, r1
    6820:	4619      	mov	r1, r3
    6822:	d118      	bne.n	6856 <z_time_slice+0x7e>
			z_reset_time_slice();
    6824:	f7ff fd3e 	bl	62a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6828:	481b      	ldr	r0, [pc, #108]	; (6898 <z_time_slice+0xc0>)
    682a:	f001 f9a1 	bl	7b70 <z_spin_unlock_valid>
    682e:	b968      	cbnz	r0, 684c <z_time_slice+0x74>
    6830:	4a1a      	ldr	r2, [pc, #104]	; (689c <z_time_slice+0xc4>)
    6832:	4920      	ldr	r1, [pc, #128]	; (68b4 <z_time_slice+0xdc>)
    6834:	481b      	ldr	r0, [pc, #108]	; (68a4 <z_time_slice+0xcc>)
    6836:	23ac      	movs	r3, #172	; 0xac
    6838:	f002 fdab 	bl	9392 <printk>
    683c:	4916      	ldr	r1, [pc, #88]	; (6898 <z_time_slice+0xc0>)
    683e:	481e      	ldr	r0, [pc, #120]	; (68b8 <z_time_slice+0xe0>)
    6840:	f002 fda7 	bl	9392 <printk>
    6844:	4815      	ldr	r0, [pc, #84]	; (689c <z_time_slice+0xc4>)
    6846:	21ac      	movs	r1, #172	; 0xac
    6848:	f002 fbb4 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    684c:	f385 8811 	msr	BASEPRI, r5
    6850:	f3bf 8f6f 	isb	sy
}
    6854:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6856:	2600      	movs	r6, #0
    6858:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    685a:	4a18      	ldr	r2, [pc, #96]	; (68bc <z_time_slice+0xe4>)
    685c:	6812      	ldr	r2, [r2, #0]
    685e:	b1ba      	cbz	r2, 6890 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    6860:	89c2      	ldrh	r2, [r0, #14]
    6862:	2a7f      	cmp	r2, #127	; 0x7f
    6864:	d814      	bhi.n	6890 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    6866:	7b42      	ldrb	r2, [r0, #13]
    6868:	06d2      	lsls	r2, r2, #27
    686a:	d111      	bne.n	6890 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    686c:	4a14      	ldr	r2, [pc, #80]	; (68c0 <z_time_slice+0xe8>)
    686e:	f990 600e 	ldrsb.w	r6, [r0, #14]
    6872:	6812      	ldr	r2, [r2, #0]
    6874:	4296      	cmp	r6, r2
    6876:	db0b      	blt.n	6890 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    6878:	4a12      	ldr	r2, [pc, #72]	; (68c4 <z_time_slice+0xec>)
    687a:	4290      	cmp	r0, r2
    687c:	d008      	beq.n	6890 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    687e:	691a      	ldr	r2, [r3, #16]
    6880:	42a2      	cmp	r2, r4
    6882:	dc02      	bgt.n	688a <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    6884:	f7ff ff52 	bl	672c <move_thread_to_end_of_prio_q>
    6888:	e7cc      	b.n	6824 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    688a:	1b12      	subs	r2, r2, r4
    688c:	611a      	str	r2, [r3, #16]
    688e:	e7cb      	b.n	6828 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    6890:	2300      	movs	r3, #0
    6892:	610b      	str	r3, [r1, #16]
    6894:	e7c8      	b.n	6828 <z_time_slice+0x50>
    6896:	bf00      	nop
    6898:	20000c3c 	.word	0x20000c3c
    689c:	0000a546 	.word	0x0000a546
    68a0:	0000a598 	.word	0x0000a598
    68a4:	0000a283 	.word	0x0000a283
    68a8:	0000a5ad 	.word	0x0000a5ad
    68ac:	20000c08 	.word	0x20000c08
    68b0:	20000c38 	.word	0x20000c38
    68b4:	0000a56c 	.word	0x0000a56c
    68b8:	0000a583 	.word	0x0000a583
    68bc:	20000c44 	.word	0x20000c44
    68c0:	20000c40 	.word	0x20000c40
    68c4:	20000410 	.word	0x20000410

000068c8 <ready_thread>:
{
    68c8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    68ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
    68ce:	7b43      	ldrb	r3, [r0, #13]
    68d0:	2a00      	cmp	r2, #0
{
    68d2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    68d4:	db3e      	blt.n	6954 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    68d6:	06da      	lsls	r2, r3, #27
    68d8:	d13c      	bne.n	6954 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    68da:	6985      	ldr	r5, [r0, #24]
    68dc:	2d00      	cmp	r5, #0
    68de:	d139      	bne.n	6954 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    68e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    68e4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    68e6:	4b1c      	ldr	r3, [pc, #112]	; (6958 <ready_thread+0x90>)
    68e8:	4298      	cmp	r0, r3
    68ea:	d109      	bne.n	6900 <ready_thread+0x38>
    68ec:	491b      	ldr	r1, [pc, #108]	; (695c <ready_thread+0x94>)
    68ee:	481c      	ldr	r0, [pc, #112]	; (6960 <ready_thread+0x98>)
    68f0:	4a1c      	ldr	r2, [pc, #112]	; (6964 <ready_thread+0x9c>)
    68f2:	23ba      	movs	r3, #186	; 0xba
    68f4:	f002 fd4d 	bl	9392 <printk>
    68f8:	481a      	ldr	r0, [pc, #104]	; (6964 <ready_thread+0x9c>)
    68fa:	21ba      	movs	r1, #186	; 0xba
    68fc:	f002 fb5a 	bl	8fb4 <assert_post_action>
	return list->head == list;
    6900:	4919      	ldr	r1, [pc, #100]	; (6968 <ready_thread+0xa0>)
    6902:	460b      	mov	r3, r1
    6904:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6908:	4298      	cmp	r0, r3
    690a:	bf18      	it	ne
    690c:	4605      	movne	r5, r0
    690e:	2d00      	cmp	r5, #0
    6910:	461a      	mov	r2, r3
    6912:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6914:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6916:	bf38      	it	cc
    6918:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    691a:	b1b3      	cbz	r3, 694a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    691c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6920:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6924:	4286      	cmp	r6, r0
    6926:	d00c      	beq.n	6942 <ready_thread+0x7a>
		return b2 - b1;
    6928:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    692a:	2800      	cmp	r0, #0
    692c:	dd09      	ble.n	6942 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    692e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6930:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6934:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6936:	605c      	str	r4, [r3, #4]
}
    6938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    693c:	2000      	movs	r0, #0
    693e:	f7ff bebd 	b.w	66bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6942:	42ab      	cmp	r3, r5
    6944:	d001      	beq.n	694a <ready_thread+0x82>
    6946:	681b      	ldr	r3, [r3, #0]
    6948:	e7e7      	b.n	691a <ready_thread+0x52>
	node->prev = tail;
    694a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    694e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6950:	624c      	str	r4, [r1, #36]	; 0x24
}
    6952:	e7f1      	b.n	6938 <ready_thread+0x70>
}
    6954:	bd70      	pop	{r4, r5, r6, pc}
    6956:	bf00      	nop
    6958:	20000410 	.word	0x20000410
    695c:	0000b0df 	.word	0x0000b0df
    6960:	0000a283 	.word	0x0000a283
    6964:	0000b0bd 	.word	0x0000b0bd
    6968:	20000c08 	.word	0x20000c08

0000696c <z_ready_thread>:
{
    696c:	b538      	push	{r3, r4, r5, lr}
    696e:	4604      	mov	r4, r0
	__asm__ volatile(
    6970:	f04f 0320 	mov.w	r3, #32
    6974:	f3ef 8511 	mrs	r5, BASEPRI
    6978:	f383 8812 	msr	BASEPRI_MAX, r3
    697c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6980:	4817      	ldr	r0, [pc, #92]	; (69e0 <z_ready_thread+0x74>)
    6982:	f001 f8e7 	bl	7b54 <z_spin_lock_valid>
    6986:	b968      	cbnz	r0, 69a4 <z_ready_thread+0x38>
    6988:	4a16      	ldr	r2, [pc, #88]	; (69e4 <z_ready_thread+0x78>)
    698a:	4917      	ldr	r1, [pc, #92]	; (69e8 <z_ready_thread+0x7c>)
    698c:	4817      	ldr	r0, [pc, #92]	; (69ec <z_ready_thread+0x80>)
    698e:	2381      	movs	r3, #129	; 0x81
    6990:	f002 fcff 	bl	9392 <printk>
    6994:	4912      	ldr	r1, [pc, #72]	; (69e0 <z_ready_thread+0x74>)
    6996:	4816      	ldr	r0, [pc, #88]	; (69f0 <z_ready_thread+0x84>)
    6998:	f002 fcfb 	bl	9392 <printk>
    699c:	4811      	ldr	r0, [pc, #68]	; (69e4 <z_ready_thread+0x78>)
    699e:	2181      	movs	r1, #129	; 0x81
    69a0:	f002 fb08 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    69a4:	480e      	ldr	r0, [pc, #56]	; (69e0 <z_ready_thread+0x74>)
    69a6:	f001 f8f3 	bl	7b90 <z_spin_lock_set_owner>
			ready_thread(thread);
    69aa:	4620      	mov	r0, r4
    69ac:	f7ff ff8c 	bl	68c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69b0:	480b      	ldr	r0, [pc, #44]	; (69e0 <z_ready_thread+0x74>)
    69b2:	f001 f8dd 	bl	7b70 <z_spin_unlock_valid>
    69b6:	b968      	cbnz	r0, 69d4 <z_ready_thread+0x68>
    69b8:	4a0a      	ldr	r2, [pc, #40]	; (69e4 <z_ready_thread+0x78>)
    69ba:	490e      	ldr	r1, [pc, #56]	; (69f4 <z_ready_thread+0x88>)
    69bc:	480b      	ldr	r0, [pc, #44]	; (69ec <z_ready_thread+0x80>)
    69be:	23ac      	movs	r3, #172	; 0xac
    69c0:	f002 fce7 	bl	9392 <printk>
    69c4:	4906      	ldr	r1, [pc, #24]	; (69e0 <z_ready_thread+0x74>)
    69c6:	480c      	ldr	r0, [pc, #48]	; (69f8 <z_ready_thread+0x8c>)
    69c8:	f002 fce3 	bl	9392 <printk>
    69cc:	4805      	ldr	r0, [pc, #20]	; (69e4 <z_ready_thread+0x78>)
    69ce:	21ac      	movs	r1, #172	; 0xac
    69d0:	f002 faf0 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    69d4:	f385 8811 	msr	BASEPRI, r5
    69d8:	f3bf 8f6f 	isb	sy
}
    69dc:	bd38      	pop	{r3, r4, r5, pc}
    69de:	bf00      	nop
    69e0:	20000c3c 	.word	0x20000c3c
    69e4:	0000a546 	.word	0x0000a546
    69e8:	0000a598 	.word	0x0000a598
    69ec:	0000a283 	.word	0x0000a283
    69f0:	0000a5ad 	.word	0x0000a5ad
    69f4:	0000a56c 	.word	0x0000a56c
    69f8:	0000a583 	.word	0x0000a583

000069fc <z_sched_start>:
{
    69fc:	b538      	push	{r3, r4, r5, lr}
    69fe:	4604      	mov	r4, r0
	__asm__ volatile(
    6a00:	f04f 0320 	mov.w	r3, #32
    6a04:	f3ef 8511 	mrs	r5, BASEPRI
    6a08:	f383 8812 	msr	BASEPRI_MAX, r3
    6a0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a10:	481d      	ldr	r0, [pc, #116]	; (6a88 <z_sched_start+0x8c>)
    6a12:	f001 f89f 	bl	7b54 <z_spin_lock_valid>
    6a16:	b968      	cbnz	r0, 6a34 <z_sched_start+0x38>
    6a18:	4a1c      	ldr	r2, [pc, #112]	; (6a8c <z_sched_start+0x90>)
    6a1a:	491d      	ldr	r1, [pc, #116]	; (6a90 <z_sched_start+0x94>)
    6a1c:	481d      	ldr	r0, [pc, #116]	; (6a94 <z_sched_start+0x98>)
    6a1e:	2381      	movs	r3, #129	; 0x81
    6a20:	f002 fcb7 	bl	9392 <printk>
    6a24:	4918      	ldr	r1, [pc, #96]	; (6a88 <z_sched_start+0x8c>)
    6a26:	481c      	ldr	r0, [pc, #112]	; (6a98 <z_sched_start+0x9c>)
    6a28:	f002 fcb3 	bl	9392 <printk>
    6a2c:	4817      	ldr	r0, [pc, #92]	; (6a8c <z_sched_start+0x90>)
    6a2e:	2181      	movs	r1, #129	; 0x81
    6a30:	f002 fac0 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a34:	4814      	ldr	r0, [pc, #80]	; (6a88 <z_sched_start+0x8c>)
    6a36:	f001 f8ab 	bl	7b90 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    6a3a:	7b63      	ldrb	r3, [r4, #13]
    6a3c:	075a      	lsls	r2, r3, #29
    6a3e:	d416      	bmi.n	6a6e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a40:	4811      	ldr	r0, [pc, #68]	; (6a88 <z_sched_start+0x8c>)
    6a42:	f001 f895 	bl	7b70 <z_spin_unlock_valid>
    6a46:	b968      	cbnz	r0, 6a64 <z_sched_start+0x68>
    6a48:	4a10      	ldr	r2, [pc, #64]	; (6a8c <z_sched_start+0x90>)
    6a4a:	4914      	ldr	r1, [pc, #80]	; (6a9c <z_sched_start+0xa0>)
    6a4c:	4811      	ldr	r0, [pc, #68]	; (6a94 <z_sched_start+0x98>)
    6a4e:	23ac      	movs	r3, #172	; 0xac
    6a50:	f002 fc9f 	bl	9392 <printk>
    6a54:	490c      	ldr	r1, [pc, #48]	; (6a88 <z_sched_start+0x8c>)
    6a56:	4812      	ldr	r0, [pc, #72]	; (6aa0 <z_sched_start+0xa4>)
    6a58:	f002 fc9b 	bl	9392 <printk>
    6a5c:	480b      	ldr	r0, [pc, #44]	; (6a8c <z_sched_start+0x90>)
    6a5e:	21ac      	movs	r1, #172	; 0xac
    6a60:	f002 faa8 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6a64:	f385 8811 	msr	BASEPRI, r5
    6a68:	f3bf 8f6f 	isb	sy
}
    6a6c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6a6e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6a72:	4620      	mov	r0, r4
    6a74:	7363      	strb	r3, [r4, #13]
    6a76:	f7ff ff27 	bl	68c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6a7a:	4629      	mov	r1, r5
    6a7c:	4802      	ldr	r0, [pc, #8]	; (6a88 <z_sched_start+0x8c>)
}
    6a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6a82:	f7ff bcd3 	b.w	642c <z_reschedule>
    6a86:	bf00      	nop
    6a88:	20000c3c 	.word	0x20000c3c
    6a8c:	0000a546 	.word	0x0000a546
    6a90:	0000a598 	.word	0x0000a598
    6a94:	0000a283 	.word	0x0000a283
    6a98:	0000a5ad 	.word	0x0000a5ad
    6a9c:	0000a56c 	.word	0x0000a56c
    6aa0:	0000a583 	.word	0x0000a583

00006aa4 <z_thread_timeout>:
{
    6aa4:	b570      	push	{r4, r5, r6, lr}
    6aa6:	4604      	mov	r4, r0
	__asm__ volatile(
    6aa8:	f04f 0320 	mov.w	r3, #32
    6aac:	f3ef 8611 	mrs	r6, BASEPRI
    6ab0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ab8:	4820      	ldr	r0, [pc, #128]	; (6b3c <z_thread_timeout+0x98>)
    6aba:	f001 f84b 	bl	7b54 <z_spin_lock_valid>
    6abe:	b968      	cbnz	r0, 6adc <z_thread_timeout+0x38>
    6ac0:	4a1f      	ldr	r2, [pc, #124]	; (6b40 <z_thread_timeout+0x9c>)
    6ac2:	4920      	ldr	r1, [pc, #128]	; (6b44 <z_thread_timeout+0xa0>)
    6ac4:	4820      	ldr	r0, [pc, #128]	; (6b48 <z_thread_timeout+0xa4>)
    6ac6:	2381      	movs	r3, #129	; 0x81
    6ac8:	f002 fc63 	bl	9392 <printk>
    6acc:	491b      	ldr	r1, [pc, #108]	; (6b3c <z_thread_timeout+0x98>)
    6ace:	481f      	ldr	r0, [pc, #124]	; (6b4c <z_thread_timeout+0xa8>)
    6ad0:	f002 fc5f 	bl	9392 <printk>
    6ad4:	481a      	ldr	r0, [pc, #104]	; (6b40 <z_thread_timeout+0x9c>)
    6ad6:	2181      	movs	r1, #129	; 0x81
    6ad8:	f002 fa6c 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6adc:	4817      	ldr	r0, [pc, #92]	; (6b3c <z_thread_timeout+0x98>)
    6ade:	f001 f857 	bl	7b90 <z_spin_lock_set_owner>
		if (!killed) {
    6ae2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6ae6:	f013 0f28 	tst.w	r3, #40	; 0x28
    6aea:	d110      	bne.n	6b0e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6aec:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6af0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6af4:	b113      	cbz	r3, 6afc <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6af6:	4628      	mov	r0, r5
    6af8:	f7ff fd72 	bl	65e0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6afc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6b00:	f023 0314 	bic.w	r3, r3, #20
    6b04:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6b08:	4628      	mov	r0, r5
    6b0a:	f7ff fedd 	bl	68c8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b0e:	480b      	ldr	r0, [pc, #44]	; (6b3c <z_thread_timeout+0x98>)
    6b10:	f001 f82e 	bl	7b70 <z_spin_unlock_valid>
    6b14:	b968      	cbnz	r0, 6b32 <z_thread_timeout+0x8e>
    6b16:	4a0a      	ldr	r2, [pc, #40]	; (6b40 <z_thread_timeout+0x9c>)
    6b18:	490d      	ldr	r1, [pc, #52]	; (6b50 <z_thread_timeout+0xac>)
    6b1a:	480b      	ldr	r0, [pc, #44]	; (6b48 <z_thread_timeout+0xa4>)
    6b1c:	23ac      	movs	r3, #172	; 0xac
    6b1e:	f002 fc38 	bl	9392 <printk>
    6b22:	4906      	ldr	r1, [pc, #24]	; (6b3c <z_thread_timeout+0x98>)
    6b24:	480b      	ldr	r0, [pc, #44]	; (6b54 <z_thread_timeout+0xb0>)
    6b26:	f002 fc34 	bl	9392 <printk>
    6b2a:	4805      	ldr	r0, [pc, #20]	; (6b40 <z_thread_timeout+0x9c>)
    6b2c:	21ac      	movs	r1, #172	; 0xac
    6b2e:	f002 fa41 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6b32:	f386 8811 	msr	BASEPRI, r6
    6b36:	f3bf 8f6f 	isb	sy
}
    6b3a:	bd70      	pop	{r4, r5, r6, pc}
    6b3c:	20000c3c 	.word	0x20000c3c
    6b40:	0000a546 	.word	0x0000a546
    6b44:	0000a598 	.word	0x0000a598
    6b48:	0000a283 	.word	0x0000a283
    6b4c:	0000a5ad 	.word	0x0000a5ad
    6b50:	0000a56c 	.word	0x0000a56c
    6b54:	0000a583 	.word	0x0000a583

00006b58 <unready_thread>:
{
    6b58:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    6b5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6b5e:	7b43      	ldrb	r3, [r0, #13]
    6b60:	2a00      	cmp	r2, #0
{
    6b62:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6b64:	da06      	bge.n	6b74 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6b6a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6b6c:	4601      	mov	r1, r0
    6b6e:	4806      	ldr	r0, [pc, #24]	; (6b88 <unready_thread+0x30>)
    6b70:	f7ff fd14 	bl	659c <z_priq_dumb_remove>
	update_cache(thread == _current);
    6b74:	4b05      	ldr	r3, [pc, #20]	; (6b8c <unready_thread+0x34>)
    6b76:	6898      	ldr	r0, [r3, #8]
    6b78:	1b03      	subs	r3, r0, r4
    6b7a:	4258      	negs	r0, r3
}
    6b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6b80:	4158      	adcs	r0, r3
    6b82:	f7ff bd9b 	b.w	66bc <update_cache>
    6b86:	bf00      	nop
    6b88:	20000c28 	.word	0x20000c28
    6b8c:	20000c08 	.word	0x20000c08

00006b90 <add_to_waitq_locked>:
{
    6b90:	b538      	push	{r3, r4, r5, lr}
    6b92:	4604      	mov	r4, r0
    6b94:	460d      	mov	r5, r1
	unready_thread(thread);
    6b96:	f7ff ffdf 	bl	6b58 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6b9a:	7b63      	ldrb	r3, [r4, #13]
    6b9c:	f043 0302 	orr.w	r3, r3, #2
    6ba0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6ba2:	b31d      	cbz	r5, 6bec <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ba4:	4b17      	ldr	r3, [pc, #92]	; (6c04 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    6ba6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ba8:	429c      	cmp	r4, r3
    6baa:	d109      	bne.n	6bc0 <add_to_waitq_locked+0x30>
    6bac:	4916      	ldr	r1, [pc, #88]	; (6c08 <add_to_waitq_locked+0x78>)
    6bae:	4817      	ldr	r0, [pc, #92]	; (6c0c <add_to_waitq_locked+0x7c>)
    6bb0:	4a17      	ldr	r2, [pc, #92]	; (6c10 <add_to_waitq_locked+0x80>)
    6bb2:	23ba      	movs	r3, #186	; 0xba
    6bb4:	f002 fbed 	bl	9392 <printk>
    6bb8:	4815      	ldr	r0, [pc, #84]	; (6c10 <add_to_waitq_locked+0x80>)
    6bba:	21ba      	movs	r1, #186	; 0xba
    6bbc:	f002 f9fa 	bl	8fb4 <assert_post_action>
	return list->head == list;
    6bc0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6bc2:	429d      	cmp	r5, r3
    6bc4:	bf08      	it	eq
    6bc6:	2300      	moveq	r3, #0
    6bc8:	2b00      	cmp	r3, #0
    6bca:	bf38      	it	cc
    6bcc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6bce:	b19b      	cbz	r3, 6bf8 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    6bd0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6bd4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6bd8:	4291      	cmp	r1, r2
    6bda:	d008      	beq.n	6bee <add_to_waitq_locked+0x5e>
		return b2 - b1;
    6bdc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6bde:	2a00      	cmp	r2, #0
    6be0:	dd05      	ble.n	6bee <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    6be2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6be4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6be8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6bea:	605c      	str	r4, [r3, #4]
}
    6bec:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6bee:	686a      	ldr	r2, [r5, #4]
    6bf0:	4293      	cmp	r3, r2
    6bf2:	d001      	beq.n	6bf8 <add_to_waitq_locked+0x68>
    6bf4:	681b      	ldr	r3, [r3, #0]
    6bf6:	e7ea      	b.n	6bce <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    6bf8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6bfa:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6bfe:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6c00:	606c      	str	r4, [r5, #4]
    6c02:	e7f3      	b.n	6bec <add_to_waitq_locked+0x5c>
    6c04:	20000410 	.word	0x20000410
    6c08:	0000b0df 	.word	0x0000b0df
    6c0c:	0000a283 	.word	0x0000a283
    6c10:	0000b0bd 	.word	0x0000b0bd

00006c14 <pend>:
{
    6c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c18:	4604      	mov	r4, r0
    6c1a:	460d      	mov	r5, r1
    6c1c:	4616      	mov	r6, r2
    6c1e:	461f      	mov	r7, r3
	__asm__ volatile(
    6c20:	f04f 0320 	mov.w	r3, #32
    6c24:	f3ef 8811 	mrs	r8, BASEPRI
    6c28:	f383 8812 	msr	BASEPRI_MAX, r3
    6c2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c30:	481f      	ldr	r0, [pc, #124]	; (6cb0 <pend+0x9c>)
    6c32:	f000 ff8f 	bl	7b54 <z_spin_lock_valid>
    6c36:	b968      	cbnz	r0, 6c54 <pend+0x40>
    6c38:	4a1e      	ldr	r2, [pc, #120]	; (6cb4 <pend+0xa0>)
    6c3a:	491f      	ldr	r1, [pc, #124]	; (6cb8 <pend+0xa4>)
    6c3c:	481f      	ldr	r0, [pc, #124]	; (6cbc <pend+0xa8>)
    6c3e:	2381      	movs	r3, #129	; 0x81
    6c40:	f002 fba7 	bl	9392 <printk>
    6c44:	491a      	ldr	r1, [pc, #104]	; (6cb0 <pend+0x9c>)
    6c46:	481e      	ldr	r0, [pc, #120]	; (6cc0 <pend+0xac>)
    6c48:	f002 fba3 	bl	9392 <printk>
    6c4c:	4819      	ldr	r0, [pc, #100]	; (6cb4 <pend+0xa0>)
    6c4e:	2181      	movs	r1, #129	; 0x81
    6c50:	f002 f9b0 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c54:	4816      	ldr	r0, [pc, #88]	; (6cb0 <pend+0x9c>)
    6c56:	f000 ff9b 	bl	7b90 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    6c5a:	4620      	mov	r0, r4
    6c5c:	4629      	mov	r1, r5
    6c5e:	f7ff ff97 	bl	6b90 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c62:	4813      	ldr	r0, [pc, #76]	; (6cb0 <pend+0x9c>)
    6c64:	f000 ff84 	bl	7b70 <z_spin_unlock_valid>
    6c68:	b968      	cbnz	r0, 6c86 <pend+0x72>
    6c6a:	4a12      	ldr	r2, [pc, #72]	; (6cb4 <pend+0xa0>)
    6c6c:	4915      	ldr	r1, [pc, #84]	; (6cc4 <pend+0xb0>)
    6c6e:	4813      	ldr	r0, [pc, #76]	; (6cbc <pend+0xa8>)
    6c70:	23ac      	movs	r3, #172	; 0xac
    6c72:	f002 fb8e 	bl	9392 <printk>
    6c76:	490e      	ldr	r1, [pc, #56]	; (6cb0 <pend+0x9c>)
    6c78:	4813      	ldr	r0, [pc, #76]	; (6cc8 <pend+0xb4>)
    6c7a:	f002 fb8a 	bl	9392 <printk>
    6c7e:	480d      	ldr	r0, [pc, #52]	; (6cb4 <pend+0xa0>)
    6c80:	21ac      	movs	r1, #172	; 0xac
    6c82:	f002 f997 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6c86:	f388 8811 	msr	BASEPRI, r8
    6c8a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6c8e:	1c7b      	adds	r3, r7, #1
    6c90:	bf08      	it	eq
    6c92:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6c96:	d008      	beq.n	6caa <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6c98:	4632      	mov	r2, r6
    6c9a:	463b      	mov	r3, r7
    6c9c:	f104 0018 	add.w	r0, r4, #24
    6ca0:	490a      	ldr	r1, [pc, #40]	; (6ccc <pend+0xb8>)
}
    6ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ca6:	f000 bfcb 	b.w	7c40 <z_add_timeout>
    6caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cae:	bf00      	nop
    6cb0:	20000c3c 	.word	0x20000c3c
    6cb4:	0000a546 	.word	0x0000a546
    6cb8:	0000a598 	.word	0x0000a598
    6cbc:	0000a283 	.word	0x0000a283
    6cc0:	0000a5ad 	.word	0x0000a5ad
    6cc4:	0000a56c 	.word	0x0000a56c
    6cc8:	0000a583 	.word	0x0000a583
    6ccc:	00006aa5 	.word	0x00006aa5

00006cd0 <z_pend_curr>:
{
    6cd0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6cd2:	4b11      	ldr	r3, [pc, #68]	; (6d18 <z_pend_curr+0x48>)
{
    6cd4:	4604      	mov	r4, r0
	pending_current = _current;
    6cd6:	6898      	ldr	r0, [r3, #8]
    6cd8:	4b10      	ldr	r3, [pc, #64]	; (6d1c <z_pend_curr+0x4c>)
{
    6cda:	460d      	mov	r5, r1
	pending_current = _current;
    6cdc:	6018      	str	r0, [r3, #0]
{
    6cde:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6ce4:	f7ff ff96 	bl	6c14 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ce8:	4620      	mov	r0, r4
    6cea:	f000 ff41 	bl	7b70 <z_spin_unlock_valid>
    6cee:	b968      	cbnz	r0, 6d0c <z_pend_curr+0x3c>
    6cf0:	4a0b      	ldr	r2, [pc, #44]	; (6d20 <z_pend_curr+0x50>)
    6cf2:	490c      	ldr	r1, [pc, #48]	; (6d24 <z_pend_curr+0x54>)
    6cf4:	480c      	ldr	r0, [pc, #48]	; (6d28 <z_pend_curr+0x58>)
    6cf6:	23c3      	movs	r3, #195	; 0xc3
    6cf8:	f002 fb4b 	bl	9392 <printk>
    6cfc:	480b      	ldr	r0, [pc, #44]	; (6d2c <z_pend_curr+0x5c>)
    6cfe:	4621      	mov	r1, r4
    6d00:	f002 fb47 	bl	9392 <printk>
    6d04:	4806      	ldr	r0, [pc, #24]	; (6d20 <z_pend_curr+0x50>)
    6d06:	21c3      	movs	r1, #195	; 0xc3
    6d08:	f002 f954 	bl	8fb4 <assert_post_action>
    6d0c:	4628      	mov	r0, r5
}
    6d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d12:	f7fb bc97 	b.w	2644 <arch_swap>
    6d16:	bf00      	nop
    6d18:	20000c08 	.word	0x20000c08
    6d1c:	20000c38 	.word	0x20000c38
    6d20:	0000a546 	.word	0x0000a546
    6d24:	0000a56c 	.word	0x0000a56c
    6d28:	0000a283 	.word	0x0000a283
    6d2c:	0000a583 	.word	0x0000a583

00006d30 <z_set_prio>:
{
    6d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d32:	4604      	mov	r4, r0
    6d34:	460e      	mov	r6, r1
	__asm__ volatile(
    6d36:	f04f 0320 	mov.w	r3, #32
    6d3a:	f3ef 8711 	mrs	r7, BASEPRI
    6d3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d46:	483c      	ldr	r0, [pc, #240]	; (6e38 <z_set_prio+0x108>)
    6d48:	f000 ff04 	bl	7b54 <z_spin_lock_valid>
    6d4c:	b968      	cbnz	r0, 6d6a <z_set_prio+0x3a>
    6d4e:	4a3b      	ldr	r2, [pc, #236]	; (6e3c <z_set_prio+0x10c>)
    6d50:	493b      	ldr	r1, [pc, #236]	; (6e40 <z_set_prio+0x110>)
    6d52:	483c      	ldr	r0, [pc, #240]	; (6e44 <z_set_prio+0x114>)
    6d54:	2381      	movs	r3, #129	; 0x81
    6d56:	f002 fb1c 	bl	9392 <printk>
    6d5a:	4937      	ldr	r1, [pc, #220]	; (6e38 <z_set_prio+0x108>)
    6d5c:	483a      	ldr	r0, [pc, #232]	; (6e48 <z_set_prio+0x118>)
    6d5e:	f002 fb18 	bl	9392 <printk>
    6d62:	4836      	ldr	r0, [pc, #216]	; (6e3c <z_set_prio+0x10c>)
    6d64:	2181      	movs	r1, #129	; 0x81
    6d66:	f002 f925 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d6a:	4833      	ldr	r0, [pc, #204]	; (6e38 <z_set_prio+0x108>)
    6d6c:	f000 ff10 	bl	7b90 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6d70:	7b63      	ldrb	r3, [r4, #13]
    6d72:	06da      	lsls	r2, r3, #27
    6d74:	b276      	sxtb	r6, r6
    6d76:	d15c      	bne.n	6e32 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    6d78:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    6d7a:	2d00      	cmp	r5, #0
    6d7c:	d159      	bne.n	6e32 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d82:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6d84:	4831      	ldr	r0, [pc, #196]	; (6e4c <z_set_prio+0x11c>)
    6d86:	4621      	mov	r1, r4
    6d88:	f7ff fc08 	bl	659c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6d8c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6d8e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6d94:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6d96:	4b2e      	ldr	r3, [pc, #184]	; (6e50 <z_set_prio+0x120>)
    6d98:	429c      	cmp	r4, r3
    6d9a:	d109      	bne.n	6db0 <z_set_prio+0x80>
    6d9c:	492d      	ldr	r1, [pc, #180]	; (6e54 <z_set_prio+0x124>)
    6d9e:	4829      	ldr	r0, [pc, #164]	; (6e44 <z_set_prio+0x114>)
    6da0:	4a2d      	ldr	r2, [pc, #180]	; (6e58 <z_set_prio+0x128>)
    6da2:	23ba      	movs	r3, #186	; 0xba
    6da4:	f002 faf5 	bl	9392 <printk>
    6da8:	482b      	ldr	r0, [pc, #172]	; (6e58 <z_set_prio+0x128>)
    6daa:	21ba      	movs	r1, #186	; 0xba
    6dac:	f002 f902 	bl	8fb4 <assert_post_action>
	return list->head == list;
    6db0:	492a      	ldr	r1, [pc, #168]	; (6e5c <z_set_prio+0x12c>)
    6db2:	460b      	mov	r3, r1
    6db4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6db8:	4298      	cmp	r0, r3
    6dba:	bf18      	it	ne
    6dbc:	4605      	movne	r5, r0
    6dbe:	2d00      	cmp	r5, #0
    6dc0:	461a      	mov	r2, r3
    6dc2:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6dc4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6dc6:	bf38      	it	cc
    6dc8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dca:	b36b      	cbz	r3, 6e28 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    6dcc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6dd0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6dd4:	4286      	cmp	r6, r0
    6dd6:	d023      	beq.n	6e20 <z_set_prio+0xf0>
		return b2 - b1;
    6dd8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6dda:	2800      	cmp	r0, #0
    6ddc:	dd20      	ble.n	6e20 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    6dde:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6de0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6de4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6de6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6de8:	2001      	movs	r0, #1
    6dea:	f7ff fc67 	bl	66bc <update_cache>
    6dee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6df0:	4811      	ldr	r0, [pc, #68]	; (6e38 <z_set_prio+0x108>)
    6df2:	f000 febd 	bl	7b70 <z_spin_unlock_valid>
    6df6:	b968      	cbnz	r0, 6e14 <z_set_prio+0xe4>
    6df8:	4a10      	ldr	r2, [pc, #64]	; (6e3c <z_set_prio+0x10c>)
    6dfa:	4919      	ldr	r1, [pc, #100]	; (6e60 <z_set_prio+0x130>)
    6dfc:	4811      	ldr	r0, [pc, #68]	; (6e44 <z_set_prio+0x114>)
    6dfe:	23ac      	movs	r3, #172	; 0xac
    6e00:	f002 fac7 	bl	9392 <printk>
    6e04:	490c      	ldr	r1, [pc, #48]	; (6e38 <z_set_prio+0x108>)
    6e06:	4817      	ldr	r0, [pc, #92]	; (6e64 <z_set_prio+0x134>)
    6e08:	f002 fac3 	bl	9392 <printk>
    6e0c:	480b      	ldr	r0, [pc, #44]	; (6e3c <z_set_prio+0x10c>)
    6e0e:	21ac      	movs	r1, #172	; 0xac
    6e10:	f002 f8d0 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6e14:	f387 8811 	msr	BASEPRI, r7
    6e18:	f3bf 8f6f 	isb	sy
}
    6e1c:	4620      	mov	r0, r4
    6e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6e20:	42ab      	cmp	r3, r5
    6e22:	d001      	beq.n	6e28 <z_set_prio+0xf8>
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	e7d0      	b.n	6dca <z_set_prio+0x9a>
	node->prev = tail;
    6e28:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6e2c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6e2e:	624c      	str	r4, [r1, #36]	; 0x24
}
    6e30:	e7da      	b.n	6de8 <z_set_prio+0xb8>
			thread->base.prio = prio;
    6e32:	73a6      	strb	r6, [r4, #14]
    6e34:	2400      	movs	r4, #0
    6e36:	e7db      	b.n	6df0 <z_set_prio+0xc0>
    6e38:	20000c3c 	.word	0x20000c3c
    6e3c:	0000a546 	.word	0x0000a546
    6e40:	0000a598 	.word	0x0000a598
    6e44:	0000a283 	.word	0x0000a283
    6e48:	0000a5ad 	.word	0x0000a5ad
    6e4c:	20000c28 	.word	0x20000c28
    6e50:	20000410 	.word	0x20000410
    6e54:	0000b0df 	.word	0x0000b0df
    6e58:	0000b0bd 	.word	0x0000b0bd
    6e5c:	20000c08 	.word	0x20000c08
    6e60:	0000a56c 	.word	0x0000a56c
    6e64:	0000a583 	.word	0x0000a583

00006e68 <z_impl_k_thread_suspend>:
{
    6e68:	b570      	push	{r4, r5, r6, lr}
    6e6a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    6e6c:	3018      	adds	r0, #24
    6e6e:	f000 ffbb 	bl	7de8 <z_abort_timeout>
	__asm__ volatile(
    6e72:	f04f 0320 	mov.w	r3, #32
    6e76:	f3ef 8611 	mrs	r6, BASEPRI
    6e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e82:	4825      	ldr	r0, [pc, #148]	; (6f18 <z_impl_k_thread_suspend+0xb0>)
    6e84:	f000 fe66 	bl	7b54 <z_spin_lock_valid>
    6e88:	b968      	cbnz	r0, 6ea6 <z_impl_k_thread_suspend+0x3e>
    6e8a:	4a24      	ldr	r2, [pc, #144]	; (6f1c <z_impl_k_thread_suspend+0xb4>)
    6e8c:	4924      	ldr	r1, [pc, #144]	; (6f20 <z_impl_k_thread_suspend+0xb8>)
    6e8e:	4825      	ldr	r0, [pc, #148]	; (6f24 <z_impl_k_thread_suspend+0xbc>)
    6e90:	2381      	movs	r3, #129	; 0x81
    6e92:	f002 fa7e 	bl	9392 <printk>
    6e96:	4920      	ldr	r1, [pc, #128]	; (6f18 <z_impl_k_thread_suspend+0xb0>)
    6e98:	4823      	ldr	r0, [pc, #140]	; (6f28 <z_impl_k_thread_suspend+0xc0>)
    6e9a:	f002 fa7a 	bl	9392 <printk>
    6e9e:	481f      	ldr	r0, [pc, #124]	; (6f1c <z_impl_k_thread_suspend+0xb4>)
    6ea0:	2181      	movs	r1, #129	; 0x81
    6ea2:	f002 f887 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ea6:	481c      	ldr	r0, [pc, #112]	; (6f18 <z_impl_k_thread_suspend+0xb0>)
    6ea8:	f000 fe72 	bl	7b90 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6eac:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6eb0:	7b63      	ldrb	r3, [r4, #13]
    6eb2:	2a00      	cmp	r2, #0
    6eb4:	da06      	bge.n	6ec4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    6eba:	481c      	ldr	r0, [pc, #112]	; (6f2c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ebc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ebe:	4621      	mov	r1, r4
    6ec0:	f7ff fb6c 	bl	659c <z_priq_dumb_remove>
		update_cache(thread == _current);
    6ec4:	4d1a      	ldr	r5, [pc, #104]	; (6f30 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6ec6:	7b63      	ldrb	r3, [r4, #13]
    6ec8:	68a8      	ldr	r0, [r5, #8]
    6eca:	f043 0310 	orr.w	r3, r3, #16
    6ece:	7363      	strb	r3, [r4, #13]
    6ed0:	1b03      	subs	r3, r0, r4
    6ed2:	4258      	negs	r0, r3
    6ed4:	4158      	adcs	r0, r3
    6ed6:	f7ff fbf1 	bl	66bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6eda:	480f      	ldr	r0, [pc, #60]	; (6f18 <z_impl_k_thread_suspend+0xb0>)
    6edc:	f000 fe48 	bl	7b70 <z_spin_unlock_valid>
    6ee0:	b968      	cbnz	r0, 6efe <z_impl_k_thread_suspend+0x96>
    6ee2:	4a0e      	ldr	r2, [pc, #56]	; (6f1c <z_impl_k_thread_suspend+0xb4>)
    6ee4:	4913      	ldr	r1, [pc, #76]	; (6f34 <z_impl_k_thread_suspend+0xcc>)
    6ee6:	480f      	ldr	r0, [pc, #60]	; (6f24 <z_impl_k_thread_suspend+0xbc>)
    6ee8:	23ac      	movs	r3, #172	; 0xac
    6eea:	f002 fa52 	bl	9392 <printk>
    6eee:	490a      	ldr	r1, [pc, #40]	; (6f18 <z_impl_k_thread_suspend+0xb0>)
    6ef0:	4811      	ldr	r0, [pc, #68]	; (6f38 <z_impl_k_thread_suspend+0xd0>)
    6ef2:	f002 fa4e 	bl	9392 <printk>
    6ef6:	4809      	ldr	r0, [pc, #36]	; (6f1c <z_impl_k_thread_suspend+0xb4>)
    6ef8:	21ac      	movs	r1, #172	; 0xac
    6efa:	f002 f85b 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6efe:	f386 8811 	msr	BASEPRI, r6
    6f02:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6f06:	68ab      	ldr	r3, [r5, #8]
    6f08:	42a3      	cmp	r3, r4
    6f0a:	d103      	bne.n	6f14 <z_impl_k_thread_suspend+0xac>
}
    6f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6f10:	f002 bdc8 	b.w	9aa4 <z_reschedule_unlocked>
}
    6f14:	bd70      	pop	{r4, r5, r6, pc}
    6f16:	bf00      	nop
    6f18:	20000c3c 	.word	0x20000c3c
    6f1c:	0000a546 	.word	0x0000a546
    6f20:	0000a598 	.word	0x0000a598
    6f24:	0000a283 	.word	0x0000a283
    6f28:	0000a5ad 	.word	0x0000a5ad
    6f2c:	20000c28 	.word	0x20000c28
    6f30:	20000c08 	.word	0x20000c08
    6f34:	0000a56c 	.word	0x0000a56c
    6f38:	0000a583 	.word	0x0000a583

00006f3c <k_sched_unlock>:
{
    6f3c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6f3e:	f04f 0320 	mov.w	r3, #32
    6f42:	f3ef 8511 	mrs	r5, BASEPRI
    6f46:	f383 8812 	msr	BASEPRI_MAX, r3
    6f4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f4e:	482d      	ldr	r0, [pc, #180]	; (7004 <k_sched_unlock+0xc8>)
    6f50:	f000 fe00 	bl	7b54 <z_spin_lock_valid>
    6f54:	b968      	cbnz	r0, 6f72 <k_sched_unlock+0x36>
    6f56:	4a2c      	ldr	r2, [pc, #176]	; (7008 <k_sched_unlock+0xcc>)
    6f58:	492c      	ldr	r1, [pc, #176]	; (700c <k_sched_unlock+0xd0>)
    6f5a:	482d      	ldr	r0, [pc, #180]	; (7010 <k_sched_unlock+0xd4>)
    6f5c:	2381      	movs	r3, #129	; 0x81
    6f5e:	f002 fa18 	bl	9392 <printk>
    6f62:	4928      	ldr	r1, [pc, #160]	; (7004 <k_sched_unlock+0xc8>)
    6f64:	482b      	ldr	r0, [pc, #172]	; (7014 <k_sched_unlock+0xd8>)
    6f66:	f002 fa14 	bl	9392 <printk>
    6f6a:	4827      	ldr	r0, [pc, #156]	; (7008 <k_sched_unlock+0xcc>)
    6f6c:	2181      	movs	r1, #129	; 0x81
    6f6e:	f002 f821 	bl	8fb4 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6f72:	4c29      	ldr	r4, [pc, #164]	; (7018 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    6f74:	4823      	ldr	r0, [pc, #140]	; (7004 <k_sched_unlock+0xc8>)
    6f76:	f000 fe0b 	bl	7b90 <z_spin_lock_set_owner>
    6f7a:	68a2      	ldr	r2, [r4, #8]
    6f7c:	7bd2      	ldrb	r2, [r2, #15]
    6f7e:	b972      	cbnz	r2, 6f9e <k_sched_unlock+0x62>
    6f80:	4926      	ldr	r1, [pc, #152]	; (701c <k_sched_unlock+0xe0>)
    6f82:	4a27      	ldr	r2, [pc, #156]	; (7020 <k_sched_unlock+0xe4>)
    6f84:	4822      	ldr	r0, [pc, #136]	; (7010 <k_sched_unlock+0xd4>)
    6f86:	f240 3385 	movw	r3, #901	; 0x385
    6f8a:	f002 fa02 	bl	9392 <printk>
    6f8e:	4825      	ldr	r0, [pc, #148]	; (7024 <k_sched_unlock+0xe8>)
    6f90:	f002 f9ff 	bl	9392 <printk>
    6f94:	4822      	ldr	r0, [pc, #136]	; (7020 <k_sched_unlock+0xe4>)
    6f96:	f240 3185 	movw	r1, #901	; 0x385
    6f9a:	f002 f80b 	bl	8fb4 <assert_post_action>
    6f9e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6fa2:	b173      	cbz	r3, 6fc2 <k_sched_unlock+0x86>
    6fa4:	4920      	ldr	r1, [pc, #128]	; (7028 <k_sched_unlock+0xec>)
    6fa6:	4a1e      	ldr	r2, [pc, #120]	; (7020 <k_sched_unlock+0xe4>)
    6fa8:	4819      	ldr	r0, [pc, #100]	; (7010 <k_sched_unlock+0xd4>)
    6faa:	f240 3386 	movw	r3, #902	; 0x386
    6fae:	f002 f9f0 	bl	9392 <printk>
    6fb2:	481c      	ldr	r0, [pc, #112]	; (7024 <k_sched_unlock+0xe8>)
    6fb4:	f002 f9ed 	bl	9392 <printk>
    6fb8:	4819      	ldr	r0, [pc, #100]	; (7020 <k_sched_unlock+0xe4>)
    6fba:	f240 3186 	movw	r1, #902	; 0x386
    6fbe:	f001 fff9 	bl	8fb4 <assert_post_action>
		++_current->base.sched_locked;
    6fc2:	68a2      	ldr	r2, [r4, #8]
    6fc4:	7bd3      	ldrb	r3, [r2, #15]
    6fc6:	3301      	adds	r3, #1
		update_cache(0);
    6fc8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6fca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6fcc:	f7ff fb76 	bl	66bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fd0:	480c      	ldr	r0, [pc, #48]	; (7004 <k_sched_unlock+0xc8>)
    6fd2:	f000 fdcd 	bl	7b70 <z_spin_unlock_valid>
    6fd6:	b968      	cbnz	r0, 6ff4 <k_sched_unlock+0xb8>
    6fd8:	4a0b      	ldr	r2, [pc, #44]	; (7008 <k_sched_unlock+0xcc>)
    6fda:	4914      	ldr	r1, [pc, #80]	; (702c <k_sched_unlock+0xf0>)
    6fdc:	480c      	ldr	r0, [pc, #48]	; (7010 <k_sched_unlock+0xd4>)
    6fde:	23ac      	movs	r3, #172	; 0xac
    6fe0:	f002 f9d7 	bl	9392 <printk>
    6fe4:	4907      	ldr	r1, [pc, #28]	; (7004 <k_sched_unlock+0xc8>)
    6fe6:	4812      	ldr	r0, [pc, #72]	; (7030 <k_sched_unlock+0xf4>)
    6fe8:	f002 f9d3 	bl	9392 <printk>
    6fec:	4806      	ldr	r0, [pc, #24]	; (7008 <k_sched_unlock+0xcc>)
    6fee:	21ac      	movs	r1, #172	; 0xac
    6ff0:	f001 ffe0 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    6ff4:	f385 8811 	msr	BASEPRI, r5
    6ff8:	f3bf 8f6f 	isb	sy
}
    6ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7000:	f002 bd50 	b.w	9aa4 <z_reschedule_unlocked>
    7004:	20000c3c 	.word	0x20000c3c
    7008:	0000a546 	.word	0x0000a546
    700c:	0000a598 	.word	0x0000a598
    7010:	0000a283 	.word	0x0000a283
    7014:	0000a5ad 	.word	0x0000a5ad
    7018:	20000c08 	.word	0x20000c08
    701c:	0000b13e 	.word	0x0000b13e
    7020:	0000b0bd 	.word	0x0000b0bd
    7024:	0000af59 	.word	0x0000af59
    7028:	0000aee0 	.word	0x0000aee0
    702c:	0000a56c 	.word	0x0000a56c
    7030:	0000a583 	.word	0x0000a583

00007034 <z_unpend1_no_timeout>:
{
    7034:	b538      	push	{r3, r4, r5, lr}
    7036:	4604      	mov	r4, r0
	__asm__ volatile(
    7038:	f04f 0320 	mov.w	r3, #32
    703c:	f3ef 8511 	mrs	r5, BASEPRI
    7040:	f383 8812 	msr	BASEPRI_MAX, r3
    7044:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7048:	4819      	ldr	r0, [pc, #100]	; (70b0 <z_unpend1_no_timeout+0x7c>)
    704a:	f000 fd83 	bl	7b54 <z_spin_lock_valid>
    704e:	b968      	cbnz	r0, 706c <z_unpend1_no_timeout+0x38>
    7050:	4a18      	ldr	r2, [pc, #96]	; (70b4 <z_unpend1_no_timeout+0x80>)
    7052:	4919      	ldr	r1, [pc, #100]	; (70b8 <z_unpend1_no_timeout+0x84>)
    7054:	4819      	ldr	r0, [pc, #100]	; (70bc <z_unpend1_no_timeout+0x88>)
    7056:	2381      	movs	r3, #129	; 0x81
    7058:	f002 f99b 	bl	9392 <printk>
    705c:	4914      	ldr	r1, [pc, #80]	; (70b0 <z_unpend1_no_timeout+0x7c>)
    705e:	4818      	ldr	r0, [pc, #96]	; (70c0 <z_unpend1_no_timeout+0x8c>)
    7060:	f002 f997 	bl	9392 <printk>
    7064:	4813      	ldr	r0, [pc, #76]	; (70b4 <z_unpend1_no_timeout+0x80>)
    7066:	2181      	movs	r1, #129	; 0x81
    7068:	f001 ffa4 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    706c:	4810      	ldr	r0, [pc, #64]	; (70b0 <z_unpend1_no_timeout+0x7c>)
    706e:	f000 fd8f 	bl	7b90 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7072:	4620      	mov	r0, r4
    7074:	f002 fd20 	bl	9ab8 <z_priq_dumb_best>
		if (thread != NULL) {
    7078:	4604      	mov	r4, r0
    707a:	b108      	cbz	r0, 7080 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    707c:	f7ff fab0 	bl	65e0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7080:	480b      	ldr	r0, [pc, #44]	; (70b0 <z_unpend1_no_timeout+0x7c>)
    7082:	f000 fd75 	bl	7b70 <z_spin_unlock_valid>
    7086:	b968      	cbnz	r0, 70a4 <z_unpend1_no_timeout+0x70>
    7088:	4a0a      	ldr	r2, [pc, #40]	; (70b4 <z_unpend1_no_timeout+0x80>)
    708a:	490e      	ldr	r1, [pc, #56]	; (70c4 <z_unpend1_no_timeout+0x90>)
    708c:	480b      	ldr	r0, [pc, #44]	; (70bc <z_unpend1_no_timeout+0x88>)
    708e:	23ac      	movs	r3, #172	; 0xac
    7090:	f002 f97f 	bl	9392 <printk>
    7094:	4906      	ldr	r1, [pc, #24]	; (70b0 <z_unpend1_no_timeout+0x7c>)
    7096:	480c      	ldr	r0, [pc, #48]	; (70c8 <z_unpend1_no_timeout+0x94>)
    7098:	f002 f97b 	bl	9392 <printk>
    709c:	4805      	ldr	r0, [pc, #20]	; (70b4 <z_unpend1_no_timeout+0x80>)
    709e:	21ac      	movs	r1, #172	; 0xac
    70a0:	f001 ff88 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    70a4:	f385 8811 	msr	BASEPRI, r5
    70a8:	f3bf 8f6f 	isb	sy
}
    70ac:	4620      	mov	r0, r4
    70ae:	bd38      	pop	{r3, r4, r5, pc}
    70b0:	20000c3c 	.word	0x20000c3c
    70b4:	0000a546 	.word	0x0000a546
    70b8:	0000a598 	.word	0x0000a598
    70bc:	0000a283 	.word	0x0000a283
    70c0:	0000a5ad 	.word	0x0000a5ad
    70c4:	0000a56c 	.word	0x0000a56c
    70c8:	0000a583 	.word	0x0000a583

000070cc <z_unpend_first_thread>:
{
    70cc:	b538      	push	{r3, r4, r5, lr}
    70ce:	4604      	mov	r4, r0
	__asm__ volatile(
    70d0:	f04f 0320 	mov.w	r3, #32
    70d4:	f3ef 8511 	mrs	r5, BASEPRI
    70d8:	f383 8812 	msr	BASEPRI_MAX, r3
    70dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70e0:	481b      	ldr	r0, [pc, #108]	; (7150 <z_unpend_first_thread+0x84>)
    70e2:	f000 fd37 	bl	7b54 <z_spin_lock_valid>
    70e6:	b968      	cbnz	r0, 7104 <z_unpend_first_thread+0x38>
    70e8:	4a1a      	ldr	r2, [pc, #104]	; (7154 <z_unpend_first_thread+0x88>)
    70ea:	491b      	ldr	r1, [pc, #108]	; (7158 <z_unpend_first_thread+0x8c>)
    70ec:	481b      	ldr	r0, [pc, #108]	; (715c <z_unpend_first_thread+0x90>)
    70ee:	2381      	movs	r3, #129	; 0x81
    70f0:	f002 f94f 	bl	9392 <printk>
    70f4:	4916      	ldr	r1, [pc, #88]	; (7150 <z_unpend_first_thread+0x84>)
    70f6:	481a      	ldr	r0, [pc, #104]	; (7160 <z_unpend_first_thread+0x94>)
    70f8:	f002 f94b 	bl	9392 <printk>
    70fc:	4815      	ldr	r0, [pc, #84]	; (7154 <z_unpend_first_thread+0x88>)
    70fe:	2181      	movs	r1, #129	; 0x81
    7100:	f001 ff58 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7104:	4812      	ldr	r0, [pc, #72]	; (7150 <z_unpend_first_thread+0x84>)
    7106:	f000 fd43 	bl	7b90 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    710a:	4620      	mov	r0, r4
    710c:	f002 fcd4 	bl	9ab8 <z_priq_dumb_best>
		if (thread != NULL) {
    7110:	4604      	mov	r4, r0
    7112:	b128      	cbz	r0, 7120 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7114:	f7ff fa64 	bl	65e0 <unpend_thread_no_timeout>
    7118:	f104 0018 	add.w	r0, r4, #24
    711c:	f000 fe64 	bl	7de8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7120:	480b      	ldr	r0, [pc, #44]	; (7150 <z_unpend_first_thread+0x84>)
    7122:	f000 fd25 	bl	7b70 <z_spin_unlock_valid>
    7126:	b968      	cbnz	r0, 7144 <z_unpend_first_thread+0x78>
    7128:	4a0a      	ldr	r2, [pc, #40]	; (7154 <z_unpend_first_thread+0x88>)
    712a:	490e      	ldr	r1, [pc, #56]	; (7164 <z_unpend_first_thread+0x98>)
    712c:	480b      	ldr	r0, [pc, #44]	; (715c <z_unpend_first_thread+0x90>)
    712e:	23ac      	movs	r3, #172	; 0xac
    7130:	f002 f92f 	bl	9392 <printk>
    7134:	4906      	ldr	r1, [pc, #24]	; (7150 <z_unpend_first_thread+0x84>)
    7136:	480c      	ldr	r0, [pc, #48]	; (7168 <z_unpend_first_thread+0x9c>)
    7138:	f002 f92b 	bl	9392 <printk>
    713c:	4805      	ldr	r0, [pc, #20]	; (7154 <z_unpend_first_thread+0x88>)
    713e:	21ac      	movs	r1, #172	; 0xac
    7140:	f001 ff38 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    7144:	f385 8811 	msr	BASEPRI, r5
    7148:	f3bf 8f6f 	isb	sy
}
    714c:	4620      	mov	r0, r4
    714e:	bd38      	pop	{r3, r4, r5, pc}
    7150:	20000c3c 	.word	0x20000c3c
    7154:	0000a546 	.word	0x0000a546
    7158:	0000a598 	.word	0x0000a598
    715c:	0000a283 	.word	0x0000a283
    7160:	0000a5ad 	.word	0x0000a5ad
    7164:	0000a56c 	.word	0x0000a56c
    7168:	0000a583 	.word	0x0000a583

0000716c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    716c:	4b04      	ldr	r3, [pc, #16]	; (7180 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    716e:	2100      	movs	r1, #0
    7170:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7174:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7178:	4608      	mov	r0, r1
    717a:	f7ff b8a9 	b.w	62d0 <k_sched_time_slice_set>
    717e:	bf00      	nop
    7180:	20000c08 	.word	0x20000c08

00007184 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7186:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    718a:	b173      	cbz	r3, 71aa <z_impl_k_yield+0x26>
    718c:	4941      	ldr	r1, [pc, #260]	; (7294 <z_impl_k_yield+0x110>)
    718e:	4a42      	ldr	r2, [pc, #264]	; (7298 <z_impl_k_yield+0x114>)
    7190:	4842      	ldr	r0, [pc, #264]	; (729c <z_impl_k_yield+0x118>)
    7192:	f240 43dc 	movw	r3, #1244	; 0x4dc
    7196:	f002 f8fc 	bl	9392 <printk>
    719a:	4841      	ldr	r0, [pc, #260]	; (72a0 <z_impl_k_yield+0x11c>)
    719c:	f002 f8f9 	bl	9392 <printk>
    71a0:	483d      	ldr	r0, [pc, #244]	; (7298 <z_impl_k_yield+0x114>)
    71a2:	f240 41dc 	movw	r1, #1244	; 0x4dc
    71a6:	f001 ff05 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    71aa:	f04f 0320 	mov.w	r3, #32
    71ae:	f3ef 8611 	mrs	r6, BASEPRI
    71b2:	f383 8812 	msr	BASEPRI_MAX, r3
    71b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71ba:	483a      	ldr	r0, [pc, #232]	; (72a4 <z_impl_k_yield+0x120>)
    71bc:	f000 fcca 	bl	7b54 <z_spin_lock_valid>
    71c0:	b968      	cbnz	r0, 71de <z_impl_k_yield+0x5a>
    71c2:	4a39      	ldr	r2, [pc, #228]	; (72a8 <z_impl_k_yield+0x124>)
    71c4:	4939      	ldr	r1, [pc, #228]	; (72ac <z_impl_k_yield+0x128>)
    71c6:	4835      	ldr	r0, [pc, #212]	; (729c <z_impl_k_yield+0x118>)
    71c8:	2381      	movs	r3, #129	; 0x81
    71ca:	f002 f8e2 	bl	9392 <printk>
    71ce:	4935      	ldr	r1, [pc, #212]	; (72a4 <z_impl_k_yield+0x120>)
    71d0:	4837      	ldr	r0, [pc, #220]	; (72b0 <z_impl_k_yield+0x12c>)
    71d2:	f002 f8de 	bl	9392 <printk>
    71d6:	4834      	ldr	r0, [pc, #208]	; (72a8 <z_impl_k_yield+0x124>)
    71d8:	2181      	movs	r1, #129	; 0x81
    71da:	f001 feeb 	bl	8fb4 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    71de:	4d35      	ldr	r5, [pc, #212]	; (72b4 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    71e0:	4830      	ldr	r0, [pc, #192]	; (72a4 <z_impl_k_yield+0x120>)
    71e2:	f000 fcd5 	bl	7b90 <z_spin_lock_set_owner>
    71e6:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    71e8:	7b4b      	ldrb	r3, [r1, #13]
    71ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    71ee:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    71f0:	f105 0020 	add.w	r0, r5, #32
    71f4:	f7ff f9d2 	bl	659c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    71f8:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    71fa:	7b63      	ldrb	r3, [r4, #13]
    71fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7200:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7202:	4b2d      	ldr	r3, [pc, #180]	; (72b8 <z_impl_k_yield+0x134>)
    7204:	429c      	cmp	r4, r3
    7206:	d109      	bne.n	721c <z_impl_k_yield+0x98>
    7208:	492c      	ldr	r1, [pc, #176]	; (72bc <z_impl_k_yield+0x138>)
    720a:	4824      	ldr	r0, [pc, #144]	; (729c <z_impl_k_yield+0x118>)
    720c:	4a22      	ldr	r2, [pc, #136]	; (7298 <z_impl_k_yield+0x114>)
    720e:	23ba      	movs	r3, #186	; 0xba
    7210:	f002 f8bf 	bl	9392 <printk>
    7214:	4820      	ldr	r0, [pc, #128]	; (7298 <z_impl_k_yield+0x114>)
    7216:	21ba      	movs	r1, #186	; 0xba
    7218:	f001 fecc 	bl	8fb4 <assert_post_action>
	return list->head == list;
    721c:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    721e:	4828      	ldr	r0, [pc, #160]	; (72c0 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7220:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7222:	4283      	cmp	r3, r0
    7224:	bf08      	it	eq
    7226:	2300      	moveq	r3, #0
    7228:	2b00      	cmp	r3, #0
    722a:	bf38      	it	cc
    722c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    722e:	b35b      	cbz	r3, 7288 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    7230:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7234:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7238:	4297      	cmp	r7, r2
    723a:	d021      	beq.n	7280 <z_impl_k_yield+0xfc>
		return b2 - b1;
    723c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    723e:	2a00      	cmp	r2, #0
    7240:	dd1e      	ble.n	7280 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    7242:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7244:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7248:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    724a:	605c      	str	r4, [r3, #4]
	update_cache(1);
    724c:	2001      	movs	r0, #1
    724e:	f7ff fa35 	bl	66bc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7252:	4814      	ldr	r0, [pc, #80]	; (72a4 <z_impl_k_yield+0x120>)
    7254:	f000 fc8c 	bl	7b70 <z_spin_unlock_valid>
    7258:	b968      	cbnz	r0, 7276 <z_impl_k_yield+0xf2>
    725a:	4a13      	ldr	r2, [pc, #76]	; (72a8 <z_impl_k_yield+0x124>)
    725c:	4919      	ldr	r1, [pc, #100]	; (72c4 <z_impl_k_yield+0x140>)
    725e:	480f      	ldr	r0, [pc, #60]	; (729c <z_impl_k_yield+0x118>)
    7260:	23c3      	movs	r3, #195	; 0xc3
    7262:	f002 f896 	bl	9392 <printk>
    7266:	490f      	ldr	r1, [pc, #60]	; (72a4 <z_impl_k_yield+0x120>)
    7268:	4817      	ldr	r0, [pc, #92]	; (72c8 <z_impl_k_yield+0x144>)
    726a:	f002 f892 	bl	9392 <printk>
    726e:	480e      	ldr	r0, [pc, #56]	; (72a8 <z_impl_k_yield+0x124>)
    7270:	21c3      	movs	r1, #195	; 0xc3
    7272:	f001 fe9f 	bl	8fb4 <assert_post_action>
    7276:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    7278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    727c:	f7fb b9e2 	b.w	2644 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7280:	428b      	cmp	r3, r1
    7282:	d001      	beq.n	7288 <z_impl_k_yield+0x104>
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	e7d2      	b.n	722e <z_impl_k_yield+0xaa>
	node->prev = tail;
    7288:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    728c:	600c      	str	r4, [r1, #0]
	list->tail = node;
    728e:	626c      	str	r4, [r5, #36]	; 0x24
}
    7290:	e7dc      	b.n	724c <z_impl_k_yield+0xc8>
    7292:	bf00      	nop
    7294:	0000aee0 	.word	0x0000aee0
    7298:	0000b0bd 	.word	0x0000b0bd
    729c:	0000a283 	.word	0x0000a283
    72a0:	0000af59 	.word	0x0000af59
    72a4:	20000c3c 	.word	0x20000c3c
    72a8:	0000a546 	.word	0x0000a546
    72ac:	0000a598 	.word	0x0000a598
    72b0:	0000a5ad 	.word	0x0000a5ad
    72b4:	20000c08 	.word	0x20000c08
    72b8:	20000410 	.word	0x20000410
    72bc:	0000b0df 	.word	0x0000b0df
    72c0:	20000c28 	.word	0x20000c28
    72c4:	0000a56c 	.word	0x0000a56c
    72c8:	0000a583 	.word	0x0000a583

000072cc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    72cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72d0:	4604      	mov	r4, r0
    72d2:	460d      	mov	r5, r1
    72d4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    72d8:	b173      	cbz	r3, 72f8 <z_tick_sleep+0x2c>
    72da:	4945      	ldr	r1, [pc, #276]	; (73f0 <z_tick_sleep+0x124>)
    72dc:	4a45      	ldr	r2, [pc, #276]	; (73f4 <z_tick_sleep+0x128>)
    72de:	4846      	ldr	r0, [pc, #280]	; (73f8 <z_tick_sleep+0x12c>)
    72e0:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    72e4:	f002 f855 	bl	9392 <printk>
    72e8:	4844      	ldr	r0, [pc, #272]	; (73fc <z_tick_sleep+0x130>)
    72ea:	f002 f852 	bl	9392 <printk>
    72ee:	4841      	ldr	r0, [pc, #260]	; (73f4 <z_tick_sleep+0x128>)
    72f0:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    72f4:	f001 fe5e 	bl	8fb4 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    72f8:	ea54 0305 	orrs.w	r3, r4, r5
    72fc:	d104      	bne.n	7308 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    72fe:	f7ff ff41 	bl	7184 <z_impl_k_yield>
		k_yield();
		return 0;
    7302:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    7304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    7308:	f06f 0301 	mvn.w	r3, #1
    730c:	1b1e      	subs	r6, r3, r4
    730e:	f04f 33ff 	mov.w	r3, #4294967295
    7312:	eb63 0705 	sbc.w	r7, r3, r5
    7316:	2e01      	cmp	r6, #1
    7318:	f177 0300 	sbcs.w	r3, r7, #0
    731c:	da64      	bge.n	73e8 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    731e:	f002 fbf0 	bl	9b02 <sys_clock_tick_get_32>
    7322:	1906      	adds	r6, r0, r4
    7324:	f04f 0320 	mov.w	r3, #32
    7328:	f3ef 8811 	mrs	r8, BASEPRI
    732c:	f383 8812 	msr	BASEPRI_MAX, r3
    7330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7334:	4832      	ldr	r0, [pc, #200]	; (7400 <z_tick_sleep+0x134>)
    7336:	f000 fc0d 	bl	7b54 <z_spin_lock_valid>
    733a:	b968      	cbnz	r0, 7358 <z_tick_sleep+0x8c>
    733c:	4a31      	ldr	r2, [pc, #196]	; (7404 <z_tick_sleep+0x138>)
    733e:	4932      	ldr	r1, [pc, #200]	; (7408 <z_tick_sleep+0x13c>)
    7340:	482d      	ldr	r0, [pc, #180]	; (73f8 <z_tick_sleep+0x12c>)
    7342:	2381      	movs	r3, #129	; 0x81
    7344:	f002 f825 	bl	9392 <printk>
    7348:	492d      	ldr	r1, [pc, #180]	; (7400 <z_tick_sleep+0x134>)
    734a:	4830      	ldr	r0, [pc, #192]	; (740c <z_tick_sleep+0x140>)
    734c:	f002 f821 	bl	9392 <printk>
    7350:	482c      	ldr	r0, [pc, #176]	; (7404 <z_tick_sleep+0x138>)
    7352:	2181      	movs	r1, #129	; 0x81
    7354:	f001 fe2e 	bl	8fb4 <assert_post_action>
	pending_current = _current;
    7358:	4f2d      	ldr	r7, [pc, #180]	; (7410 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    735a:	4829      	ldr	r0, [pc, #164]	; (7400 <z_tick_sleep+0x134>)
    735c:	f000 fc18 	bl	7b90 <z_spin_lock_set_owner>
    7360:	4b2c      	ldr	r3, [pc, #176]	; (7414 <z_tick_sleep+0x148>)
    7362:	68b8      	ldr	r0, [r7, #8]
    7364:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7366:	f7ff fbf7 	bl	6b58 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    736a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    736c:	492a      	ldr	r1, [pc, #168]	; (7418 <z_tick_sleep+0x14c>)
    736e:	4622      	mov	r2, r4
    7370:	462b      	mov	r3, r5
    7372:	3018      	adds	r0, #24
    7374:	f000 fc64 	bl	7c40 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7378:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    737a:	4821      	ldr	r0, [pc, #132]	; (7400 <z_tick_sleep+0x134>)
    737c:	7b53      	ldrb	r3, [r2, #13]
    737e:	f043 0310 	orr.w	r3, r3, #16
    7382:	7353      	strb	r3, [r2, #13]
    7384:	f000 fbf4 	bl	7b70 <z_spin_unlock_valid>
    7388:	b968      	cbnz	r0, 73a6 <z_tick_sleep+0xda>
    738a:	4a1e      	ldr	r2, [pc, #120]	; (7404 <z_tick_sleep+0x138>)
    738c:	4923      	ldr	r1, [pc, #140]	; (741c <z_tick_sleep+0x150>)
    738e:	481a      	ldr	r0, [pc, #104]	; (73f8 <z_tick_sleep+0x12c>)
    7390:	23c3      	movs	r3, #195	; 0xc3
    7392:	f001 fffe 	bl	9392 <printk>
    7396:	491a      	ldr	r1, [pc, #104]	; (7400 <z_tick_sleep+0x134>)
    7398:	4821      	ldr	r0, [pc, #132]	; (7420 <z_tick_sleep+0x154>)
    739a:	f001 fffa 	bl	9392 <printk>
    739e:	4819      	ldr	r0, [pc, #100]	; (7404 <z_tick_sleep+0x138>)
    73a0:	21c3      	movs	r1, #195	; 0xc3
    73a2:	f001 fe07 	bl	8fb4 <assert_post_action>
    73a6:	4640      	mov	r0, r8
    73a8:	f7fb f94c 	bl	2644 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    73ac:	68bb      	ldr	r3, [r7, #8]
    73ae:	7b5b      	ldrb	r3, [r3, #13]
    73b0:	06db      	lsls	r3, r3, #27
    73b2:	d50e      	bpl.n	73d2 <z_tick_sleep+0x106>
    73b4:	491b      	ldr	r1, [pc, #108]	; (7424 <z_tick_sleep+0x158>)
    73b6:	4a0f      	ldr	r2, [pc, #60]	; (73f4 <z_tick_sleep+0x128>)
    73b8:	480f      	ldr	r0, [pc, #60]	; (73f8 <z_tick_sleep+0x12c>)
    73ba:	f240 5319 	movw	r3, #1305	; 0x519
    73be:	f001 ffe8 	bl	9392 <printk>
    73c2:	480e      	ldr	r0, [pc, #56]	; (73fc <z_tick_sleep+0x130>)
    73c4:	f001 ffe5 	bl	9392 <printk>
    73c8:	480a      	ldr	r0, [pc, #40]	; (73f4 <z_tick_sleep+0x128>)
    73ca:	f240 5119 	movw	r1, #1305	; 0x519
    73ce:	f001 fdf1 	bl	8fb4 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    73d2:	f002 fb96 	bl	9b02 <sys_clock_tick_get_32>
    73d6:	1a30      	subs	r0, r6, r0
    73d8:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    73dc:	2801      	cmp	r0, #1
    73de:	f171 0300 	sbcs.w	r3, r1, #0
    73e2:	bfb8      	it	lt
    73e4:	2000      	movlt	r0, #0
    73e6:	e78d      	b.n	7304 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    73e8:	f06f 0601 	mvn.w	r6, #1
    73ec:	1b36      	subs	r6, r6, r4
    73ee:	e799      	b.n	7324 <z_tick_sleep+0x58>
    73f0:	0000aee0 	.word	0x0000aee0
    73f4:	0000b0bd 	.word	0x0000b0bd
    73f8:	0000a283 	.word	0x0000a283
    73fc:	0000af59 	.word	0x0000af59
    7400:	20000c3c 	.word	0x20000c3c
    7404:	0000a546 	.word	0x0000a546
    7408:	0000a598 	.word	0x0000a598
    740c:	0000a5ad 	.word	0x0000a5ad
    7410:	20000c08 	.word	0x20000c08
    7414:	20000c38 	.word	0x20000c38
    7418:	00006aa5 	.word	0x00006aa5
    741c:	0000a56c 	.word	0x0000a56c
    7420:	0000a583 	.word	0x0000a583
    7424:	0000b16f 	.word	0x0000b16f

00007428 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7428:	b538      	push	{r3, r4, r5, lr}
    742a:	4604      	mov	r4, r0
    742c:	460d      	mov	r5, r1
    742e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7432:	b173      	cbz	r3, 7452 <z_impl_k_sleep+0x2a>
    7434:	4913      	ldr	r1, [pc, #76]	; (7484 <z_impl_k_sleep+0x5c>)
    7436:	4a14      	ldr	r2, [pc, #80]	; (7488 <z_impl_k_sleep+0x60>)
    7438:	4814      	ldr	r0, [pc, #80]	; (748c <z_impl_k_sleep+0x64>)
    743a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    743e:	f001 ffa8 	bl	9392 <printk>
    7442:	4813      	ldr	r0, [pc, #76]	; (7490 <z_impl_k_sleep+0x68>)
    7444:	f001 ffa5 	bl	9392 <printk>
    7448:	480f      	ldr	r0, [pc, #60]	; (7488 <z_impl_k_sleep+0x60>)
    744a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    744e:	f001 fdb1 	bl	8fb4 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7452:	1c6b      	adds	r3, r5, #1
    7454:	bf08      	it	eq
    7456:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    745a:	d106      	bne.n	746a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    745c:	4b0d      	ldr	r3, [pc, #52]	; (7494 <z_impl_k_sleep+0x6c>)
    745e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7460:	f7ff fd02 	bl	6e68 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7464:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7468:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    746a:	4620      	mov	r0, r4
    746c:	4629      	mov	r1, r5
    746e:	f7ff ff2d 	bl	72cc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    7472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7476:	fb80 3403 	smull	r3, r4, r0, r3
    747a:	0bd8      	lsrs	r0, r3, #15
    747c:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    7480:	e7f2      	b.n	7468 <z_impl_k_sleep+0x40>
    7482:	bf00      	nop
    7484:	0000aee0 	.word	0x0000aee0
    7488:	0000b0bd 	.word	0x0000b0bd
    748c:	0000a283 	.word	0x0000a283
    7490:	0000af59 	.word	0x0000af59
    7494:	20000c08 	.word	0x20000c08

00007498 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7498:	4b01      	ldr	r3, [pc, #4]	; (74a0 <z_impl_z_current_get+0x8>)
    749a:	6898      	ldr	r0, [r3, #8]
    749c:	4770      	bx	lr
    749e:	bf00      	nop
    74a0:	20000c08 	.word	0x20000c08

000074a4 <z_impl_k_is_preempt_thread>:
    74a4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    74a8:	b93b      	cbnz	r3, 74ba <z_impl_k_is_preempt_thread+0x16>
    74aa:	4b05      	ldr	r3, [pc, #20]	; (74c0 <z_impl_k_is_preempt_thread+0x1c>)
    74ac:	689b      	ldr	r3, [r3, #8]
    74ae:	89d8      	ldrh	r0, [r3, #14]
    74b0:	287f      	cmp	r0, #127	; 0x7f
    74b2:	bf8c      	ite	hi
    74b4:	2000      	movhi	r0, #0
    74b6:	2001      	movls	r0, #1
    74b8:	4770      	bx	lr
    74ba:	2000      	movs	r0, #0
}
    74bc:	4770      	bx	lr
    74be:	bf00      	nop
    74c0:	20000c08 	.word	0x20000c08

000074c4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    74c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74c8:	4604      	mov	r4, r0
    74ca:	f04f 0320 	mov.w	r3, #32
    74ce:	f3ef 8611 	mrs	r6, BASEPRI
    74d2:	f383 8812 	msr	BASEPRI_MAX, r3
    74d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74da:	4848      	ldr	r0, [pc, #288]	; (75fc <z_thread_abort+0x138>)
    74dc:	f000 fb3a 	bl	7b54 <z_spin_lock_valid>
    74e0:	b968      	cbnz	r0, 74fe <z_thread_abort+0x3a>
    74e2:	4a47      	ldr	r2, [pc, #284]	; (7600 <z_thread_abort+0x13c>)
    74e4:	4947      	ldr	r1, [pc, #284]	; (7604 <z_thread_abort+0x140>)
    74e6:	4848      	ldr	r0, [pc, #288]	; (7608 <z_thread_abort+0x144>)
    74e8:	2381      	movs	r3, #129	; 0x81
    74ea:	f001 ff52 	bl	9392 <printk>
    74ee:	4943      	ldr	r1, [pc, #268]	; (75fc <z_thread_abort+0x138>)
    74f0:	4846      	ldr	r0, [pc, #280]	; (760c <z_thread_abort+0x148>)
    74f2:	f001 ff4e 	bl	9392 <printk>
    74f6:	4842      	ldr	r0, [pc, #264]	; (7600 <z_thread_abort+0x13c>)
    74f8:	2181      	movs	r1, #129	; 0x81
    74fa:	f001 fd5b 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    74fe:	483f      	ldr	r0, [pc, #252]	; (75fc <z_thread_abort+0x138>)
    7500:	f000 fb46 	bl	7b90 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7504:	7b63      	ldrb	r3, [r4, #13]
    7506:	071a      	lsls	r2, r3, #28
    7508:	d517      	bpl.n	753a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    750a:	483c      	ldr	r0, [pc, #240]	; (75fc <z_thread_abort+0x138>)
    750c:	f000 fb30 	bl	7b70 <z_spin_unlock_valid>
    7510:	b968      	cbnz	r0, 752e <z_thread_abort+0x6a>
    7512:	4a3b      	ldr	r2, [pc, #236]	; (7600 <z_thread_abort+0x13c>)
    7514:	493e      	ldr	r1, [pc, #248]	; (7610 <z_thread_abort+0x14c>)
    7516:	483c      	ldr	r0, [pc, #240]	; (7608 <z_thread_abort+0x144>)
    7518:	23ac      	movs	r3, #172	; 0xac
    751a:	f001 ff3a 	bl	9392 <printk>
    751e:	4937      	ldr	r1, [pc, #220]	; (75fc <z_thread_abort+0x138>)
    7520:	483c      	ldr	r0, [pc, #240]	; (7614 <z_thread_abort+0x150>)
    7522:	f001 ff36 	bl	9392 <printk>
    7526:	4836      	ldr	r0, [pc, #216]	; (7600 <z_thread_abort+0x13c>)
    7528:	21ac      	movs	r1, #172	; 0xac
    752a:	f001 fd43 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    752e:	f386 8811 	msr	BASEPRI, r6
    7532:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    753a:	f023 0220 	bic.w	r2, r3, #32
    753e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7542:	09d2      	lsrs	r2, r2, #7
    7544:	d142      	bne.n	75cc <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7546:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    7548:	68a3      	ldr	r3, [r4, #8]
    754a:	b113      	cbz	r3, 7552 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    754c:	4620      	mov	r0, r4
    754e:	f7ff f847 	bl	65e0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7552:	f104 0018 	add.w	r0, r4, #24
    7556:	f000 fc47 	bl	7de8 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    755a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    755e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7562:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7564:	42bd      	cmp	r5, r7
    7566:	d001      	beq.n	756c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7568:	2d00      	cmp	r5, #0
    756a:	d139      	bne.n	75e0 <z_thread_abort+0x11c>
		update_cache(1);
    756c:	2001      	movs	r0, #1
    756e:	f7ff f8a5 	bl	66bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7572:	4b29      	ldr	r3, [pc, #164]	; (7618 <z_thread_abort+0x154>)
    7574:	689b      	ldr	r3, [r3, #8]
    7576:	42a3      	cmp	r3, r4
    7578:	d1c7      	bne.n	750a <z_thread_abort+0x46>
    757a:	f3ef 8305 	mrs	r3, IPSR
    757e:	2b00      	cmp	r3, #0
    7580:	d1c3      	bne.n	750a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7582:	481e      	ldr	r0, [pc, #120]	; (75fc <z_thread_abort+0x138>)
    7584:	f000 faf4 	bl	7b70 <z_spin_unlock_valid>
    7588:	b968      	cbnz	r0, 75a6 <z_thread_abort+0xe2>
    758a:	4a1d      	ldr	r2, [pc, #116]	; (7600 <z_thread_abort+0x13c>)
    758c:	4920      	ldr	r1, [pc, #128]	; (7610 <z_thread_abort+0x14c>)
    758e:	481e      	ldr	r0, [pc, #120]	; (7608 <z_thread_abort+0x144>)
    7590:	23c3      	movs	r3, #195	; 0xc3
    7592:	f001 fefe 	bl	9392 <printk>
    7596:	4919      	ldr	r1, [pc, #100]	; (75fc <z_thread_abort+0x138>)
    7598:	481e      	ldr	r0, [pc, #120]	; (7614 <z_thread_abort+0x150>)
    759a:	f001 fefa 	bl	9392 <printk>
    759e:	4818      	ldr	r0, [pc, #96]	; (7600 <z_thread_abort+0x13c>)
    75a0:	21c3      	movs	r1, #195	; 0xc3
    75a2:	f001 fd07 	bl	8fb4 <assert_post_action>
    75a6:	4630      	mov	r0, r6
    75a8:	f7fb f84c 	bl	2644 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    75ac:	4a1b      	ldr	r2, [pc, #108]	; (761c <z_thread_abort+0x158>)
    75ae:	491c      	ldr	r1, [pc, #112]	; (7620 <z_thread_abort+0x15c>)
    75b0:	4815      	ldr	r0, [pc, #84]	; (7608 <z_thread_abort+0x144>)
    75b2:	f240 634b 	movw	r3, #1611	; 0x64b
    75b6:	f001 feec 	bl	9392 <printk>
    75ba:	481a      	ldr	r0, [pc, #104]	; (7624 <z_thread_abort+0x160>)
    75bc:	f001 fee9 	bl	9392 <printk>
    75c0:	4816      	ldr	r0, [pc, #88]	; (761c <z_thread_abort+0x158>)
    75c2:	f240 614b 	movw	r1, #1611	; 0x64b
    75c6:	f001 fcf5 	bl	8fb4 <assert_post_action>
    75ca:	e79e      	b.n	750a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75cc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    75d0:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    75d4:	4814      	ldr	r0, [pc, #80]	; (7628 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75d6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    75d8:	4621      	mov	r1, r4
    75da:	f7fe ffdf 	bl	659c <z_priq_dumb_remove>
}
    75de:	e7b3      	b.n	7548 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    75e0:	4628      	mov	r0, r5
    75e2:	f7fe fffd 	bl	65e0 <unpend_thread_no_timeout>
    75e6:	f105 0018 	add.w	r0, r5, #24
    75ea:	f000 fbfd 	bl	7de8 <z_abort_timeout>
    75ee:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    75f2:	4628      	mov	r0, r5
    75f4:	f7ff f968 	bl	68c8 <ready_thread>
    75f8:	e7b3      	b.n	7562 <z_thread_abort+0x9e>
    75fa:	bf00      	nop
    75fc:	20000c3c 	.word	0x20000c3c
    7600:	0000a546 	.word	0x0000a546
    7604:	0000a598 	.word	0x0000a598
    7608:	0000a283 	.word	0x0000a283
    760c:	0000a5ad 	.word	0x0000a5ad
    7610:	0000a56c 	.word	0x0000a56c
    7614:	0000a583 	.word	0x0000a583
    7618:	20000c08 	.word	0x20000c08
    761c:	0000b0bd 	.word	0x0000b0bd
    7620:	0000ac19 	.word	0x0000ac19
    7624:	0000b1af 	.word	0x0000b1af
    7628:	20000c28 	.word	0x20000c28

0000762c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    762e:	4604      	mov	r4, r0
    7630:	460e      	mov	r6, r1
    7632:	4615      	mov	r5, r2
	__asm__ volatile(
    7634:	f04f 0320 	mov.w	r3, #32
    7638:	f3ef 8711 	mrs	r7, BASEPRI
    763c:	f383 8812 	msr	BASEPRI_MAX, r3
    7640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7644:	481e      	ldr	r0, [pc, #120]	; (76c0 <z_sched_wake+0x94>)
    7646:	f000 fa85 	bl	7b54 <z_spin_lock_valid>
    764a:	b968      	cbnz	r0, 7668 <z_sched_wake+0x3c>
    764c:	4a1d      	ldr	r2, [pc, #116]	; (76c4 <z_sched_wake+0x98>)
    764e:	491e      	ldr	r1, [pc, #120]	; (76c8 <z_sched_wake+0x9c>)
    7650:	481e      	ldr	r0, [pc, #120]	; (76cc <z_sched_wake+0xa0>)
    7652:	2381      	movs	r3, #129	; 0x81
    7654:	f001 fe9d 	bl	9392 <printk>
    7658:	4919      	ldr	r1, [pc, #100]	; (76c0 <z_sched_wake+0x94>)
    765a:	481d      	ldr	r0, [pc, #116]	; (76d0 <z_sched_wake+0xa4>)
    765c:	f001 fe99 	bl	9392 <printk>
    7660:	4818      	ldr	r0, [pc, #96]	; (76c4 <z_sched_wake+0x98>)
    7662:	2181      	movs	r1, #129	; 0x81
    7664:	f001 fca6 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7668:	4815      	ldr	r0, [pc, #84]	; (76c0 <z_sched_wake+0x94>)
    766a:	f000 fa91 	bl	7b90 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    766e:	4620      	mov	r0, r4
    7670:	f002 fa22 	bl	9ab8 <z_priq_dumb_best>

		if (thread != NULL) {
    7674:	4604      	mov	r4, r0
    7676:	b158      	cbz	r0, 7690 <z_sched_wake+0x64>
    7678:	67c6      	str	r6, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
    767a:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    767c:	f7fe ffb0 	bl	65e0 <unpend_thread_no_timeout>
    7680:	f104 0018 	add.w	r0, r4, #24
    7684:	f000 fbb0 	bl	7de8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    7688:	4620      	mov	r0, r4
    768a:	f7ff f91d 	bl	68c8 <ready_thread>
			ret = true;
    768e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7690:	480b      	ldr	r0, [pc, #44]	; (76c0 <z_sched_wake+0x94>)
    7692:	f000 fa6d 	bl	7b70 <z_spin_unlock_valid>
    7696:	b968      	cbnz	r0, 76b4 <z_sched_wake+0x88>
    7698:	4a0a      	ldr	r2, [pc, #40]	; (76c4 <z_sched_wake+0x98>)
    769a:	490e      	ldr	r1, [pc, #56]	; (76d4 <z_sched_wake+0xa8>)
    769c:	480b      	ldr	r0, [pc, #44]	; (76cc <z_sched_wake+0xa0>)
    769e:	23ac      	movs	r3, #172	; 0xac
    76a0:	f001 fe77 	bl	9392 <printk>
    76a4:	4906      	ldr	r1, [pc, #24]	; (76c0 <z_sched_wake+0x94>)
    76a6:	480c      	ldr	r0, [pc, #48]	; (76d8 <z_sched_wake+0xac>)
    76a8:	f001 fe73 	bl	9392 <printk>
    76ac:	4805      	ldr	r0, [pc, #20]	; (76c4 <z_sched_wake+0x98>)
    76ae:	21ac      	movs	r1, #172	; 0xac
    76b0:	f001 fc80 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    76b4:	f387 8811 	msr	BASEPRI, r7
    76b8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    76bc:	4620      	mov	r0, r4
    76be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76c0:	20000c3c 	.word	0x20000c3c
    76c4:	0000a546 	.word	0x0000a546
    76c8:	0000a598 	.word	0x0000a598
    76cc:	0000a283 	.word	0x0000a283
    76d0:	0000a5ad 	.word	0x0000a5ad
    76d4:	0000a56c 	.word	0x0000a56c
    76d8:	0000a583 	.word	0x0000a583

000076dc <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    76dc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    76de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    76e2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    76e4:	e9cd 6700 	strd	r6, r7, [sp]
    76e8:	f7ff faf2 	bl	6cd0 <z_pend_curr>

	if (data != NULL) {
    76ec:	b11c      	cbz	r4, 76f6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    76ee:	4b03      	ldr	r3, [pc, #12]	; (76fc <z_sched_wait+0x20>)
    76f0:	689b      	ldr	r3, [r3, #8]
    76f2:	695b      	ldr	r3, [r3, #20]
    76f4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    76f6:	b002      	add	sp, #8
    76f8:	bdd0      	pop	{r4, r6, r7, pc}
    76fa:	bf00      	nop
    76fc:	20000c08 	.word	0x20000c08

00007700 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7700:	b538      	push	{r3, r4, r5, lr}
    7702:	4604      	mov	r4, r0
	__asm__ volatile(
    7704:	f04f 0320 	mov.w	r3, #32
    7708:	f3ef 8511 	mrs	r5, BASEPRI
    770c:	f383 8812 	msr	BASEPRI_MAX, r3
    7710:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7714:	4817      	ldr	r0, [pc, #92]	; (7774 <z_impl_k_sem_give+0x74>)
    7716:	f000 fa1d 	bl	7b54 <z_spin_lock_valid>
    771a:	b968      	cbnz	r0, 7738 <z_impl_k_sem_give+0x38>
    771c:	4a16      	ldr	r2, [pc, #88]	; (7778 <z_impl_k_sem_give+0x78>)
    771e:	4917      	ldr	r1, [pc, #92]	; (777c <z_impl_k_sem_give+0x7c>)
    7720:	4817      	ldr	r0, [pc, #92]	; (7780 <z_impl_k_sem_give+0x80>)
    7722:	2381      	movs	r3, #129	; 0x81
    7724:	f001 fe35 	bl	9392 <printk>
    7728:	4912      	ldr	r1, [pc, #72]	; (7774 <z_impl_k_sem_give+0x74>)
    772a:	4816      	ldr	r0, [pc, #88]	; (7784 <z_impl_k_sem_give+0x84>)
    772c:	f001 fe31 	bl	9392 <printk>
    7730:	4811      	ldr	r0, [pc, #68]	; (7778 <z_impl_k_sem_give+0x78>)
    7732:	2181      	movs	r1, #129	; 0x81
    7734:	f001 fc3e 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7738:	480e      	ldr	r0, [pc, #56]	; (7774 <z_impl_k_sem_give+0x74>)
    773a:	f000 fa29 	bl	7b90 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    773e:	4620      	mov	r0, r4
    7740:	f7ff fcc4 	bl	70cc <z_unpend_first_thread>

	if (thread != NULL) {
    7744:	b148      	cbz	r0, 775a <z_impl_k_sem_give+0x5a>
    7746:	2200      	movs	r2, #0
    7748:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    774a:	f7ff f90f 	bl	696c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    774e:	4629      	mov	r1, r5
    7750:	4808      	ldr	r0, [pc, #32]	; (7774 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7756:	f7fe be69 	b.w	642c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    775a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    775e:	429a      	cmp	r2, r3
    7760:	bf18      	it	ne
    7762:	3301      	addne	r3, #1
    7764:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7766:	2102      	movs	r1, #2
    7768:	f104 0010 	add.w	r0, r4, #16
    776c:	f002 f95c 	bl	9a28 <z_handle_obj_poll_events>
}
    7770:	e7ed      	b.n	774e <z_impl_k_sem_give+0x4e>
    7772:	bf00      	nop
    7774:	20000c48 	.word	0x20000c48
    7778:	0000a546 	.word	0x0000a546
    777c:	0000a598 	.word	0x0000a598
    7780:	0000a283 	.word	0x0000a283
    7784:	0000a5ad 	.word	0x0000a5ad

00007788 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    778a:	4604      	mov	r4, r0
    778c:	4616      	mov	r6, r2
    778e:	461f      	mov	r7, r3
    7790:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7794:	b17b      	cbz	r3, 77b6 <z_impl_k_sem_take+0x2e>
    7796:	ea56 0307 	orrs.w	r3, r6, r7
    779a:	d00c      	beq.n	77b6 <z_impl_k_sem_take+0x2e>
    779c:	4935      	ldr	r1, [pc, #212]	; (7874 <z_impl_k_sem_take+0xec>)
    779e:	4a36      	ldr	r2, [pc, #216]	; (7878 <z_impl_k_sem_take+0xf0>)
    77a0:	4836      	ldr	r0, [pc, #216]	; (787c <z_impl_k_sem_take+0xf4>)
    77a2:	2379      	movs	r3, #121	; 0x79
    77a4:	f001 fdf5 	bl	9392 <printk>
    77a8:	4835      	ldr	r0, [pc, #212]	; (7880 <z_impl_k_sem_take+0xf8>)
    77aa:	f001 fdf2 	bl	9392 <printk>
    77ae:	4832      	ldr	r0, [pc, #200]	; (7878 <z_impl_k_sem_take+0xf0>)
    77b0:	2179      	movs	r1, #121	; 0x79
    77b2:	f001 fbff 	bl	8fb4 <assert_post_action>
    77b6:	f04f 0320 	mov.w	r3, #32
    77ba:	f3ef 8511 	mrs	r5, BASEPRI
    77be:	f383 8812 	msr	BASEPRI_MAX, r3
    77c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77c6:	482f      	ldr	r0, [pc, #188]	; (7884 <z_impl_k_sem_take+0xfc>)
    77c8:	f000 f9c4 	bl	7b54 <z_spin_lock_valid>
    77cc:	b968      	cbnz	r0, 77ea <z_impl_k_sem_take+0x62>
    77ce:	4a2e      	ldr	r2, [pc, #184]	; (7888 <z_impl_k_sem_take+0x100>)
    77d0:	492e      	ldr	r1, [pc, #184]	; (788c <z_impl_k_sem_take+0x104>)
    77d2:	482a      	ldr	r0, [pc, #168]	; (787c <z_impl_k_sem_take+0xf4>)
    77d4:	2381      	movs	r3, #129	; 0x81
    77d6:	f001 fddc 	bl	9392 <printk>
    77da:	492a      	ldr	r1, [pc, #168]	; (7884 <z_impl_k_sem_take+0xfc>)
    77dc:	482c      	ldr	r0, [pc, #176]	; (7890 <z_impl_k_sem_take+0x108>)
    77de:	f001 fdd8 	bl	9392 <printk>
    77e2:	4829      	ldr	r0, [pc, #164]	; (7888 <z_impl_k_sem_take+0x100>)
    77e4:	2181      	movs	r1, #129	; 0x81
    77e6:	f001 fbe5 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    77ea:	4826      	ldr	r0, [pc, #152]	; (7884 <z_impl_k_sem_take+0xfc>)
    77ec:	f000 f9d0 	bl	7b90 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    77f0:	68a3      	ldr	r3, [r4, #8]
    77f2:	b1d3      	cbz	r3, 782a <z_impl_k_sem_take+0xa2>
		sem->count--;
    77f4:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77f6:	4823      	ldr	r0, [pc, #140]	; (7884 <z_impl_k_sem_take+0xfc>)
    77f8:	60a3      	str	r3, [r4, #8]
    77fa:	f000 f9b9 	bl	7b70 <z_spin_unlock_valid>
    77fe:	b968      	cbnz	r0, 781c <z_impl_k_sem_take+0x94>
    7800:	4a21      	ldr	r2, [pc, #132]	; (7888 <z_impl_k_sem_take+0x100>)
    7802:	4924      	ldr	r1, [pc, #144]	; (7894 <z_impl_k_sem_take+0x10c>)
    7804:	481d      	ldr	r0, [pc, #116]	; (787c <z_impl_k_sem_take+0xf4>)
    7806:	23ac      	movs	r3, #172	; 0xac
    7808:	f001 fdc3 	bl	9392 <printk>
    780c:	491d      	ldr	r1, [pc, #116]	; (7884 <z_impl_k_sem_take+0xfc>)
    780e:	4822      	ldr	r0, [pc, #136]	; (7898 <z_impl_k_sem_take+0x110>)
    7810:	f001 fdbf 	bl	9392 <printk>
    7814:	481c      	ldr	r0, [pc, #112]	; (7888 <z_impl_k_sem_take+0x100>)
    7816:	21ac      	movs	r1, #172	; 0xac
    7818:	f001 fbcc 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    781c:	f385 8811 	msr	BASEPRI, r5
    7820:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7824:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7826:	b003      	add	sp, #12
    7828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    782a:	ea56 0307 	orrs.w	r3, r6, r7
    782e:	d118      	bne.n	7862 <z_impl_k_sem_take+0xda>
    7830:	4814      	ldr	r0, [pc, #80]	; (7884 <z_impl_k_sem_take+0xfc>)
    7832:	f000 f99d 	bl	7b70 <z_spin_unlock_valid>
    7836:	b968      	cbnz	r0, 7854 <z_impl_k_sem_take+0xcc>
    7838:	4a13      	ldr	r2, [pc, #76]	; (7888 <z_impl_k_sem_take+0x100>)
    783a:	4916      	ldr	r1, [pc, #88]	; (7894 <z_impl_k_sem_take+0x10c>)
    783c:	480f      	ldr	r0, [pc, #60]	; (787c <z_impl_k_sem_take+0xf4>)
    783e:	23ac      	movs	r3, #172	; 0xac
    7840:	f001 fda7 	bl	9392 <printk>
    7844:	490f      	ldr	r1, [pc, #60]	; (7884 <z_impl_k_sem_take+0xfc>)
    7846:	4814      	ldr	r0, [pc, #80]	; (7898 <z_impl_k_sem_take+0x110>)
    7848:	f001 fda3 	bl	9392 <printk>
    784c:	480e      	ldr	r0, [pc, #56]	; (7888 <z_impl_k_sem_take+0x100>)
    784e:	21ac      	movs	r1, #172	; 0xac
    7850:	f001 fbb0 	bl	8fb4 <assert_post_action>
    7854:	f385 8811 	msr	BASEPRI, r5
    7858:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    785c:	f06f 000f 	mvn.w	r0, #15
    7860:	e7e1      	b.n	7826 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7862:	e9cd 6700 	strd	r6, r7, [sp]
    7866:	4622      	mov	r2, r4
    7868:	4629      	mov	r1, r5
    786a:	4806      	ldr	r0, [pc, #24]	; (7884 <z_impl_k_sem_take+0xfc>)
    786c:	f7ff fa30 	bl	6cd0 <z_pend_curr>
	return ret;
    7870:	e7d9      	b.n	7826 <z_impl_k_sem_take+0x9e>
    7872:	bf00      	nop
    7874:	0000b1f1 	.word	0x0000b1f1
    7878:	0000b1d1 	.word	0x0000b1d1
    787c:	0000a283 	.word	0x0000a283
    7880:	0000af59 	.word	0x0000af59
    7884:	20000c48 	.word	0x20000c48
    7888:	0000a546 	.word	0x0000a546
    788c:	0000a598 	.word	0x0000a598
    7890:	0000a5ad 	.word	0x0000a5ad
    7894:	0000a56c 	.word	0x0000a56c
    7898:	0000a583 	.word	0x0000a583

0000789c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    789c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    789e:	4b09      	ldr	r3, [pc, #36]	; (78c4 <k_sys_work_q_init+0x28>)
    78a0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    78a2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    78a4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    78a6:	9300      	str	r3, [sp, #0]
    78a8:	4907      	ldr	r1, [pc, #28]	; (78c8 <k_sys_work_q_init+0x2c>)
    78aa:	4808      	ldr	r0, [pc, #32]	; (78cc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    78ac:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    78b0:	f04f 33ff 	mov.w	r3, #4294967295
    78b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    78b8:	f000 ff88 	bl	87cc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    78bc:	4620      	mov	r0, r4
    78be:	b004      	add	sp, #16
    78c0:	bd10      	pop	{r4, pc}
    78c2:	bf00      	nop
    78c4:	0000b23e 	.word	0x0000b23e
    78c8:	20002840 	.word	0x20002840
    78cc:	20000510 	.word	0x20000510

000078d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    78d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    78d4:	b085      	sub	sp, #20
    78d6:	4604      	mov	r4, r0
    78d8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    78dc:	f1b8 0f0f 	cmp.w	r8, #15
{
    78e0:	460f      	mov	r7, r1
    78e2:	4615      	mov	r5, r2
    78e4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    78e6:	d132      	bne.n	794e <z_setup_new_thread+0x7e>
    78e8:	4b25      	ldr	r3, [pc, #148]	; (7980 <z_setup_new_thread+0xb0>)
    78ea:	4599      	cmp	r9, r3
    78ec:	d133      	bne.n	7956 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    78ee:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    78f2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    78f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    78f8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    78fa:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    78fc:	2304      	movs	r3, #4
    78fe:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7900:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7904:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    7908:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    790c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    790e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7912:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7914:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    791a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    791c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    791e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7920:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    7922:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7924:	464b      	mov	r3, r9
	node->prev = NULL;
    7926:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    792a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    792c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    792e:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7930:	4642      	mov	r2, r8
    7932:	4639      	mov	r1, r7
    7934:	4620      	mov	r0, r4
    7936:	f7fa fe9f 	bl	2678 <arch_new_thread>
	if (!_current) {
    793a:	4b12      	ldr	r3, [pc, #72]	; (7984 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    793c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    793e:	689b      	ldr	r3, [r3, #8]
    7940:	b103      	cbz	r3, 7944 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    7942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    7944:	6763      	str	r3, [r4, #116]	; 0x74
}
    7946:	4640      	mov	r0, r8
    7948:	b005      	add	sp, #20
    794a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    794e:	f108 0310 	add.w	r3, r8, #16
    7952:	2b1e      	cmp	r3, #30
    7954:	d9cb      	bls.n	78ee <z_setup_new_thread+0x1e>
    7956:	4a0c      	ldr	r2, [pc, #48]	; (7988 <z_setup_new_thread+0xb8>)
    7958:	490c      	ldr	r1, [pc, #48]	; (798c <z_setup_new_thread+0xbc>)
    795a:	480d      	ldr	r0, [pc, #52]	; (7990 <z_setup_new_thread+0xc0>)
    795c:	f240 13ff 	movw	r3, #511	; 0x1ff
    7960:	f001 fd17 	bl	9392 <printk>
    7964:	4641      	mov	r1, r8
    7966:	480b      	ldr	r0, [pc, #44]	; (7994 <z_setup_new_thread+0xc4>)
    7968:	f06f 030f 	mvn.w	r3, #15
    796c:	220e      	movs	r2, #14
    796e:	f001 fd10 	bl	9392 <printk>
    7972:	4805      	ldr	r0, [pc, #20]	; (7988 <z_setup_new_thread+0xb8>)
    7974:	f240 11ff 	movw	r1, #511	; 0x1ff
    7978:	f001 fb1c 	bl	8fb4 <assert_post_action>
    797c:	e7b7      	b.n	78ee <z_setup_new_thread+0x1e>
    797e:	bf00      	nop
    7980:	00005771 	.word	0x00005771
    7984:	20000c08 	.word	0x20000c08
    7988:	0000b247 	.word	0x0000b247
    798c:	0000b26a 	.word	0x0000b26a
    7990:	0000a283 	.word	0x0000a283
    7994:	0000b2ea 	.word	0x0000b2ea

00007998 <z_impl_k_thread_create>:
{
    7998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    799c:	b087      	sub	sp, #28
    799e:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    79a2:	4604      	mov	r4, r0
    79a4:	460d      	mov	r5, r1
    79a6:	4690      	mov	r8, r2
    79a8:	4699      	mov	r9, r3
    79aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    79ae:	b173      	cbz	r3, 79ce <z_impl_k_thread_create+0x36>
    79b0:	491b      	ldr	r1, [pc, #108]	; (7a20 <z_impl_k_thread_create+0x88>)
    79b2:	4a1c      	ldr	r2, [pc, #112]	; (7a24 <z_impl_k_thread_create+0x8c>)
    79b4:	481c      	ldr	r0, [pc, #112]	; (7a28 <z_impl_k_thread_create+0x90>)
    79b6:	f44f 731a 	mov.w	r3, #616	; 0x268
    79ba:	f001 fcea 	bl	9392 <printk>
    79be:	481b      	ldr	r0, [pc, #108]	; (7a2c <z_impl_k_thread_create+0x94>)
    79c0:	f001 fce7 	bl	9392 <printk>
    79c4:	4817      	ldr	r0, [pc, #92]	; (7a24 <z_impl_k_thread_create+0x8c>)
    79c6:	f44f 711a 	mov.w	r1, #616	; 0x268
    79ca:	f001 faf3 	bl	8fb4 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    79ce:	2300      	movs	r3, #0
    79d0:	9305      	str	r3, [sp, #20]
    79d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    79d4:	9304      	str	r3, [sp, #16]
    79d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    79d8:	9303      	str	r3, [sp, #12]
    79da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    79dc:	9302      	str	r3, [sp, #8]
    79de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    79e0:	9301      	str	r3, [sp, #4]
    79e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    79e4:	9300      	str	r3, [sp, #0]
    79e6:	4642      	mov	r2, r8
    79e8:	464b      	mov	r3, r9
    79ea:	4629      	mov	r1, r5
    79ec:	4620      	mov	r0, r4
    79ee:	f7ff ff6f 	bl	78d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    79f2:	1c7b      	adds	r3, r7, #1
    79f4:	bf08      	it	eq
    79f6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    79fa:	d005      	beq.n	7a08 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    79fc:	ea56 0307 	orrs.w	r3, r6, r7
    7a00:	d106      	bne.n	7a10 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    7a02:	4620      	mov	r0, r4
    7a04:	f7fe fffa 	bl	69fc <z_sched_start>
}
    7a08:	4620      	mov	r0, r4
    7a0a:	b007      	add	sp, #28
    7a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7a10:	4907      	ldr	r1, [pc, #28]	; (7a30 <z_impl_k_thread_create+0x98>)
    7a12:	4632      	mov	r2, r6
    7a14:	463b      	mov	r3, r7
    7a16:	f104 0018 	add.w	r0, r4, #24
    7a1a:	f000 f911 	bl	7c40 <z_add_timeout>
    7a1e:	e7f3      	b.n	7a08 <z_impl_k_thread_create+0x70>
    7a20:	0000aee0 	.word	0x0000aee0
    7a24:	0000b247 	.word	0x0000b247
    7a28:	0000a283 	.word	0x0000a283
    7a2c:	0000b31b 	.word	0x0000b31b
    7a30:	00006aa5 	.word	0x00006aa5

00007a34 <z_init_static_threads>:
{
    7a34:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    7a38:	4f3f      	ldr	r7, [pc, #252]	; (7b38 <z_init_static_threads+0x104>)
    7a3a:	4d40      	ldr	r5, [pc, #256]	; (7b3c <z_init_static_threads+0x108>)
    7a3c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 7b4c <z_init_static_threads+0x118>
{
    7a40:	b086      	sub	sp, #24
    7a42:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    7a44:	42bd      	cmp	r5, r7
    7a46:	d90e      	bls.n	7a66 <z_init_static_threads+0x32>
    7a48:	493d      	ldr	r1, [pc, #244]	; (7b40 <z_init_static_threads+0x10c>)
    7a4a:	483e      	ldr	r0, [pc, #248]	; (7b44 <z_init_static_threads+0x110>)
    7a4c:	f240 23cf 	movw	r3, #719	; 0x2cf
    7a50:	4642      	mov	r2, r8
    7a52:	f001 fc9e 	bl	9392 <printk>
    7a56:	483c      	ldr	r0, [pc, #240]	; (7b48 <z_init_static_threads+0x114>)
    7a58:	f001 fc9b 	bl	9392 <printk>
    7a5c:	f240 21cf 	movw	r1, #719	; 0x2cf
    7a60:	4640      	mov	r0, r8
    7a62:	f001 faa7 	bl	8fb4 <assert_post_action>
    7a66:	42b5      	cmp	r5, r6
    7a68:	f105 0430 	add.w	r4, r5, #48	; 0x30
    7a6c:	d31f      	bcc.n	7aae <z_init_static_threads+0x7a>
	k_sched_lock();
    7a6e:	f7fe fd21 	bl	64b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a72:	4c32      	ldr	r4, [pc, #200]	; (7b3c <z_init_static_threads+0x108>)
    7a74:	4d35      	ldr	r5, [pc, #212]	; (7b4c <z_init_static_threads+0x118>)
    7a76:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7b40 <z_init_static_threads+0x10c>
    7a7a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7b44 <z_init_static_threads+0x110>
    7a7e:	42b4      	cmp	r4, r6
    7a80:	d90e      	bls.n	7aa0 <z_init_static_threads+0x6c>
    7a82:	4641      	mov	r1, r8
    7a84:	f240 23ee 	movw	r3, #750	; 0x2ee
    7a88:	462a      	mov	r2, r5
    7a8a:	4648      	mov	r0, r9
    7a8c:	f001 fc81 	bl	9392 <printk>
    7a90:	482d      	ldr	r0, [pc, #180]	; (7b48 <z_init_static_threads+0x114>)
    7a92:	f001 fc7e 	bl	9392 <printk>
    7a96:	f240 21ee 	movw	r1, #750	; 0x2ee
    7a9a:	4628      	mov	r0, r5
    7a9c:	f001 fa8a 	bl	8fb4 <assert_post_action>
    7aa0:	42b4      	cmp	r4, r6
    7aa2:	d321      	bcc.n	7ae8 <z_init_static_threads+0xb4>
}
    7aa4:	b006      	add	sp, #24
    7aa6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    7aaa:	f7ff ba47 	b.w	6f3c <k_sched_unlock>
		z_setup_new_thread(
    7aae:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7ab2:	9305      	str	r3, [sp, #20]
    7ab4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7ab8:	9304      	str	r3, [sp, #16]
    7aba:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7abe:	9303      	str	r3, [sp, #12]
    7ac0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7ac4:	9302      	str	r3, [sp, #8]
    7ac6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7aca:	9301      	str	r3, [sp, #4]
    7acc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7ad0:	9300      	str	r3, [sp, #0]
    7ad2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7ad6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7ada:	f7ff fef9 	bl	78d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7ade:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7ae2:	655d      	str	r5, [r3, #84]	; 0x54
    7ae4:	4625      	mov	r5, r4
    7ae6:	e7ad      	b.n	7a44 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7ae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7aea:	1c4b      	adds	r3, r1, #1
    7aec:	d014      	beq.n	7b18 <z_init_static_threads+0xe4>
    7aee:	f240 32e7 	movw	r2, #999	; 0x3e7
    7af2:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    7af4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7af8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7afc:	4693      	mov	fp, r2
    7afe:	469c      	mov	ip, r3
    7b00:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7b04:	459c      	cmp	ip, r3
    7b06:	bf08      	it	eq
    7b08:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    7b0a:	6827      	ldr	r7, [r4, #0]
    7b0c:	4658      	mov	r0, fp
    7b0e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7b10:	d104      	bne.n	7b1c <z_init_static_threads+0xe8>
	z_sched_start(thread);
    7b12:	4638      	mov	r0, r7
    7b14:	f7fe ff72 	bl	69fc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7b18:	3430      	adds	r4, #48	; 0x30
    7b1a:	e7b0      	b.n	7a7e <z_init_static_threads+0x4a>
    7b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7b20:	2300      	movs	r3, #0
    7b22:	f7f8 fee3 	bl	8ec <__aeabi_uldivmod>
    7b26:	4602      	mov	r2, r0
    7b28:	460b      	mov	r3, r1
    7b2a:	f107 0018 	add.w	r0, r7, #24
    7b2e:	4908      	ldr	r1, [pc, #32]	; (7b50 <z_init_static_threads+0x11c>)
    7b30:	f000 f886 	bl	7c40 <z_add_timeout>
    7b34:	e7f0      	b.n	7b18 <z_init_static_threads+0xe4>
    7b36:	bf00      	nop
    7b38:	20000208 	.word	0x20000208
    7b3c:	20000208 	.word	0x20000208
    7b40:	0000b340 	.word	0x0000b340
    7b44:	0000a283 	.word	0x0000a283
    7b48:	0000ae9f 	.word	0x0000ae9f
    7b4c:	0000b247 	.word	0x0000b247
    7b50:	00006aa5 	.word	0x00006aa5

00007b54 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7b54:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7b56:	b138      	cbz	r0, 7b68 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7b58:	4b04      	ldr	r3, [pc, #16]	; (7b6c <z_spin_lock_valid+0x18>)
    7b5a:	7d1b      	ldrb	r3, [r3, #20]
    7b5c:	f000 0003 	and.w	r0, r0, #3
    7b60:	1ac0      	subs	r0, r0, r3
    7b62:	bf18      	it	ne
    7b64:	2001      	movne	r0, #1
    7b66:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7b68:	2001      	movs	r0, #1
}
    7b6a:	4770      	bx	lr
    7b6c:	20000c08 	.word	0x20000c08

00007b70 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7b70:	4906      	ldr	r1, [pc, #24]	; (7b8c <z_spin_unlock_valid+0x1c>)
{
    7b72:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7b74:	688a      	ldr	r2, [r1, #8]
    7b76:	7d08      	ldrb	r0, [r1, #20]
    7b78:	6819      	ldr	r1, [r3, #0]
    7b7a:	4302      	orrs	r2, r0
    7b7c:	4291      	cmp	r1, r2
    7b7e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7b82:	bf04      	itt	eq
    7b84:	6018      	streq	r0, [r3, #0]
	return true;
    7b86:	2001      	moveq	r0, #1
}
    7b88:	4770      	bx	lr
    7b8a:	bf00      	nop
    7b8c:	20000c08 	.word	0x20000c08

00007b90 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7b90:	4a02      	ldr	r2, [pc, #8]	; (7b9c <z_spin_lock_set_owner+0xc>)
    7b92:	7d11      	ldrb	r1, [r2, #20]
    7b94:	6893      	ldr	r3, [r2, #8]
    7b96:	430b      	orrs	r3, r1
    7b98:	6003      	str	r3, [r0, #0]
}
    7b9a:	4770      	bx	lr
    7b9c:	20000c08 	.word	0x20000c08

00007ba0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7ba0:	4b03      	ldr	r3, [pc, #12]	; (7bb0 <elapsed+0x10>)
    7ba2:	681b      	ldr	r3, [r3, #0]
    7ba4:	b90b      	cbnz	r3, 7baa <elapsed+0xa>
    7ba6:	f7fc bc65 	b.w	4474 <sys_clock_elapsed>
}
    7baa:	2000      	movs	r0, #0
    7bac:	4770      	bx	lr
    7bae:	bf00      	nop
    7bb0:	20000c4c 	.word	0x20000c4c

00007bb4 <next_timeout>:

static int32_t next_timeout(void)
{
    7bb4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7bb6:	4b13      	ldr	r3, [pc, #76]	; (7c04 <next_timeout+0x50>)
    7bb8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bba:	429c      	cmp	r4, r3
    7bbc:	bf08      	it	eq
    7bbe:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7bc0:	f7ff ffee 	bl	7ba0 <elapsed>
    7bc4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    7bc6:	b1bc      	cbz	r4, 7bf8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7bc8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    7bcc:	1b40      	subs	r0, r0, r5
    7bce:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7bd2:	2801      	cmp	r0, #1
    7bd4:	f171 0300 	sbcs.w	r3, r1, #0
    7bd8:	db11      	blt.n	7bfe <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7bda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7bde:	2300      	movs	r3, #0
    7be0:	4282      	cmp	r2, r0
    7be2:	eb73 0401 	sbcs.w	r4, r3, r1
    7be6:	da00      	bge.n	7bea <next_timeout+0x36>
    7be8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7bea:	4b07      	ldr	r3, [pc, #28]	; (7c08 <next_timeout+0x54>)
    7bec:	691b      	ldr	r3, [r3, #16]
    7bee:	b113      	cbz	r3, 7bf6 <next_timeout+0x42>
    7bf0:	4298      	cmp	r0, r3
    7bf2:	bfa8      	it	ge
    7bf4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7bf6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7bf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7bfc:	e7f5      	b.n	7bea <next_timeout+0x36>
    7bfe:	2000      	movs	r0, #0
    7c00:	e7f3      	b.n	7bea <next_timeout+0x36>
    7c02:	bf00      	nop
    7c04:	20000184 	.word	0x20000184
    7c08:	20000c08 	.word	0x20000c08

00007c0c <remove_timeout>:
{
    7c0c:	b530      	push	{r4, r5, lr}
    7c0e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7c10:	b168      	cbz	r0, 7c2e <remove_timeout+0x22>
    7c12:	4a0a      	ldr	r2, [pc, #40]	; (7c3c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    7c14:	6852      	ldr	r2, [r2, #4]
    7c16:	4290      	cmp	r0, r2
    7c18:	d009      	beq.n	7c2e <remove_timeout+0x22>
	if (next(t) != NULL) {
    7c1a:	b143      	cbz	r3, 7c2e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7c1c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7c20:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7c24:	1912      	adds	r2, r2, r4
    7c26:	eb45 0101 	adc.w	r1, r5, r1
    7c2a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7c2e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7c30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7c32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7c34:	2300      	movs	r3, #0
	node->prev = NULL;
    7c36:	e9c0 3300 	strd	r3, r3, [r0]
}
    7c3a:	bd30      	pop	{r4, r5, pc}
    7c3c:	20000184 	.word	0x20000184

00007c40 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c44:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7c46:	1c6b      	adds	r3, r5, #1
    7c48:	bf08      	it	eq
    7c4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    7c4e:	4682      	mov	sl, r0
    7c50:	468b      	mov	fp, r1
    7c52:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7c54:	f000 80aa 	beq.w	7dac <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7c58:	6803      	ldr	r3, [r0, #0]
    7c5a:	b163      	cbz	r3, 7c76 <z_add_timeout+0x36>
    7c5c:	4955      	ldr	r1, [pc, #340]	; (7db4 <z_add_timeout+0x174>)
    7c5e:	4a56      	ldr	r2, [pc, #344]	; (7db8 <z_add_timeout+0x178>)
    7c60:	4856      	ldr	r0, [pc, #344]	; (7dbc <z_add_timeout+0x17c>)
    7c62:	235d      	movs	r3, #93	; 0x5d
    7c64:	f001 fb95 	bl	9392 <printk>
    7c68:	4855      	ldr	r0, [pc, #340]	; (7dc0 <z_add_timeout+0x180>)
    7c6a:	f001 fb92 	bl	9392 <printk>
    7c6e:	4852      	ldr	r0, [pc, #328]	; (7db8 <z_add_timeout+0x178>)
    7c70:	215d      	movs	r1, #93	; 0x5d
    7c72:	f001 f99f 	bl	8fb4 <assert_post_action>
	to->fn = fn;
    7c76:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    7c7a:	f04f 0320 	mov.w	r3, #32
    7c7e:	f3ef 8b11 	mrs	fp, BASEPRI
    7c82:	f383 8812 	msr	BASEPRI_MAX, r3
    7c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c8a:	484e      	ldr	r0, [pc, #312]	; (7dc4 <z_add_timeout+0x184>)
    7c8c:	f7ff ff62 	bl	7b54 <z_spin_lock_valid>
    7c90:	b968      	cbnz	r0, 7cae <z_add_timeout+0x6e>
    7c92:	4a4d      	ldr	r2, [pc, #308]	; (7dc8 <z_add_timeout+0x188>)
    7c94:	494d      	ldr	r1, [pc, #308]	; (7dcc <z_add_timeout+0x18c>)
    7c96:	4849      	ldr	r0, [pc, #292]	; (7dbc <z_add_timeout+0x17c>)
    7c98:	2381      	movs	r3, #129	; 0x81
    7c9a:	f001 fb7a 	bl	9392 <printk>
    7c9e:	4949      	ldr	r1, [pc, #292]	; (7dc4 <z_add_timeout+0x184>)
    7ca0:	484b      	ldr	r0, [pc, #300]	; (7dd0 <z_add_timeout+0x190>)
    7ca2:	f001 fb76 	bl	9392 <printk>
    7ca6:	4848      	ldr	r0, [pc, #288]	; (7dc8 <z_add_timeout+0x188>)
    7ca8:	2181      	movs	r1, #129	; 0x81
    7caa:	f001 f983 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7cae:	4845      	ldr	r0, [pc, #276]	; (7dc4 <z_add_timeout+0x184>)
    7cb0:	f7ff ff6e 	bl	7b90 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7cb4:	f06f 0301 	mvn.w	r3, #1
    7cb8:	ebb3 0804 	subs.w	r8, r3, r4
    7cbc:	f04f 32ff 	mov.w	r2, #4294967295
    7cc0:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7cc4:	f1b8 0f00 	cmp.w	r8, #0
    7cc8:	f179 0100 	sbcs.w	r1, r9, #0
    7ccc:	db1c      	blt.n	7d08 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7cce:	4841      	ldr	r0, [pc, #260]	; (7dd4 <z_add_timeout+0x194>)
    7cd0:	e9d0 1000 	ldrd	r1, r0, [r0]
    7cd4:	1a5b      	subs	r3, r3, r1
    7cd6:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    7cda:	1b1e      	subs	r6, r3, r4
    7cdc:	eb62 0705 	sbc.w	r7, r2, r5
    7ce0:	2e01      	cmp	r6, #1
    7ce2:	f177 0300 	sbcs.w	r3, r7, #0
    7ce6:	bfbc      	itt	lt
    7ce8:	2601      	movlt	r6, #1
    7cea:	2700      	movlt	r7, #0
    7cec:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    7cf0:	4a39      	ldr	r2, [pc, #228]	; (7dd8 <z_add_timeout+0x198>)
    7cf2:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf6:	4293      	cmp	r3, r2
    7cf8:	d11d      	bne.n	7d36 <z_add_timeout+0xf6>
	node->prev = tail;
    7cfa:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    7cfe:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    7d02:	f8c2 a004 	str.w	sl, [r2, #4]
}
    7d06:	e02c      	b.n	7d62 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7d08:	f7ff ff4a 	bl	7ba0 <elapsed>
    7d0c:	1c63      	adds	r3, r4, #1
    7d0e:	9300      	str	r3, [sp, #0]
    7d10:	f145 0300 	adc.w	r3, r5, #0
    7d14:	9301      	str	r3, [sp, #4]
    7d16:	e9dd 2300 	ldrd	r2, r3, [sp]
    7d1a:	1812      	adds	r2, r2, r0
    7d1c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    7d20:	e9ca 2304 	strd	r2, r3, [sl, #16]
    7d24:	e7e4      	b.n	7cf0 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7d26:	1be0      	subs	r0, r4, r7
    7d28:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    7d2c:	42b3      	cmp	r3, r6
    7d2e:	e9ca 0104 	strd	r0, r1, [sl, #16]
    7d32:	d0e2      	beq.n	7cfa <z_add_timeout+0xba>
    7d34:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7d36:	2b00      	cmp	r3, #0
    7d38:	d0df      	beq.n	7cfa <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    7d3a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    7d3e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    7d42:	42bc      	cmp	r4, r7
    7d44:	eb75 0108 	sbcs.w	r1, r5, r8
    7d48:	daed      	bge.n	7d26 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    7d4a:	1b38      	subs	r0, r7, r4
    7d4c:	eb68 0105 	sbc.w	r1, r8, r5
    7d50:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    7d54:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7d56:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    7d5a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    7d5e:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    7d62:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d64:	4293      	cmp	r3, r2
    7d66:	d00b      	beq.n	7d80 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7d68:	459a      	cmp	sl, r3
    7d6a:	d109      	bne.n	7d80 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7d6c:	f7ff ff22 	bl	7bb4 <next_timeout>

			if (next_time == 0 ||
    7d70:	b118      	cbz	r0, 7d7a <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    7d72:	4b1a      	ldr	r3, [pc, #104]	; (7ddc <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    7d74:	691b      	ldr	r3, [r3, #16]
    7d76:	4283      	cmp	r3, r0
    7d78:	d002      	beq.n	7d80 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    7d7a:	2100      	movs	r1, #0
    7d7c:	f7fc fb4a 	bl	4414 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d80:	4810      	ldr	r0, [pc, #64]	; (7dc4 <z_add_timeout+0x184>)
    7d82:	f7ff fef5 	bl	7b70 <z_spin_unlock_valid>
    7d86:	b968      	cbnz	r0, 7da4 <z_add_timeout+0x164>
    7d88:	4a0f      	ldr	r2, [pc, #60]	; (7dc8 <z_add_timeout+0x188>)
    7d8a:	4915      	ldr	r1, [pc, #84]	; (7de0 <z_add_timeout+0x1a0>)
    7d8c:	480b      	ldr	r0, [pc, #44]	; (7dbc <z_add_timeout+0x17c>)
    7d8e:	23ac      	movs	r3, #172	; 0xac
    7d90:	f001 faff 	bl	9392 <printk>
    7d94:	490b      	ldr	r1, [pc, #44]	; (7dc4 <z_add_timeout+0x184>)
    7d96:	4813      	ldr	r0, [pc, #76]	; (7de4 <z_add_timeout+0x1a4>)
    7d98:	f001 fafb 	bl	9392 <printk>
    7d9c:	480a      	ldr	r0, [pc, #40]	; (7dc8 <z_add_timeout+0x188>)
    7d9e:	21ac      	movs	r1, #172	; 0xac
    7da0:	f001 f908 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    7da4:	f38b 8811 	msr	BASEPRI, fp
    7da8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7dac:	b003      	add	sp, #12
    7dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7db2:	bf00      	nop
    7db4:	0000b391 	.word	0x0000b391
    7db8:	0000b36d 	.word	0x0000b36d
    7dbc:	0000a283 	.word	0x0000a283
    7dc0:	0000af59 	.word	0x0000af59
    7dc4:	20000c50 	.word	0x20000c50
    7dc8:	0000a546 	.word	0x0000a546
    7dcc:	0000a598 	.word	0x0000a598
    7dd0:	0000a5ad 	.word	0x0000a5ad
    7dd4:	200005b0 	.word	0x200005b0
    7dd8:	20000184 	.word	0x20000184
    7ddc:	20000c08 	.word	0x20000c08
    7de0:	0000a56c 	.word	0x0000a56c
    7de4:	0000a583 	.word	0x0000a583

00007de8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7de8:	b538      	push	{r3, r4, r5, lr}
    7dea:	4604      	mov	r4, r0
	__asm__ volatile(
    7dec:	f04f 0320 	mov.w	r3, #32
    7df0:	f3ef 8511 	mrs	r5, BASEPRI
    7df4:	f383 8812 	msr	BASEPRI_MAX, r3
    7df8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dfc:	481a      	ldr	r0, [pc, #104]	; (7e68 <z_abort_timeout+0x80>)
    7dfe:	f7ff fea9 	bl	7b54 <z_spin_lock_valid>
    7e02:	b968      	cbnz	r0, 7e20 <z_abort_timeout+0x38>
    7e04:	4a19      	ldr	r2, [pc, #100]	; (7e6c <z_abort_timeout+0x84>)
    7e06:	491a      	ldr	r1, [pc, #104]	; (7e70 <z_abort_timeout+0x88>)
    7e08:	481a      	ldr	r0, [pc, #104]	; (7e74 <z_abort_timeout+0x8c>)
    7e0a:	2381      	movs	r3, #129	; 0x81
    7e0c:	f001 fac1 	bl	9392 <printk>
    7e10:	4915      	ldr	r1, [pc, #84]	; (7e68 <z_abort_timeout+0x80>)
    7e12:	4819      	ldr	r0, [pc, #100]	; (7e78 <z_abort_timeout+0x90>)
    7e14:	f001 fabd 	bl	9392 <printk>
    7e18:	4814      	ldr	r0, [pc, #80]	; (7e6c <z_abort_timeout+0x84>)
    7e1a:	2181      	movs	r1, #129	; 0x81
    7e1c:	f001 f8ca 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e20:	4811      	ldr	r0, [pc, #68]	; (7e68 <z_abort_timeout+0x80>)
    7e22:	f7ff feb5 	bl	7b90 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7e26:	6823      	ldr	r3, [r4, #0]
    7e28:	b1db      	cbz	r3, 7e62 <z_abort_timeout+0x7a>
			remove_timeout(to);
    7e2a:	4620      	mov	r0, r4
    7e2c:	f7ff feee 	bl	7c0c <remove_timeout>
			ret = 0;
    7e30:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e32:	480d      	ldr	r0, [pc, #52]	; (7e68 <z_abort_timeout+0x80>)
    7e34:	f7ff fe9c 	bl	7b70 <z_spin_unlock_valid>
    7e38:	b968      	cbnz	r0, 7e56 <z_abort_timeout+0x6e>
    7e3a:	4a0c      	ldr	r2, [pc, #48]	; (7e6c <z_abort_timeout+0x84>)
    7e3c:	490f      	ldr	r1, [pc, #60]	; (7e7c <z_abort_timeout+0x94>)
    7e3e:	480d      	ldr	r0, [pc, #52]	; (7e74 <z_abort_timeout+0x8c>)
    7e40:	23ac      	movs	r3, #172	; 0xac
    7e42:	f001 faa6 	bl	9392 <printk>
    7e46:	4908      	ldr	r1, [pc, #32]	; (7e68 <z_abort_timeout+0x80>)
    7e48:	480d      	ldr	r0, [pc, #52]	; (7e80 <z_abort_timeout+0x98>)
    7e4a:	f001 faa2 	bl	9392 <printk>
    7e4e:	4807      	ldr	r0, [pc, #28]	; (7e6c <z_abort_timeout+0x84>)
    7e50:	21ac      	movs	r1, #172	; 0xac
    7e52:	f001 f8af 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    7e56:	f385 8811 	msr	BASEPRI, r5
    7e5a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7e5e:	4620      	mov	r0, r4
    7e60:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7e62:	f06f 0415 	mvn.w	r4, #21
    7e66:	e7e4      	b.n	7e32 <z_abort_timeout+0x4a>
    7e68:	20000c50 	.word	0x20000c50
    7e6c:	0000a546 	.word	0x0000a546
    7e70:	0000a598 	.word	0x0000a598
    7e74:	0000a283 	.word	0x0000a283
    7e78:	0000a5ad 	.word	0x0000a5ad
    7e7c:	0000a56c 	.word	0x0000a56c
    7e80:	0000a583 	.word	0x0000a583

00007e84 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7e84:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7e86:	f04f 0320 	mov.w	r3, #32
    7e8a:	f3ef 8511 	mrs	r5, BASEPRI
    7e8e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e96:	4818      	ldr	r0, [pc, #96]	; (7ef8 <z_get_next_timeout_expiry+0x74>)
    7e98:	f7ff fe5c 	bl	7b54 <z_spin_lock_valid>
    7e9c:	b968      	cbnz	r0, 7eba <z_get_next_timeout_expiry+0x36>
    7e9e:	4a17      	ldr	r2, [pc, #92]	; (7efc <z_get_next_timeout_expiry+0x78>)
    7ea0:	4917      	ldr	r1, [pc, #92]	; (7f00 <z_get_next_timeout_expiry+0x7c>)
    7ea2:	4818      	ldr	r0, [pc, #96]	; (7f04 <z_get_next_timeout_expiry+0x80>)
    7ea4:	2381      	movs	r3, #129	; 0x81
    7ea6:	f001 fa74 	bl	9392 <printk>
    7eaa:	4913      	ldr	r1, [pc, #76]	; (7ef8 <z_get_next_timeout_expiry+0x74>)
    7eac:	4816      	ldr	r0, [pc, #88]	; (7f08 <z_get_next_timeout_expiry+0x84>)
    7eae:	f001 fa70 	bl	9392 <printk>
    7eb2:	4812      	ldr	r0, [pc, #72]	; (7efc <z_get_next_timeout_expiry+0x78>)
    7eb4:	2181      	movs	r1, #129	; 0x81
    7eb6:	f001 f87d 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7eba:	480f      	ldr	r0, [pc, #60]	; (7ef8 <z_get_next_timeout_expiry+0x74>)
    7ebc:	f7ff fe68 	bl	7b90 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7ec0:	f7ff fe78 	bl	7bb4 <next_timeout>
    7ec4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ec6:	480c      	ldr	r0, [pc, #48]	; (7ef8 <z_get_next_timeout_expiry+0x74>)
    7ec8:	f7ff fe52 	bl	7b70 <z_spin_unlock_valid>
    7ecc:	b968      	cbnz	r0, 7eea <z_get_next_timeout_expiry+0x66>
    7ece:	4a0b      	ldr	r2, [pc, #44]	; (7efc <z_get_next_timeout_expiry+0x78>)
    7ed0:	490e      	ldr	r1, [pc, #56]	; (7f0c <z_get_next_timeout_expiry+0x88>)
    7ed2:	480c      	ldr	r0, [pc, #48]	; (7f04 <z_get_next_timeout_expiry+0x80>)
    7ed4:	23ac      	movs	r3, #172	; 0xac
    7ed6:	f001 fa5c 	bl	9392 <printk>
    7eda:	4907      	ldr	r1, [pc, #28]	; (7ef8 <z_get_next_timeout_expiry+0x74>)
    7edc:	480c      	ldr	r0, [pc, #48]	; (7f10 <z_get_next_timeout_expiry+0x8c>)
    7ede:	f001 fa58 	bl	9392 <printk>
    7ee2:	4806      	ldr	r0, [pc, #24]	; (7efc <z_get_next_timeout_expiry+0x78>)
    7ee4:	21ac      	movs	r1, #172	; 0xac
    7ee6:	f001 f865 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    7eea:	f385 8811 	msr	BASEPRI, r5
    7eee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7ef2:	4620      	mov	r0, r4
    7ef4:	bd38      	pop	{r3, r4, r5, pc}
    7ef6:	bf00      	nop
    7ef8:	20000c50 	.word	0x20000c50
    7efc:	0000a546 	.word	0x0000a546
    7f00:	0000a598 	.word	0x0000a598
    7f04:	0000a283 	.word	0x0000a283
    7f08:	0000a5ad 	.word	0x0000a5ad
    7f0c:	0000a56c 	.word	0x0000a56c
    7f10:	0000a583 	.word	0x0000a583

00007f14 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7f14:	b570      	push	{r4, r5, r6, lr}
    7f16:	4604      	mov	r4, r0
    7f18:	460d      	mov	r5, r1
	__asm__ volatile(
    7f1a:	f04f 0320 	mov.w	r3, #32
    7f1e:	f3ef 8611 	mrs	r6, BASEPRI
    7f22:	f383 8812 	msr	BASEPRI_MAX, r3
    7f26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f2a:	481b      	ldr	r0, [pc, #108]	; (7f98 <z_set_timeout_expiry+0x84>)
    7f2c:	f7ff fe12 	bl	7b54 <z_spin_lock_valid>
    7f30:	b968      	cbnz	r0, 7f4e <z_set_timeout_expiry+0x3a>
    7f32:	4a1a      	ldr	r2, [pc, #104]	; (7f9c <z_set_timeout_expiry+0x88>)
    7f34:	491a      	ldr	r1, [pc, #104]	; (7fa0 <z_set_timeout_expiry+0x8c>)
    7f36:	481b      	ldr	r0, [pc, #108]	; (7fa4 <z_set_timeout_expiry+0x90>)
    7f38:	2381      	movs	r3, #129	; 0x81
    7f3a:	f001 fa2a 	bl	9392 <printk>
    7f3e:	4916      	ldr	r1, [pc, #88]	; (7f98 <z_set_timeout_expiry+0x84>)
    7f40:	4819      	ldr	r0, [pc, #100]	; (7fa8 <z_set_timeout_expiry+0x94>)
    7f42:	f001 fa26 	bl	9392 <printk>
    7f46:	4815      	ldr	r0, [pc, #84]	; (7f9c <z_set_timeout_expiry+0x88>)
    7f48:	2181      	movs	r1, #129	; 0x81
    7f4a:	f001 f833 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    7f4e:	4812      	ldr	r0, [pc, #72]	; (7f98 <z_set_timeout_expiry+0x84>)
    7f50:	f7ff fe1e 	bl	7b90 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7f54:	f7ff fe2e 	bl	7bb4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7f58:	2801      	cmp	r0, #1
    7f5a:	dd05      	ble.n	7f68 <z_set_timeout_expiry+0x54>
    7f5c:	42a0      	cmp	r0, r4
    7f5e:	db03      	blt.n	7f68 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7f60:	4629      	mov	r1, r5
    7f62:	4620      	mov	r0, r4
    7f64:	f7fc fa56 	bl	4414 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f68:	480b      	ldr	r0, [pc, #44]	; (7f98 <z_set_timeout_expiry+0x84>)
    7f6a:	f7ff fe01 	bl	7b70 <z_spin_unlock_valid>
    7f6e:	b968      	cbnz	r0, 7f8c <z_set_timeout_expiry+0x78>
    7f70:	4a0a      	ldr	r2, [pc, #40]	; (7f9c <z_set_timeout_expiry+0x88>)
    7f72:	490e      	ldr	r1, [pc, #56]	; (7fac <z_set_timeout_expiry+0x98>)
    7f74:	480b      	ldr	r0, [pc, #44]	; (7fa4 <z_set_timeout_expiry+0x90>)
    7f76:	23ac      	movs	r3, #172	; 0xac
    7f78:	f001 fa0b 	bl	9392 <printk>
    7f7c:	4906      	ldr	r1, [pc, #24]	; (7f98 <z_set_timeout_expiry+0x84>)
    7f7e:	480c      	ldr	r0, [pc, #48]	; (7fb0 <z_set_timeout_expiry+0x9c>)
    7f80:	f001 fa07 	bl	9392 <printk>
    7f84:	4805      	ldr	r0, [pc, #20]	; (7f9c <z_set_timeout_expiry+0x88>)
    7f86:	21ac      	movs	r1, #172	; 0xac
    7f88:	f001 f814 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    7f8c:	f386 8811 	msr	BASEPRI, r6
    7f90:	f3bf 8f6f 	isb	sy
		}
	}
}
    7f94:	bd70      	pop	{r4, r5, r6, pc}
    7f96:	bf00      	nop
    7f98:	20000c50 	.word	0x20000c50
    7f9c:	0000a546 	.word	0x0000a546
    7fa0:	0000a598 	.word	0x0000a598
    7fa4:	0000a283 	.word	0x0000a283
    7fa8:	0000a5ad 	.word	0x0000a5ad
    7fac:	0000a56c 	.word	0x0000a56c
    7fb0:	0000a583 	.word	0x0000a583

00007fb4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fb8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7fba:	f7fe fc0d 	bl	67d8 <z_time_slice>
	__asm__ volatile(
    7fbe:	f04f 0320 	mov.w	r3, #32
    7fc2:	f3ef 8711 	mrs	r7, BASEPRI
    7fc6:	f383 8812 	msr	BASEPRI_MAX, r3
    7fca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fce:	4855      	ldr	r0, [pc, #340]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7fd0:	f7ff fdc0 	bl	7b54 <z_spin_lock_valid>
    7fd4:	b968      	cbnz	r0, 7ff2 <sys_clock_announce+0x3e>
    7fd6:	4a54      	ldr	r2, [pc, #336]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    7fd8:	4954      	ldr	r1, [pc, #336]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    7fda:	4855      	ldr	r0, [pc, #340]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    7fdc:	2381      	movs	r3, #129	; 0x81
    7fde:	f001 f9d8 	bl	9392 <printk>
    7fe2:	4950      	ldr	r1, [pc, #320]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7fe4:	4853      	ldr	r0, [pc, #332]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    7fe6:	f001 f9d4 	bl	9392 <printk>
    7fea:	484f      	ldr	r0, [pc, #316]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    7fec:	2181      	movs	r1, #129	; 0x81
    7fee:	f000 ffe1 	bl	8fb4 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7ff2:	4d51      	ldr	r5, [pc, #324]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    7ff4:	4e51      	ldr	r6, [pc, #324]	; (813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>)
	z_spin_lock_set_owner(l);
    7ff6:	484b      	ldr	r0, [pc, #300]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
	return list->head == list;
    7ff8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    7ffc:	f7ff fdc8 	bl	7b90 <z_spin_lock_set_owner>
    8000:	46b3      	mov	fp, r6
    8002:	602c      	str	r4, [r5, #0]
    8004:	e9d6 2300 	ldrd	r2, r3, [r6]
    8008:	f8d5 c000 	ldr.w	ip, [r5]
    800c:	f8da 4000 	ldr.w	r4, [sl]
    8010:	e9cd 2300 	strd	r2, r3, [sp]
    8014:	4662      	mov	r2, ip
    8016:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8018:	4554      	cmp	r4, sl
    801a:	46e0      	mov	r8, ip
    801c:	4699      	mov	r9, r3
    801e:	d00c      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8020:	b15c      	cbz	r4, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8022:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    8026:	458c      	cmp	ip, r1
    8028:	eb79 0302 	sbcs.w	r3, r9, r2
    802c:	da2e      	bge.n	808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    802e:	ebb1 000c 	subs.w	r0, r1, ip
    8032:	eb62 0109 	sbc.w	r1, r2, r9
    8036:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    803a:	9a00      	ldr	r2, [sp, #0]
    803c:	9901      	ldr	r1, [sp, #4]
    803e:	eb18 0202 	adds.w	r2, r8, r2
    8042:	464b      	mov	r3, r9
    8044:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    8048:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    804a:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    804e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8050:	f7ff fdb0 	bl	7bb4 <next_timeout>
    8054:	4621      	mov	r1, r4
    8056:	f7fc f9dd 	bl	4414 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    805a:	4832      	ldr	r0, [pc, #200]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    805c:	f7ff fd88 	bl	7b70 <z_spin_unlock_valid>
    8060:	b968      	cbnz	r0, 807e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    8062:	4a31      	ldr	r2, [pc, #196]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8064:	4936      	ldr	r1, [pc, #216]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    8066:	4832      	ldr	r0, [pc, #200]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    8068:	23ac      	movs	r3, #172	; 0xac
    806a:	f001 f992 	bl	9392 <printk>
    806e:	492d      	ldr	r1, [pc, #180]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    8070:	4834      	ldr	r0, [pc, #208]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    8072:	f001 f98e 	bl	9392 <printk>
    8076:	482c      	ldr	r0, [pc, #176]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8078:	21ac      	movs	r1, #172	; 0xac
    807a:	f000 ff9b 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    807e:	f387 8811 	msr	BASEPRI, r7
    8082:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8086:	b003      	add	sp, #12
    8088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    808c:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    8090:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    8094:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    8098:	f04f 0200 	mov.w	r2, #0
    809c:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    80a0:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    80a4:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    80a6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    80aa:	4620      	mov	r0, r4
		curr_tick += dt;
    80ac:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    80b0:	f7ff fdac 	bl	7c0c <remove_timeout>
    80b4:	481b      	ldr	r0, [pc, #108]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    80b6:	f7ff fd5b 	bl	7b70 <z_spin_unlock_valid>
    80ba:	b968      	cbnz	r0, 80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
    80bc:	4a1a      	ldr	r2, [pc, #104]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    80be:	4920      	ldr	r1, [pc, #128]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    80c0:	481b      	ldr	r0, [pc, #108]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    80c2:	23ac      	movs	r3, #172	; 0xac
    80c4:	f001 f965 	bl	9392 <printk>
    80c8:	4916      	ldr	r1, [pc, #88]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    80ca:	481e      	ldr	r0, [pc, #120]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    80cc:	f001 f961 	bl	9392 <printk>
    80d0:	4815      	ldr	r0, [pc, #84]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    80d2:	21ac      	movs	r1, #172	; 0xac
    80d4:	f000 ff6e 	bl	8fb4 <assert_post_action>
    80d8:	f387 8811 	msr	BASEPRI, r7
    80dc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    80e0:	68a3      	ldr	r3, [r4, #8]
    80e2:	4620      	mov	r0, r4
    80e4:	4798      	blx	r3
	__asm__ volatile(
    80e6:	f04f 0320 	mov.w	r3, #32
    80ea:	f3ef 8711 	mrs	r7, BASEPRI
    80ee:	f383 8812 	msr	BASEPRI_MAX, r3
    80f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80f6:	480b      	ldr	r0, [pc, #44]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    80f8:	f7ff fd2c 	bl	7b54 <z_spin_lock_valid>
    80fc:	b968      	cbnz	r0, 811a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11a>
    80fe:	4a0a      	ldr	r2, [pc, #40]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8100:	490a      	ldr	r1, [pc, #40]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    8102:	480b      	ldr	r0, [pc, #44]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    8104:	2381      	movs	r3, #129	; 0x81
    8106:	f001 f944 	bl	9392 <printk>
    810a:	4906      	ldr	r1, [pc, #24]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    810c:	4809      	ldr	r0, [pc, #36]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    810e:	f001 f940 	bl	9392 <printk>
    8112:	4805      	ldr	r0, [pc, #20]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    8114:	2181      	movs	r1, #129	; 0x81
    8116:	f000 ff4d 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    811a:	4802      	ldr	r0, [pc, #8]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    811c:	f7ff fd38 	bl	7b90 <z_spin_lock_set_owner>
	return k;
    8120:	e770      	b.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    8122:	bf00      	nop
    8124:	20000c50 	.word	0x20000c50
    8128:	0000a546 	.word	0x0000a546
    812c:	0000a598 	.word	0x0000a598
    8130:	0000a283 	.word	0x0000a283
    8134:	0000a5ad 	.word	0x0000a5ad
    8138:	20000c4c 	.word	0x20000c4c
    813c:	200005b0 	.word	0x200005b0
    8140:	0000a56c 	.word	0x0000a56c
    8144:	0000a583 	.word	0x0000a583
    8148:	20000184 	.word	0x20000184

0000814c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    814c:	b570      	push	{r4, r5, r6, lr}
    814e:	f04f 0320 	mov.w	r3, #32
    8152:	f3ef 8611 	mrs	r6, BASEPRI
    8156:	f383 8812 	msr	BASEPRI_MAX, r3
    815a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    815e:	481b      	ldr	r0, [pc, #108]	; (81cc <sys_clock_tick_get+0x80>)
    8160:	f7ff fcf8 	bl	7b54 <z_spin_lock_valid>
    8164:	b968      	cbnz	r0, 8182 <sys_clock_tick_get+0x36>
    8166:	4a1a      	ldr	r2, [pc, #104]	; (81d0 <sys_clock_tick_get+0x84>)
    8168:	491a      	ldr	r1, [pc, #104]	; (81d4 <sys_clock_tick_get+0x88>)
    816a:	481b      	ldr	r0, [pc, #108]	; (81d8 <sys_clock_tick_get+0x8c>)
    816c:	2381      	movs	r3, #129	; 0x81
    816e:	f001 f910 	bl	9392 <printk>
    8172:	4916      	ldr	r1, [pc, #88]	; (81cc <sys_clock_tick_get+0x80>)
    8174:	4819      	ldr	r0, [pc, #100]	; (81dc <sys_clock_tick_get+0x90>)
    8176:	f001 f90c 	bl	9392 <printk>
    817a:	4815      	ldr	r0, [pc, #84]	; (81d0 <sys_clock_tick_get+0x84>)
    817c:	2181      	movs	r1, #129	; 0x81
    817e:	f000 ff19 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8182:	4812      	ldr	r0, [pc, #72]	; (81cc <sys_clock_tick_get+0x80>)
    8184:	f7ff fd04 	bl	7b90 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8188:	f7fc f974 	bl	4474 <sys_clock_elapsed>
    818c:	4b14      	ldr	r3, [pc, #80]	; (81e0 <sys_clock_tick_get+0x94>)
    818e:	e9d3 4500 	ldrd	r4, r5, [r3]
    8192:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8194:	480d      	ldr	r0, [pc, #52]	; (81cc <sys_clock_tick_get+0x80>)
    8196:	f145 0500 	adc.w	r5, r5, #0
    819a:	f7ff fce9 	bl	7b70 <z_spin_unlock_valid>
    819e:	b968      	cbnz	r0, 81bc <sys_clock_tick_get+0x70>
    81a0:	4a0b      	ldr	r2, [pc, #44]	; (81d0 <sys_clock_tick_get+0x84>)
    81a2:	4910      	ldr	r1, [pc, #64]	; (81e4 <sys_clock_tick_get+0x98>)
    81a4:	480c      	ldr	r0, [pc, #48]	; (81d8 <sys_clock_tick_get+0x8c>)
    81a6:	23ac      	movs	r3, #172	; 0xac
    81a8:	f001 f8f3 	bl	9392 <printk>
    81ac:	4907      	ldr	r1, [pc, #28]	; (81cc <sys_clock_tick_get+0x80>)
    81ae:	480e      	ldr	r0, [pc, #56]	; (81e8 <sys_clock_tick_get+0x9c>)
    81b0:	f001 f8ef 	bl	9392 <printk>
    81b4:	4806      	ldr	r0, [pc, #24]	; (81d0 <sys_clock_tick_get+0x84>)
    81b6:	21ac      	movs	r1, #172	; 0xac
    81b8:	f000 fefc 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    81bc:	f386 8811 	msr	BASEPRI, r6
    81c0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    81c4:	4620      	mov	r0, r4
    81c6:	4629      	mov	r1, r5
    81c8:	bd70      	pop	{r4, r5, r6, pc}
    81ca:	bf00      	nop
    81cc:	20000c50 	.word	0x20000c50
    81d0:	0000a546 	.word	0x0000a546
    81d4:	0000a598 	.word	0x0000a598
    81d8:	0000a283 	.word	0x0000a283
    81dc:	0000a5ad 	.word	0x0000a5ad
    81e0:	200005b0 	.word	0x200005b0
    81e4:	0000a56c 	.word	0x0000a56c
    81e8:	0000a583 	.word	0x0000a583

000081ec <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    81ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ee:	4604      	mov	r4, r0
	__asm__ volatile(
    81f0:	f04f 0320 	mov.w	r3, #32
    81f4:	f3ef 8511 	mrs	r5, BASEPRI
    81f8:	f383 8812 	msr	BASEPRI_MAX, r3
    81fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8200:	484c      	ldr	r0, [pc, #304]	; (8334 <z_timer_expiration_handler+0x148>)
    8202:	f7ff fca7 	bl	7b54 <z_spin_lock_valid>
    8206:	b968      	cbnz	r0, 8224 <z_timer_expiration_handler+0x38>
    8208:	4a4b      	ldr	r2, [pc, #300]	; (8338 <z_timer_expiration_handler+0x14c>)
    820a:	494c      	ldr	r1, [pc, #304]	; (833c <z_timer_expiration_handler+0x150>)
    820c:	484c      	ldr	r0, [pc, #304]	; (8340 <z_timer_expiration_handler+0x154>)
    820e:	2381      	movs	r3, #129	; 0x81
    8210:	f001 f8bf 	bl	9392 <printk>
    8214:	4947      	ldr	r1, [pc, #284]	; (8334 <z_timer_expiration_handler+0x148>)
    8216:	484b      	ldr	r0, [pc, #300]	; (8344 <z_timer_expiration_handler+0x158>)
    8218:	f001 f8bb 	bl	9392 <printk>
    821c:	4846      	ldr	r0, [pc, #280]	; (8338 <z_timer_expiration_handler+0x14c>)
    821e:	2181      	movs	r1, #129	; 0x81
    8220:	f000 fec8 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8224:	4843      	ldr	r0, [pc, #268]	; (8334 <z_timer_expiration_handler+0x148>)
    8226:	f7ff fcb3 	bl	7b90 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    822a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    822e:	1c56      	adds	r6, r2, #1
    8230:	f143 0700 	adc.w	r7, r3, #0
    8234:	2f00      	cmp	r7, #0
    8236:	bf08      	it	eq
    8238:	2e02      	cmpeq	r6, #2
    823a:	d303      	bcc.n	8244 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    823c:	4942      	ldr	r1, [pc, #264]	; (8348 <z_timer_expiration_handler+0x15c>)
    823e:	4620      	mov	r0, r4
    8240:	f7ff fcfe 	bl	7c40 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8244:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8246:	3301      	adds	r3, #1
    8248:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    824a:	6a23      	ldr	r3, [r4, #32]
    824c:	2b00      	cmp	r3, #0
    824e:	d035      	beq.n	82bc <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8250:	4838      	ldr	r0, [pc, #224]	; (8334 <z_timer_expiration_handler+0x148>)
    8252:	f7ff fc8d 	bl	7b70 <z_spin_unlock_valid>
    8256:	b968      	cbnz	r0, 8274 <z_timer_expiration_handler+0x88>
    8258:	4a37      	ldr	r2, [pc, #220]	; (8338 <z_timer_expiration_handler+0x14c>)
    825a:	493c      	ldr	r1, [pc, #240]	; (834c <z_timer_expiration_handler+0x160>)
    825c:	4838      	ldr	r0, [pc, #224]	; (8340 <z_timer_expiration_handler+0x154>)
    825e:	23ac      	movs	r3, #172	; 0xac
    8260:	f001 f897 	bl	9392 <printk>
    8264:	4933      	ldr	r1, [pc, #204]	; (8334 <z_timer_expiration_handler+0x148>)
    8266:	483a      	ldr	r0, [pc, #232]	; (8350 <z_timer_expiration_handler+0x164>)
    8268:	f001 f893 	bl	9392 <printk>
    826c:	4832      	ldr	r0, [pc, #200]	; (8338 <z_timer_expiration_handler+0x14c>)
    826e:	21ac      	movs	r1, #172	; 0xac
    8270:	f000 fea0 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    8274:	f385 8811 	msr	BASEPRI, r5
    8278:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    827c:	6a23      	ldr	r3, [r4, #32]
    827e:	4620      	mov	r0, r4
    8280:	4798      	blx	r3
	__asm__ volatile(
    8282:	f04f 0320 	mov.w	r3, #32
    8286:	f3ef 8511 	mrs	r5, BASEPRI
    828a:	f383 8812 	msr	BASEPRI_MAX, r3
    828e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8292:	4828      	ldr	r0, [pc, #160]	; (8334 <z_timer_expiration_handler+0x148>)
    8294:	f7ff fc5e 	bl	7b54 <z_spin_lock_valid>
    8298:	b968      	cbnz	r0, 82b6 <z_timer_expiration_handler+0xca>
    829a:	4a27      	ldr	r2, [pc, #156]	; (8338 <z_timer_expiration_handler+0x14c>)
    829c:	4927      	ldr	r1, [pc, #156]	; (833c <z_timer_expiration_handler+0x150>)
    829e:	4828      	ldr	r0, [pc, #160]	; (8340 <z_timer_expiration_handler+0x154>)
    82a0:	2381      	movs	r3, #129	; 0x81
    82a2:	f001 f876 	bl	9392 <printk>
    82a6:	4923      	ldr	r1, [pc, #140]	; (8334 <z_timer_expiration_handler+0x148>)
    82a8:	4826      	ldr	r0, [pc, #152]	; (8344 <z_timer_expiration_handler+0x158>)
    82aa:	f001 f872 	bl	9392 <printk>
    82ae:	4822      	ldr	r0, [pc, #136]	; (8338 <z_timer_expiration_handler+0x14c>)
    82b0:	2181      	movs	r1, #129	; 0x81
    82b2:	f000 fe7f 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    82b6:	481f      	ldr	r0, [pc, #124]	; (8334 <z_timer_expiration_handler+0x148>)
    82b8:	f7ff fc6a 	bl	7b90 <z_spin_lock_set_owner>
	return list->head == list;
    82bc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82c0:	42a6      	cmp	r6, r4
    82c2:	d000      	beq.n	82c6 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    82c4:	b9b6      	cbnz	r6, 82f4 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82c6:	481b      	ldr	r0, [pc, #108]	; (8334 <z_timer_expiration_handler+0x148>)
    82c8:	f7ff fc52 	bl	7b70 <z_spin_unlock_valid>
    82cc:	b968      	cbnz	r0, 82ea <z_timer_expiration_handler+0xfe>
    82ce:	4a1a      	ldr	r2, [pc, #104]	; (8338 <z_timer_expiration_handler+0x14c>)
    82d0:	491e      	ldr	r1, [pc, #120]	; (834c <z_timer_expiration_handler+0x160>)
    82d2:	481b      	ldr	r0, [pc, #108]	; (8340 <z_timer_expiration_handler+0x154>)
    82d4:	23ac      	movs	r3, #172	; 0xac
    82d6:	f001 f85c 	bl	9392 <printk>
    82da:	4916      	ldr	r1, [pc, #88]	; (8334 <z_timer_expiration_handler+0x148>)
    82dc:	481c      	ldr	r0, [pc, #112]	; (8350 <z_timer_expiration_handler+0x164>)
    82de:	f001 f858 	bl	9392 <printk>
    82e2:	4815      	ldr	r0, [pc, #84]	; (8338 <z_timer_expiration_handler+0x14c>)
    82e4:	21ac      	movs	r1, #172	; 0xac
    82e6:	f000 fe65 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    82ea:	f385 8811 	msr	BASEPRI, r5
    82ee:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    82f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    82f4:	4630      	mov	r0, r6
    82f6:	f7fe f851 	bl	639c <z_unpend_thread_no_timeout>
    82fa:	2300      	movs	r3, #0
    82fc:	480d      	ldr	r0, [pc, #52]	; (8334 <z_timer_expiration_handler+0x148>)
    82fe:	67f3      	str	r3, [r6, #124]	; 0x7c
    8300:	f7ff fc36 	bl	7b70 <z_spin_unlock_valid>
    8304:	b968      	cbnz	r0, 8322 <z_timer_expiration_handler+0x136>
    8306:	4a0c      	ldr	r2, [pc, #48]	; (8338 <z_timer_expiration_handler+0x14c>)
    8308:	4910      	ldr	r1, [pc, #64]	; (834c <z_timer_expiration_handler+0x160>)
    830a:	480d      	ldr	r0, [pc, #52]	; (8340 <z_timer_expiration_handler+0x154>)
    830c:	23ac      	movs	r3, #172	; 0xac
    830e:	f001 f840 	bl	9392 <printk>
    8312:	4908      	ldr	r1, [pc, #32]	; (8334 <z_timer_expiration_handler+0x148>)
    8314:	480e      	ldr	r0, [pc, #56]	; (8350 <z_timer_expiration_handler+0x164>)
    8316:	f001 f83c 	bl	9392 <printk>
    831a:	4807      	ldr	r0, [pc, #28]	; (8338 <z_timer_expiration_handler+0x14c>)
    831c:	21ac      	movs	r1, #172	; 0xac
    831e:	f000 fe49 	bl	8fb4 <assert_post_action>
    8322:	f385 8811 	msr	BASEPRI, r5
    8326:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    832a:	4630      	mov	r0, r6
}
    832c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    8330:	f7fe bb1c 	b.w	696c <z_ready_thread>
    8334:	20000c54 	.word	0x20000c54
    8338:	0000a546 	.word	0x0000a546
    833c:	0000a598 	.word	0x0000a598
    8340:	0000a283 	.word	0x0000a283
    8344:	0000a5ad 	.word	0x0000a5ad
    8348:	000081ed 	.word	0x000081ed
    834c:	0000a56c 	.word	0x0000a56c
    8350:	0000a583 	.word	0x0000a583

00008354 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8354:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    8358:	4619      	mov	r1, r3
    835a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    835c:	1c4c      	adds	r4, r1, #1
{
    835e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8360:	bf08      	it	eq
    8362:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    8366:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    836a:	4680      	mov	r8, r0
    836c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    836e:	d04c      	beq.n	840a <z_impl_k_timer_start+0xb6>
    8370:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8372:	1c6b      	adds	r3, r5, #1
    8374:	bf08      	it	eq
    8376:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    837a:	4614      	mov	r4, r2
    837c:	d019      	beq.n	83b2 <z_impl_k_timer_start+0x5e>
    837e:	ea54 0305 	orrs.w	r3, r4, r5
    8382:	d016      	beq.n	83b2 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    8384:	f06f 0301 	mvn.w	r3, #1
    8388:	ebb3 0a02 	subs.w	sl, r3, r2
    838c:	f04f 33ff 	mov.w	r3, #4294967295
    8390:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8394:	f1ba 0f00 	cmp.w	sl, #0
    8398:	f17b 0300 	sbcs.w	r3, fp, #0
    839c:	da09      	bge.n	83b2 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    839e:	f112 34ff 	adds.w	r4, r2, #4294967295
    83a2:	f145 35ff 	adc.w	r5, r5, #4294967295
    83a6:	2c01      	cmp	r4, #1
    83a8:	f175 0300 	sbcs.w	r3, r5, #0
    83ac:	bfbc      	itt	lt
    83ae:	2401      	movlt	r4, #1
    83b0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    83b2:	f06f 0301 	mvn.w	r3, #1
    83b6:	1a1b      	subs	r3, r3, r0
    83b8:	9300      	str	r3, [sp, #0]
    83ba:	f04f 33ff 	mov.w	r3, #4294967295
    83be:	eb63 0301 	sbc.w	r3, r3, r1
    83c2:	9301      	str	r3, [sp, #4]
    83c4:	e9dd 2300 	ldrd	r2, r3, [sp]
    83c8:	2a00      	cmp	r2, #0
    83ca:	f173 0300 	sbcs.w	r3, r3, #0
    83ce:	da0c      	bge.n	83ea <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    83d0:	f110 38ff 	adds.w	r8, r0, #4294967295
    83d4:	f141 39ff 	adc.w	r9, r1, #4294967295
    83d8:	f1b8 0f00 	cmp.w	r8, #0
    83dc:	f179 0300 	sbcs.w	r3, r9, #0
    83e0:	bfbc      	itt	lt
    83e2:	f04f 0800 	movlt.w	r8, #0
    83e6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    83ea:	4630      	mov	r0, r6
    83ec:	f7ff fcfc 	bl	7de8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    83f0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    83f2:	4907      	ldr	r1, [pc, #28]	; (8410 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    83f4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    83f6:	4642      	mov	r2, r8
    83f8:	464b      	mov	r3, r9
    83fa:	4630      	mov	r0, r6
	timer->period = period;
    83fc:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    8400:	b002      	add	sp, #8
    8402:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8406:	f7ff bc1b 	b.w	7c40 <z_add_timeout>
}
    840a:	b002      	add	sp, #8
    840c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    8410:	000081ed 	.word	0x000081ed

00008414 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8418:	4e7e      	ldr	r6, [pc, #504]	; (8614 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    841a:	4f7f      	ldr	r7, [pc, #508]	; (8618 <work_queue_main+0x204>)
{
    841c:	b085      	sub	sp, #20
    841e:	4604      	mov	r4, r0
	__asm__ volatile(
    8420:	f04f 0320 	mov.w	r3, #32
    8424:	f3ef 8811 	mrs	r8, BASEPRI
    8428:	f383 8812 	msr	BASEPRI_MAX, r3
    842c:	f3bf 8f6f 	isb	sy
    8430:	4630      	mov	r0, r6
    8432:	f7ff fb8f 	bl	7b54 <z_spin_lock_valid>
    8436:	b968      	cbnz	r0, 8454 <work_queue_main+0x40>
    8438:	4a78      	ldr	r2, [pc, #480]	; (861c <work_queue_main+0x208>)
    843a:	4979      	ldr	r1, [pc, #484]	; (8620 <work_queue_main+0x20c>)
    843c:	4879      	ldr	r0, [pc, #484]	; (8624 <work_queue_main+0x210>)
    843e:	2381      	movs	r3, #129	; 0x81
    8440:	f000 ffa7 	bl	9392 <printk>
    8444:	4878      	ldr	r0, [pc, #480]	; (8628 <work_queue_main+0x214>)
    8446:	4631      	mov	r1, r6
    8448:	f000 ffa3 	bl	9392 <printk>
    844c:	4873      	ldr	r0, [pc, #460]	; (861c <work_queue_main+0x208>)
    844e:	2181      	movs	r1, #129	; 0x81
    8450:	f000 fdb0 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8454:	4630      	mov	r0, r6
    8456:	f7ff fb9b 	bl	7b90 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    845a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    845e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    8462:	b9ad      	cbnz	r5, 8490 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    8464:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    8468:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    846a:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    846e:	f100 8092 	bmi.w	8596 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8472:	2300      	movs	r3, #0
    8474:	9302      	str	r3, [sp, #8]
    8476:	f04f 32ff 	mov.w	r2, #4294967295
    847a:	f04f 33ff 	mov.w	r3, #4294967295
    847e:	e9cd 2300 	strd	r2, r3, [sp]
    8482:	4641      	mov	r1, r8
    8484:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8488:	4630      	mov	r0, r6
    848a:	f7ff f927 	bl	76dc <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    848e:	e7c7      	b.n	8420 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8490:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    8494:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    8496:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    849a:	428d      	cmp	r5, r1
    849c:	d101      	bne.n	84a2 <work_queue_main+0x8e>
	list->tail = node;
    849e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    84a2:	f043 0302 	orr.w	r3, r3, #2
    84a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    84aa:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    84ac:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    84b0:	f023 0304 	bic.w	r3, r3, #4
    84b4:	f043 0301 	orr.w	r3, r3, #1
    84b8:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84ba:	4630      	mov	r0, r6
    84bc:	f7ff fb58 	bl	7b70 <z_spin_unlock_valid>
    84c0:	b968      	cbnz	r0, 84de <work_queue_main+0xca>
    84c2:	4a56      	ldr	r2, [pc, #344]	; (861c <work_queue_main+0x208>)
    84c4:	4959      	ldr	r1, [pc, #356]	; (862c <work_queue_main+0x218>)
    84c6:	4857      	ldr	r0, [pc, #348]	; (8624 <work_queue_main+0x210>)
    84c8:	23ac      	movs	r3, #172	; 0xac
    84ca:	f000 ff62 	bl	9392 <printk>
    84ce:	4858      	ldr	r0, [pc, #352]	; (8630 <work_queue_main+0x21c>)
    84d0:	4631      	mov	r1, r6
    84d2:	f000 ff5e 	bl	9392 <printk>
    84d6:	4851      	ldr	r0, [pc, #324]	; (861c <work_queue_main+0x208>)
    84d8:	21ac      	movs	r1, #172	; 0xac
    84da:	f000 fd6b 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    84de:	f388 8811 	msr	BASEPRI, r8
    84e2:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    84e6:	f1b9 0f00 	cmp.w	r9, #0
    84ea:	d10b      	bne.n	8504 <work_queue_main+0xf0>
    84ec:	4951      	ldr	r1, [pc, #324]	; (8634 <work_queue_main+0x220>)
    84ee:	484d      	ldr	r0, [pc, #308]	; (8624 <work_queue_main+0x210>)
    84f0:	4a51      	ldr	r2, [pc, #324]	; (8638 <work_queue_main+0x224>)
    84f2:	f44f 7322 	mov.w	r3, #648	; 0x288
    84f6:	f000 ff4c 	bl	9392 <printk>
    84fa:	484f      	ldr	r0, [pc, #316]	; (8638 <work_queue_main+0x224>)
    84fc:	f44f 7122 	mov.w	r1, #648	; 0x288
    8500:	f000 fd58 	bl	8fb4 <assert_post_action>
		handler(work);
    8504:	4628      	mov	r0, r5
    8506:	47c8      	blx	r9
	__asm__ volatile(
    8508:	f04f 0320 	mov.w	r3, #32
    850c:	f3ef 8a11 	mrs	sl, BASEPRI
    8510:	f383 8812 	msr	BASEPRI_MAX, r3
    8514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8518:	4630      	mov	r0, r6
    851a:	f7ff fb1b 	bl	7b54 <z_spin_lock_valid>
    851e:	b968      	cbnz	r0, 853c <work_queue_main+0x128>
    8520:	4a3e      	ldr	r2, [pc, #248]	; (861c <work_queue_main+0x208>)
    8522:	493f      	ldr	r1, [pc, #252]	; (8620 <work_queue_main+0x20c>)
    8524:	483f      	ldr	r0, [pc, #252]	; (8624 <work_queue_main+0x210>)
    8526:	2381      	movs	r3, #129	; 0x81
    8528:	f000 ff33 	bl	9392 <printk>
    852c:	483e      	ldr	r0, [pc, #248]	; (8628 <work_queue_main+0x214>)
    852e:	4631      	mov	r1, r6
    8530:	f000 ff2f 	bl	9392 <printk>
    8534:	4839      	ldr	r0, [pc, #228]	; (861c <work_queue_main+0x208>)
    8536:	2181      	movs	r1, #129	; 0x81
    8538:	f000 fd3c 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    853c:	4630      	mov	r0, r6
    853e:	f7ff fb27 	bl	7b90 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    8542:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8544:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8546:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    854a:	d42e      	bmi.n	85aa <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    854c:	60ea      	str	r2, [r5, #12]
    854e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8552:	f023 0302 	bic.w	r3, r3, #2
    8556:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    855a:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    855c:	f3c3 2500 	ubfx	r5, r3, #8, #1
    8560:	f7ff fb06 	bl	7b70 <z_spin_unlock_valid>
    8564:	b968      	cbnz	r0, 8582 <work_queue_main+0x16e>
    8566:	4a2d      	ldr	r2, [pc, #180]	; (861c <work_queue_main+0x208>)
    8568:	4930      	ldr	r1, [pc, #192]	; (862c <work_queue_main+0x218>)
    856a:	482e      	ldr	r0, [pc, #184]	; (8624 <work_queue_main+0x210>)
    856c:	23ac      	movs	r3, #172	; 0xac
    856e:	f000 ff10 	bl	9392 <printk>
    8572:	482f      	ldr	r0, [pc, #188]	; (8630 <work_queue_main+0x21c>)
    8574:	4631      	mov	r1, r6
    8576:	f000 ff0c 	bl	9392 <printk>
    857a:	4828      	ldr	r0, [pc, #160]	; (861c <work_queue_main+0x208>)
    857c:	21ac      	movs	r1, #172	; 0xac
    857e:	f000 fd19 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    8582:	f38a 8811 	msr	BASEPRI, sl
    8586:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    858a:	2d00      	cmp	r5, #0
    858c:	f47f af48 	bne.w	8420 <work_queue_main+0xc>
	z_impl_k_yield();
    8590:	f7fe fdf8 	bl	7184 <z_impl_k_yield>
}
    8594:	e744      	b.n	8420 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8596:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    859a:	2200      	movs	r2, #0
    859c:	2101      	movs	r1, #1
    859e:	4628      	mov	r0, r5
    85a0:	f7ff f844 	bl	762c <z_sched_wake>
    85a4:	2800      	cmp	r0, #0
    85a6:	d1f8      	bne.n	859a <work_queue_main+0x186>
    85a8:	e763      	b.n	8472 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    85aa:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    85ac:	f023 0303 	bic.w	r3, r3, #3
    85b0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    85b2:	2800      	cmp	r0, #0
    85b4:	d0cb      	beq.n	854e <work_queue_main+0x13a>
	return node->next;
    85b6:	6803      	ldr	r3, [r0, #0]
    85b8:	2b00      	cmp	r3, #0
    85ba:	bf38      	it	cc
    85bc:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    85be:	f04f 0900 	mov.w	r9, #0
    85c2:	4698      	mov	r8, r3
	parent->next = child;
    85c4:	46cb      	mov	fp, r9
		if (wc->work == work) {
    85c6:	6843      	ldr	r3, [r0, #4]
    85c8:	429d      	cmp	r5, r3
    85ca:	4602      	mov	r2, r0
    85cc:	d10d      	bne.n	85ea <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    85ce:	6802      	ldr	r2, [r0, #0]
    85d0:	f1b9 0f00 	cmp.w	r9, #0
    85d4:	d115      	bne.n	8602 <work_queue_main+0x1ee>
    85d6:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    85d8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    85da:	4283      	cmp	r3, r0
    85dc:	d100      	bne.n	85e0 <work_queue_main+0x1cc>
	list->tail = node;
    85de:	607a      	str	r2, [r7, #4]
	parent->next = child;
    85e0:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    85e4:	f7ff f88c 	bl	7700 <z_impl_k_sem_give>
}
    85e8:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    85ea:	f1b8 0f00 	cmp.w	r8, #0
    85ee:	d0ae      	beq.n	854e <work_queue_main+0x13a>
	return node->next;
    85f0:	f8d8 3000 	ldr.w	r3, [r8]
    85f4:	2b00      	cmp	r3, #0
    85f6:	bf38      	it	cc
    85f8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    85fa:	4640      	mov	r0, r8
    85fc:	4691      	mov	r9, r2
    85fe:	4698      	mov	r8, r3
    8600:	e7e1      	b.n	85c6 <work_queue_main+0x1b2>
	parent->next = child;
    8602:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    8606:	687b      	ldr	r3, [r7, #4]
    8608:	4283      	cmp	r3, r0
	list->tail = node;
    860a:	bf08      	it	eq
    860c:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    8610:	e7e6      	b.n	85e0 <work_queue_main+0x1cc>
    8612:	bf00      	nop
    8614:	20000c58 	.word	0x20000c58
    8618:	20000c5c 	.word	0x20000c5c
    861c:	0000a546 	.word	0x0000a546
    8620:	0000a598 	.word	0x0000a598
    8624:	0000a283 	.word	0x0000a283
    8628:	0000a5ad 	.word	0x0000a5ad
    862c:	0000a56c 	.word	0x0000a56c
    8630:	0000a583 	.word	0x0000a583
    8634:	0000b3d2 	.word	0x0000b3d2
    8638:	0000b3b1 	.word	0x0000b3b1

0000863c <submit_to_queue_locked>:
{
    863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    863e:	68c3      	ldr	r3, [r0, #12]
    8640:	079a      	lsls	r2, r3, #30
{
    8642:	4604      	mov	r4, r0
    8644:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8646:	f3c3 0540 	ubfx	r5, r3, #1, #1
    864a:	d42b      	bmi.n	86a4 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    864c:	075f      	lsls	r7, r3, #29
    864e:	d42b      	bmi.n	86a8 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    8650:	680a      	ldr	r2, [r1, #0]
    8652:	b90a      	cbnz	r2, 8658 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8654:	6882      	ldr	r2, [r0, #8]
    8656:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8658:	07d8      	lsls	r0, r3, #31
    865a:	d528      	bpl.n	86ae <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    865c:	68a3      	ldr	r3, [r4, #8]
    865e:	b95b      	cbnz	r3, 8678 <submit_to_queue_locked+0x3c>
    8660:	4924      	ldr	r1, [pc, #144]	; (86f4 <submit_to_queue_locked+0xb8>)
    8662:	4825      	ldr	r0, [pc, #148]	; (86f8 <submit_to_queue_locked+0xbc>)
    8664:	4a25      	ldr	r2, [pc, #148]	; (86fc <submit_to_queue_locked+0xc0>)
    8666:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    866a:	f000 fe92 	bl	9392 <printk>
    866e:	4823      	ldr	r0, [pc, #140]	; (86fc <submit_to_queue_locked+0xc0>)
    8670:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    8674:	f000 fc9e 	bl	8fb4 <assert_post_action>
			*queuep = work->queue;
    8678:	68a3      	ldr	r3, [r4, #8]
    867a:	6033      	str	r3, [r6, #0]
			ret = 2;
    867c:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    867e:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    8680:	b38f      	cbz	r7, 86e6 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8682:	4b1f      	ldr	r3, [pc, #124]	; (8700 <submit_to_queue_locked+0xc4>)
    8684:	689b      	ldr	r3, [r3, #8]
    8686:	42bb      	cmp	r3, r7
    8688:	d113      	bne.n	86b2 <submit_to_queue_locked+0x76>
    868a:	f001 fa2f 	bl	9aec <k_is_in_isr>
    868e:	f080 0001 	eor.w	r0, r0, #1
    8692:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    8694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8698:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    869a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    869e:	d525      	bpl.n	86ec <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    86a0:	b14a      	cbz	r2, 86b6 <submit_to_queue_locked+0x7a>
    86a2:	b950      	cbnz	r0, 86ba <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    86a4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    86a8:	2300      	movs	r3, #0
    86aa:	6033      	str	r3, [r6, #0]
	return ret;
    86ac:	e015      	b.n	86da <submit_to_queue_locked+0x9e>
		ret = 1;
    86ae:	2501      	movs	r5, #1
    86b0:	e7e5      	b.n	867e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    86b2:	2000      	movs	r0, #0
    86b4:	e7ee      	b.n	8694 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    86b6:	071b      	lsls	r3, r3, #28
    86b8:	d4f4      	bmi.n	86a4 <submit_to_queue_locked+0x68>
	parent->next = child;
    86ba:	2300      	movs	r3, #0
    86bc:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    86be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    86c2:	b963      	cbnz	r3, 86de <submit_to_queue_locked+0xa2>
	list->head = node;
    86c4:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    86c8:	4638      	mov	r0, r7
    86ca:	f001 fa6a 	bl	9ba2 <notify_queue_locked>
	*flagp |= BIT(bit);
    86ce:	68e3      	ldr	r3, [r4, #12]
    86d0:	f043 0304 	orr.w	r3, r3, #4
    86d4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    86d6:	6833      	ldr	r3, [r6, #0]
    86d8:	60a3      	str	r3, [r4, #8]
}
    86da:	4628      	mov	r0, r5
    86dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    86de:	601c      	str	r4, [r3, #0]
	list->tail = node;
    86e0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    86e4:	e7f0      	b.n	86c8 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    86e6:	f06f 0515 	mvn.w	r5, #21
    86ea:	e7dd      	b.n	86a8 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    86ec:	f06f 0512 	mvn.w	r5, #18
    86f0:	e7da      	b.n	86a8 <submit_to_queue_locked+0x6c>
    86f2:	bf00      	nop
    86f4:	0000b3e9 	.word	0x0000b3e9
    86f8:	0000a283 	.word	0x0000a283
    86fc:	0000b3b1 	.word	0x0000b3b1
    8700:	20000c08 	.word	0x20000c08

00008704 <k_work_submit_to_queue>:
{
    8704:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    8706:	460c      	mov	r4, r1
{
    8708:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    870a:	b959      	cbnz	r1, 8724 <k_work_submit_to_queue+0x20>
    870c:	4926      	ldr	r1, [pc, #152]	; (87a8 <k_work_submit_to_queue+0xa4>)
    870e:	4827      	ldr	r0, [pc, #156]	; (87ac <k_work_submit_to_queue+0xa8>)
    8710:	4a27      	ldr	r2, [pc, #156]	; (87b0 <k_work_submit_to_queue+0xac>)
    8712:	f240 1369 	movw	r3, #361	; 0x169
    8716:	f000 fe3c 	bl	9392 <printk>
    871a:	4825      	ldr	r0, [pc, #148]	; (87b0 <k_work_submit_to_queue+0xac>)
    871c:	f240 1169 	movw	r1, #361	; 0x169
    8720:	f000 fc48 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    8724:	f04f 0320 	mov.w	r3, #32
    8728:	f3ef 8511 	mrs	r5, BASEPRI
    872c:	f383 8812 	msr	BASEPRI_MAX, r3
    8730:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8734:	481f      	ldr	r0, [pc, #124]	; (87b4 <k_work_submit_to_queue+0xb0>)
    8736:	f7ff fa0d 	bl	7b54 <z_spin_lock_valid>
    873a:	b968      	cbnz	r0, 8758 <k_work_submit_to_queue+0x54>
    873c:	4a1e      	ldr	r2, [pc, #120]	; (87b8 <k_work_submit_to_queue+0xb4>)
    873e:	491f      	ldr	r1, [pc, #124]	; (87bc <k_work_submit_to_queue+0xb8>)
    8740:	481a      	ldr	r0, [pc, #104]	; (87ac <k_work_submit_to_queue+0xa8>)
    8742:	2381      	movs	r3, #129	; 0x81
    8744:	f000 fe25 	bl	9392 <printk>
    8748:	491a      	ldr	r1, [pc, #104]	; (87b4 <k_work_submit_to_queue+0xb0>)
    874a:	481d      	ldr	r0, [pc, #116]	; (87c0 <k_work_submit_to_queue+0xbc>)
    874c:	f000 fe21 	bl	9392 <printk>
    8750:	4819      	ldr	r0, [pc, #100]	; (87b8 <k_work_submit_to_queue+0xb4>)
    8752:	2181      	movs	r1, #129	; 0x81
    8754:	f000 fc2e 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8758:	4816      	ldr	r0, [pc, #88]	; (87b4 <k_work_submit_to_queue+0xb0>)
    875a:	f7ff fa19 	bl	7b90 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    875e:	4620      	mov	r0, r4
    8760:	a901      	add	r1, sp, #4
    8762:	f7ff ff6b 	bl	863c <submit_to_queue_locked>
    8766:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8768:	4812      	ldr	r0, [pc, #72]	; (87b4 <k_work_submit_to_queue+0xb0>)
    876a:	f7ff fa01 	bl	7b70 <z_spin_unlock_valid>
    876e:	b968      	cbnz	r0, 878c <k_work_submit_to_queue+0x88>
    8770:	4a11      	ldr	r2, [pc, #68]	; (87b8 <k_work_submit_to_queue+0xb4>)
    8772:	4914      	ldr	r1, [pc, #80]	; (87c4 <k_work_submit_to_queue+0xc0>)
    8774:	480d      	ldr	r0, [pc, #52]	; (87ac <k_work_submit_to_queue+0xa8>)
    8776:	23ac      	movs	r3, #172	; 0xac
    8778:	f000 fe0b 	bl	9392 <printk>
    877c:	490d      	ldr	r1, [pc, #52]	; (87b4 <k_work_submit_to_queue+0xb0>)
    877e:	4812      	ldr	r0, [pc, #72]	; (87c8 <k_work_submit_to_queue+0xc4>)
    8780:	f000 fe07 	bl	9392 <printk>
    8784:	480c      	ldr	r0, [pc, #48]	; (87b8 <k_work_submit_to_queue+0xb4>)
    8786:	21ac      	movs	r1, #172	; 0xac
    8788:	f000 fc14 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    878c:	f385 8811 	msr	BASEPRI, r5
    8790:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    8794:	2c00      	cmp	r4, #0
    8796:	dd04      	ble.n	87a2 <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    8798:	f7fe fe84 	bl	74a4 <z_impl_k_is_preempt_thread>
    879c:	b108      	cbz	r0, 87a2 <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    879e:	f7fe fcf1 	bl	7184 <z_impl_k_yield>
}
    87a2:	4620      	mov	r0, r4
    87a4:	b003      	add	sp, #12
    87a6:	bd30      	pop	{r4, r5, pc}
    87a8:	0000b404 	.word	0x0000b404
    87ac:	0000a283 	.word	0x0000a283
    87b0:	0000b3b1 	.word	0x0000b3b1
    87b4:	20000c58 	.word	0x20000c58
    87b8:	0000a546 	.word	0x0000a546
    87bc:	0000a598 	.word	0x0000a598
    87c0:	0000a5ad 	.word	0x0000a5ad
    87c4:	0000a56c 	.word	0x0000a56c
    87c8:	0000a583 	.word	0x0000a583

000087cc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    87cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87d0:	b088      	sub	sp, #32
    87d2:	460e      	mov	r6, r1
    87d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    87d6:	4617      	mov	r7, r2
    87d8:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    87da:	4604      	mov	r4, r0
    87dc:	b958      	cbnz	r0, 87f6 <k_work_queue_start+0x2a>
    87de:	492e      	ldr	r1, [pc, #184]	; (8898 <k_work_queue_start+0xcc>)
    87e0:	482e      	ldr	r0, [pc, #184]	; (889c <k_work_queue_start+0xd0>)
    87e2:	4a2f      	ldr	r2, [pc, #188]	; (88a0 <k_work_queue_start+0xd4>)
    87e4:	f240 23b5 	movw	r3, #693	; 0x2b5
    87e8:	f000 fdd3 	bl	9392 <printk>
    87ec:	482c      	ldr	r0, [pc, #176]	; (88a0 <k_work_queue_start+0xd4>)
    87ee:	f240 21b5 	movw	r1, #693	; 0x2b5
    87f2:	f000 fbdf 	bl	8fb4 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    87f6:	b95e      	cbnz	r6, 8810 <k_work_queue_start+0x44>
    87f8:	492a      	ldr	r1, [pc, #168]	; (88a4 <k_work_queue_start+0xd8>)
    87fa:	4828      	ldr	r0, [pc, #160]	; (889c <k_work_queue_start+0xd0>)
    87fc:	4a28      	ldr	r2, [pc, #160]	; (88a0 <k_work_queue_start+0xd4>)
    87fe:	f240 23b6 	movw	r3, #694	; 0x2b6
    8802:	f000 fdc6 	bl	9392 <printk>
    8806:	4826      	ldr	r0, [pc, #152]	; (88a0 <k_work_queue_start+0xd4>)
    8808:	f240 21b6 	movw	r1, #694	; 0x2b6
    880c:	f000 fbd2 	bl	8fb4 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    8810:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    8814:	07db      	lsls	r3, r3, #31
    8816:	d50b      	bpl.n	8830 <k_work_queue_start+0x64>
    8818:	4923      	ldr	r1, [pc, #140]	; (88a8 <k_work_queue_start+0xdc>)
    881a:	4820      	ldr	r0, [pc, #128]	; (889c <k_work_queue_start+0xd0>)
    881c:	4a20      	ldr	r2, [pc, #128]	; (88a0 <k_work_queue_start+0xd4>)
    881e:	f240 23b7 	movw	r3, #695	; 0x2b7
    8822:	f000 fdb6 	bl	9392 <printk>
    8826:	481e      	ldr	r0, [pc, #120]	; (88a0 <k_work_queue_start+0xd4>)
    8828:	f240 21b7 	movw	r1, #695	; 0x2b7
    882c:	f000 fbc2 	bl	8fb4 <assert_post_action>
	list->head = NULL;
    8830:	2300      	movs	r3, #0
	list->tail = NULL;
    8832:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    8836:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    883a:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    883e:	f104 0390 	add.w	r3, r4, #144	; 0x90
    8842:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8846:	b32d      	cbz	r5, 8894 <k_work_queue_start+0xc8>
    8848:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    884a:	2b00      	cmp	r3, #0
    884c:	f240 1101 	movw	r1, #257	; 0x101
    8850:	bf08      	it	eq
    8852:	2101      	moveq	r1, #1
	*flagp = flags;
    8854:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8858:	f04f 32ff 	mov.w	r2, #4294967295
    885c:	f04f 33ff 	mov.w	r3, #4294967295
    8860:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8864:	2200      	movs	r2, #0
    8866:	e9cd 8203 	strd	r8, r2, [sp, #12]
    886a:	e9cd 2201 	strd	r2, r2, [sp, #4]
    886e:	4b0f      	ldr	r3, [pc, #60]	; (88ac <k_work_queue_start+0xe0>)
    8870:	9400      	str	r4, [sp, #0]
    8872:	463a      	mov	r2, r7
    8874:	4631      	mov	r1, r6
    8876:	4620      	mov	r0, r4
    8878:	f7ff f88e 	bl	7998 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    887c:	b125      	cbz	r5, 8888 <k_work_queue_start+0xbc>
    887e:	6829      	ldr	r1, [r5, #0]
    8880:	b111      	cbz	r1, 8888 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    8882:	4620      	mov	r0, r4
    8884:	f001 f938 	bl	9af8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8888:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    888a:	b008      	add	sp, #32
    888c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8890:	f001 b935 	b.w	9afe <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8894:	2101      	movs	r1, #1
    8896:	e7dd      	b.n	8854 <k_work_queue_start+0x88>
    8898:	0000b418 	.word	0x0000b418
    889c:	0000a283 	.word	0x0000a283
    88a0:	0000b3b1 	.word	0x0000b3b1
    88a4:	0000b41e 	.word	0x0000b41e
    88a8:	0000b424 	.word	0x0000b424
    88ac:	00008415 	.word	0x00008415

000088b0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    88b0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    88b2:	4806      	ldr	r0, [pc, #24]	; (88cc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    88b4:	4a06      	ldr	r2, [pc, #24]	; (88d0 <z_data_copy+0x20>)
    88b6:	4907      	ldr	r1, [pc, #28]	; (88d4 <z_data_copy+0x24>)
    88b8:	1a12      	subs	r2, r2, r0
    88ba:	f000 fdb6 	bl	942a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    88be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    88c2:	4a05      	ldr	r2, [pc, #20]	; (88d8 <z_data_copy+0x28>)
    88c4:	4905      	ldr	r1, [pc, #20]	; (88dc <z_data_copy+0x2c>)
    88c6:	4806      	ldr	r0, [pc, #24]	; (88e0 <z_data_copy+0x30>)
    88c8:	f000 bdaf 	b.w	942a <memcpy>
    88cc:	20000000 	.word	0x20000000
    88d0:	20000270 	.word	0x20000270
    88d4:	0000b58c 	.word	0x0000b58c
    88d8:	00000000 	.word	0x00000000
    88dc:	0000b58c 	.word	0x0000b58c
    88e0:	20000000 	.word	0x20000000

000088e4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    88e4:	4a02      	ldr	r2, [pc, #8]	; (88f0 <boot_banner+0xc>)
    88e6:	4903      	ldr	r1, [pc, #12]	; (88f4 <boot_banner+0x10>)
    88e8:	4803      	ldr	r0, [pc, #12]	; (88f8 <boot_banner+0x14>)
    88ea:	f000 bd52 	b.w	9392 <printk>
    88ee:	bf00      	nop
    88f0:	0000af5b 	.word	0x0000af5b
    88f4:	0000b458 	.word	0x0000b458
    88f8:	0000b467 	.word	0x0000b467

000088fc <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    88fc:	2304      	movs	r3, #4
    88fe:	18d2      	adds	r2, r2, r3
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    8900:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    8904:	4606      	mov	r6, r0
    8906:	460d      	mov	r5, r1
    8908:	d20a      	bcs.n	8920 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    890a:	f04f 0800 	mov.w	r8, #0
    890e:	f04f 0900 	mov.w	r9, #0
    8912:	e9cd 8900 	strd	r8, r9, [sp]
    8916:	4319      	orrs	r1, r3
    8918:	f000 f86a 	bl	89f0 <k_heap_aligned_alloc>
	if (mem == NULL) {
    891c:	4604      	mov	r4, r0
    891e:	b920      	cbnz	r0, 892a <z_heap_aligned_alloc+0x2e>
		return NULL;
    8920:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    8922:	4620      	mov	r0, r4
    8924:	b002      	add	sp, #8
    8926:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    892a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    892e:	2d00      	cmp	r5, #0
    8930:	d0f7      	beq.n	8922 <z_heap_aligned_alloc+0x26>
    8932:	1e6b      	subs	r3, r5, #1
    8934:	421c      	tst	r4, r3
    8936:	d0f4      	beq.n	8922 <z_heap_aligned_alloc+0x26>
    8938:	2325      	movs	r3, #37	; 0x25
    893a:	4a07      	ldr	r2, [pc, #28]	; (8958 <z_heap_aligned_alloc+0x5c>)
    893c:	4907      	ldr	r1, [pc, #28]	; (895c <z_heap_aligned_alloc+0x60>)
    893e:	4808      	ldr	r0, [pc, #32]	; (8960 <z_heap_aligned_alloc+0x64>)
    8940:	f000 fd27 	bl	9392 <printk>
    8944:	4621      	mov	r1, r4
    8946:	4807      	ldr	r0, [pc, #28]	; (8964 <z_heap_aligned_alloc+0x68>)
    8948:	462a      	mov	r2, r5
    894a:	f000 fd22 	bl	9392 <printk>
    894e:	4802      	ldr	r0, [pc, #8]	; (8958 <z_heap_aligned_alloc+0x5c>)
    8950:	2125      	movs	r1, #37	; 0x25
    8952:	f000 fb2f 	bl	8fb4 <assert_post_action>
    8956:	e7e4      	b.n	8922 <z_heap_aligned_alloc+0x26>
    8958:	0000b48e 	.word	0x0000b48e
    895c:	0000b4b2 	.word	0x0000b4b2
    8960:	0000a283 	.word	0x0000a283
    8964:	0000b4e4 	.word	0x0000b4e4

00008968 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    8968:	b538      	push	{r3, r4, r5, lr}
    896a:	4604      	mov	r4, r0
    896c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    896e:	f001 f8bd 	bl	9aec <k_is_in_isr>
    8972:	b950      	cbnz	r0, 898a <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    8974:	4b06      	ldr	r3, [pc, #24]	; (8990 <z_thread_aligned_alloc+0x28>)
    8976:	689b      	ldr	r3, [r3, #8]
    8978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
    897a:	b143      	cbz	r3, 898e <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
    897c:	462a      	mov	r2, r5
    897e:	4621      	mov	r1, r4
    8980:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
    8982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
    8986:	f7ff bfb9 	b.w	88fc <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
    898a:	4b02      	ldr	r3, [pc, #8]	; (8994 <z_thread_aligned_alloc+0x2c>)
    898c:	e7f6      	b.n	897c <z_thread_aligned_alloc+0x14>
}
    898e:	bd38      	pop	{r3, r4, r5, pc}
    8990:	20000c08 	.word	0x20000c08
    8994:	20000208 	.word	0x20000208

00008998 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    899a:	4d0f      	ldr	r5, [pc, #60]	; (89d8 <statics_init+0x40>)
    899c:	4c0f      	ldr	r4, [pc, #60]	; (89dc <statics_init+0x44>)
    899e:	4e10      	ldr	r6, [pc, #64]	; (89e0 <statics_init+0x48>)
    89a0:	462f      	mov	r7, r5
    89a2:	42ac      	cmp	r4, r5
    89a4:	d90c      	bls.n	89c0 <statics_init+0x28>
    89a6:	490f      	ldr	r1, [pc, #60]	; (89e4 <statics_init+0x4c>)
    89a8:	480f      	ldr	r0, [pc, #60]	; (89e8 <statics_init+0x50>)
    89aa:	2318      	movs	r3, #24
    89ac:	4632      	mov	r2, r6
    89ae:	f000 fcf0 	bl	9392 <printk>
    89b2:	480e      	ldr	r0, [pc, #56]	; (89ec <statics_init+0x54>)
    89b4:	f000 fced 	bl	9392 <printk>
    89b8:	2118      	movs	r1, #24
    89ba:	4630      	mov	r0, r6
    89bc:	f000 fafa 	bl	8fb4 <assert_post_action>
    89c0:	42bc      	cmp	r4, r7
    89c2:	d301      	bcc.n	89c8 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    89c4:	2000      	movs	r0, #0
    89c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    89c8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    89cc:	4620      	mov	r0, r4
    89ce:	f001 f8f6 	bl	9bbe <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    89d2:	3418      	adds	r4, #24
    89d4:	e7e5      	b.n	89a2 <statics_init+0xa>
    89d6:	bf00      	nop
    89d8:	20000220 	.word	0x20000220
    89dc:	20000208 	.word	0x20000208
    89e0:	0000b50c 	.word	0x0000b50c
    89e4:	0000b52e 	.word	0x0000b52e
    89e8:	0000a283 	.word	0x0000a283
    89ec:	0000ae9f 	.word	0x0000ae9f

000089f0 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    89f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f4:	b087      	sub	sp, #28
    89f6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
    89fa:	4606      	mov	r6, r0
    89fc:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    89fe:	4640      	mov	r0, r8
    8a00:	4649      	mov	r1, r9
{
    8a02:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8a04:	f001 f887 	bl	9b16 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8a08:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
    8a10:	f04f 0320 	mov.w	r3, #32
    8a14:	f3ef 8511 	mrs	r5, BASEPRI
    8a18:	f383 8812 	msr	BASEPRI_MAX, r3
    8a1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a20:	4620      	mov	r0, r4
    8a22:	f7ff f897 	bl	7b54 <z_spin_lock_valid>
    8a26:	b968      	cbnz	r0, 8a44 <k_heap_aligned_alloc+0x54>
    8a28:	4a3f      	ldr	r2, [pc, #252]	; (8b28 <k_heap_aligned_alloc+0x138>)
    8a2a:	4940      	ldr	r1, [pc, #256]	; (8b2c <k_heap_aligned_alloc+0x13c>)
    8a2c:	4840      	ldr	r0, [pc, #256]	; (8b30 <k_heap_aligned_alloc+0x140>)
    8a2e:	2381      	movs	r3, #129	; 0x81
    8a30:	f000 fcaf 	bl	9392 <printk>
    8a34:	483f      	ldr	r0, [pc, #252]	; (8b34 <k_heap_aligned_alloc+0x144>)
    8a36:	4621      	mov	r1, r4
    8a38:	f000 fcab 	bl	9392 <printk>
    8a3c:	483a      	ldr	r0, [pc, #232]	; (8b28 <k_heap_aligned_alloc+0x138>)
    8a3e:	2181      	movs	r1, #129	; 0x81
    8a40:	f000 fab8 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a44:	4620      	mov	r0, r4
    8a46:	f7ff f8a3 	bl	7b90 <z_spin_lock_set_owner>
    8a4a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    8a4e:	b17b      	cbz	r3, 8a70 <k_heap_aligned_alloc+0x80>
    8a50:	ea58 0309 	orrs.w	r3, r8, r9
    8a54:	d00c      	beq.n	8a70 <k_heap_aligned_alloc+0x80>
    8a56:	4938      	ldr	r1, [pc, #224]	; (8b38 <k_heap_aligned_alloc+0x148>)
    8a58:	4a38      	ldr	r2, [pc, #224]	; (8b3c <k_heap_aligned_alloc+0x14c>)
    8a5a:	4835      	ldr	r0, [pc, #212]	; (8b30 <k_heap_aligned_alloc+0x140>)
    8a5c:	2349      	movs	r3, #73	; 0x49
    8a5e:	f000 fc98 	bl	9392 <printk>
    8a62:	4837      	ldr	r0, [pc, #220]	; (8b40 <k_heap_aligned_alloc+0x150>)
    8a64:	f000 fc95 	bl	9392 <printk>
    8a68:	4834      	ldr	r0, [pc, #208]	; (8b3c <k_heap_aligned_alloc+0x14c>)
    8a6a:	2149      	movs	r1, #73	; 0x49
    8a6c:	f000 faa2 	bl	8fb4 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a70:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8b28 <k_heap_aligned_alloc+0x138>
    8a74:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8b2c <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    8a78:	4652      	mov	r2, sl
    8a7a:	4659      	mov	r1, fp
    8a7c:	4630      	mov	r0, r6
    8a7e:	f7f8 feab 	bl	17d8 <sys_heap_aligned_alloc>
    8a82:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
    8a84:	f7ff fb62 	bl	814c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    8a88:	b1cf      	cbz	r7, 8abe <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a8a:	4620      	mov	r0, r4
    8a8c:	f7ff f870 	bl	7b70 <z_spin_unlock_valid>
    8a90:	b968      	cbnz	r0, 8aae <k_heap_aligned_alloc+0xbe>
    8a92:	4a25      	ldr	r2, [pc, #148]	; (8b28 <k_heap_aligned_alloc+0x138>)
    8a94:	492b      	ldr	r1, [pc, #172]	; (8b44 <k_heap_aligned_alloc+0x154>)
    8a96:	4826      	ldr	r0, [pc, #152]	; (8b30 <k_heap_aligned_alloc+0x140>)
    8a98:	23ac      	movs	r3, #172	; 0xac
    8a9a:	f000 fc7a 	bl	9392 <printk>
    8a9e:	482a      	ldr	r0, [pc, #168]	; (8b48 <k_heap_aligned_alloc+0x158>)
    8aa0:	4621      	mov	r1, r4
    8aa2:	f000 fc76 	bl	9392 <printk>
    8aa6:	4820      	ldr	r0, [pc, #128]	; (8b28 <k_heap_aligned_alloc+0x138>)
    8aa8:	21ac      	movs	r1, #172	; 0xac
    8aaa:	f000 fa83 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    8aae:	f385 8811 	msr	BASEPRI, r5
    8ab2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    8ab6:	4638      	mov	r0, r7
    8ab8:	b007      	add	sp, #28
    8aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    8abe:	9b04      	ldr	r3, [sp, #16]
    8ac0:	1a1b      	subs	r3, r3, r0
    8ac2:	9302      	str	r3, [sp, #8]
    8ac4:	9b05      	ldr	r3, [sp, #20]
    8ac6:	eb63 0301 	sbc.w	r3, r3, r1
    8aca:	9303      	str	r3, [sp, #12]
    8acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8ad0:	2a01      	cmp	r2, #1
    8ad2:	f173 0300 	sbcs.w	r3, r3, #0
    8ad6:	dbd8      	blt.n	8a8a <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    8ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8adc:	4629      	mov	r1, r5
    8ade:	e9cd 2300 	strd	r2, r3, [sp]
    8ae2:	4620      	mov	r0, r4
    8ae4:	f106 020c 	add.w	r2, r6, #12
    8ae8:	f7fe f8f2 	bl	6cd0 <z_pend_curr>
	__asm__ volatile(
    8aec:	f04f 0320 	mov.w	r3, #32
    8af0:	f3ef 8511 	mrs	r5, BASEPRI
    8af4:	f383 8812 	msr	BASEPRI_MAX, r3
    8af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8afc:	4620      	mov	r0, r4
    8afe:	f7ff f829 	bl	7b54 <z_spin_lock_valid>
    8b02:	b968      	cbnz	r0, 8b20 <k_heap_aligned_alloc+0x130>
    8b04:	480a      	ldr	r0, [pc, #40]	; (8b30 <k_heap_aligned_alloc+0x140>)
    8b06:	2381      	movs	r3, #129	; 0x81
    8b08:	4642      	mov	r2, r8
    8b0a:	4649      	mov	r1, r9
    8b0c:	f000 fc41 	bl	9392 <printk>
    8b10:	4808      	ldr	r0, [pc, #32]	; (8b34 <k_heap_aligned_alloc+0x144>)
    8b12:	4621      	mov	r1, r4
    8b14:	f000 fc3d 	bl	9392 <printk>
    8b18:	2181      	movs	r1, #129	; 0x81
    8b1a:	4640      	mov	r0, r8
    8b1c:	f000 fa4a 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b20:	4620      	mov	r0, r4
    8b22:	f7ff f835 	bl	7b90 <z_spin_lock_set_owner>
	return k;
    8b26:	e7a7      	b.n	8a78 <k_heap_aligned_alloc+0x88>
    8b28:	0000a546 	.word	0x0000a546
    8b2c:	0000a598 	.word	0x0000a598
    8b30:	0000a283 	.word	0x0000a283
    8b34:	0000a5ad 	.word	0x0000a5ad
    8b38:	0000b544 	.word	0x0000b544
    8b3c:	0000b50c 	.word	0x0000b50c
    8b40:	0000af59 	.word	0x0000af59
    8b44:	0000a56c 	.word	0x0000a56c
    8b48:	0000a583 	.word	0x0000a583

00008b4c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    8b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b4e:	4605      	mov	r5, r0
    8b50:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8b52:	f100 0414 	add.w	r4, r0, #20
    8b56:	f04f 0320 	mov.w	r3, #32
    8b5a:	f3ef 8711 	mrs	r7, BASEPRI
    8b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    8b62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b66:	4620      	mov	r0, r4
    8b68:	f7fe fff4 	bl	7b54 <z_spin_lock_valid>
    8b6c:	b968      	cbnz	r0, 8b8a <k_heap_free+0x3e>
    8b6e:	4a1b      	ldr	r2, [pc, #108]	; (8bdc <k_heap_free+0x90>)
    8b70:	491b      	ldr	r1, [pc, #108]	; (8be0 <k_heap_free+0x94>)
    8b72:	481c      	ldr	r0, [pc, #112]	; (8be4 <k_heap_free+0x98>)
    8b74:	2381      	movs	r3, #129	; 0x81
    8b76:	f000 fc0c 	bl	9392 <printk>
    8b7a:	481b      	ldr	r0, [pc, #108]	; (8be8 <k_heap_free+0x9c>)
    8b7c:	4621      	mov	r1, r4
    8b7e:	f000 fc08 	bl	9392 <printk>
    8b82:	4816      	ldr	r0, [pc, #88]	; (8bdc <k_heap_free+0x90>)
    8b84:	2181      	movs	r1, #129	; 0x81
    8b86:	f000 fa15 	bl	8fb4 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b8a:	4620      	mov	r0, r4
    8b8c:	f7ff f800 	bl	7b90 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
    8b90:	4628      	mov	r0, r5
    8b92:	4631      	mov	r1, r6
    8b94:	f7f8 fdd4 	bl	1740 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    8b98:	f105 000c 	add.w	r0, r5, #12
    8b9c:	f000 ff96 	bl	9acc <z_unpend_all>
    8ba0:	b128      	cbz	r0, 8bae <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
    8ba2:	4639      	mov	r1, r7
    8ba4:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    8ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
    8baa:	f7fd bc3f 	b.w	642c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bae:	4620      	mov	r0, r4
    8bb0:	f7fe ffde 	bl	7b70 <z_spin_unlock_valid>
    8bb4:	b968      	cbnz	r0, 8bd2 <k_heap_free+0x86>
    8bb6:	4a09      	ldr	r2, [pc, #36]	; (8bdc <k_heap_free+0x90>)
    8bb8:	490c      	ldr	r1, [pc, #48]	; (8bec <k_heap_free+0xa0>)
    8bba:	480a      	ldr	r0, [pc, #40]	; (8be4 <k_heap_free+0x98>)
    8bbc:	23ac      	movs	r3, #172	; 0xac
    8bbe:	f000 fbe8 	bl	9392 <printk>
    8bc2:	480b      	ldr	r0, [pc, #44]	; (8bf0 <k_heap_free+0xa4>)
    8bc4:	4621      	mov	r1, r4
    8bc6:	f000 fbe4 	bl	9392 <printk>
    8bca:	4804      	ldr	r0, [pc, #16]	; (8bdc <k_heap_free+0x90>)
    8bcc:	21ac      	movs	r1, #172	; 0xac
    8bce:	f000 f9f1 	bl	8fb4 <assert_post_action>
	__asm__ volatile(
    8bd2:	f387 8811 	msr	BASEPRI, r7
    8bd6:	f3bf 8f6f 	isb	sy
}
    8bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bdc:	0000a546 	.word	0x0000a546
    8be0:	0000a598 	.word	0x0000a598
    8be4:	0000a283 	.word	0x0000a283
    8be8:	0000a5ad 	.word	0x0000a5ad
    8bec:	0000a56c 	.word	0x0000a56c
    8bf0:	0000a583 	.word	0x0000a583

00008bf4 <nrf_cc3xx_platform_init_no_rng>:
    8bf4:	b510      	push	{r4, lr}
    8bf6:	4c0a      	ldr	r4, [pc, #40]	; (8c20 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8bf8:	6823      	ldr	r3, [r4, #0]
    8bfa:	b11b      	cbz	r3, 8c04 <nrf_cc3xx_platform_init_no_rng+0x10>
    8bfc:	2301      	movs	r3, #1
    8bfe:	6023      	str	r3, [r4, #0]
    8c00:	2000      	movs	r0, #0
    8c02:	bd10      	pop	{r4, pc}
    8c04:	f000 f8d6 	bl	8db4 <CC_LibInitNoRng>
    8c08:	2800      	cmp	r0, #0
    8c0a:	d0f7      	beq.n	8bfc <nrf_cc3xx_platform_init_no_rng+0x8>
    8c0c:	3801      	subs	r0, #1
    8c0e:	2806      	cmp	r0, #6
    8c10:	d803      	bhi.n	8c1a <nrf_cc3xx_platform_init_no_rng+0x26>
    8c12:	4b04      	ldr	r3, [pc, #16]	; (8c24 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8c14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8c18:	bd10      	pop	{r4, pc}
    8c1a:	4803      	ldr	r0, [pc, #12]	; (8c28 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8c1c:	bd10      	pop	{r4, pc}
    8c1e:	bf00      	nop
    8c20:	20000c64 	.word	0x20000c64
    8c24:	0000a034 	.word	0x0000a034
    8c28:	ffff8ffe 	.word	0xffff8ffe

00008c2c <nrf_cc3xx_platform_abort>:
    8c2c:	f3bf 8f4f 	dsb	sy
    8c30:	4905      	ldr	r1, [pc, #20]	; (8c48 <nrf_cc3xx_platform_abort+0x1c>)
    8c32:	4b06      	ldr	r3, [pc, #24]	; (8c4c <nrf_cc3xx_platform_abort+0x20>)
    8c34:	68ca      	ldr	r2, [r1, #12]
    8c36:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8c3a:	4313      	orrs	r3, r2
    8c3c:	60cb      	str	r3, [r1, #12]
    8c3e:	f3bf 8f4f 	dsb	sy
    8c42:	bf00      	nop
    8c44:	e7fd      	b.n	8c42 <nrf_cc3xx_platform_abort+0x16>
    8c46:	bf00      	nop
    8c48:	e000ed00 	.word	0xe000ed00
    8c4c:	05fa0004 	.word	0x05fa0004

00008c50 <CC_PalAbort>:
    8c50:	b4f0      	push	{r4, r5, r6, r7}
    8c52:	4f09      	ldr	r7, [pc, #36]	; (8c78 <CC_PalAbort+0x28>)
    8c54:	4e09      	ldr	r6, [pc, #36]	; (8c7c <CC_PalAbort+0x2c>)
    8c56:	4c0a      	ldr	r4, [pc, #40]	; (8c80 <CC_PalAbort+0x30>)
    8c58:	4a0a      	ldr	r2, [pc, #40]	; (8c84 <CC_PalAbort+0x34>)
    8c5a:	4d0b      	ldr	r5, [pc, #44]	; (8c88 <CC_PalAbort+0x38>)
    8c5c:	490b      	ldr	r1, [pc, #44]	; (8c8c <CC_PalAbort+0x3c>)
    8c5e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    8c62:	603b      	str	r3, [r7, #0]
    8c64:	6852      	ldr	r2, [r2, #4]
    8c66:	6033      	str	r3, [r6, #0]
    8c68:	6023      	str	r3, [r4, #0]
    8c6a:	2400      	movs	r4, #0
    8c6c:	602b      	str	r3, [r5, #0]
    8c6e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    8c72:	bcf0      	pop	{r4, r5, r6, r7}
    8c74:	4710      	bx	r2
    8c76:	bf00      	nop
    8c78:	5002b400 	.word	0x5002b400
    8c7c:	5002b404 	.word	0x5002b404
    8c80:	5002b408 	.word	0x5002b408
    8c84:	2000018c 	.word	0x2000018c
    8c88:	5002b40c 	.word	0x5002b40c
    8c8c:	5002a000 	.word	0x5002a000

00008c90 <nrf_cc3xx_platform_set_abort>:
    8c90:	e9d0 1200 	ldrd	r1, r2, [r0]
    8c94:	4b01      	ldr	r3, [pc, #4]	; (8c9c <nrf_cc3xx_platform_set_abort+0xc>)
    8c96:	e9c3 1200 	strd	r1, r2, [r3]
    8c9a:	4770      	bx	lr
    8c9c:	2000018c 	.word	0x2000018c

00008ca0 <mutex_free>:
    8ca0:	b510      	push	{r4, lr}
    8ca2:	4604      	mov	r4, r0
    8ca4:	b130      	cbz	r0, 8cb4 <mutex_free+0x14>
    8ca6:	6863      	ldr	r3, [r4, #4]
    8ca8:	06db      	lsls	r3, r3, #27
    8caa:	d502      	bpl.n	8cb2 <mutex_free+0x12>
    8cac:	2300      	movs	r3, #0
    8cae:	6023      	str	r3, [r4, #0]
    8cb0:	6063      	str	r3, [r4, #4]
    8cb2:	bd10      	pop	{r4, pc}
    8cb4:	4b02      	ldr	r3, [pc, #8]	; (8cc0 <mutex_free+0x20>)
    8cb6:	4803      	ldr	r0, [pc, #12]	; (8cc4 <mutex_free+0x24>)
    8cb8:	685b      	ldr	r3, [r3, #4]
    8cba:	4798      	blx	r3
    8cbc:	e7f3      	b.n	8ca6 <mutex_free+0x6>
    8cbe:	bf00      	nop
    8cc0:	2000018c 	.word	0x2000018c
    8cc4:	0000a050 	.word	0x0000a050

00008cc8 <mutex_unlock>:
    8cc8:	b168      	cbz	r0, 8ce6 <mutex_unlock+0x1e>
    8cca:	6843      	ldr	r3, [r0, #4]
    8ccc:	b13b      	cbz	r3, 8cde <mutex_unlock+0x16>
    8cce:	06db      	lsls	r3, r3, #27
    8cd0:	d507      	bpl.n	8ce2 <mutex_unlock+0x1a>
    8cd2:	f3bf 8f5f 	dmb	sy
    8cd6:	2300      	movs	r3, #0
    8cd8:	6003      	str	r3, [r0, #0]
    8cda:	4618      	mov	r0, r3
    8cdc:	4770      	bx	lr
    8cde:	4803      	ldr	r0, [pc, #12]	; (8cec <mutex_unlock+0x24>)
    8ce0:	4770      	bx	lr
    8ce2:	4803      	ldr	r0, [pc, #12]	; (8cf0 <mutex_unlock+0x28>)
    8ce4:	4770      	bx	lr
    8ce6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8cea:	4770      	bx	lr
    8cec:	ffff8fea 	.word	0xffff8fea
    8cf0:	ffff8fe9 	.word	0xffff8fe9

00008cf4 <mutex_init>:
    8cf4:	b510      	push	{r4, lr}
    8cf6:	4604      	mov	r4, r0
    8cf8:	b120      	cbz	r0, 8d04 <mutex_init+0x10>
    8cfa:	2200      	movs	r2, #0
    8cfc:	2311      	movs	r3, #17
    8cfe:	6022      	str	r2, [r4, #0]
    8d00:	6063      	str	r3, [r4, #4]
    8d02:	bd10      	pop	{r4, pc}
    8d04:	4801      	ldr	r0, [pc, #4]	; (8d0c <mutex_init+0x18>)
    8d06:	f7ff ffa3 	bl	8c50 <CC_PalAbort>
    8d0a:	e7f6      	b.n	8cfa <mutex_init+0x6>
    8d0c:	0000a078 	.word	0x0000a078

00008d10 <mutex_lock>:
    8d10:	b1c0      	cbz	r0, 8d44 <mutex_lock+0x34>
    8d12:	6843      	ldr	r3, [r0, #4]
    8d14:	b1a3      	cbz	r3, 8d40 <mutex_lock+0x30>
    8d16:	06db      	lsls	r3, r3, #27
    8d18:	d510      	bpl.n	8d3c <mutex_lock+0x2c>
    8d1a:	2201      	movs	r2, #1
    8d1c:	f3bf 8f5b 	dmb	ish
    8d20:	e850 3f00 	ldrex	r3, [r0]
    8d24:	e840 2100 	strex	r1, r2, [r0]
    8d28:	2900      	cmp	r1, #0
    8d2a:	d1f9      	bne.n	8d20 <mutex_lock+0x10>
    8d2c:	f3bf 8f5b 	dmb	ish
    8d30:	2b01      	cmp	r3, #1
    8d32:	d0f3      	beq.n	8d1c <mutex_lock+0xc>
    8d34:	f3bf 8f5f 	dmb	sy
    8d38:	2000      	movs	r0, #0
    8d3a:	4770      	bx	lr
    8d3c:	4803      	ldr	r0, [pc, #12]	; (8d4c <mutex_lock+0x3c>)
    8d3e:	4770      	bx	lr
    8d40:	4803      	ldr	r0, [pc, #12]	; (8d50 <mutex_lock+0x40>)
    8d42:	4770      	bx	lr
    8d44:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8d48:	4770      	bx	lr
    8d4a:	bf00      	nop
    8d4c:	ffff8fe9 	.word	0xffff8fe9
    8d50:	ffff8fea 	.word	0xffff8fea

00008d54 <nrf_cc3xx_platform_set_mutexes>:
    8d54:	b570      	push	{r4, r5, r6, lr}
    8d56:	e9d0 2300 	ldrd	r2, r3, [r0]
    8d5a:	4c13      	ldr	r4, [pc, #76]	; (8da8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8d5c:	4d13      	ldr	r5, [pc, #76]	; (8dac <nrf_cc3xx_platform_set_mutexes+0x58>)
    8d5e:	e9c4 2300 	strd	r2, r3, [r4]
    8d62:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8d66:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8d6a:	4b11      	ldr	r3, [pc, #68]	; (8db0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8d6c:	6808      	ldr	r0, [r1, #0]
    8d6e:	6018      	str	r0, [r3, #0]
    8d70:	6848      	ldr	r0, [r1, #4]
    8d72:	6058      	str	r0, [r3, #4]
    8d74:	6888      	ldr	r0, [r1, #8]
    8d76:	6098      	str	r0, [r3, #8]
    8d78:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8d7c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    8d80:	60de      	str	r6, [r3, #12]
    8d82:	6118      	str	r0, [r3, #16]
    8d84:	06cb      	lsls	r3, r1, #27
    8d86:	d50d      	bpl.n	8da4 <nrf_cc3xx_platform_set_mutexes+0x50>
    8d88:	2300      	movs	r3, #0
    8d8a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    8d8e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    8d92:	f505 7088 	add.w	r0, r5, #272	; 0x110
    8d96:	4790      	blx	r2
    8d98:	6823      	ldr	r3, [r4, #0]
    8d9a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    8d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8da2:	4718      	bx	r3
    8da4:	bd70      	pop	{r4, r5, r6, pc}
    8da6:	bf00      	nop
    8da8:	2000019c 	.word	0x2000019c
    8dac:	20000c80 	.word	0x20000c80
    8db0:	200001ac 	.word	0x200001ac

00008db4 <CC_LibInitNoRng>:
    8db4:	b510      	push	{r4, lr}
    8db6:	f000 f833 	bl	8e20 <CC_HalInit>
    8dba:	b120      	cbz	r0, 8dc6 <CC_LibInitNoRng+0x12>
    8dbc:	2403      	movs	r4, #3
    8dbe:	f000 f867 	bl	8e90 <CC_PalTerminate>
    8dc2:	4620      	mov	r0, r4
    8dc4:	bd10      	pop	{r4, pc}
    8dc6:	f000 f835 	bl	8e34 <CC_PalInit>
    8dca:	b990      	cbnz	r0, 8df2 <CC_LibInitNoRng+0x3e>
    8dcc:	f000 f8b0 	bl	8f30 <CC_PalPowerSaveModeSelect>
    8dd0:	b990      	cbnz	r0, 8df8 <CC_LibInitNoRng+0x44>
    8dd2:	4b0f      	ldr	r3, [pc, #60]	; (8e10 <CC_LibInitNoRng+0x5c>)
    8dd4:	681b      	ldr	r3, [r3, #0]
    8dd6:	0e1b      	lsrs	r3, r3, #24
    8dd8:	2bf0      	cmp	r3, #240	; 0xf0
    8dda:	d108      	bne.n	8dee <CC_LibInitNoRng+0x3a>
    8ddc:	4a0d      	ldr	r2, [pc, #52]	; (8e14 <CC_LibInitNoRng+0x60>)
    8dde:	4b0e      	ldr	r3, [pc, #56]	; (8e18 <CC_LibInitNoRng+0x64>)
    8de0:	6812      	ldr	r2, [r2, #0]
    8de2:	429a      	cmp	r2, r3
    8de4:	d00a      	beq.n	8dfc <CC_LibInitNoRng+0x48>
    8de6:	2407      	movs	r4, #7
    8de8:	f000 f81c 	bl	8e24 <CC_HalTerminate>
    8dec:	e7e7      	b.n	8dbe <CC_LibInitNoRng+0xa>
    8dee:	2406      	movs	r4, #6
    8df0:	e7fa      	b.n	8de8 <CC_LibInitNoRng+0x34>
    8df2:	2404      	movs	r4, #4
    8df4:	4620      	mov	r0, r4
    8df6:	bd10      	pop	{r4, pc}
    8df8:	2400      	movs	r4, #0
    8dfa:	e7f5      	b.n	8de8 <CC_LibInitNoRng+0x34>
    8dfc:	2001      	movs	r0, #1
    8dfe:	f000 f897 	bl	8f30 <CC_PalPowerSaveModeSelect>
    8e02:	4604      	mov	r4, r0
    8e04:	2800      	cmp	r0, #0
    8e06:	d1f7      	bne.n	8df8 <CC_LibInitNoRng+0x44>
    8e08:	4b04      	ldr	r3, [pc, #16]	; (8e1c <CC_LibInitNoRng+0x68>)
    8e0a:	6018      	str	r0, [r3, #0]
    8e0c:	e7d9      	b.n	8dc2 <CC_LibInitNoRng+0xe>
    8e0e:	bf00      	nop
    8e10:	5002b928 	.word	0x5002b928
    8e14:	5002ba24 	.word	0x5002ba24
    8e18:	20e00000 	.word	0x20e00000
    8e1c:	5002ba0c 	.word	0x5002ba0c

00008e20 <CC_HalInit>:
    8e20:	2000      	movs	r0, #0
    8e22:	4770      	bx	lr

00008e24 <CC_HalTerminate>:
    8e24:	2000      	movs	r0, #0
    8e26:	4770      	bx	lr

00008e28 <CC_HalMaskInterrupt>:
    8e28:	4b01      	ldr	r3, [pc, #4]	; (8e30 <CC_HalMaskInterrupt+0x8>)
    8e2a:	6018      	str	r0, [r3, #0]
    8e2c:	4770      	bx	lr
    8e2e:	bf00      	nop
    8e30:	5002ba04 	.word	0x5002ba04

00008e34 <CC_PalInit>:
    8e34:	b510      	push	{r4, lr}
    8e36:	4811      	ldr	r0, [pc, #68]	; (8e7c <CC_PalInit+0x48>)
    8e38:	f000 f848 	bl	8ecc <CC_PalMutexCreate>
    8e3c:	b100      	cbz	r0, 8e40 <CC_PalInit+0xc>
    8e3e:	bd10      	pop	{r4, pc}
    8e40:	480f      	ldr	r0, [pc, #60]	; (8e80 <CC_PalInit+0x4c>)
    8e42:	f000 f843 	bl	8ecc <CC_PalMutexCreate>
    8e46:	2800      	cmp	r0, #0
    8e48:	d1f9      	bne.n	8e3e <CC_PalInit+0xa>
    8e4a:	4c0e      	ldr	r4, [pc, #56]	; (8e84 <CC_PalInit+0x50>)
    8e4c:	4620      	mov	r0, r4
    8e4e:	f000 f83d 	bl	8ecc <CC_PalMutexCreate>
    8e52:	2800      	cmp	r0, #0
    8e54:	d1f3      	bne.n	8e3e <CC_PalInit+0xa>
    8e56:	4b0c      	ldr	r3, [pc, #48]	; (8e88 <CC_PalInit+0x54>)
    8e58:	480c      	ldr	r0, [pc, #48]	; (8e8c <CC_PalInit+0x58>)
    8e5a:	601c      	str	r4, [r3, #0]
    8e5c:	f000 f836 	bl	8ecc <CC_PalMutexCreate>
    8e60:	4601      	mov	r1, r0
    8e62:	2800      	cmp	r0, #0
    8e64:	d1eb      	bne.n	8e3e <CC_PalInit+0xa>
    8e66:	f000 f82d 	bl	8ec4 <CC_PalDmaInit>
    8e6a:	4604      	mov	r4, r0
    8e6c:	b108      	cbz	r0, 8e72 <CC_PalInit+0x3e>
    8e6e:	4620      	mov	r0, r4
    8e70:	bd10      	pop	{r4, pc}
    8e72:	f000 f83f 	bl	8ef4 <CC_PalPowerSaveModeInit>
    8e76:	4620      	mov	r0, r4
    8e78:	e7fa      	b.n	8e70 <CC_PalInit+0x3c>
    8e7a:	bf00      	nop
    8e7c:	200001e4 	.word	0x200001e4
    8e80:	200001d8 	.word	0x200001d8
    8e84:	200001e0 	.word	0x200001e0
    8e88:	200001e8 	.word	0x200001e8
    8e8c:	200001dc 	.word	0x200001dc

00008e90 <CC_PalTerminate>:
    8e90:	b508      	push	{r3, lr}
    8e92:	4808      	ldr	r0, [pc, #32]	; (8eb4 <CC_PalTerminate+0x24>)
    8e94:	f000 f824 	bl	8ee0 <CC_PalMutexDestroy>
    8e98:	4807      	ldr	r0, [pc, #28]	; (8eb8 <CC_PalTerminate+0x28>)
    8e9a:	f000 f821 	bl	8ee0 <CC_PalMutexDestroy>
    8e9e:	4807      	ldr	r0, [pc, #28]	; (8ebc <CC_PalTerminate+0x2c>)
    8ea0:	f000 f81e 	bl	8ee0 <CC_PalMutexDestroy>
    8ea4:	4806      	ldr	r0, [pc, #24]	; (8ec0 <CC_PalTerminate+0x30>)
    8ea6:	f000 f81b 	bl	8ee0 <CC_PalMutexDestroy>
    8eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8eae:	f000 b80b 	b.w	8ec8 <CC_PalDmaTerminate>
    8eb2:	bf00      	nop
    8eb4:	200001e4 	.word	0x200001e4
    8eb8:	200001d8 	.word	0x200001d8
    8ebc:	200001e0 	.word	0x200001e0
    8ec0:	200001dc 	.word	0x200001dc

00008ec4 <CC_PalDmaInit>:
    8ec4:	2000      	movs	r0, #0
    8ec6:	4770      	bx	lr

00008ec8 <CC_PalDmaTerminate>:
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop

00008ecc <CC_PalMutexCreate>:
    8ecc:	b508      	push	{r3, lr}
    8ece:	4b03      	ldr	r3, [pc, #12]	; (8edc <CC_PalMutexCreate+0x10>)
    8ed0:	6802      	ldr	r2, [r0, #0]
    8ed2:	681b      	ldr	r3, [r3, #0]
    8ed4:	6810      	ldr	r0, [r2, #0]
    8ed6:	4798      	blx	r3
    8ed8:	2000      	movs	r0, #0
    8eda:	bd08      	pop	{r3, pc}
    8edc:	2000019c 	.word	0x2000019c

00008ee0 <CC_PalMutexDestroy>:
    8ee0:	b508      	push	{r3, lr}
    8ee2:	4b03      	ldr	r3, [pc, #12]	; (8ef0 <CC_PalMutexDestroy+0x10>)
    8ee4:	6802      	ldr	r2, [r0, #0]
    8ee6:	685b      	ldr	r3, [r3, #4]
    8ee8:	6810      	ldr	r0, [r2, #0]
    8eea:	4798      	blx	r3
    8eec:	2000      	movs	r0, #0
    8eee:	bd08      	pop	{r3, pc}
    8ef0:	2000019c 	.word	0x2000019c

00008ef4 <CC_PalPowerSaveModeInit>:
    8ef4:	b570      	push	{r4, r5, r6, lr}
    8ef6:	4c09      	ldr	r4, [pc, #36]	; (8f1c <CC_PalPowerSaveModeInit+0x28>)
    8ef8:	4d09      	ldr	r5, [pc, #36]	; (8f20 <CC_PalPowerSaveModeInit+0x2c>)
    8efa:	6920      	ldr	r0, [r4, #16]
    8efc:	68ab      	ldr	r3, [r5, #8]
    8efe:	4798      	blx	r3
    8f00:	b118      	cbz	r0, 8f0a <CC_PalPowerSaveModeInit+0x16>
    8f02:	4b08      	ldr	r3, [pc, #32]	; (8f24 <CC_PalPowerSaveModeInit+0x30>)
    8f04:	4808      	ldr	r0, [pc, #32]	; (8f28 <CC_PalPowerSaveModeInit+0x34>)
    8f06:	685b      	ldr	r3, [r3, #4]
    8f08:	4798      	blx	r3
    8f0a:	4a08      	ldr	r2, [pc, #32]	; (8f2c <CC_PalPowerSaveModeInit+0x38>)
    8f0c:	68eb      	ldr	r3, [r5, #12]
    8f0e:	6920      	ldr	r0, [r4, #16]
    8f10:	2100      	movs	r1, #0
    8f12:	6011      	str	r1, [r2, #0]
    8f14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f18:	4718      	bx	r3
    8f1a:	bf00      	nop
    8f1c:	200001ac 	.word	0x200001ac
    8f20:	2000019c 	.word	0x2000019c
    8f24:	2000018c 	.word	0x2000018c
    8f28:	0000a09c 	.word	0x0000a09c
    8f2c:	20000c78 	.word	0x20000c78

00008f30 <CC_PalPowerSaveModeSelect>:
    8f30:	b570      	push	{r4, r5, r6, lr}
    8f32:	4d1a      	ldr	r5, [pc, #104]	; (8f9c <CC_PalPowerSaveModeSelect+0x6c>)
    8f34:	4e1a      	ldr	r6, [pc, #104]	; (8fa0 <CC_PalPowerSaveModeSelect+0x70>)
    8f36:	4604      	mov	r4, r0
    8f38:	68b2      	ldr	r2, [r6, #8]
    8f3a:	6928      	ldr	r0, [r5, #16]
    8f3c:	4790      	blx	r2
    8f3e:	b9f0      	cbnz	r0, 8f7e <CC_PalPowerSaveModeSelect+0x4e>
    8f40:	b15c      	cbz	r4, 8f5a <CC_PalPowerSaveModeSelect+0x2a>
    8f42:	4c18      	ldr	r4, [pc, #96]	; (8fa4 <CC_PalPowerSaveModeSelect+0x74>)
    8f44:	6823      	ldr	r3, [r4, #0]
    8f46:	b1ab      	cbz	r3, 8f74 <CC_PalPowerSaveModeSelect+0x44>
    8f48:	2b01      	cmp	r3, #1
    8f4a:	d01a      	beq.n	8f82 <CC_PalPowerSaveModeSelect+0x52>
    8f4c:	3b01      	subs	r3, #1
    8f4e:	6023      	str	r3, [r4, #0]
    8f50:	6928      	ldr	r0, [r5, #16]
    8f52:	68f3      	ldr	r3, [r6, #12]
    8f54:	4798      	blx	r3
    8f56:	2000      	movs	r0, #0
    8f58:	bd70      	pop	{r4, r5, r6, pc}
    8f5a:	4c12      	ldr	r4, [pc, #72]	; (8fa4 <CC_PalPowerSaveModeSelect+0x74>)
    8f5c:	6821      	ldr	r1, [r4, #0]
    8f5e:	b939      	cbnz	r1, 8f70 <CC_PalPowerSaveModeSelect+0x40>
    8f60:	4b11      	ldr	r3, [pc, #68]	; (8fa8 <CC_PalPowerSaveModeSelect+0x78>)
    8f62:	4a12      	ldr	r2, [pc, #72]	; (8fac <CC_PalPowerSaveModeSelect+0x7c>)
    8f64:	2001      	movs	r0, #1
    8f66:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    8f6a:	6813      	ldr	r3, [r2, #0]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d1fc      	bne.n	8f6a <CC_PalPowerSaveModeSelect+0x3a>
    8f70:	3101      	adds	r1, #1
    8f72:	6021      	str	r1, [r4, #0]
    8f74:	68f3      	ldr	r3, [r6, #12]
    8f76:	6928      	ldr	r0, [r5, #16]
    8f78:	4798      	blx	r3
    8f7a:	2000      	movs	r0, #0
    8f7c:	bd70      	pop	{r4, r5, r6, pc}
    8f7e:	480c      	ldr	r0, [pc, #48]	; (8fb0 <CC_PalPowerSaveModeSelect+0x80>)
    8f80:	bd70      	pop	{r4, r5, r6, pc}
    8f82:	4a0a      	ldr	r2, [pc, #40]	; (8fac <CC_PalPowerSaveModeSelect+0x7c>)
    8f84:	6813      	ldr	r3, [r2, #0]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d1fc      	bne.n	8f84 <CC_PalPowerSaveModeSelect+0x54>
    8f8a:	4a07      	ldr	r2, [pc, #28]	; (8fa8 <CC_PalPowerSaveModeSelect+0x78>)
    8f8c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8f90:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8f94:	f7ff ff48 	bl	8e28 <CC_HalMaskInterrupt>
    8f98:	6823      	ldr	r3, [r4, #0]
    8f9a:	e7d7      	b.n	8f4c <CC_PalPowerSaveModeSelect+0x1c>
    8f9c:	200001ac 	.word	0x200001ac
    8fa0:	2000019c 	.word	0x2000019c
    8fa4:	20000c78 	.word	0x20000c78
    8fa8:	5002a000 	.word	0x5002a000
    8fac:	5002b910 	.word	0x5002b910
    8fb0:	ffff8fe9 	.word	0xffff8fe9

00008fb4 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8fb4:	4040      	eors	r0, r0
    8fb6:	f380 8811 	msr	BASEPRI, r0
    8fba:	f04f 0004 	mov.w	r0, #4
    8fbe:	df02      	svc	2
}
    8fc0:	4770      	bx	lr

00008fc2 <encode_uint>:
{
    8fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fc6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8fc8:	78d3      	ldrb	r3, [r2, #3]
{
    8fca:	4614      	mov	r4, r2
	switch (specifier) {
    8fcc:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8fce:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8fd2:	4606      	mov	r6, r0
    8fd4:	460f      	mov	r7, r1
    8fd6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8fd8:	d02d      	beq.n	9036 <encode_uint+0x74>
    8fda:	d828      	bhi.n	902e <encode_uint+0x6c>
		return 16;
    8fdc:	2b58      	cmp	r3, #88	; 0x58
    8fde:	bf14      	ite	ne
    8fe0:	250a      	movne	r5, #10
    8fe2:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8fe4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8fe8:	46aa      	mov	sl, r5
    8fea:	f04f 0b00 	mov.w	fp, #0
    8fee:	4652      	mov	r2, sl
    8ff0:	465b      	mov	r3, fp
    8ff2:	4630      	mov	r0, r6
    8ff4:	4639      	mov	r1, r7
    8ff6:	f7f7 fc79 	bl	8ec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ffa:	2a09      	cmp	r2, #9
    8ffc:	b2d3      	uxtb	r3, r2
    8ffe:	d81f      	bhi.n	9040 <encode_uint+0x7e>
    9000:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    9002:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9004:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    9006:	bf08      	it	eq
    9008:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    900a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    900e:	d301      	bcc.n	9014 <encode_uint+0x52>
    9010:	45c8      	cmp	r8, r9
    9012:	d812      	bhi.n	903a <encode_uint+0x78>
	if (conv->flag_hash) {
    9014:	7823      	ldrb	r3, [r4, #0]
    9016:	069b      	lsls	r3, r3, #26
    9018:	d505      	bpl.n	9026 <encode_uint+0x64>
		if (radix == 8) {
    901a:	2d08      	cmp	r5, #8
    901c:	d116      	bne.n	904c <encode_uint+0x8a>
			conv->altform_0 = true;
    901e:	78a3      	ldrb	r3, [r4, #2]
    9020:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9024:	70a3      	strb	r3, [r4, #2]
}
    9026:	4640      	mov	r0, r8
    9028:	b003      	add	sp, #12
    902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    902e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    9032:	2b70      	cmp	r3, #112	; 0x70
    9034:	e7d3      	b.n	8fde <encode_uint+0x1c>
	switch (specifier) {
    9036:	2508      	movs	r5, #8
    9038:	e7d4      	b.n	8fe4 <encode_uint+0x22>
		value /= radix;
    903a:	4606      	mov	r6, r0
    903c:	460f      	mov	r7, r1
    903e:	e7d6      	b.n	8fee <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9040:	9a01      	ldr	r2, [sp, #4]
    9042:	2a19      	cmp	r2, #25
    9044:	bf94      	ite	ls
    9046:	3337      	addls	r3, #55	; 0x37
    9048:	3357      	addhi	r3, #87	; 0x57
    904a:	e7da      	b.n	9002 <encode_uint+0x40>
		} else if (radix == 16) {
    904c:	2d10      	cmp	r5, #16
    904e:	d1ea      	bne.n	9026 <encode_uint+0x64>
			conv->altform_0c = true;
    9050:	78a3      	ldrb	r3, [r4, #2]
    9052:	f043 0310 	orr.w	r3, r3, #16
    9056:	e7e5      	b.n	9024 <encode_uint+0x62>

00009058 <outs>:
{
    9058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    905c:	4607      	mov	r7, r0
    905e:	4688      	mov	r8, r1
    9060:	4615      	mov	r5, r2
    9062:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9064:	4614      	mov	r4, r2
    9066:	42b4      	cmp	r4, r6
    9068:	eba4 0005 	sub.w	r0, r4, r5
    906c:	d302      	bcc.n	9074 <outs+0x1c>
    906e:	b93e      	cbnz	r6, 9080 <outs+0x28>
    9070:	7823      	ldrb	r3, [r4, #0]
    9072:	b12b      	cbz	r3, 9080 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    9074:	f814 0b01 	ldrb.w	r0, [r4], #1
    9078:	4641      	mov	r1, r8
    907a:	47b8      	blx	r7
		if (rc < 0) {
    907c:	2800      	cmp	r0, #0
    907e:	daf2      	bge.n	9066 <outs+0xe>
}
    9080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009084 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    9084:	4770      	bx	lr

00009086 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    9086:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    908a:	8840      	ldrh	r0, [r0, #2]
}
    908c:	0840      	lsrs	r0, r0, #1
    908e:	4770      	bx	lr

00009090 <free_list_add>:
{
    9090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9092:	4603      	mov	r3, r0
    9094:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
    9096:	f7ff fff6 	bl	9086 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    909a:	fab0 f080 	clz	r0, r0
    909e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    90a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    90a6:	00ca      	lsls	r2, r1, #3
    90a8:	f8dc 6010 	ldr.w	r6, [ip, #16]
    90ac:	1d17      	adds	r7, r2, #4
    90ae:	b28d      	uxth	r5, r1
    90b0:	3206      	adds	r2, #6
    90b2:	b956      	cbnz	r6, 90ca <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    90b4:	2101      	movs	r1, #1
    90b6:	fa01 f000 	lsl.w	r0, r1, r0
    90ba:	68d9      	ldr	r1, [r3, #12]
    90bc:	4301      	orrs	r1, r0
    90be:	60d9      	str	r1, [r3, #12]
		b->next = c;
    90c0:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    90c4:	53dd      	strh	r5, [r3, r7]
    90c6:	529d      	strh	r5, [r3, r2]
}
    90c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    90ca:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    90cc:	3104      	adds	r1, #4
    90ce:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    90d0:	53d8      	strh	r0, [r3, r7]
    90d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    90d6:	529e      	strh	r6, [r3, r2]
    90d8:	80c5      	strh	r5, [r0, #6]
    90da:	525d      	strh	r5, [r3, r1]
    90dc:	e7f4      	b.n	90c8 <free_list_add+0x38>

000090de <free_list_remove_bidx>:
{
    90de:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    90e0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    90e4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    90e6:	4299      	cmp	r1, r3
    90e8:	f102 0104 	add.w	r1, r2, #4
    90ec:	d10a      	bne.n	9104 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    90ee:	2301      	movs	r3, #1
    90f0:	fa03 f202 	lsl.w	r2, r3, r2
    90f4:	68c3      	ldr	r3, [r0, #12]
    90f6:	ea23 0302 	bic.w	r3, r3, r2
    90fa:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    90fc:	2300      	movs	r3, #0
    90fe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    9102:	bd10      	pop	{r4, pc}
    9104:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    9106:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    910a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    910e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    9112:	80cb      	strh	r3, [r1, #6]
    9114:	8082      	strh	r2, [r0, #4]
}
    9116:	e7f4      	b.n	9102 <free_list_remove_bidx+0x24>

00009118 <free_list_remove>:
{
    9118:	b510      	push	{r4, lr}
    911a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    911c:	f7ff ffb3 	bl	9086 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9120:	fab0 f280 	clz	r2, r0
}
    9124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
    9128:	f1c2 021f 	rsb	r2, r2, #31
    912c:	4618      	mov	r0, r3
    912e:	f7ff bfd6 	b.w	90de <free_list_remove_bidx>

00009132 <alloc_chunk>:
{
    9132:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9136:	fab1 f581 	clz	r5, r1
    913a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    913e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    9142:	4603      	mov	r3, r0
	if (b->next) {
    9144:	693a      	ldr	r2, [r7, #16]
{
    9146:	460e      	mov	r6, r1
	if (b->next) {
    9148:	b1ca      	cbz	r2, 917e <alloc_chunk+0x4c>
    914a:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
    914e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    9150:	4618      	mov	r0, r3
    9152:	4621      	mov	r1, r4
    9154:	f7ff ff97 	bl	9086 <chunk_size>
    9158:	42b0      	cmp	r0, r6
    915a:	d307      	bcc.n	916c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    915c:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    915e:	4621      	mov	r1, r4
    9160:	4618      	mov	r0, r3
    9162:	f7ff ffbc 	bl	90de <free_list_remove_bidx>
}
    9166:	4620      	mov	r0, r4
    9168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    916c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    9170:	f1b8 0801 	subs.w	r8, r8, #1
    9174:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
    9176:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
    9178:	d001      	beq.n	917e <alloc_chunk+0x4c>
    917a:	428a      	cmp	r2, r1
    917c:	d1e7      	bne.n	914e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    917e:	68d9      	ldr	r1, [r3, #12]
    9180:	f1c5 0520 	rsb	r5, r5, #32
    9184:	f04f 34ff 	mov.w	r4, #4294967295
    9188:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
    918a:	400c      	ands	r4, r1
    918c:	d0eb      	beq.n	9166 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    918e:	fa94 f2a4 	rbit	r2, r4
    9192:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9196:	1d11      	adds	r1, r2, #4
    9198:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    919c:	e7df      	b.n	915e <alloc_chunk+0x2c>

0000919e <merge_chunks>:
{
    919e:	b538      	push	{r3, r4, r5, lr}
    91a0:	4603      	mov	r3, r0
    91a2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    91a4:	f7ff ff6f 	bl	9086 <chunk_size>
    91a8:	4611      	mov	r1, r2
    91aa:	4604      	mov	r4, r0
    91ac:	4618      	mov	r0, r3
    91ae:	f7ff ff6a 	bl	9086 <chunk_size>
    91b2:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
    91b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    91b8:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
    91ba:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
    91bc:	4618      	mov	r0, r3
    91be:	4611      	mov	r1, r2
    91c0:	f7ff ff61 	bl	9086 <chunk_size>
	void *cmem = &buf[c];
    91c4:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    91c6:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
    91ca:	bd38      	pop	{r3, r4, r5, pc}

000091cc <split_chunks>:
{
    91cc:	b538      	push	{r3, r4, r5, lr}
    91ce:	4603      	mov	r3, r0
    91d0:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
    91d2:	f7ff ff58 	bl	9086 <chunk_size>
	chunksz_t lsz = rc - lc;
    91d6:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    91d8:	1aa5      	subs	r5, r4, r2
    91da:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    91de:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    91e0:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    91e2:	8060      	strh	r0, [r4, #2]
    91e4:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    91e8:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    91ea:	8044      	strh	r4, [r0, #2]
    91ec:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    91f0:	4618      	mov	r0, r3
    91f2:	4611      	mov	r1, r2
    91f4:	f7ff ff47 	bl	9086 <chunk_size>
	void *cmem = &buf[c];
    91f8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
    91fa:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
    91fe:	bd38      	pop	{r3, r4, r5, pc}

00009200 <free_chunk>:
{
    9200:	b538      	push	{r3, r4, r5, lr}
    9202:	4605      	mov	r5, r0
    9204:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
    9206:	f7ff ff3e 	bl	9086 <chunk_size>
    920a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    920c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9210:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    9212:	07da      	lsls	r2, r3, #31
    9214:	d40a      	bmi.n	922c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    9216:	4628      	mov	r0, r5
    9218:	f7ff ff7e 	bl	9118 <free_list_remove>
	return c + chunk_size(h, c);
    921c:	4621      	mov	r1, r4
    921e:	4628      	mov	r0, r5
    9220:	f7ff ff31 	bl	9086 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    9224:	1822      	adds	r2, r4, r0
    9226:	4628      	mov	r0, r5
    9228:	f7ff ffb9 	bl	919e <merge_chunks>
		return ((uint16_t *)cmem)[f];
    922c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9230:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    9232:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9236:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    9238:	07db      	lsls	r3, r3, #31
    923a:	d40c      	bmi.n	9256 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    923c:	4628      	mov	r0, r5
    923e:	f7ff ff6b 	bl	9118 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    9242:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    9246:	4622      	mov	r2, r4
    9248:	1a61      	subs	r1, r4, r1
    924a:	4628      	mov	r0, r5
    924c:	f7ff ffa7 	bl	919e <merge_chunks>
    9250:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9254:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    9256:	4621      	mov	r1, r4
    9258:	4628      	mov	r0, r5
}
    925a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    925e:	f7ff bf17 	b.w	9090 <free_list_add>

00009262 <sys_heap_alloc>:
{
    9262:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    9264:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    9266:	b909      	cbnz	r1, 926c <sys_heap_alloc+0xa>
		return NULL;
    9268:	2000      	movs	r0, #0
}
    926a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    926c:	68ab      	ldr	r3, [r5, #8]
    926e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    9272:	d9f9      	bls.n	9268 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9274:	310b      	adds	r1, #11
    9276:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9278:	4621      	mov	r1, r4
    927a:	4628      	mov	r0, r5
    927c:	f7ff ff59 	bl	9132 <alloc_chunk>
	if (c == 0U) {
    9280:	4606      	mov	r6, r0
    9282:	2800      	cmp	r0, #0
    9284:	d0f0      	beq.n	9268 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    9286:	4601      	mov	r1, r0
    9288:	4628      	mov	r0, r5
    928a:	f7ff fefc 	bl	9086 <chunk_size>
    928e:	42a0      	cmp	r0, r4
    9290:	d908      	bls.n	92a4 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
    9292:	4434      	add	r4, r6
    9294:	4628      	mov	r0, r5
    9296:	4622      	mov	r2, r4
    9298:	f7ff ff98 	bl	91cc <split_chunks>
		free_list_add(h, c + chunk_sz);
    929c:	4621      	mov	r1, r4
    929e:	4628      	mov	r0, r5
    92a0:	f7ff fef6 	bl	9090 <free_list_add>
	void *cmem = &buf[c];
    92a4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    92a8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    92aa:	8853      	ldrh	r3, [r2, #2]
    92ac:	f043 0301 	orr.w	r3, r3, #1
    92b0:	8053      	strh	r3, [r2, #2]
    92b2:	3004      	adds	r0, #4
	return chunk_mem(h, c);
    92b4:	e7d9      	b.n	926a <sys_heap_alloc+0x8>

000092b6 <sys_notify_validate>:
	if (notify == NULL) {
    92b6:	4603      	mov	r3, r0
    92b8:	b140      	cbz	r0, 92cc <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    92ba:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    92bc:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    92c0:	2a02      	cmp	r2, #2
    92c2:	d006      	beq.n	92d2 <sys_notify_validate+0x1c>
    92c4:	2a03      	cmp	r2, #3
    92c6:	d004      	beq.n	92d2 <sys_notify_validate+0x1c>
    92c8:	2a01      	cmp	r2, #1
    92ca:	d005      	beq.n	92d8 <sys_notify_validate+0x22>
		return -EINVAL;
    92cc:	f06f 0015 	mvn.w	r0, #21
}
    92d0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    92d2:	681a      	ldr	r2, [r3, #0]
    92d4:	2a00      	cmp	r2, #0
    92d6:	d0f9      	beq.n	92cc <sys_notify_validate+0x16>
		notify->result = 0;
    92d8:	2000      	movs	r0, #0
    92da:	6098      	str	r0, [r3, #8]
    92dc:	4770      	bx	lr

000092de <abort_function>:
{
    92de:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    92e0:	2000      	movs	r0, #0
    92e2:	f7f9 f8b1 	bl	2448 <sys_reboot>

000092e6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    92e6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    92e8:	f013 0307 	ands.w	r3, r3, #7
    92ec:	d105      	bne.n	92fa <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    92ee:	6803      	ldr	r3, [r0, #0]
    92f0:	2b00      	cmp	r3, #0
		evt = EVT_START;
    92f2:	bf0c      	ite	eq
    92f4:	2000      	moveq	r0, #0
    92f6:	2003      	movne	r0, #3
    92f8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    92fa:	2b02      	cmp	r3, #2
    92fc:	d105      	bne.n	930a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    92fe:	8bc3      	ldrh	r3, [r0, #30]
    9300:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    9302:	bf14      	ite	ne
    9304:	2000      	movne	r0, #0
    9306:	2004      	moveq	r0, #4
    9308:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    930a:	2b01      	cmp	r3, #1
    930c:	d105      	bne.n	931a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    930e:	6803      	ldr	r3, [r0, #0]
    9310:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    9312:	bf0c      	ite	eq
    9314:	2000      	moveq	r0, #0
    9316:	2005      	movne	r0, #5
    9318:	4770      	bx	lr
	int evt = EVT_NOP;
    931a:	2000      	movs	r0, #0
}
    931c:	4770      	bx	lr

0000931e <notify_one>:
{
    931e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9322:	460d      	mov	r5, r1
    9324:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9326:	4619      	mov	r1, r3
    9328:	1d28      	adds	r0, r5, #4
{
    932a:	4690      	mov	r8, r2
    932c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    932e:	f7f8 fb6b 	bl	1a08 <sys_notify_finalize>
	if (cb) {
    9332:	4604      	mov	r4, r0
    9334:	b138      	cbz	r0, 9346 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9336:	4633      	mov	r3, r6
    9338:	4642      	mov	r2, r8
    933a:	4629      	mov	r1, r5
    933c:	4638      	mov	r0, r7
    933e:	46a4      	mov	ip, r4
}
    9340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9344:	4760      	bx	ip
}
    9346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000934a <validate_args>:
{
    934a:	b510      	push	{r4, lr}
    934c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    934e:	b140      	cbz	r0, 9362 <validate_args+0x18>
    9350:	b139      	cbz	r1, 9362 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9352:	1d08      	adds	r0, r1, #4
    9354:	f7ff ffaf 	bl	92b6 <sys_notify_validate>
	if ((rv == 0)
    9358:	b928      	cbnz	r0, 9366 <validate_args+0x1c>
	    && ((cli->notify.flags
    935a:	68a3      	ldr	r3, [r4, #8]
    935c:	f033 0303 	bics.w	r3, r3, #3
    9360:	d001      	beq.n	9366 <validate_args+0x1c>
		rv = -EINVAL;
    9362:	f06f 0015 	mvn.w	r0, #21
}
    9366:	bd10      	pop	{r4, pc}

00009368 <onoff_manager_init>:
{
    9368:	b538      	push	{r3, r4, r5, lr}
    936a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    936c:	4605      	mov	r5, r0
    936e:	b158      	cbz	r0, 9388 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9370:	b151      	cbz	r1, 9388 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9372:	680b      	ldr	r3, [r1, #0]
    9374:	b143      	cbz	r3, 9388 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9376:	684b      	ldr	r3, [r1, #4]
    9378:	b133      	cbz	r3, 9388 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    937a:	2220      	movs	r2, #32
    937c:	2100      	movs	r1, #0
    937e:	f000 f85f 	bl	9440 <memset>
    9382:	612c      	str	r4, [r5, #16]
	return 0;
    9384:	2000      	movs	r0, #0
}
    9386:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9388:	f06f 0015 	mvn.w	r0, #21
    938c:	e7fb      	b.n	9386 <onoff_manager_init+0x1e>

0000938e <arch_printk_char_out>:
}
    938e:	2000      	movs	r0, #0
    9390:	4770      	bx	lr

00009392 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    9392:	b40f      	push	{r0, r1, r2, r3}
    9394:	b507      	push	{r0, r1, r2, lr}
    9396:	a904      	add	r1, sp, #16
    9398:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    939c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    939e:	f7f9 f845 	bl	242c <vprintk>
	}
	va_end(ap);
}
    93a2:	b003      	add	sp, #12
    93a4:	f85d eb04 	ldr.w	lr, [sp], #4
    93a8:	b004      	add	sp, #16
    93aa:	4770      	bx	lr

000093ac <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    93ac:	2200      	movs	r2, #0
    93ae:	e9c0 2200 	strd	r2, r2, [r0]
    93b2:	6082      	str	r2, [r0, #8]
}
    93b4:	4770      	bx	lr

000093b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    93b6:	4604      	mov	r4, r0
    93b8:	b508      	push	{r3, lr}
    93ba:	4608      	mov	r0, r1
    93bc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    93be:	461a      	mov	r2, r3
    93c0:	47a0      	blx	r4
	return z_impl_z_current_get();
    93c2:	f7fe f869 	bl	7498 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    93c6:	f7f9 fb7b 	bl	2ac0 <z_impl_k_thread_abort>

000093ca <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    93ca:	f7fc b99f 	b.w	570c <z_fatal_error>

000093ce <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    93ce:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    93d0:	6800      	ldr	r0, [r0, #0]
    93d2:	f7fc b99b 	b.w	570c <z_fatal_error>

000093d6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    93d6:	2100      	movs	r1, #0
    93d8:	2001      	movs	r0, #1
    93da:	f7ff bff6 	b.w	93ca <z_arm_fatal_error>

000093de <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    93de:	b508      	push	{r3, lr}
	handler();
    93e0:	f7f9 f884 	bl	24ec <z_SysNmiOnReset>
	z_arm_int_exit();
}
    93e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    93e8:	f7f9 b992 	b.w	2710 <z_arm_exc_exit>

000093ec <_stdout_hook_default>:
}
    93ec:	f04f 30ff 	mov.w	r0, #4294967295
    93f0:	4770      	bx	lr

000093f2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    93f2:	4603      	mov	r3, r0
	size_t n = 0;
    93f4:	2000      	movs	r0, #0

	while (*s != '\0') {
    93f6:	5c1a      	ldrb	r2, [r3, r0]
    93f8:	b902      	cbnz	r2, 93fc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    93fa:	4770      	bx	lr
		n++;
    93fc:	3001      	adds	r0, #1
    93fe:	e7fa      	b.n	93f6 <strlen+0x4>

00009400 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9400:	4603      	mov	r3, r0
	size_t n = 0;
    9402:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9404:	5c1a      	ldrb	r2, [r3, r0]
    9406:	b10a      	cbz	r2, 940c <strnlen+0xc>
    9408:	4288      	cmp	r0, r1
    940a:	d100      	bne.n	940e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    940c:	4770      	bx	lr
		n++;
    940e:	3001      	adds	r0, #1
    9410:	e7f8      	b.n	9404 <strnlen+0x4>

00009412 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9412:	1e43      	subs	r3, r0, #1
    9414:	3901      	subs	r1, #1
    9416:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    941a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    941e:	4282      	cmp	r2, r0
    9420:	d101      	bne.n	9426 <strcmp+0x14>
    9422:	2a00      	cmp	r2, #0
    9424:	d1f7      	bne.n	9416 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9426:	1a10      	subs	r0, r2, r0
    9428:	4770      	bx	lr

0000942a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    942a:	b510      	push	{r4, lr}
    942c:	1e43      	subs	r3, r0, #1
    942e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9430:	4291      	cmp	r1, r2
    9432:	d100      	bne.n	9436 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9434:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9436:	f811 4b01 	ldrb.w	r4, [r1], #1
    943a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    943e:	e7f7      	b.n	9430 <memcpy+0x6>

00009440 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9440:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9442:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9444:	4603      	mov	r3, r0
	while (n > 0) {
    9446:	4293      	cmp	r3, r2
    9448:	d100      	bne.n	944c <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    944a:	4770      	bx	lr
		*(d_byte++) = c_byte;
    944c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9450:	e7f9      	b.n	9446 <memset+0x6>

00009452 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    9452:	b084      	sub	sp, #16
    9454:	ab04      	add	r3, sp, #16
    9456:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    945a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    945e:	2b06      	cmp	r3, #6
    9460:	d108      	bne.n	9474 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9466:	2201      	movs	r2, #1
    9468:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    946c:	f3bf 8f4f 	dsb	sy
        __WFE();
    9470:	bf20      	wfe
    while (true)
    9472:	e7fd      	b.n	9470 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    9474:	b004      	add	sp, #16
    9476:	4770      	bx	lr

00009478 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    9478:	b084      	sub	sp, #16
    947a:	ab04      	add	r3, sp, #16
    947c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9480:	2300      	movs	r3, #0
    9482:	f383 8811 	msr	BASEPRI, r3
    9486:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    948a:	b004      	add	sp, #16
    948c:	4770      	bx	lr

0000948e <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    948e:	f1a0 0308 	sub.w	r3, r0, #8
    9492:	f3bf 8f5b 	dmb	ish
    9496:	e853 2f00 	ldrex	r2, [r3]
    949a:	1c51      	adds	r1, r2, #1
    949c:	e843 1c00 	strex	ip, r1, [r3]
    94a0:	f1bc 0f00 	cmp.w	ip, #0
    94a4:	d1f7      	bne.n	9496 <adc_context_on_timer_expired+0x8>
    94a6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    94aa:	b91a      	cbnz	r2, 94b4 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    94ac:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    94b0:	f7f9 bc96 	b.w	2de0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    94b4:	f06f 030f 	mvn.w	r3, #15
    94b8:	6683      	str	r3, [r0, #104]	; 0x68
}
    94ba:	4770      	bx	lr

000094bc <set_starting_state>:
{
    94bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    94be:	f04f 0320 	mov.w	r3, #32
    94c2:	f3ef 8211 	mrs	r2, BASEPRI
    94c6:	f383 8812 	msr	BASEPRI_MAX, r3
    94ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    94ce:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    94d0:	f003 0407 	and.w	r4, r3, #7
    94d4:	2c01      	cmp	r4, #1
    94d6:	d106      	bne.n	94e6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    94d8:	6001      	str	r1, [r0, #0]
	int err = 0;
    94da:	2000      	movs	r0, #0
	__asm__ volatile(
    94dc:	f382 8811 	msr	BASEPRI, r2
    94e0:	f3bf 8f6f 	isb	sy
}
    94e4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    94e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    94ea:	428b      	cmp	r3, r1
		err = -EALREADY;
    94ec:	bf14      	ite	ne
    94ee:	f04f 30ff 	movne.w	r0, #4294967295
    94f2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    94f6:	e7f1      	b.n	94dc <set_starting_state+0x20>

000094f8 <set_on_state>:
	__asm__ volatile(
    94f8:	f04f 0320 	mov.w	r3, #32
    94fc:	f3ef 8211 	mrs	r2, BASEPRI
    9500:	f383 8812 	msr	BASEPRI_MAX, r3
    9504:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9508:	6803      	ldr	r3, [r0, #0]
    950a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    950e:	f043 0302 	orr.w	r3, r3, #2
    9512:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9514:	f382 8811 	msr	BASEPRI, r2
    9518:	f3bf 8f6f 	isb	sy
}
    951c:	4770      	bx	lr

0000951e <onoff_started_callback>:
	return &data->mgr[type];
    951e:	6900      	ldr	r0, [r0, #16]
    9520:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9522:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9526:	2100      	movs	r1, #0
    9528:	4710      	bx	r2

0000952a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    952a:	2000      	movs	r0, #0
    952c:	f7fb b824 	b.w	4578 <nrfx_clock_start>

00009530 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9530:	2000      	movs	r0, #0
    9532:	f7fb b875 	b.w	4620 <nrfx_clock_stop>

00009536 <api_stop>:
	return stop(dev, subsys, CTX_API);
    9536:	2280      	movs	r2, #128	; 0x80
    9538:	f7f9 beb8 	b.w	32ac <stop>

0000953c <blocking_start_callback>:
{
    953c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    953e:	f7fe b8df 	b.w	7700 <z_impl_k_sem_give>

00009542 <api_start>:
{
    9542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9546:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    9548:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    954a:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    954c:	436f      	muls	r7, r5
{
    954e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    9550:	f107 0048 	add.w	r0, r7, #72	; 0x48
    9554:	2180      	movs	r1, #128	; 0x80
    9556:	4420      	add	r0, r4
{
    9558:	4690      	mov	r8, r2
    955a:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    955c:	f7ff ffae 	bl	94bc <set_starting_state>
	if (err < 0) {
    9560:	2800      	cmp	r0, #0
    9562:	db07      	blt.n	9574 <api_start+0x32>
	subdata->cb = cb;
    9564:	443c      	add	r4, r7
	subdata->user_data = user_data;
    9566:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    956a:	6873      	ldr	r3, [r6, #4]
    956c:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    9570:	4798      	blx	r3
	return 0;
    9572:	2000      	movs	r0, #0
}
    9574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009578 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9578:	6843      	ldr	r3, [r0, #4]
    957a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    957c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9580:	600b      	str	r3, [r1, #0]
}
    9582:	2000      	movs	r0, #0
    9584:	4770      	bx	lr

00009586 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9586:	6843      	ldr	r3, [r0, #4]
    9588:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    958a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    958e:	4042      	eors	r2, r0
    9590:	400a      	ands	r2, r1
    9592:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9594:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9598:	2000      	movs	r0, #0
    959a:	4770      	bx	lr

0000959c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    959c:	6843      	ldr	r3, [r0, #4]
    959e:	685b      	ldr	r3, [r3, #4]
}
    95a0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    95a2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    95a6:	4770      	bx	lr

000095a8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    95a8:	6843      	ldr	r3, [r0, #4]
    95aa:	685b      	ldr	r3, [r3, #4]
}
    95ac:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    95ae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    95b2:	4770      	bx	lr

000095b4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    95b4:	6843      	ldr	r3, [r0, #4]
    95b6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    95b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    95bc:	404b      	eors	r3, r1
    p_reg->OUT = value;
    95be:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    95c2:	2000      	movs	r0, #0
    95c4:	4770      	bx	lr

000095c6 <any_other_channel_is_active>:
{
    95c6:	b530      	push	{r4, r5, lr}
    95c8:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    95ca:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    95cc:	b2da      	uxtb	r2, r3
    95ce:	4282      	cmp	r2, r0
    95d0:	d007      	beq.n	95e2 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    95d2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    95d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    95da:	b112      	cbz	r2, 95e2 <any_other_channel_is_active+0x1c>
    95dc:	898d      	ldrh	r5, [r1, #12]
    95de:	4295      	cmp	r5, r2
    95e0:	d804      	bhi.n	95ec <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    95e2:	3301      	adds	r3, #1
    95e4:	2b04      	cmp	r3, #4
    95e6:	d1f1      	bne.n	95cc <any_other_channel_is_active+0x6>
	return false;
    95e8:	2000      	movs	r0, #0
}
    95ea:	bd30      	pop	{r4, r5, pc}
			return true;
    95ec:	2001      	movs	r0, #1
    95ee:	e7fc      	b.n	95ea <any_other_channel_is_active+0x24>

000095f0 <pwm_nrfx_pin_set>:
{
    95f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95f4:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    95f8:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    95fa:	6904      	ldr	r4, [r0, #16]
{
    95fc:	4688      	mov	r8, r1
    95fe:	4616      	mov	r6, r2
    9600:	4699      	mov	r9, r3
	if (flags) {
    9602:	2d00      	cmp	r5, #0
    9604:	d140      	bne.n	9688 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9606:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    9608:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    960c:	2bff      	cmp	r3, #255	; 0xff
    960e:	d003      	beq.n	9618 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    9610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9614:	4598      	cmp	r8, r3
    9616:	d03a      	beq.n	968e <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9618:	3501      	adds	r5, #1
    961a:	b2ed      	uxtb	r5, r5
    961c:	2d04      	cmp	r5, #4
    961e:	d1f3      	bne.n	9608 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    9620:	f06f 0015 	mvn.w	r0, #21
    9624:	e009      	b.n	963a <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    9626:	2000      	movs	r0, #0
    9628:	e042      	b.n	96b0 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    962a:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    962c:	2b08      	cmp	r3, #8
		countertop >>= 1;
    962e:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9632:	d158      	bne.n	96e6 <pwm_nrfx_pin_set+0xf6>
    9634:	e7f4      	b.n	9620 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    9636:	b9d0      	cbnz	r0, 966e <pwm_nrfx_pin_set+0x7e>
	return 0;
    9638:	2000      	movs	r0, #0
}
    963a:	b003      	add	sp, #12
    963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    9640:	454e      	cmp	r6, r9
    9642:	d87f      	bhi.n	9744 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9644:	a801      	add	r0, sp, #4
    9646:	f8cd 8004 	str.w	r8, [sp, #4]
    964a:	f7fa fa67 	bl	3b1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    964e:	9a01      	ldr	r2, [sp, #4]
    9650:	2301      	movs	r3, #1
    9652:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9654:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    9658:	4621      	mov	r1, r4
    965a:	4628      	mov	r0, r5
    965c:	f7ff ffb3 	bl	95c6 <any_other_channel_is_active>
    9660:	2800      	cmp	r0, #0
    9662:	d1e9      	bne.n	9638 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    9664:	4601      	mov	r1, r0
    9666:	4638      	mov	r0, r7
    9668:	f7fb fec4 	bl	53f4 <nrfx_pwm_stop>
    966c:	e7e4      	b.n	9638 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    966e:	4638      	mov	r0, r7
    9670:	f7fb fe92 	bl	5398 <nrfx_pwm_is_stopped>
    9674:	2800      	cmp	r0, #0
    9676:	d0fa      	beq.n	966e <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    9678:	2302      	movs	r3, #2
    967a:	2201      	movs	r2, #1
    967c:	f107 0118 	add.w	r1, r7, #24
    9680:	4638      	mov	r0, r7
    9682:	f7fb fe15 	bl	52b0 <nrfx_pwm_simple_playback>
    9686:	e7d7      	b.n	9638 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    9688:	f06f 0085 	mvn.w	r0, #133	; 0x85
    968c:	e7d5      	b.n	963a <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    968e:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    9692:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    9696:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    969a:	b113      	cbz	r3, 96a2 <pwm_nrfx_pin_set+0xb2>
    969c:	89a2      	ldrh	r2, [r4, #12]
    969e:	429a      	cmp	r2, r3
    96a0:	d8c1      	bhi.n	9626 <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    96a2:	4621      	mov	r1, r4
    96a4:	4628      	mov	r0, r5
    96a6:	f7ff ff8e 	bl	95c6 <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    96aa:	f080 0001 	eor.w	r0, r0, #1
    96ae:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    96b0:	7bb9      	ldrb	r1, [r7, #14]
    96b2:	2901      	cmp	r1, #1
		period_cycles /= 2;
    96b4:	bf04      	itt	eq
    96b6:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    96b8:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    96bc:	b326      	cbz	r6, 9708 <pwm_nrfx_pin_set+0x118>
    96be:	6823      	ldr	r3, [r4, #0]
    96c0:	42b3      	cmp	r3, r6
    96c2:	d021      	beq.n	9708 <pwm_nrfx_pin_set+0x118>
    96c4:	2300      	movs	r3, #0
				data->current[i]
    96c6:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    96ca:	b2da      	uxtb	r2, r3
    96cc:	42aa      	cmp	r2, r5
    96ce:	d005      	beq.n	96dc <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    96d0:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    96d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
    96d8:	2a00      	cmp	r2, #0
    96da:	d1a1      	bne.n	9620 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    96dc:	3301      	adds	r3, #1
    96de:	2b04      	cmp	r3, #4
    96e0:	d1f3      	bne.n	96ca <pwm_nrfx_pin_set+0xda>
    96e2:	4632      	mov	r2, r6
    96e4:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    96e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    96ea:	fa5f fc83 	uxtb.w	ip, r3
    96ee:	d29c      	bcs.n	962a <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    96f0:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    96f4:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    96f8:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    96fa:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    96fc:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    9700:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    9704:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    9708:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    970a:	454e      	cmp	r6, r9
    970c:	4633      	mov	r3, r6
    970e:	bf28      	it	cs
    9710:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    9712:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    9716:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    971a:	ea42 020b 	orr.w	r2, r2, fp
    971e:	b292      	uxth	r2, r2
	data->current[channel] = (
    9720:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    9724:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9728:	b112      	cbz	r2, 9730 <pwm_nrfx_pin_set+0x140>
    972a:	89a1      	ldrh	r1, [r4, #12]
    972c:	4291      	cmp	r1, r2
    972e:	d882      	bhi.n	9636 <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    9730:	197a      	adds	r2, r7, r5
    9732:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    9736:	2b00      	cmp	r3, #0
    9738:	d082      	beq.n	9640 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    973a:	454e      	cmp	r6, r9
    973c:	d805      	bhi.n	974a <pwm_nrfx_pin_set+0x15a>
    973e:	2a00      	cmp	r2, #0
    9740:	db80      	blt.n	9644 <pwm_nrfx_pin_set+0x54>
    9742:	e002      	b.n	974a <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    9744:	2a00      	cmp	r2, #0
    9746:	f6bf af7d 	bge.w	9644 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    974a:	a801      	add	r0, sp, #4
    974c:	f8cd 8004 	str.w	r8, [sp, #4]
    9750:	f7fa f9e4 	bl	3b1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9754:	9a01      	ldr	r2, [sp, #4]
    9756:	2301      	movs	r3, #1
    9758:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    975a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    975e:	e77b      	b.n	9658 <pwm_nrfx_pin_set+0x68>

00009760 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    9760:	6843      	ldr	r3, [r0, #4]
    9762:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    9764:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9768:	05d1      	lsls	r1, r2, #23
    976a:	d518      	bpl.n	979e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    976c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    9770:	b1aa      	cbz	r2, 979e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9772:	f04f 0120 	mov.w	r1, #32
    9776:	f3ef 8211 	mrs	r2, BASEPRI
    977a:	f381 8812 	msr	BASEPRI_MAX, r1
    977e:	f3bf 8f6f 	isb	sy
    9782:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9786:	b131      	cbz	r1, 9796 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9788:	2100      	movs	r1, #0
    978a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    978e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9792:	2101      	movs	r1, #1
    9794:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    9796:	f382 8811 	msr	BASEPRI, r2
    979a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    979e:	6842      	ldr	r2, [r0, #4]
    97a0:	6852      	ldr	r2, [r2, #4]
    97a2:	06d2      	lsls	r2, r2, #27
    97a4:	d515      	bpl.n	97d2 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    97a6:	f04f 0120 	mov.w	r1, #32
    97aa:	f3ef 8211 	mrs	r2, BASEPRI
    97ae:	f381 8812 	msr	BASEPRI_MAX, r1
    97b2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    97b6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    97ba:	b111      	cbz	r1, 97c2 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    97bc:	2100      	movs	r1, #0
    97be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    97c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    97c6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    97ca:	f382 8811 	msr	BASEPRI, r2
    97ce:	f3bf 8f6f 	isb	sy
}
    97d2:	4770      	bx	lr

000097d4 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    97d4:	6902      	ldr	r2, [r0, #16]
{
    97d6:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    97d8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    97dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
    97e0:	2000      	movs	r0, #0
    97e2:	4770      	bx	lr

000097e4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    97e4:	6843      	ldr	r3, [r0, #4]
    97e6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    97e8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    97ec:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    97f0:	4770      	bx	lr

000097f2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    97f2:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    97f4:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    97f6:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    97fa:	b940      	cbnz	r0, 980e <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    97fc:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    97fe:	0792      	lsls	r2, r2, #30
    9800:	d406      	bmi.n	9810 <is_tx_ready+0x1e>
    9802:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    9806:	3800      	subs	r0, #0
    9808:	bf18      	it	ne
    980a:	2001      	movne	r0, #1
    980c:	4770      	bx	lr
    980e:	2001      	movs	r0, #1
}
    9810:	4770      	bx	lr

00009812 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9812:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    9814:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9816:	681b      	ldr	r3, [r3, #0]
    9818:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    981c:	b148      	cbz	r0, 9832 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    981e:	7c52      	ldrb	r2, [r2, #17]
    9820:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9822:	2000      	movs	r0, #0
    9824:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9828:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    982c:	2201      	movs	r2, #1
    982e:	601a      	str	r2, [r3, #0]
	return 0;
    9830:	4770      	bx	lr
		return -1;
    9832:	f04f 30ff 	mov.w	r0, #4294967295
}
    9836:	4770      	bx	lr

00009838 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9838:	b510      	push	{r4, lr}
    983a:	2200      	movs	r2, #0
    983c:	4604      	mov	r4, r0
    983e:	2101      	movs	r1, #1
    9840:	2002      	movs	r0, #2
    9842:	f7f8 feaf 	bl	25a4 <z_arm_irq_priority_set>
    9846:	2002      	movs	r0, #2
    9848:	f7f8 fe8e 	bl	2568 <arch_irq_enable>
    984c:	4620      	mov	r0, r4
    984e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9852:	f7fa bafb 	b.w	3e4c <uarte_instance_init.isra.0>

00009856 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9856:	b510      	push	{r4, lr}
    9858:	2200      	movs	r2, #0
    985a:	4604      	mov	r4, r0
    985c:	2101      	movs	r1, #1
    985e:	2028      	movs	r0, #40	; 0x28
    9860:	f7f8 fea0 	bl	25a4 <z_arm_irq_priority_set>
    9864:	2028      	movs	r0, #40	; 0x28
    9866:	f7f8 fe7f 	bl	2568 <arch_irq_enable>
    986a:	4620      	mov	r0, r4
    986c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9870:	f7fa baec 	b.w	3e4c <uarte_instance_init.isra.0>

00009874 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9874:	4770      	bx	lr

00009876 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    9876:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    9878:	2000      	movs	r0, #0
    987a:	f7f9 fa91 	bl	2da0 <sys_arch_reboot>

0000987e <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    987e:	f7ff b9b9 	b.w	8bf4 <nrf_cc3xx_platform_init_no_rng>

00009882 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    9882:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9884:	f7f8 f8f0 	bl	1a68 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9888:	f7f8 f9a2 	bl	1bd0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    988c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9890:	f7ff b9b0 	b.w	8bf4 <nrf_cc3xx_platform_init_no_rng>

00009894 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9894:	4700      	bx	r0

00009896 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9896:	f000 b93a 	b.w	9b0e <z_impl_k_busy_wait>

0000989a <nrf_gpio_pin_present_check>:
    switch (port)
    989a:	0943      	lsrs	r3, r0, #5
    989c:	d00b      	beq.n	98b6 <nrf_gpio_pin_present_check+0x1c>
    989e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    98a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    98a4:	bf18      	it	ne
    98a6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    98a8:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    98ac:	fa23 f000 	lsr.w	r0, r3, r0
}
    98b0:	f000 0001 	and.w	r0, r0, #1
    98b4:	4770      	bx	lr
    switch (port)
    98b6:	f04f 33ff 	mov.w	r3, #4294967295
    98ba:	e7f5      	b.n	98a8 <nrf_gpio_pin_present_check+0xe>

000098bc <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    98bc:	0080      	lsls	r0, r0, #2
}
    98be:	f500 7080 	add.w	r0, r0, #256	; 0x100
    98c2:	4770      	bx	lr

000098c4 <nrf_gpio_reconfigure>:
{
    98c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    98c8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    98ca:	a801      	add	r0, sp, #4
{
    98cc:	460e      	mov	r6, r1
    98ce:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    98d2:	4690      	mov	r8, r2
    98d4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    98d6:	f7fb f811 	bl	48fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    98da:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    98dc:	f1b8 0f00 	cmp.w	r8, #0
    98e0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    98e4:	bf14      	ite	ne
    98e6:	2302      	movne	r3, #2
    98e8:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    98ea:	2e00      	cmp	r6, #0
    98ec:	bf18      	it	ne
    98ee:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    98f2:	2d00      	cmp	r5, #0
    98f4:	bf14      	ite	ne
    98f6:	210c      	movne	r1, #12
    98f8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    98fa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    98fc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9900:	bf14      	ite	ne
    9902:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9906:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9908:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    990a:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    990e:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9912:	bf14      	ite	ne
    9914:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9918:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    991a:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    991c:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9920:	b106      	cbz	r6, 9924 <nrf_gpio_reconfigure+0x60>
    9922:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9924:	f1b8 0f00 	cmp.w	r8, #0
    9928:	d003      	beq.n	9932 <nrf_gpio_reconfigure+0x6e>
    992a:	f898 8000 	ldrb.w	r8, [r8]
    992e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    9932:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9934:	b10d      	cbz	r5, 993a <nrf_gpio_reconfigure+0x76>
    9936:	782d      	ldrb	r5, [r5, #0]
    9938:	00ad      	lsls	r5, r5, #2
    993a:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    993e:	b10c      	cbz	r4, 9944 <nrf_gpio_reconfigure+0x80>
    9940:	7822      	ldrb	r2, [r4, #0]
    9942:	0214      	lsls	r4, r2, #8
    9944:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9946:	b10f      	cbz	r7, 994c <nrf_gpio_reconfigure+0x88>
    9948:	783f      	ldrb	r7, [r7, #0]
    994a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    994c:	432c      	orrs	r4, r5
    994e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9950:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9954:	b002      	add	sp, #8
    9956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000995a <nrf_gpio_cfg_sense_set>:
{
    995a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    995c:	f10d 030f 	add.w	r3, sp, #15
    9960:	9301      	str	r3, [sp, #4]
    9962:	2300      	movs	r3, #0
{
    9964:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9968:	9300      	str	r3, [sp, #0]
    996a:	461a      	mov	r2, r3
    996c:	4619      	mov	r1, r3
    996e:	f7ff ffa9 	bl	98c4 <nrf_gpio_reconfigure>
}
    9972:	b005      	add	sp, #20
    9974:	f85d fb04 	ldr.w	pc, [sp], #4

00009978 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    9978:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    997a:	2402      	movs	r4, #2
    997c:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    997e:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    9980:	6809      	ldr	r1, [r1, #0]
    9982:	b171      	cbz	r1, 99a2 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    9984:	f012 0f04 	tst.w	r2, #4
    9988:	bf0c      	ite	eq
    998a:	2182      	moveq	r1, #130	; 0x82
    998c:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    998e:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    9990:	bf48      	it	mi
    9992:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    9996:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    9998:	bf48      	it	mi
    999a:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    999e:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    99a2:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99a4:	f04f 0100 	mov.w	r1, #0
    99a8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    99ac:	bf58      	it	pl
    99ae:	2201      	movpl	r2, #1
    99b0:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    99b4:	bf56      	itet	pl
    99b6:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    99b8:	18c0      	addmi	r0, r0, r3
    return 0;
    99ba:	4608      	movpl	r0, r1
}
    99bc:	bd10      	pop	{r4, pc}

000099be <z_device_state_init>:
}
    99be:	4770      	bx	lr

000099c0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    99c0:	b138      	cbz	r0, 99d2 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    99c2:	68c3      	ldr	r3, [r0, #12]
    99c4:	8818      	ldrh	r0, [r3, #0]
    99c6:	f3c0 0008 	ubfx	r0, r0, #0, #9
    99ca:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    99ce:	4258      	negs	r0, r3
    99d0:	4158      	adcs	r0, r3
}
    99d2:	4770      	bx	lr

000099d4 <z_pm_save_idle_exit>:
{
    99d4:	b508      	push	{r3, lr}
	pm_system_resume();
    99d6:	f7f8 fc57 	bl	2288 <pm_system_resume>
}
    99da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    99de:	f7ff bf49 	b.w	9874 <sys_clock_idle_exit>

000099e2 <k_mem_slab_init>:
{
    99e2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    99e4:	2400      	movs	r4, #0
    99e6:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    99e8:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    99ea:	ea41 0402 	orr.w	r4, r1, r2
    99ee:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    99f2:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    99f6:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    99f8:	d10c      	bne.n	9a14 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    99fa:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    99fc:	42a3      	cmp	r3, r4
    99fe:	d103      	bne.n	9a08 <k_mem_slab_init+0x26>
    9a00:	e9c0 0000 	strd	r0, r0, [r0]
}
    9a04:	2000      	movs	r0, #0
}
    9a06:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9a08:	6985      	ldr	r5, [r0, #24]
    9a0a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9a0c:	3401      	adds	r4, #1
		slab->free_list = p;
    9a0e:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    9a10:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    9a12:	e7f3      	b.n	99fc <k_mem_slab_init+0x1a>
		return -EINVAL;
    9a14:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9a18:	e7f5      	b.n	9a06 <k_mem_slab_init+0x24>

00009a1a <z_impl_k_mutex_init>:
{
    9a1a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9a1c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9a1e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    9a22:	e9c3 3300 	strd	r3, r3, [r3]
}
    9a26:	4770      	bx	lr

00009a28 <z_handle_obj_poll_events>:
{
    9a28:	4603      	mov	r3, r0
	return list->head == list;
    9a2a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    9a2c:	4283      	cmp	r3, r0
    9a2e:	d008      	beq.n	9a42 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    9a30:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9a34:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9a36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9a38:	2300      	movs	r3, #0
	node->prev = NULL;
    9a3a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    9a3e:	f7fc ba59 	b.w	5ef4 <signal_poll_event>
}
    9a42:	4770      	bx	lr

00009a44 <z_queue_node_peek>:
{
    9a44:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    9a46:	4604      	mov	r4, r0
    9a48:	b130      	cbz	r0, 9a58 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    9a4a:	6802      	ldr	r2, [r0, #0]
    9a4c:	0793      	lsls	r3, r2, #30
    9a4e:	d003      	beq.n	9a58 <z_queue_node_peek+0x14>
		ret = anode->data;
    9a50:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    9a52:	b109      	cbz	r1, 9a58 <z_queue_node_peek+0x14>
			k_free(anode);
    9a54:	f000 f8ac 	bl	9bb0 <k_free>
}
    9a58:	4620      	mov	r0, r4
    9a5a:	bd10      	pop	{r4, pc}

00009a5c <z_impl_k_queue_init>:
	list->head = NULL;
    9a5c:	2300      	movs	r3, #0
	list->tail = NULL;
    9a5e:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
    9a62:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
    9a64:	f100 030c 	add.w	r3, r0, #12
	list->tail = (sys_dnode_t *)list;
    9a68:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
    9a6c:	f100 0314 	add.w	r3, r0, #20
    9a70:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
    9a74:	4770      	bx	lr

00009a76 <k_queue_append>:
{
    9a76:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    9a78:	2301      	movs	r3, #1
    9a7a:	9300      	str	r3, [sp, #0]
    9a7c:	2300      	movs	r3, #0
{
    9a7e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    9a80:	4619      	mov	r1, r3
    9a82:	f7fc fb09 	bl	6098 <queue_insert>
}
    9a86:	b003      	add	sp, #12
    9a88:	f85d fb04 	ldr.w	pc, [sp], #4

00009a8c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9a8c:	4603      	mov	r3, r0
    9a8e:	b920      	cbnz	r0, 9a9a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9a90:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    9a94:	b90a      	cbnz	r2, 9a9a <z_reschedule_irqlock+0xe>
    9a96:	f7f8 bdd5 	b.w	2644 <arch_swap>
    9a9a:	f383 8811 	msr	BASEPRI, r3
    9a9e:	f3bf 8f6f 	isb	sy
}
    9aa2:	4770      	bx	lr

00009aa4 <z_reschedule_unlocked>:
	__asm__ volatile(
    9aa4:	f04f 0320 	mov.w	r3, #32
    9aa8:	f3ef 8011 	mrs	r0, BASEPRI
    9aac:	f383 8812 	msr	BASEPRI_MAX, r3
    9ab0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9ab4:	f7ff bfea 	b.w	9a8c <z_reschedule_irqlock>

00009ab8 <z_priq_dumb_best>:
{
    9ab8:	4603      	mov	r3, r0
	return list->head == list;
    9aba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9abc:	4283      	cmp	r3, r0
    9abe:	d003      	beq.n	9ac8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    9ac0:	2800      	cmp	r0, #0
    9ac2:	bf38      	it	cc
    9ac4:	2000      	movcc	r0, #0
    9ac6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    9ac8:	2000      	movs	r0, #0
}
    9aca:	4770      	bx	lr

00009acc <z_unpend_all>:
{
    9acc:	b538      	push	{r3, r4, r5, lr}
    9ace:	4605      	mov	r5, r0
	int need_sched = 0;
    9ad0:	2000      	movs	r0, #0
	return list->head == list;
    9ad2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ad4:	42a5      	cmp	r5, r4
    9ad6:	d000      	beq.n	9ada <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9ad8:	b904      	cbnz	r4, 9adc <z_unpend_all+0x10>
}
    9ada:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    9adc:	4620      	mov	r0, r4
    9ade:	f7fc fda1 	bl	6624 <z_unpend_thread>
		z_ready_thread(thread);
    9ae2:	4620      	mov	r0, r4
    9ae4:	f7fc ff42 	bl	696c <z_ready_thread>
		need_sched = 1;
    9ae8:	2001      	movs	r0, #1
    9aea:	e7f2      	b.n	9ad2 <z_unpend_all+0x6>

00009aec <k_is_in_isr>:
    9aec:	f3ef 8005 	mrs	r0, IPSR
}
    9af0:	3800      	subs	r0, #0
    9af2:	bf18      	it	ne
    9af4:	2001      	movne	r0, #1
    9af6:	4770      	bx	lr

00009af8 <z_impl_k_thread_name_set>:
}
    9af8:	f06f 0057 	mvn.w	r0, #87	; 0x57
    9afc:	4770      	bx	lr

00009afe <z_impl_k_thread_start>:
	z_sched_start(thread);
    9afe:	f7fc bf7d 	b.w	69fc <z_sched_start>

00009b02 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9b02:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9b04:	f7fe fb22 	bl	814c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9b08:	bd08      	pop	{r3, pc}

00009b0a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9b0a:	f7fe bb1f 	b.w	814c <sys_clock_tick_get>

00009b0e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9b0e:	b108      	cbz	r0, 9b14 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9b10:	f7f9 b95c 	b.w	2dcc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9b14:	4770      	bx	lr

00009b16 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    9b16:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b18:	1c4b      	adds	r3, r1, #1
    9b1a:	bf08      	it	eq
    9b1c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    9b20:	4604      	mov	r4, r0
    9b22:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9b24:	d013      	beq.n	9b4e <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9b26:	ea54 0105 	orrs.w	r1, r4, r5
    9b2a:	d103      	bne.n	9b34 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    9b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    9b30:	f7fe bb0c 	b.w	814c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    9b34:	f06f 0101 	mvn.w	r1, #1
    9b38:	1a0a      	subs	r2, r1, r0
    9b3a:	f04f 31ff 	mov.w	r1, #4294967295
    9b3e:	eb61 0305 	sbc.w	r3, r1, r5
    9b42:	2a00      	cmp	r2, #0
    9b44:	f173 0100 	sbcs.w	r1, r3, #0
    9b48:	db02      	blt.n	9b50 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    9b4a:	4610      	mov	r0, r2
    9b4c:	4619      	mov	r1, r3
}
    9b4e:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
    9b50:	f7fe fafc 	bl	814c <sys_clock_tick_get>
    9b54:	2c01      	cmp	r4, #1
    9b56:	f175 0300 	sbcs.w	r3, r5, #0
    9b5a:	bfbc      	itt	lt
    9b5c:	2401      	movlt	r4, #1
    9b5e:	2500      	movlt	r5, #0
    9b60:	1820      	adds	r0, r4, r0
    9b62:	eb45 0101 	adc.w	r1, r5, r1
    9b66:	e7f2      	b.n	9b4e <sys_clock_timeout_end_calc+0x38>

00009b68 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    9b68:	b510      	push	{r4, lr}
    9b6a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    9b6c:	f7fe f93c 	bl	7de8 <z_abort_timeout>

	if (inactive) {
    9b70:	b9b0      	cbnz	r0, 9ba0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    9b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9b74:	b10b      	cbz	r3, 9b7a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    9b76:	4620      	mov	r0, r4
    9b78:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    9b7a:	f104 0018 	add.w	r0, r4, #24
    9b7e:	f7fd fa59 	bl	7034 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9b82:	b168      	cbz	r0, 9ba0 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    9b84:	f7fc fef2 	bl	696c <z_ready_thread>
    9b88:	f04f 0320 	mov.w	r3, #32
    9b8c:	f3ef 8011 	mrs	r0, BASEPRI
    9b90:	f383 8812 	msr	BASEPRI_MAX, r3
    9b94:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    9b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b9c:	f7ff bf76 	b.w	9a8c <z_reschedule_irqlock>
    9ba0:	bd10      	pop	{r4, pc}

00009ba2 <notify_queue_locked>:
	if (queue != NULL) {
    9ba2:	b120      	cbz	r0, 9bae <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9ba4:	2200      	movs	r2, #0
    9ba6:	4611      	mov	r1, r2
    9ba8:	3088      	adds	r0, #136	; 0x88
    9baa:	f7fd bd3f 	b.w	762c <z_sched_wake>
}
    9bae:	4770      	bx	lr

00009bb0 <k_free>:
	if (ptr != NULL) {
    9bb0:	b120      	cbz	r0, 9bbc <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    9bb2:	1f01      	subs	r1, r0, #4
    9bb4:	f850 0c04 	ldr.w	r0, [r0, #-4]
    9bb8:	f7fe bfc8 	b.w	8b4c <k_heap_free>
}
    9bbc:	4770      	bx	lr

00009bbe <k_heap_init>:
{
    9bbe:	b410      	push	{r4}
    9bc0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    9bc4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9bc8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9bca:	f7f7 be89 	b.w	18e0 <sys_heap_init>

00009bce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9bce:	4770      	bx	lr

00009bd0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9bd0:	f7fb bc68 	b.w	54a4 <SystemInit>
