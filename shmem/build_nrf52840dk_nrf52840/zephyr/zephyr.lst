
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200021a0 	.word	0x200021a0
}
   4:	00001b3d 	.word	0x00001b3d
   8:	00006c31 	.word	0x00006c31
   c:	00001b29 	.word	0x00001b29
  10:	00001b29 	.word	0x00001b29
  14:	00001b29 	.word	0x00001b29
  18:	00001b29 	.word	0x00001b29
	...
  2c:	00001945 	.word	0x00001945
  30:	00001b29 	.word	0x00001b29
  34:	00000000 	.word	0x00000000
  38:	000018f1 	.word	0x000018f1
  3c:	00001b29 	.word	0x00001b29

00000040 <_irq_vector_table>:
  40:	000018a9 000018a9 000018a9 000018a9     ................
  50:	000018a9 000018a9 000018a9 000018a9     ................
  60:	000018a9 000018a9 000018a9 000018a9     ................
  70:	000018a9 000018a9 000018a9 000018a9     ................
  80:	000018a9 000018a9 000018a9 000018a9     ................
  90:	000018a9 000018a9 000018a9 000018a9     ................
  a0:	000018a9 000018a9 000018a9 000018a9     ................
  b0:	000018a9 000018a9 000018a9 000018a9     ................
  c0:	000018a9 000018a9 000018a9 000018a9     ................
  d0:	000018a9 000018a9 000018a9 000018a9     ................
  e0:	000018a9 000018a9 000018a9 000018a9     ................
  f0:	000018a9 000018a9 000018a9 000018a9     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x102>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <__data_size+0x92>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <__data_size+0x1e>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <__data_size+0x50>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <__data_size+0x270>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <__data_size+0x270>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <__data_size+0x7c>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <__data_size+0x274>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <__data_size+0x274>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <__data_size+0x8e>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <__data_size+0x96>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x13e>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0xd0>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0xce>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <__data_size+0x29c>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0xf8>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0xf6>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <__data_size+0x2a4>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <__data_size+0x84>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x118>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <__data_size+0x26a>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x1b8>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x12a>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <__data_size+0x298>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <__data_size+0x8e>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <__data_size+0x8e>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0x188>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <__data_size+0x294>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <__data_size+0x294>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x1b0>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <__data_size+0x28c>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <__data_size+0x28c>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0xaa>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <__data_size+0x20a>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <__data_size+0x290>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <__data_size+0x290>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <__data_size+0x234>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <__data_size+0x288>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <__data_size+0x288>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <__data_size+0x27c>
     38c:	d016      	beq.n	3bc <__data_size+0x278>
     38e:	b15e      	cbz	r6, 3a8 <__data_size+0x264>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <__data_size+0x8e>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <__data_size+0x50>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <__data_size+0x7c>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <__data_size+0x24a>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <__data_size+0x24a>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <__data_size+0x234>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x1b0>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <__data_size+0x20a>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0x188>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x134>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0xd0>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0xf8>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <thread_A_code>:

} 

/* Thread code implementation */
void thread_A_code(void *argA , void *argB, void *argC)
{
     3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int64_t fin_time=0, release_time=0;

    /* Other variables */
    long int nact = 0;
    
    printk("Thread A init (periodic)\n");
     3f8:	481f      	ldr	r0, [pc, #124]	; (478 <CONFIG_FLASH_SIZE+0x78>)

    /* Thread loop */
    while(1) {
        
        /* Do the workload */          
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     3fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 484 <CONFIG_FLASH_SIZE+0x84>
        
        ab++;
     3fe:	4f1f      	ldr	r7, [pc, #124]	; (47c <CONFIG_FLASH_SIZE+0x7c>)
        printk("Thread A set ab value to: %d \n",ab);  
     400:	f8df 9084 	ldr.w	r9, [pc, #132]	; 488 <CONFIG_FLASH_SIZE+0x88>
    printk("Thread A init (periodic)\n");
     404:	f006 fbee 	bl	6be4 <printk>
    release_time = k_uptime_get() + thread_A_period;
     408:	f006 fb0a 	bl	6a20 <k_uptime_get>
     40c:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
     410:	f141 0500 	adc.w	r5, r1, #0
    long int nact = 0;
     414:	2600      	movs	r6, #0
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     416:	f006 fb03 	bl	6a20 <k_uptime_get>
     41a:	3601      	adds	r6, #1
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4640      	mov	r0, r8
     422:	4631      	mov	r1, r6
     424:	f006 fbde 	bl	6be4 <printk>
        ab++;
     428:	6839      	ldr	r1, [r7, #0]
        printk("Thread A set ab value to: %d \n",ab);  
     42a:	4648      	mov	r0, r9
        ab++;
     42c:	3101      	adds	r1, #1
     42e:	6039      	str	r1, [r7, #0]
        printk("Thread A set ab value to: %d \n",ab);  
     430:	f006 fbd8 	bl	6be4 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     434:	4812      	ldr	r0, [pc, #72]	; (480 <CONFIG_FLASH_SIZE+0x80>)
     436:	f005 fb97 	bl	5b68 <z_impl_k_sem_give>
        
        k_sem_give(&sem_ab);
       
        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
     43a:	f006 faf1 	bl	6a20 <k_uptime_get>
     43e:	460b      	mov	r3, r1
        if( fin_time < release_time) {
     440:	42a0      	cmp	r0, r4
     442:	eb73 0105 	sbcs.w	r1, r3, r5
        fin_time = k_uptime_get();
     446:	4602      	mov	r2, r0
        if( fin_time < release_time) {
     448:	dae5      	bge.n	416 <CONFIG_FLASH_SIZE+0x16>
            k_msleep(release_time - fin_time);
     44a:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     44e:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     452:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     456:	f240 30e7 	movw	r0, #999	; 0x3e7
     45a:	2100      	movs	r1, #0
     45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     460:	2300      	movs	r3, #0
     462:	fbce 010c 	smlal	r0, r1, lr, ip
     466:	f7ff fe4b 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     46a:	f005 fa8b 	bl	5984 <z_impl_k_sleep>
            release_time += thread_A_period;
     46e:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     472:	f145 0500 	adc.w	r5, r5, #0
     476:	e7ce      	b.n	416 <CONFIG_FLASH_SIZE+0x16>
     478:	0000755c 	.word	0x0000755c
     47c:	20000000 	.word	0x20000000
     480:	20000450 	.word	0x20000450
     484:	00007576 	.word	0x00007576
     488:	000075ad 	.word	0x000075ad

0000048c <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     48e:	4813      	ldr	r0, [pc, #76]	; (4dc <thread_B_code+0x50>)
	return z_impl_k_sem_take(sem, timeout);
     490:	4f13      	ldr	r7, [pc, #76]	; (4e0 <thread_B_code+0x54>)
    while(1) {
        k_sem_take(&sem_ab,  K_FOREVER);
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     492:	4e14      	ldr	r6, [pc, #80]	; (4e4 <thread_B_code+0x58>)
        printk("Task B read ab value: %d\n",ab);
     494:	4d14      	ldr	r5, [pc, #80]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     496:	f006 fba5 	bl	6be4 <printk>
    long int nact = 0;
     49a:	2400      	movs	r4, #0
     49c:	f04f 32ff 	mov.w	r2, #4294967295
     4a0:	f04f 33ff 	mov.w	r3, #4294967295
     4a4:	4638      	mov	r0, r7
     4a6:	f005 fb9d 	bl	5be4 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     4aa:	f006 fab9 	bl	6a20 <k_uptime_get>
     4ae:	3401      	adds	r4, #1
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4630      	mov	r0, r6
     4b6:	4621      	mov	r1, r4
     4b8:	f006 fb94 	bl	6be4 <printk>
        printk("Task B read ab value: %d\n",ab);
     4bc:	6829      	ldr	r1, [r5, #0]
     4be:	480b      	ldr	r0, [pc, #44]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4c0:	f006 fb90 	bl	6be4 <printk>
        bc++;
     4c4:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
        printk("Thread B set bc value to: %d \n",bc);  
     4c6:	480b      	ldr	r0, [pc, #44]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
        bc++;
     4c8:	6819      	ldr	r1, [r3, #0]
     4ca:	3101      	adds	r1, #1
     4cc:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d \n",bc);  
     4ce:	f006 fb89 	bl	6be4 <printk>
	z_impl_k_sem_give(sem);
     4d2:	4809      	ldr	r0, [pc, #36]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4d4:	f005 fb48 	bl	5b68 <z_impl_k_sem_give>
    while(1) {
     4d8:	e7e0      	b.n	49c <thread_B_code+0x10>
     4da:	bf00      	nop
     4dc:	000075cc 	.word	0x000075cc
     4e0:	20000450 	.word	0x20000450
     4e4:	00007606 	.word	0x00007606
     4e8:	20000000 	.word	0x20000000
     4ec:	0000763b 	.word	0x0000763b
     4f0:	20000004 	.word	0x20000004
     4f4:	00007655 	.word	0x00007655
     4f8:	20000460 	.word	0x20000460

000004fc <thread_C_code>:
        k_sem_give(&sem_bc);
  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     4fe:	480e      	ldr	r0, [pc, #56]	; (538 <thread_C_code+0x3c>)
	return z_impl_k_sem_take(sem, timeout);
     500:	4f0e      	ldr	r7, [pc, #56]	; (53c <thread_C_code+0x40>)
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     502:	4e0f      	ldr	r6, [pc, #60]	; (540 <thread_C_code+0x44>)
        printk("Task C read bc value: %d\n",bc);        
     504:	4d0f      	ldr	r5, [pc, #60]	; (544 <thread_C_code+0x48>)
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     506:	f006 fb6d 	bl	6be4 <printk>
    long int nact = 0;
     50a:	2400      	movs	r4, #0
     50c:	f04f 32ff 	mov.w	r2, #4294967295
     510:	f04f 33ff 	mov.w	r3, #4294967295
     514:	4638      	mov	r0, r7
     516:	f005 fb65 	bl	5be4 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     51a:	f006 fa81 	bl	6a20 <k_uptime_get>
     51e:	3401      	adds	r4, #1
     520:	4602      	mov	r2, r0
     522:	460b      	mov	r3, r1
     524:	4630      	mov	r0, r6
     526:	4621      	mov	r1, r4
     528:	f006 fb5c 	bl	6be4 <printk>
        printk("Task C read bc value: %d\n",bc);        
     52c:	6829      	ldr	r1, [r5, #0]
     52e:	4806      	ldr	r0, [pc, #24]	; (548 <thread_C_code+0x4c>)
     530:	f006 fb58 	bl	6be4 <printk>
    while(1) {
     534:	e7ea      	b.n	50c <thread_C_code+0x10>
     536:	bf00      	nop
     538:	00007674 	.word	0x00007674
     53c:	20000460 	.word	0x20000460
     540:	000076ae 	.word	0x000076ae
     544:	20000004 	.word	0x20000004
     548:	000076e4 	.word	0x000076e4

0000054c <main>:
void main(void) {
     54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     550:	b08a      	sub	sp, #40	; 0x28
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     552:	4841      	ldr	r0, [pc, #260]	; (658 <main+0x10c>)
     554:	f003 fe14 	bl	4180 <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
     558:	4604      	mov	r4, r0
     55a:	b908      	cbnz	r0, 560 <main+0x14>
	printk("Error: PWM device %s is not ready\n", pwm0_dev->name);
     55c:	6803      	ldr	r3, [r0, #0]
     55e:	deff      	udf	#255	; 0xff
        printk("PWM device %s is ready\n", pwm0_dev->name);            
     560:	6801      	ldr	r1, [r0, #0]
     562:	483e      	ldr	r0, [pc, #248]	; (65c <main+0x110>)
     564:	f006 fb3e 	bl	6be4 <printk>
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     568:	68a3      	ldr	r3, [r4, #8]
     56a:	aa08      	add	r2, sp, #32
     56c:	685b      	ldr	r3, [r3, #4]
     56e:	210e      	movs	r1, #14
     570:	4620      	mov	r0, r4
     572:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     574:	4605      	mov	r5, r0
     576:	b140      	cbz	r0, 58a <main+0x3e>
		return -EIO;
     578:	f06f 0404 	mvn.w	r4, #4
      printk("Error %d: failed to set pulse width\n", ret);
     57c:	4838      	ldr	r0, [pc, #224]	; (660 <main+0x114>)
     57e:	4621      	mov	r1, r4
     580:	f006 fb30 	bl	6be4 <printk>
} 
     584:	b00a      	add	sp, #40	; 0x28
     586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     58a:	9e08      	ldr	r6, [sp, #32]
     58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     58e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     592:	fba6 6703 	umull	r6, r7, r6, r3
     596:	fb03 7702 	mla	r7, r3, r2, r7
     59a:	4630      	mov	r0, r6
     59c:	4a31      	ldr	r2, [pc, #196]	; (664 <main+0x118>)
     59e:	2300      	movs	r3, #0
     5a0:	4639      	mov	r1, r7
     5a2:	f7ff fdad 	bl	100 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     5a6:	4930      	ldr	r1, [pc, #192]	; (668 <main+0x11c>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     5a8:	4602      	mov	r2, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     5aa:	42b9      	cmp	r1, r7
     5ac:	f04f 30ff 	mov.w	r0, #4294967295
     5b0:	bf08      	it	eq
     5b2:	42b0      	cmpeq	r0, r6
     5b4:	d202      	bcs.n	5bc <main+0x70>
		return -ENOTSUP;
     5b6:	f06f 0485 	mvn.w	r4, #133	; 0x85
     5ba:	e7df      	b.n	57c <main+0x30>
	return api->pin_set(dev, pwm, period, pulse, flags);
     5bc:	68a3      	ldr	r3, [r4, #8]
     5be:	9500      	str	r5, [sp, #0]
     5c0:	681d      	ldr	r5, [r3, #0]
     5c2:	4620      	mov	r0, r4
     5c4:	4613      	mov	r3, r2
     5c6:	210e      	movs	r1, #14
     5c8:	47a8      	blx	r5
    if (ret) {
     5ca:	4604      	mov	r4, r0
     5cc:	2800      	cmp	r0, #0
     5ce:	d1d5      	bne.n	57c <main+0x30>
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     5d0:	4826      	ldr	r0, [pc, #152]	; (66c <main+0x120>)
     5d2:	f001 fdab 	bl	212c <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     5d6:	2201      	movs	r2, #1
     5d8:	4621      	mov	r1, r4
     5da:	4825      	ldr	r0, [pc, #148]	; (670 <main+0x124>)
     5dc:	f006 fd79 	bl	70d2 <z_impl_k_sem_init>
     5e0:	2201      	movs	r2, #1
     5e2:	4621      	mov	r1, r4
     5e4:	4823      	ldr	r0, [pc, #140]	; (674 <main+0x128>)
     5e6:	f006 fd74 	bl	70d2 <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     5ea:	2600      	movs	r6, #0
     5ec:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     5ee:	2501      	movs	r5, #1
     5f0:	e9cd 6706 	strd	r6, r7, [sp, #24]
     5f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
     5f8:	e9cd 4400 	strd	r4, r4, [sp]
     5fc:	4b1e      	ldr	r3, [pc, #120]	; (678 <main+0x12c>)
     5fe:	491f      	ldr	r1, [pc, #124]	; (67c <main+0x130>)
     600:	9404      	str	r4, [sp, #16]
     602:	f44f 6280 	mov.w	r2, #1024	; 0x400
     606:	481e      	ldr	r0, [pc, #120]	; (680 <main+0x134>)
     608:	f005 fbda 	bl	5dc0 <z_impl_k_thread_create>
     60c:	4b1d      	ldr	r3, [pc, #116]	; (684 <main+0x138>)
     60e:	6018      	str	r0, [r3, #0]
     610:	4b1d      	ldr	r3, [pc, #116]	; (688 <main+0x13c>)
     612:	491e      	ldr	r1, [pc, #120]	; (68c <main+0x140>)
     614:	9400      	str	r4, [sp, #0]
     616:	e9cd 6706 	strd	r6, r7, [sp, #24]
     61a:	e9cd 5403 	strd	r5, r4, [sp, #12]
     61e:	e9cd 4401 	strd	r4, r4, [sp, #4]
     622:	f44f 6280 	mov.w	r2, #1024	; 0x400
     626:	481a      	ldr	r0, [pc, #104]	; (690 <main+0x144>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     628:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6a0 <main+0x154>
     62c:	f005 fbc8 	bl	5dc0 <z_impl_k_thread_create>
     630:	f8c8 0000 	str.w	r0, [r8]
     634:	4b17      	ldr	r3, [pc, #92]	; (694 <main+0x148>)
     636:	4918      	ldr	r1, [pc, #96]	; (698 <main+0x14c>)
     638:	4818      	ldr	r0, [pc, #96]	; (69c <main+0x150>)
     63a:	9400      	str	r4, [sp, #0]
     63c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     640:	e9cd 5403 	strd	r5, r4, [sp, #12]
     644:	e9cd 4401 	strd	r4, r4, [sp, #4]
     648:	f44f 6280 	mov.w	r2, #1024	; 0x400
     64c:	f005 fbb8 	bl	5dc0 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     650:	f8c8 0000 	str.w	r0, [r8]
    return;
     654:	e796      	b.n	584 <main+0x38>
     656:	bf00      	nop
     658:	000076fe 	.word	0x000076fe
     65c:	00007704 	.word	0x00007704
     660:	0000771c 	.word	0x0000771c
     664:	000f4240 	.word	0x000f4240
     668:	000f423f 	.word	0x000f423f
     66c:	00007741 	.word	0x00007741
     670:	20000450 	.word	0x20000450
     674:	20000460 	.word	0x20000460
     678:	000003f5 	.word	0x000003f5
     67c:	20001140 	.word	0x20001140
     680:	200001a8 	.word	0x200001a8
     684:	20000470 	.word	0x20000470
     688:	0000048d 	.word	0x0000048d
     68c:	20001560 	.word	0x20001560
     690:	20000228 	.word	0x20000228
     694:	000004fd 	.word	0x000004fd
     698:	20001980 	.word	0x20001980
     69c:	200002a8 	.word	0x200002a8
     6a0:	20000474 	.word	0x20000474

000006a4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a8:	b091      	sub	sp, #68	; 0x44
     6aa:	468b      	mov	fp, r1
     6ac:	9002      	str	r0, [sp, #8]
     6ae:	4692      	mov	sl, r2
     6b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6b2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6b4:	f89a 0000 	ldrb.w	r0, [sl]
     6b8:	b908      	cbnz	r0, 6be <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6ba:	4628      	mov	r0, r5
     6bc:	e35e      	b.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
		if (*fp != '%') {
     6be:	2825      	cmp	r0, #37	; 0x25
     6c0:	f10a 0701 	add.w	r7, sl, #1
     6c4:	d007      	beq.n	6d6 <cbvprintf+0x32>
			OUTC('%');
     6c6:	9b02      	ldr	r3, [sp, #8]
     6c8:	4659      	mov	r1, fp
     6ca:	4798      	blx	r3
     6cc:	2800      	cmp	r0, #0
     6ce:	f2c0 8355 	blt.w	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     6d2:	3501      	adds	r5, #1
			break;
     6d4:	e210      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		} state = {
     6d6:	2218      	movs	r2, #24
     6d8:	2100      	movs	r1, #0
     6da:	a80a      	add	r0, sp, #40	; 0x28
     6dc:	f006 fae5 	bl	6caa <memset>
	if (*sp == '%') {
     6e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     6e4:	2b25      	cmp	r3, #37	; 0x25
     6e6:	d078      	beq.n	7da <cbvprintf+0x136>
     6e8:	2200      	movs	r2, #0
     6ea:	4694      	mov	ip, r2
     6ec:	4616      	mov	r6, r2
     6ee:	4696      	mov	lr, r2
     6f0:	4610      	mov	r0, r2
     6f2:	4639      	mov	r1, r7
		switch (*sp) {
     6f4:	f817 3b01 	ldrb.w	r3, [r7], #1
     6f8:	2b2b      	cmp	r3, #43	; 0x2b
     6fa:	f000 809d 	beq.w	838 <CONFIG_ISR_STACK_SIZE+0x38>
     6fe:	f200 8094 	bhi.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     702:	2b20      	cmp	r3, #32
     704:	f000 809b 	beq.w	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     708:	2b23      	cmp	r3, #35	; 0x23
     70a:	f000 809a 	beq.w	842 <CONFIG_ISR_STACK_SIZE+0x42>
     70e:	b128      	cbz	r0, 71c <cbvprintf+0x78>
     710:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     714:	f040 0004 	orr.w	r0, r0, #4
     718:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     71c:	f1be 0f00 	cmp.w	lr, #0
     720:	d005      	beq.n	72e <cbvprintf+0x8a>
     722:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     726:	f040 0008 	orr.w	r0, r0, #8
     72a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     72e:	b12e      	cbz	r6, 73c <cbvprintf+0x98>
     730:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     734:	f040 0010 	orr.w	r0, r0, #16
     738:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     73c:	f1bc 0f00 	cmp.w	ip, #0
     740:	d005      	beq.n	74e <cbvprintf+0xaa>
     742:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     746:	f040 0020 	orr.w	r0, r0, #32
     74a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     74e:	b12a      	cbz	r2, 75c <cbvprintf+0xb8>
     750:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     758:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     75c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     760:	f002 0044 	and.w	r0, r2, #68	; 0x44
     764:	2844      	cmp	r0, #68	; 0x44
     766:	d103      	bne.n	770 <cbvprintf+0xcc>
		conv->flag_zero = false;
     768:	f36f 1286 	bfc	r2, #6, #1
     76c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     770:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     774:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     77a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     77e:	d17b      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		conv->width_star = true;
     780:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     784:	f042 0201 	orr.w	r2, r2, #1
     788:	1c4b      	adds	r3, r1, #1
     78a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     78e:	781a      	ldrb	r2, [r3, #0]
     790:	2a2e      	cmp	r2, #46	; 0x2e
     792:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     796:	bf0c      	ite	eq
     798:	2101      	moveq	r1, #1
     79a:	2100      	movne	r1, #0
     79c:	f361 0241 	bfi	r2, r1, #1, #1
     7a0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     7a4:	d174      	bne.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
	if (*sp == '*') {
     7a6:	785a      	ldrb	r2, [r3, #1]
     7a8:	2a2a      	cmp	r2, #42	; 0x2a
     7aa:	d06a      	beq.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
     7ac:	3301      	adds	r3, #1
	size_t val = 0;
     7ae:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     7b0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7b2:	4618      	mov	r0, r3
     7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
     7b8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7bc:	2f09      	cmp	r7, #9
     7be:	f240 808e 	bls.w	8de <CONFIG_ISR_STACK_SIZE+0xde>
	conv->unsupported |= ((conv->prec_value < 0)
     7c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     7c6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     7c8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     7cc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     7d0:	f361 0241 	bfi	r2, r1, #1, #1
     7d4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     7d8:	e05a      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
		conv->specifier = *sp++;
     7da:	f10a 0702 	add.w	r7, sl, #2
     7de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     7e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7e6:	07d9      	lsls	r1, r3, #31
     7e8:	f140 8149 	bpl.w	a7e <CONFIG_ISR_STACK_SIZE+0x27e>
			width = va_arg(ap, int);
     7ec:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     7f0:	f1b9 0f00 	cmp.w	r9, #0
     7f4:	da07      	bge.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
				conv->flag_dash = true;
     7f6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     7fa:	f042 0204 	orr.w	r2, r2, #4
     7fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     802:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     806:	075a      	lsls	r2, r3, #29
     808:	f140 8142 	bpl.w	a90 <CONFIG_ISR_STACK_SIZE+0x290>
			int arg = va_arg(ap, int);
     80c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     810:	f1b8 0f00 	cmp.w	r8, #0
     814:	f280 8141 	bge.w	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
				conv->prec_present = false;
     818:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     81c:	f36f 0341 	bfc	r3, #1, #1
     820:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     824:	f04f 38ff 	mov.w	r8, #4294967295
     828:	e137      	b.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
		switch (*sp) {
     82a:	2b2d      	cmp	r3, #45	; 0x2d
     82c:	d00c      	beq.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     82e:	2b30      	cmp	r3, #48	; 0x30
     830:	f47f af6d 	bne.w	70e <cbvprintf+0x6a>
			conv->flag_zero = true;
     834:	2201      	movs	r2, #1
	} while (loop);
     836:	e75c      	b.n	6f2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     838:	f04f 0e01 	mov.w	lr, #1
     83c:	e759      	b.n	6f2 <cbvprintf+0x4e>
			conv->flag_space = true;
     83e:	2601      	movs	r6, #1
     840:	e757      	b.n	6f2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     842:	f04f 0c01 	mov.w	ip, #1
     846:	e754      	b.n	6f2 <cbvprintf+0x4e>
		switch (*sp) {
     848:	2001      	movs	r0, #1
     84a:	e752      	b.n	6f2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     84c:	fb0c 0202 	mla	r2, ip, r2, r0
     850:	3a30      	subs	r2, #48	; 0x30
     852:	4633      	mov	r3, r6
     854:	461e      	mov	r6, r3
     856:	f816 0b01 	ldrb.w	r0, [r6], #1
     85a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     85e:	2f09      	cmp	r7, #9
     860:	d9f4      	bls.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
	if (sp != wp) {
     862:	4299      	cmp	r1, r3
     864:	d093      	beq.n	78e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     866:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     86a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     86c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     86e:	f362 0141 	bfi	r1, r2, #1, #1
     872:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     876:	e78a      	b.n	78e <cbvprintf+0xea>
     878:	460b      	mov	r3, r1
	size_t val = 0;
     87a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     87c:	f04f 0c0a 	mov.w	ip, #10
     880:	e7e8      	b.n	854 <CONFIG_ISR_STACK_SIZE+0x54>
		conv->prec_star = true;
     882:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     886:	f042 0204 	orr.w	r2, r2, #4
     88a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     88e:	3302      	adds	r3, #2
	switch (*sp) {
     890:	461f      	mov	r7, r3
     892:	f817 2b01 	ldrb.w	r2, [r7], #1
     896:	2a6c      	cmp	r2, #108	; 0x6c
     898:	d041      	beq.n	91e <CONFIG_ISR_STACK_SIZE+0x11e>
     89a:	d825      	bhi.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
     89c:	2a68      	cmp	r2, #104	; 0x68
     89e:	d02b      	beq.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
     8a0:	2a6a      	cmp	r2, #106	; 0x6a
     8a2:	d046      	beq.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     8a4:	2a4c      	cmp	r2, #76	; 0x4c
     8a6:	d04c      	beq.n	942 <CONFIG_ISR_STACK_SIZE+0x142>
     8a8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     8aa:	f817 2b01 	ldrb.w	r2, [r7], #1
     8ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8b2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     8b6:	2a78      	cmp	r2, #120	; 0x78
     8b8:	f200 80d9 	bhi.w	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
     8bc:	2a57      	cmp	r2, #87	; 0x57
     8be:	d84d      	bhi.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
     8c0:	2a41      	cmp	r2, #65	; 0x41
     8c2:	d003      	beq.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     8c4:	3a45      	subs	r2, #69	; 0x45
     8c6:	2a02      	cmp	r2, #2
     8c8:	f200 80d1 	bhi.w	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
		conv->specifier_cat = SPECIFIER_FP;
     8cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     8d0:	2204      	movs	r2, #4
     8d2:	f362 0302 	bfi	r3, r2, #0, #3
     8d6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     8da:	2301      	movs	r3, #1
			break;
     8dc:	e09e      	b.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
		val = 10U * val + *sp++ - '0';
     8de:	fb06 2101 	mla	r1, r6, r1, r2
     8e2:	3930      	subs	r1, #48	; 0x30
     8e4:	4603      	mov	r3, r0
     8e6:	e764      	b.n	7b2 <cbvprintf+0x10e>
	switch (*sp) {
     8e8:	2a74      	cmp	r2, #116	; 0x74
     8ea:	d026      	beq.n	93a <CONFIG_ISR_STACK_SIZE+0x13a>
     8ec:	2a7a      	cmp	r2, #122	; 0x7a
     8ee:	d1db      	bne.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
		conv->length_mod = LENGTH_Z;
     8f0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8f4:	2206      	movs	r2, #6
     8f6:	e00d      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		if (*++sp == 'h') {
     8f8:	785a      	ldrb	r2, [r3, #1]
     8fa:	2a68      	cmp	r2, #104	; 0x68
     8fc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     900:	d106      	bne.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
			conv->length_mod = LENGTH_HH;
     902:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     904:	f361 02c6 	bfi	r2, r1, #3, #4
     908:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     90c:	1c9f      	adds	r7, r3, #2
     90e:	e7cc      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
			conv->length_mod = LENGTH_H;
     910:	4613      	mov	r3, r2
     912:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     914:	f362 03c6 	bfi	r3, r2, #3, #4
     918:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     91c:	e7c5      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
		if (*++sp == 'l') {
     91e:	785a      	ldrb	r2, [r3, #1]
     920:	2a6c      	cmp	r2, #108	; 0x6c
     922:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     926:	d101      	bne.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
			conv->length_mod = LENGTH_LL;
     928:	2104      	movs	r1, #4
     92a:	e7eb      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
			conv->length_mod = LENGTH_L;
     92c:	4613      	mov	r3, r2
     92e:	2203      	movs	r2, #3
     930:	e7f0      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->length_mod = LENGTH_J;
     932:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     936:	2205      	movs	r2, #5
     938:	e7ec      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->length_mod = LENGTH_T;
     93a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     93e:	2207      	movs	r2, #7
     940:	e7e8      	b.n	914 <CONFIG_ISR_STACK_SIZE+0x114>
		conv->unsupported = true;
     942:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     946:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     94a:	f023 0302 	bic.w	r3, r3, #2
     94e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     952:	f043 0302 	orr.w	r3, r3, #2
     956:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     95a:	e7a6      	b.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     95c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     960:	2920      	cmp	r1, #32
     962:	f200 8084 	bhi.w	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
     966:	a001      	add	r0, pc, #4	; (adr r0, 96c <CONFIG_ISR_STACK_SIZE+0x16c>)
     968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     96c:	00000a31 	.word	0x00000a31
     970:	00000a6f 	.word	0x00000a6f
     974:	00000a6f 	.word	0x00000a6f
     978:	00000a6f 	.word	0x00000a6f
     97c:	00000a6f 	.word	0x00000a6f
     980:	00000a6f 	.word	0x00000a6f
     984:	00000a6f 	.word	0x00000a6f
     988:	00000a6f 	.word	0x00000a6f
     98c:	00000a6f 	.word	0x00000a6f
     990:	000008cd 	.word	0x000008cd
     994:	00000a6f 	.word	0x00000a6f
     998:	00000a31 	.word	0x00000a31
     99c:	000009f1 	.word	0x000009f1
     9a0:	000008cd 	.word	0x000008cd
     9a4:	000008cd 	.word	0x000008cd
     9a8:	000008cd 	.word	0x000008cd
     9ac:	00000a6f 	.word	0x00000a6f
     9b0:	000009f1 	.word	0x000009f1
     9b4:	00000a6f 	.word	0x00000a6f
     9b8:	00000a6f 	.word	0x00000a6f
     9bc:	00000a6f 	.word	0x00000a6f
     9c0:	00000a6f 	.word	0x00000a6f
     9c4:	00000a39 	.word	0x00000a39
     9c8:	00000a31 	.word	0x00000a31
     9cc:	00000a55 	.word	0x00000a55
     9d0:	00000a6f 	.word	0x00000a6f
     9d4:	00000a6f 	.word	0x00000a6f
     9d8:	00000a55 	.word	0x00000a55
     9dc:	00000a6f 	.word	0x00000a6f
     9e0:	00000a31 	.word	0x00000a31
     9e4:	00000a6f 	.word	0x00000a6f
     9e8:	00000a6f 	.word	0x00000a6f
     9ec:	00000a31 	.word	0x00000a31
		conv->specifier_cat = SPECIFIER_SINT;
     9f0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9f4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9fa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fe:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a00:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     a04:	bf02      	ittt	eq
     a06:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     a0a:	f041 0101 	orreq.w	r1, r1, #1
     a0e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     a12:	2a63      	cmp	r2, #99	; 0x63
     a14:	d131      	bne.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a16:	3b00      	subs	r3, #0
     a18:	bf18      	it	ne
     a1a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     a1c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a20:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a24:	430b      	orrs	r3, r1
     a26:	f363 0241 	bfi	r2, r3, #1, #1
     a2a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a2e:	e6d8      	b.n	7e2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     a30:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a34:	2002      	movs	r0, #2
     a36:	e7de      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->specifier_cat = SPECIFIER_PTR;
     a38:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a3c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     a40:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     a44:	2103      	movs	r1, #3
     a46:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a4a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a4c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a50:	4143      	adcs	r3, r0
     a52:	e7e3      	b.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
		conv->specifier_cat = SPECIFIER_PTR;
     a54:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     a58:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     a5a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a5e:	f361 0202 	bfi	r2, r1, #0, #3
     a62:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a66:	bf14      	ite	ne
     a68:	2301      	movne	r3, #1
     a6a:	2300      	moveq	r3, #0
     a6c:	e7d6      	b.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
		conv->invalid = true;
     a6e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a72:	f043 0301 	orr.w	r3, r3, #1
     a76:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a7a:	2300      	movs	r3, #0
     a7c:	e7ce      	b.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
		} else if (conv->width_present) {
     a7e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a82:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a84:	bfb4      	ite	lt
     a86:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     a8a:	f04f 39ff 	movge.w	r9, #4294967295
     a8e:	e6ba      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
		} else if (conv->prec_present) {
     a90:	079b      	lsls	r3, r3, #30
     a92:	f57f aec7 	bpl.w	824 <CONFIG_ISR_STACK_SIZE+0x24>
			precision = conv->prec_value;
     a96:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a9a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a9e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     aa0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     aa4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     aa8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     aac:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     aae:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ab2:	d136      	bne.n	b22 <CONFIG_ISR_STACK_SIZE+0x322>
			switch (length_mod) {
     ab4:	1ed3      	subs	r3, r2, #3
     ab6:	2b04      	cmp	r3, #4
     ab8:	d820      	bhi.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
     aba:	e8df f003 	tbb	[pc, r3]
     abe:	0703      	.short	0x0703
     ac0:	1f07      	.short	0x1f07
     ac2:	1f          	.byte	0x1f
     ac3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ac4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ac8:	17c1      	asrs	r1, r0, #31
     aca:	e004      	b.n	ad6 <CONFIG_ISR_STACK_SIZE+0x2d6>
					(sint_value_type)va_arg(ap, intmax_t);
     acc:	3407      	adds	r4, #7
     ace:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ad2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     ad6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ada:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ade:	f013 0603 	ands.w	r6, r3, #3
     ae2:	d054      	beq.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
			OUTS(sp, fp);
     ae4:	9802      	ldr	r0, [sp, #8]
     ae6:	463b      	mov	r3, r7
     ae8:	4652      	mov	r2, sl
     aea:	4659      	mov	r1, fp
     aec:	f005 fff8 	bl	6ae0 <outs>
     af0:	2800      	cmp	r0, #0
     af2:	f2c0 8143 	blt.w	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     af6:	4405      	add	r5, r0
			continue;
     af8:	46ba      	mov	sl, r7
     afa:	e5db      	b.n	6b4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     afc:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     b00:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b02:	ea4f 71e0 	mov.w	r1, r0, asr #31
     b06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b0a:	d105      	bne.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				value->uint = (unsigned char)value->uint;
     b0c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     b10:	930a      	str	r3, [sp, #40]	; 0x28
     b12:	2300      	movs	r3, #0
     b14:	930b      	str	r3, [sp, #44]	; 0x2c
     b16:	e7e0      	b.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
			} else if (length_mod == LENGTH_H) {
     b18:	2a02      	cmp	r2, #2
     b1a:	d1de      	bne.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
				value->sint = (short)value->sint;
     b1c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     b20:	e7d2      	b.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b22:	2b02      	cmp	r3, #2
     b24:	d123      	bne.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
			switch (length_mod) {
     b26:	1ed3      	subs	r3, r2, #3
     b28:	2b04      	cmp	r3, #4
     b2a:	d813      	bhi.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     b2c:	e8df f003 	tbb	[pc, r3]
     b30:	120a0a03 	.word	0x120a0a03
     b34:	12          	.byte	0x12
     b35:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     b36:	6820      	ldr	r0, [r4, #0]
     b38:	900a      	str	r0, [sp, #40]	; 0x28
     b3a:	2100      	movs	r1, #0
     b3c:	1d23      	adds	r3, r4, #4
     b3e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     b40:	461c      	mov	r4, r3
     b42:	e7ca      	b.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
					(uint_value_type)va_arg(ap,
     b44:	3407      	adds	r4, #7
     b46:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     b4a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     b4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     b52:	e7f5      	b.n	b40 <CONFIG_ISR_STACK_SIZE+0x340>
					(uint_value_type)va_arg(ap, size_t);
     b54:	f854 3b04 	ldr.w	r3, [r4], #4
     b58:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b5a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     b5c:	f04f 0300 	mov.w	r3, #0
     b60:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b62:	d0d3      	beq.n	b0c <CONFIG_ISR_STACK_SIZE+0x30c>
			} else if (length_mod == LENGTH_H) {
     b64:	2a02      	cmp	r2, #2
     b66:	d1b8      	bne.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
				value->uint = (unsigned short)value->uint;
     b68:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     b6c:	e7d0      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		} else if (specifier_cat == SPECIFIER_FP) {
     b6e:	2b04      	cmp	r3, #4
     b70:	d107      	bne.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
			if (length_mod == LENGTH_UPPER_L) {
     b72:	3407      	adds	r4, #7
     b74:	f024 0407 	bic.w	r4, r4, #7
     b78:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     b7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     b80:	e7ab      	b.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b82:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b84:	bf04      	itt	eq
     b86:	f854 3b04 	ldreq.w	r3, [r4], #4
     b8a:	930a      	streq	r3, [sp, #40]	; 0x28
     b8c:	e7a5      	b.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
		switch (conv->specifier) {
     b8e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b92:	2878      	cmp	r0, #120	; 0x78
     b94:	d8b0      	bhi.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     b96:	2862      	cmp	r0, #98	; 0x62
     b98:	d822      	bhi.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     b9a:	2825      	cmp	r0, #37	; 0x25
     b9c:	f43f ad93 	beq.w	6c6 <cbvprintf+0x22>
     ba0:	2858      	cmp	r0, #88	; 0x58
     ba2:	d1a9      	bne.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ba4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ba8:	9300      	str	r3, [sp, #0]
     baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     bae:	ab04      	add	r3, sp, #16
     bb0:	aa0c      	add	r2, sp, #48	; 0x30
     bb2:	f005 ff4a 	bl	6a4a <encode_uint>
     bb6:	4682      	mov	sl, r0
			if (precision >= 0) {
     bb8:	f1b8 0f00 	cmp.w	r8, #0
     bbc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     bc0:	db0c      	blt.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
				conv->flag_zero = false;
     bc2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     bc6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     bca:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     bce:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     bd0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     bd4:	d902      	bls.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
					conv->pad0_value = precision - (int)len;
     bd6:	eba8 0303 	sub.w	r3, r8, r3
     bda:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     bdc:	4680      	mov	r8, r0
     bde:	e03d      	b.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
     be0:	3863      	subs	r0, #99	; 0x63
     be2:	2815      	cmp	r0, #21
     be4:	d888      	bhi.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     be6:	a101      	add	r1, pc, #4	; (adr r1, bec <CONFIG_ISR_STACK_SIZE+0x3ec>)
     be8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     bec:	00000c6d 	.word	0x00000c6d
     bf0:	00000cd1 	.word	0x00000cd1
     bf4:	00000af9 	.word	0x00000af9
     bf8:	00000af9 	.word	0x00000af9
     bfc:	00000af9 	.word	0x00000af9
     c00:	00000af9 	.word	0x00000af9
     c04:	00000cd1 	.word	0x00000cd1
     c08:	00000af9 	.word	0x00000af9
     c0c:	00000af9 	.word	0x00000af9
     c10:	00000af9 	.word	0x00000af9
     c14:	00000af9 	.word	0x00000af9
     c18:	00000d2f 	.word	0x00000d2f
     c1c:	00000cfd 	.word	0x00000cfd
     c20:	00000d01 	.word	0x00000d01
     c24:	00000af9 	.word	0x00000af9
     c28:	00000af9 	.word	0x00000af9
     c2c:	00000c45 	.word	0x00000c45
     c30:	00000af9 	.word	0x00000af9
     c34:	00000cfd 	.word	0x00000cfd
     c38:	00000af9 	.word	0x00000af9
     c3c:	00000af9 	.word	0x00000af9
     c40:	00000cfd 	.word	0x00000cfd
			if (precision >= 0) {
     c44:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     c48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c4c:	db0a      	blt.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
				len = strnlen(bps, precision);
     c4e:	4641      	mov	r1, r8
     c50:	4650      	mov	r0, sl
     c52:	f006 f80a 	bl	6c6a <strnlen>
			bpe = bps + len;
     c56:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     c5a:	2600      	movs	r6, #0
		if (bps == NULL) {
     c5c:	f1ba 0f00 	cmp.w	sl, #0
     c60:	d10c      	bne.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
     c62:	e749      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
				len = strlen(bps);
     c64:	4650      	mov	r0, sl
     c66:	f005 fff9 	bl	6c5c <strlen>
     c6a:	e7f4      	b.n	c56 <CONFIG_ISR_STACK_SIZE+0x456>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c6e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     c72:	2600      	movs	r6, #0
			bpe = buf + 1;
     c74:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     c78:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     c7c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c80:	b106      	cbz	r6, c84 <CONFIG_ISR_STACK_SIZE+0x484>
			nj_len += 1U;
     c82:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c88:	06d0      	lsls	r0, r2, #27
     c8a:	d56b      	bpl.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
			nj_len += 2U;
     c8c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c8e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c90:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c92:	bf48      	it	mi
     c94:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c96:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c98:	bf48      	it	mi
     c9a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c9c:	f1b9 0f00 	cmp.w	r9, #0
     ca0:	dd79      	ble.n	d96 <CONFIG_ISR_STACK_SIZE+0x596>
			if (!conv->flag_dash) {
     ca2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     ca6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     caa:	f3c2 0380 	ubfx	r3, r2, #2, #1
     cae:	9303      	str	r3, [sp, #12]
     cb0:	0753      	lsls	r3, r2, #29
     cb2:	d470      	bmi.n	d96 <CONFIG_ISR_STACK_SIZE+0x596>
				if (conv->flag_zero) {
     cb4:	0650      	lsls	r0, r2, #25
     cb6:	d564      	bpl.n	d82 <CONFIG_ISR_STACK_SIZE+0x582>
					if (sign != 0) {
     cb8:	b146      	cbz	r6, ccc <CONFIG_ISR_STACK_SIZE+0x4cc>
						OUTC(sign);
     cba:	9b02      	ldr	r3, [sp, #8]
     cbc:	4659      	mov	r1, fp
     cbe:	4630      	mov	r0, r6
     cc0:	4798      	blx	r3
     cc2:	2800      	cmp	r0, #0
     cc4:	db5a      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
						sign = 0;
     cc6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     cc8:	3501      	adds	r5, #1
						sign = 0;
     cca:	461e      	mov	r6, r3
					pad = '0';
     ccc:	2330      	movs	r3, #48	; 0x30
     cce:	e059      	b.n	d84 <CONFIG_ISR_STACK_SIZE+0x584>
			if (conv->flag_plus) {
     cd0:	071e      	lsls	r6, r3, #28
     cd2:	d411      	bmi.n	cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>
				sign = ' ';
     cd4:	f013 0610 	ands.w	r6, r3, #16
     cd8:	bf18      	it	ne
     cda:	2620      	movne	r6, #32
			sint = value->sint;
     cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     ce0:	2a00      	cmp	r2, #0
     ce2:	f173 0100 	sbcs.w	r1, r3, #0
     ce6:	f6bf af5d 	bge.w	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
				value->uint = (uint_value_type)-sint;
     cea:	4252      	negs	r2, r2
     cec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     cf0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     cf4:	262d      	movs	r6, #45	; 0x2d
     cf6:	e755      	b.n	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
				sign = '+';
     cf8:	262b      	movs	r6, #43	; 0x2b
     cfa:	e7ef      	b.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
		switch (conv->specifier) {
     cfc:	2600      	movs	r6, #0
     cfe:	e751      	b.n	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
			if (value->ptr != NULL) {
     d00:	980a      	ldr	r0, [sp, #40]	; 0x28
     d02:	b348      	cbz	r0, d58 <CONFIG_ISR_STACK_SIZE+0x558>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d04:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     d08:	9300      	str	r3, [sp, #0]
     d0a:	aa0c      	add	r2, sp, #48	; 0x30
     d0c:	ab04      	add	r3, sp, #16
     d0e:	2100      	movs	r1, #0
     d10:	f005 fe9b 	bl	6a4a <encode_uint>
				conv->altform_0c = true;
     d14:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     d18:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d1c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d20:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d24:	4682      	mov	sl, r0
				conv->altform_0c = true;
     d26:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     d2a:	2600      	movs	r6, #0
				goto prec_int_pad0;
     d2c:	e744      	b.n	bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
				store_count(conv, value->ptr, count);
     d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     d30:	2a07      	cmp	r2, #7
     d32:	f63f aee1 	bhi.w	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
     d36:	e8df f002 	tbb	[pc, r2]
     d3a:	040d      	.short	0x040d
     d3c:	08080d06 	.word	0x08080d06
     d40:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     d42:	701d      	strb	r5, [r3, #0]
		break;
     d44:	e6d8      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		*(short *)dp = (short)count;
     d46:	801d      	strh	r5, [r3, #0]
		break;
     d48:	e6d6      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		*(intmax_t *)dp = (intmax_t)count;
     d4a:	4628      	mov	r0, r5
     d4c:	17e9      	asrs	r1, r5, #31
     d4e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     d52:	e6d1      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d54:	601d      	str	r5, [r3, #0]
		break;
     d56:	e6cf      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
			bpe = bps + 5;
     d58:	f8df 80c4 	ldr.w	r8, [pc, #196]	; e20 <CONFIG_ISR_STACK_SIZE+0x620>
     d5c:	4606      	mov	r6, r0
			bps = "(nil)";
     d5e:	f1a8 0a05 	sub.w	sl, r8, #5
     d62:	e78b      	b.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
		} else if (conv->altform_0) {
     d64:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d66:	bf48      	it	mi
     d68:	3301      	addmi	r3, #1
     d6a:	e790      	b.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
					OUTC(pad);
     d6c:	4618      	mov	r0, r3
     d6e:	9303      	str	r3, [sp, #12]
     d70:	4659      	mov	r1, fp
     d72:	9b02      	ldr	r3, [sp, #8]
     d74:	4798      	blx	r3
     d76:	2800      	cmp	r0, #0
     d78:	9b03      	ldr	r3, [sp, #12]
     d7a:	da04      	bge.n	d86 <CONFIG_ISR_STACK_SIZE+0x586>
#undef OUTS
#undef OUTC
}
     d7c:	b011      	add	sp, #68	; 0x44
     d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d82:	2320      	movs	r3, #32
     d84:	444d      	add	r5, r9
     d86:	464a      	mov	r2, r9
				while (width-- > 0) {
     d88:	2a00      	cmp	r2, #0
     d8a:	eba5 0109 	sub.w	r1, r5, r9
     d8e:	f109 39ff 	add.w	r9, r9, #4294967295
     d92:	dceb      	bgt.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     d94:	460d      	mov	r5, r1
		if (sign != 0) {
     d96:	b136      	cbz	r6, da6 <CONFIG_ISR_STACK_SIZE+0x5a6>
			OUTC(sign);
     d98:	9b02      	ldr	r3, [sp, #8]
     d9a:	4659      	mov	r1, fp
     d9c:	4630      	mov	r0, r6
     d9e:	4798      	blx	r3
     da0:	2800      	cmp	r0, #0
     da2:	dbeb      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     da4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     da6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     daa:	06d9      	lsls	r1, r3, #27
     dac:	d401      	bmi.n	db2 <CONFIG_ISR_STACK_SIZE+0x5b2>
     dae:	071a      	lsls	r2, r3, #28
     db0:	d506      	bpl.n	dc0 <CONFIG_ISR_STACK_SIZE+0x5c0>
				OUTC('0');
     db2:	9b02      	ldr	r3, [sp, #8]
     db4:	4659      	mov	r1, fp
     db6:	2030      	movs	r0, #48	; 0x30
     db8:	4798      	blx	r3
     dba:	2800      	cmp	r0, #0
     dbc:	dbde      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     dbe:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     dc0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     dc4:	06db      	lsls	r3, r3, #27
     dc6:	d507      	bpl.n	dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
				OUTC(conv->specifier);
     dc8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     dcc:	9b02      	ldr	r3, [sp, #8]
     dce:	4659      	mov	r1, fp
     dd0:	4798      	blx	r3
     dd2:	2800      	cmp	r0, #0
     dd4:	dbd2      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     dd6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dd8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     dda:	442e      	add	r6, r5
     ddc:	1b73      	subs	r3, r6, r5
     dde:	2b00      	cmp	r3, #0
     de0:	dc16      	bgt.n	e10 <CONFIG_ISR_STACK_SIZE+0x610>
			OUTS(bps, bpe);
     de2:	9802      	ldr	r0, [sp, #8]
     de4:	4643      	mov	r3, r8
     de6:	4652      	mov	r2, sl
     de8:	4659      	mov	r1, fp
     dea:	f005 fe79 	bl	6ae0 <outs>
     dee:	2800      	cmp	r0, #0
     df0:	dbc4      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     df2:	4405      	add	r5, r0
		while (width > 0) {
     df4:	44a9      	add	r9, r5
     df6:	eba9 0305 	sub.w	r3, r9, r5
     dfa:	2b00      	cmp	r3, #0
     dfc:	f77f ae7c 	ble.w	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
			OUTC(' ');
     e00:	9b02      	ldr	r3, [sp, #8]
     e02:	4659      	mov	r1, fp
     e04:	2020      	movs	r0, #32
     e06:	4798      	blx	r3
     e08:	2800      	cmp	r0, #0
     e0a:	dbb7      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     e0c:	3501      	adds	r5, #1
			--width;
     e0e:	e7f2      	b.n	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
				OUTC('0');
     e10:	9b02      	ldr	r3, [sp, #8]
     e12:	4659      	mov	r1, fp
     e14:	2030      	movs	r0, #48	; 0x30
     e16:	4798      	blx	r3
     e18:	2800      	cmp	r0, #0
     e1a:	dbaf      	blt.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
     e1c:	3501      	adds	r5, #1
     e1e:	e7dd      	b.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
     e20:	00007779 	.word	0x00007779

00000e24 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     e24:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     e26:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     e28:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     e2a:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     e2e:	2c03      	cmp	r4, #3
{
     e30:	4605      	mov	r5, r0
	switch (method) {
     e32:	d002      	beq.n	e3a <sys_notify_finalize+0x16>
     e34:	b12c      	cbz	r4, e42 <sys_notify_finalize+0x1e>
     e36:	2000      	movs	r0, #0
     e38:	e000      	b.n	e3c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     e3a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     e3c:	2300      	movs	r3, #0
     e3e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     e40:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     e42:	4a05      	ldr	r2, [pc, #20]	; (e58 <sys_notify_finalize+0x34>)
     e44:	4905      	ldr	r1, [pc, #20]	; (e5c <sys_notify_finalize+0x38>)
     e46:	4806      	ldr	r0, [pc, #24]	; (e60 <sys_notify_finalize+0x3c>)
     e48:	2345      	movs	r3, #69	; 0x45
     e4a:	f005 fecb 	bl	6be4 <printk>
     e4e:	4802      	ldr	r0, [pc, #8]	; (e58 <sys_notify_finalize+0x34>)
     e50:	2145      	movs	r1, #69	; 0x45
     e52:	f005 fdf3 	bl	6a3c <assert_post_action>
     e56:	e7ee      	b.n	e36 <sys_notify_finalize+0x12>
     e58:	0000777a 	.word	0x0000777a
     e5c:	00007898 	.word	0x00007898
     e60:	0000779d 	.word	0x0000779d

00000e64 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
     e64:	4801      	ldr	r0, [pc, #4]	; (e6c <nrf_cc3xx_platform_abort_init+0x8>)
     e66:	f005 bc49 	b.w	66fc <nrf_cc3xx_platform_set_abort>
     e6a:	bf00      	nop
     e6c:	00007398 	.word	0x00007398

00000e70 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e70:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     e72:	b1d0      	cbz	r0, eaa <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     e74:	6843      	ldr	r3, [r0, #4]
     e76:	2b04      	cmp	r3, #4
     e78:	d111      	bne.n	e9e <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     e7a:	2200      	movs	r2, #0
     e7c:	6803      	ldr	r3, [r0, #0]
     e7e:	f3bf 8f5b 	dmb	ish
     e82:	e853 1f00 	ldrex	r1, [r3]
     e86:	2901      	cmp	r1, #1
     e88:	d103      	bne.n	e92 <mutex_unlock_platform+0x22>
     e8a:	e843 2000 	strex	r0, r2, [r3]
     e8e:	2800      	cmp	r0, #0
     e90:	d1f7      	bne.n	e82 <mutex_unlock_platform+0x12>
     e92:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
     e96:	4807      	ldr	r0, [pc, #28]	; (eb4 <mutex_unlock_platform+0x44>)
     e98:	bf08      	it	eq
     e9a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
     e9c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e9e:	b13b      	cbz	r3, eb0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
     ea0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     ea2:	f003 fcc5 	bl	4830 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
     ea6:	2000      	movs	r0, #0
     ea8:	e7f8      	b.n	e9c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     eaa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     eae:	e7f5      	b.n	e9c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     eb0:	4801      	ldr	r0, [pc, #4]	; (eb8 <mutex_unlock_platform+0x48>)
     eb2:	e7f3      	b.n	e9c <mutex_unlock_platform+0x2c>
     eb4:	ffff8fe9 	.word	0xffff8fe9
     eb8:	ffff8fea 	.word	0xffff8fea

00000ebc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     ebc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     ebe:	4604      	mov	r4, r0
     ec0:	b918      	cbnz	r0, eca <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
     ec2:	4b0d      	ldr	r3, [pc, #52]	; (ef8 <mutex_free_platform+0x3c>)
     ec4:	480d      	ldr	r0, [pc, #52]	; (efc <mutex_free_platform+0x40>)
     ec6:	685b      	ldr	r3, [r3, #4]
     ec8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     eca:	6861      	ldr	r1, [r4, #4]
     ecc:	2908      	cmp	r1, #8
     ece:	d00d      	beq.n	eec <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     ed0:	f031 0304 	bics.w	r3, r1, #4
     ed4:	d00a      	beq.n	eec <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
     ed6:	f011 0102 	ands.w	r1, r1, #2
     eda:	d008      	beq.n	eee <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
     edc:	4808      	ldr	r0, [pc, #32]	; (f00 <mutex_free_platform+0x44>)
     ede:	4621      	mov	r1, r4
     ee0:	f003 fb42 	bl	4568 <k_mem_slab_free>
        mutex->mutex = NULL;
     ee4:	2300      	movs	r3, #0
     ee6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
     ee8:	2300      	movs	r3, #0
     eea:	6063      	str	r3, [r4, #4]
}
     eec:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     eee:	6820      	ldr	r0, [r4, #0]
     ef0:	2214      	movs	r2, #20
     ef2:	f005 feda 	bl	6caa <memset>
     ef6:	e7f7      	b.n	ee8 <mutex_free_platform+0x2c>
     ef8:	200000e4 	.word	0x200000e4
     efc:	000077ba 	.word	0x000077ba
     f00:	20000478 	.word	0x20000478

00000f04 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     f04:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     f06:	4604      	mov	r4, r0
     f08:	b918      	cbnz	r0, f12 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
     f0a:	4b16      	ldr	r3, [pc, #88]	; (f64 <mutex_init_platform+0x60>)
     f0c:	4816      	ldr	r0, [pc, #88]	; (f68 <mutex_init_platform+0x64>)
     f0e:	685b      	ldr	r3, [r3, #4]
     f10:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     f12:	6863      	ldr	r3, [r4, #4]
     f14:	2b04      	cmp	r3, #4
     f16:	d023      	beq.n	f60 <mutex_init_platform+0x5c>
     f18:	2b08      	cmp	r3, #8
     f1a:	d021      	beq.n	f60 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
     f1c:	b9cb      	cbnz	r3, f52 <mutex_init_platform+0x4e>
     f1e:	6823      	ldr	r3, [r4, #0]
     f20:	b9bb      	cbnz	r3, f52 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     f22:	4812      	ldr	r0, [pc, #72]	; (f6c <mutex_init_platform+0x68>)
     f24:	f04f 32ff 	mov.w	r2, #4294967295
     f28:	f04f 33ff 	mov.w	r3, #4294967295
     f2c:	4621      	mov	r1, r4
     f2e:	f003 faaf 	bl	4490 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     f32:	b908      	cbnz	r0, f38 <mutex_init_platform+0x34>
     f34:	6823      	ldr	r3, [r4, #0]
     f36:	b91b      	cbnz	r3, f40 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
     f38:	4b0a      	ldr	r3, [pc, #40]	; (f64 <mutex_init_platform+0x60>)
     f3a:	480d      	ldr	r0, [pc, #52]	; (f70 <mutex_init_platform+0x6c>)
     f3c:	685b      	ldr	r3, [r3, #4]
     f3e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     f40:	6820      	ldr	r0, [r4, #0]
     f42:	2214      	movs	r2, #20
     f44:	2100      	movs	r1, #0
     f46:	f005 feb0 	bl	6caa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     f4a:	6863      	ldr	r3, [r4, #4]
     f4c:	f043 0302 	orr.w	r3, r3, #2
     f50:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     f52:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     f54:	f006 f896 	bl	7084 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
     f58:	6863      	ldr	r3, [r4, #4]
     f5a:	f043 0301 	orr.w	r3, r3, #1
     f5e:	6063      	str	r3, [r4, #4]
}
     f60:	bd10      	pop	{r4, pc}
     f62:	bf00      	nop
     f64:	200000e4 	.word	0x200000e4
     f68:	000077ba 	.word	0x000077ba
     f6c:	20000478 	.word	0x20000478
     f70:	000077e0 	.word	0x000077e0

00000f74 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     f74:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     f76:	b308      	cbz	r0, fbc <mutex_lock_platform+0x48>
    switch (mutex->flags) {
     f78:	6843      	ldr	r3, [r0, #4]
     f7a:	2b04      	cmp	r3, #4
     f7c:	d110      	bne.n	fa0 <mutex_lock_platform+0x2c>
     f7e:	2201      	movs	r2, #1
     f80:	6803      	ldr	r3, [r0, #0]
     f82:	f3bf 8f5b 	dmb	ish
     f86:	e853 1f00 	ldrex	r1, [r3]
     f8a:	2900      	cmp	r1, #0
     f8c:	d103      	bne.n	f96 <mutex_lock_platform+0x22>
     f8e:	e843 2000 	strex	r0, r2, [r3]
     f92:	2800      	cmp	r0, #0
     f94:	d1f7      	bne.n	f86 <mutex_lock_platform+0x12>
     f96:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
     f9a:	d10b      	bne.n	fb4 <mutex_lock_platform+0x40>
     f9c:	2000      	movs	r0, #0
}
     f9e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     fa0:	b153      	cbz	r3, fb8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
     fa2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     fa4:	f04f 32ff 	mov.w	r2, #4294967295
     fa8:	f04f 33ff 	mov.w	r3, #4294967295
     fac:	f003 fb40 	bl	4630 <z_impl_k_mutex_lock>
        if (ret == 0) {
     fb0:	2800      	cmp	r0, #0
     fb2:	d0f3      	beq.n	f9c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
     fb4:	4803      	ldr	r0, [pc, #12]	; (fc4 <mutex_lock_platform+0x50>)
     fb6:	e7f2      	b.n	f9e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     fb8:	4803      	ldr	r0, [pc, #12]	; (fc8 <mutex_lock_platform+0x54>)
     fba:	e7f0      	b.n	f9e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     fbc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     fc0:	e7ed      	b.n	f9e <mutex_lock_platform+0x2a>
     fc2:	bf00      	nop
     fc4:	ffff8fe9 	.word	0xffff8fe9
     fc8:	ffff8fea 	.word	0xffff8fea

00000fcc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
     fcc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     fce:	4906      	ldr	r1, [pc, #24]	; (fe8 <nrf_cc3xx_platform_mutex_init+0x1c>)
     fd0:	4806      	ldr	r0, [pc, #24]	; (fec <nrf_cc3xx_platform_mutex_init+0x20>)
     fd2:	2340      	movs	r3, #64	; 0x40
     fd4:	2214      	movs	r2, #20
     fd6:	f006 f839 	bl	704c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
     fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
     fde:	4904      	ldr	r1, [pc, #16]	; (ff0 <nrf_cc3xx_platform_mutex_init+0x24>)
     fe0:	4804      	ldr	r0, [pc, #16]	; (ff4 <nrf_cc3xx_platform_mutex_init+0x28>)
     fe2:	f005 bbed 	b.w	67c0 <nrf_cc3xx_platform_set_mutexes>
     fe6:	bf00      	nop
     fe8:	20000498 	.word	0x20000498
     fec:	20000478 	.word	0x20000478
     ff0:	000073b0 	.word	0x000073b0
     ff4:	000073a0 	.word	0x000073a0

00000ff8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ffc:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1000:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1002:	f019 0f08 	tst.w	r9, #8
{
    1006:	4604      	mov	r4, r0
    1008:	9203      	str	r2, [sp, #12]
	if (processing) {
    100a:	d022      	beq.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
		if (evt == EVT_COMPLETE) {
    100c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    100e:	bf0c      	ite	eq
    1010:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1014:	f049 0920 	orrne.w	r9, r9, #32
    1018:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    101c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    101e:	4620      	mov	r0, r4
    1020:	f004 ffba 	bl	5f98 <z_spin_unlock_valid>
    1024:	b968      	cbnz	r0, 1042 <CONFIG_FPROTECT_BLOCK_SIZE+0x42>
    1026:	4a9f      	ldr	r2, [pc, #636]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    1028:	499f      	ldr	r1, [pc, #636]	; (12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    102a:	48a0      	ldr	r0, [pc, #640]	; (12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>)
    102c:	23ac      	movs	r3, #172	; 0xac
    102e:	f005 fdd9 	bl	6be4 <printk>
    1032:	489f      	ldr	r0, [pc, #636]	; (12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    1034:	4621      	mov	r1, r4
    1036:	f005 fdd5 	bl	6be4 <printk>
    103a:	489a      	ldr	r0, [pc, #616]	; (12a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a4>)
    103c:	21ac      	movs	r1, #172	; 0xac
    103e:	f005 fcfd 	bl	6a3c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	f383 8811 	msr	BASEPRI, r3
    1048:	f3bf 8f6f 	isb	sy
}
    104c:	b005      	add	sp, #20
    104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1052:	4f98      	ldr	r7, [pc, #608]	; (12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>)
    1054:	f8df 8254 	ldr.w	r8, [pc, #596]	; 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1058:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    105c:	2902      	cmp	r1, #2
    105e:	d106      	bne.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
			evt = process_recheck(mgr);
    1060:	4620      	mov	r0, r4
    1062:	f005 fd69 	bl	6b38 <process_recheck>
		if (evt == EVT_NOP) {
    1066:	2800      	cmp	r0, #0
    1068:	d0d8      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		if (evt == EVT_COMPLETE) {
    106a:	2801      	cmp	r0, #1
    106c:	d168      	bne.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
			res = mgr->last_res;
    106e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1072:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1074:	f1bb 0f00 	cmp.w	fp, #0
    1078:	da0a      	bge.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    107a:	2600      	movs	r6, #0
		*clients = mgr->clients;
    107c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    107e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1082:	e9c4 6600 	strd	r6, r6, [r4]
    1086:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    108a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    108c:	9601      	str	r6, [sp, #4]
    108e:	e027      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1090:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1094:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1096:	2901      	cmp	r1, #1
    1098:	d834      	bhi.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
	list->head = NULL;
    109a:	2100      	movs	r1, #0
    109c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    10a0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    10a2:	6825      	ldr	r5, [r4, #0]
    10a4:	b29b      	uxth	r3, r3
	list->tail = NULL;
    10a6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    10aa:	d10c      	bne.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    10ac:	428d      	cmp	r5, r1
    10ae:	462a      	mov	r2, r5
    10b0:	bf38      	it	cc
    10b2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    10b4:	b12a      	cbz	r2, 10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
				mgr->refs += 1U;
    10b6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    10b8:	6812      	ldr	r2, [r2, #0]
    10ba:	3101      	adds	r1, #1
    10bc:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    10be:	2a00      	cmp	r2, #0
    10c0:	d1f8      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10c2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    10c6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    10c8:	4620      	mov	r0, r4
    10ca:	f005 fd35 	bl	6b38 <process_recheck>
    10ce:	4606      	mov	r6, r0
    10d0:	2800      	cmp	r0, #0
    10d2:	d0db      	beq.n	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    10d4:	8ba3      	ldrh	r3, [r4, #28]
    10d6:	f043 0320 	orr.w	r3, r3, #32
    10da:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    10dc:	2300      	movs	r3, #0
    10de:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    10e0:	8ba3      	ldrh	r3, [r4, #28]
    10e2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    10e6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    10e8:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    10ea:	d003      	beq.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
		if (do_monitors
    10ec:	68a2      	ldr	r2, [r4, #8]
    10ee:	2a00      	cmp	r2, #0
    10f0:	f040 80f0 	bne.w	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
		    || !sys_slist_is_empty(&clients)
    10f4:	b91d      	cbnz	r5, 10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
		    || (transit != NULL)) {
    10f6:	9a01      	ldr	r2, [sp, #4]
    10f8:	2a00      	cmp	r2, #0
    10fa:	f000 8136 	beq.w	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
    10fe:	f04f 0900 	mov.w	r9, #0
    1102:	e0e9      	b.n	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1104:	2a04      	cmp	r2, #4
    1106:	d10e      	bne.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1108:	f023 0307 	bic.w	r3, r3, #7
    110c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    110e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1110:	4620      	mov	r0, r4
    1112:	f005 fd11 	bl	6b38 <process_recheck>
    1116:	4605      	mov	r5, r0
    1118:	b118      	cbz	r0, 1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    111a:	f042 0220 	orr.w	r2, r2, #32
    111e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1120:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1122:	9501      	str	r5, [sp, #4]
    1124:	e7dc      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		__ASSERT_NO_MSG(false);
    1126:	4640      	mov	r0, r8
    1128:	4963      	ldr	r1, [pc, #396]	; (12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    112a:	f240 131b 	movw	r3, #283	; 0x11b
    112e:	463a      	mov	r2, r7
    1130:	f005 fd58 	bl	6be4 <printk>
    1134:	f240 111b 	movw	r1, #283	; 0x11b
    1138:	4638      	mov	r0, r7
    113a:	f005 fc7f 	bl	6a3c <assert_post_action>
    113e:	e7ef      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		} else if (evt == EVT_START) {
    1140:	2803      	cmp	r0, #3
    1142:	d135      	bne.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1144:	f1b9 0f00 	cmp.w	r9, #0
    1148:	d00b      	beq.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    114a:	495c      	ldr	r1, [pc, #368]	; (12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>)
    114c:	4640      	mov	r0, r8
    114e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1152:	463a      	mov	r2, r7
    1154:	f005 fd46 	bl	6be4 <printk>
    1158:	f44f 71ab 	mov.w	r1, #342	; 0x156
    115c:	4638      	mov	r0, r7
    115e:	f005 fc6d 	bl	6a3c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1162:	6823      	ldr	r3, [r4, #0]
    1164:	b95b      	cbnz	r3, 117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    1166:	4956      	ldr	r1, [pc, #344]	; (12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    1168:	4640      	mov	r0, r8
    116a:	f240 1357 	movw	r3, #343	; 0x157
    116e:	463a      	mov	r2, r7
    1170:	f005 fd38 	bl	6be4 <printk>
    1174:	f240 1157 	movw	r1, #343	; 0x157
    1178:	4638      	mov	r0, r7
    117a:	f005 fc5f 	bl	6a3c <assert_post_action>
			transit = mgr->transitions->start;
    117e:	6923      	ldr	r3, [r4, #16]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1184:	b95b      	cbnz	r3, 119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    1186:	494f      	ldr	r1, [pc, #316]	; (12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>)
    1188:	4640      	mov	r0, r8
    118a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    118e:	463a      	mov	r2, r7
    1190:	f005 fd28 	bl	6be4 <printk>
    1194:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1198:	4638      	mov	r0, r7
    119a:	f005 fc4f 	bl	6a3c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    119e:	8ba3      	ldrh	r3, [r4, #28]
    11a0:	f023 0307 	bic.w	r3, r3, #7
    11a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    11a8:	83a3      	strh	r3, [r4, #28]
}
    11aa:	2500      	movs	r5, #0
		res = 0;
    11ac:	46ab      	mov	fp, r5
}
    11ae:	e797      	b.n	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		} else if (evt == EVT_STOP) {
    11b0:	2804      	cmp	r0, #4
    11b2:	d132      	bne.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    11b4:	f1b9 0f02 	cmp.w	r9, #2
    11b8:	d00b      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    11ba:	4943      	ldr	r1, [pc, #268]	; (12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    11bc:	4640      	mov	r0, r8
    11be:	f240 135d 	movw	r3, #349	; 0x15d
    11c2:	463a      	mov	r2, r7
    11c4:	f005 fd0e 	bl	6be4 <printk>
    11c8:	f240 115d 	movw	r1, #349	; 0x15d
    11cc:	4638      	mov	r0, r7
    11ce:	f005 fc35 	bl	6a3c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    11d2:	8be3      	ldrh	r3, [r4, #30]
    11d4:	b15b      	cbz	r3, 11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
    11d6:	493d      	ldr	r1, [pc, #244]	; (12cc <CONFIG_FPROTECT_BLOCK_SIZE+0x2cc>)
    11d8:	4640      	mov	r0, r8
    11da:	f44f 73af 	mov.w	r3, #350	; 0x15e
    11de:	463a      	mov	r2, r7
    11e0:	f005 fd00 	bl	6be4 <printk>
    11e4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    11e8:	4638      	mov	r0, r7
    11ea:	f005 fc27 	bl	6a3c <assert_post_action>
			transit = mgr->transitions->stop;
    11ee:	6923      	ldr	r3, [r4, #16]
    11f0:	685b      	ldr	r3, [r3, #4]
    11f2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    11f4:	b95b      	cbnz	r3, 120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
    11f6:	4933      	ldr	r1, [pc, #204]	; (12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>)
    11f8:	4640      	mov	r0, r8
    11fa:	f240 1361 	movw	r3, #353	; 0x161
    11fe:	463a      	mov	r2, r7
    1200:	f005 fcf0 	bl	6be4 <printk>
    1204:	f240 1161 	movw	r1, #353	; 0x161
    1208:	4638      	mov	r0, r7
    120a:	f005 fc17 	bl	6a3c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    120e:	8ba3      	ldrh	r3, [r4, #28]
    1210:	f023 0307 	bic.w	r3, r3, #7
    1214:	f043 0304 	orr.w	r3, r3, #4
    1218:	e7c6      	b.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
		} else if (evt == EVT_RESET) {
    121a:	2805      	cmp	r0, #5
    121c:	d132      	bne.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    121e:	f1b9 0f01 	cmp.w	r9, #1
    1222:	d00b      	beq.n	123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>
    1224:	492a      	ldr	r1, [pc, #168]	; (12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    1226:	4640      	mov	r0, r8
    1228:	f44f 73b2 	mov.w	r3, #356	; 0x164
    122c:	463a      	mov	r2, r7
    122e:	f005 fcd9 	bl	6be4 <printk>
    1232:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1236:	4638      	mov	r0, r7
    1238:	f005 fc00 	bl	6a3c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    123c:	6823      	ldr	r3, [r4, #0]
    123e:	b95b      	cbnz	r3, 1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    1240:	491f      	ldr	r1, [pc, #124]	; (12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    1242:	4640      	mov	r0, r8
    1244:	f240 1365 	movw	r3, #357	; 0x165
    1248:	463a      	mov	r2, r7
    124a:	f005 fccb 	bl	6be4 <printk>
    124e:	f240 1165 	movw	r1, #357	; 0x165
    1252:	4638      	mov	r0, r7
    1254:	f005 fbf2 	bl	6a3c <assert_post_action>
			transit = mgr->transitions->reset;
    1258:	6923      	ldr	r3, [r4, #16]
    125a:	689b      	ldr	r3, [r3, #8]
    125c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    125e:	b95b      	cbnz	r3, 1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>
    1260:	4918      	ldr	r1, [pc, #96]	; (12c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c4>)
    1262:	4640      	mov	r0, r8
    1264:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1268:	463a      	mov	r2, r7
    126a:	f005 fcbb 	bl	6be4 <printk>
    126e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1272:	4638      	mov	r0, r7
    1274:	f005 fbe2 	bl	6a3c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1278:	8ba3      	ldrh	r3, [r4, #28]
    127a:	f023 0307 	bic.w	r3, r3, #7
    127e:	f043 0305 	orr.w	r3, r3, #5
    1282:	e791      	b.n	11a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a8>
			__ASSERT_NO_MSG(false);
    1284:	490c      	ldr	r1, [pc, #48]	; (12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    1286:	f240 136b 	movw	r3, #363	; 0x16b
    128a:	463a      	mov	r2, r7
    128c:	4640      	mov	r0, r8
    128e:	f005 fca9 	bl	6be4 <printk>
    1292:	2500      	movs	r5, #0
    1294:	f240 116b 	movw	r1, #363	; 0x16b
    1298:	4638      	mov	r0, r7
    129a:	f005 fbcf 	bl	6a3c <assert_post_action>
		onoff_transition_fn transit = NULL;
    129e:	9501      	str	r5, [sp, #4]
    12a0:	e784      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    12a2:	bf00      	nop
    12a4:	000078b0 	.word	0x000078b0
    12a8:	000078d6 	.word	0x000078d6
    12ac:	0000779d 	.word	0x0000779d
    12b0:	000078ed 	.word	0x000078ed
    12b4:	0000780d 	.word	0x0000780d
    12b8:	00007898 	.word	0x00007898
    12bc:	0000782f 	.word	0x0000782f
    12c0:	0000783b 	.word	0x0000783b
    12c4:	0000785e 	.word	0x0000785e
    12c8:	00007875 	.word	0x00007875
    12cc:	0000788b 	.word	0x0000788b
    12d0:	0000789a 	.word	0x0000789a
				   && !sys_slist_is_empty(&mgr->monitors);
    12d4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    12d8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    12dc:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    12e0:	83a3      	strh	r3, [r4, #28]
    12e2:	4650      	mov	r0, sl
    12e4:	f004 fe58 	bl	5f98 <z_spin_unlock_valid>
    12e8:	b968      	cbnz	r0, 1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    12ea:	4a3a      	ldr	r2, [pc, #232]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    12ec:	493a      	ldr	r1, [pc, #232]	; (13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>)
    12ee:	23ac      	movs	r3, #172	; 0xac
    12f0:	4640      	mov	r0, r8
    12f2:	f005 fc77 	bl	6be4 <printk>
    12f6:	4839      	ldr	r0, [pc, #228]	; (13dc <CONFIG_FPROTECT_BLOCK_SIZE+0x3dc>)
    12f8:	4651      	mov	r1, sl
    12fa:	f005 fc73 	bl	6be4 <printk>
    12fe:	4835      	ldr	r0, [pc, #212]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    1300:	21ac      	movs	r1, #172	; 0xac
    1302:	f005 fb9b 	bl	6a3c <assert_post_action>
    1306:	9b03      	ldr	r3, [sp, #12]
    1308:	f383 8811 	msr	BASEPRI, r3
    130c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1310:	f1b9 0f00 	cmp.w	r9, #0
    1314:	d138      	bne.n	1388 <CONFIG_FPROTECT_BLOCK_SIZE+0x388>
	while (!sys_slist_is_empty(list)) {
    1316:	2d00      	cmp	r5, #0
    1318:	d14b      	bne.n	13b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b2>
			if (transit != NULL) {
    131a:	9b01      	ldr	r3, [sp, #4]
    131c:	b113      	cbz	r3, 1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
				transit(mgr, transition_complete);
    131e:	4930      	ldr	r1, [pc, #192]	; (13e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e0>)
    1320:	4620      	mov	r0, r4
    1322:	4798      	blx	r3
	__asm__ volatile(
    1324:	f04f 0320 	mov.w	r3, #32
    1328:	f3ef 8b11 	mrs	fp, BASEPRI
    132c:	f383 8812 	msr	BASEPRI_MAX, r3
    1330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1334:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    1336:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    133a:	f004 fe1f 	bl	5f7c <z_spin_lock_valid>
    133e:	b968      	cbnz	r0, 135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>
    1340:	4a24      	ldr	r2, [pc, #144]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    1342:	4928      	ldr	r1, [pc, #160]	; (13e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e4>)
    1344:	2381      	movs	r3, #129	; 0x81
    1346:	4640      	mov	r0, r8
    1348:	f005 fc4c 	bl	6be4 <printk>
    134c:	4826      	ldr	r0, [pc, #152]	; (13e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e8>)
    134e:	4651      	mov	r1, sl
    1350:	f005 fc48 	bl	6be4 <printk>
    1354:	481f      	ldr	r0, [pc, #124]	; (13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>)
    1356:	2181      	movs	r1, #129	; 0x81
    1358:	f005 fb70 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    135c:	4650      	mov	r0, sl
    135e:	f004 fe2b 	bl	5fb8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1362:	8ba3      	ldrh	r3, [r4, #28]
    1364:	f023 0308 	bic.w	r3, r3, #8
    1368:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    136a:	8ba3      	ldrh	r3, [r4, #28]
    136c:	06da      	lsls	r2, r3, #27
    136e:	d528      	bpl.n	13c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1370:	f023 0310 	bic.w	r3, r3, #16
    1374:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1376:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1378:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    137c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1380:	2900      	cmp	r1, #0
    1382:	f47f ae6b 	bne.w	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
out:
    1386:	e649      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1388:	68a1      	ldr	r1, [r4, #8]
    138a:	2900      	cmp	r1, #0
    138c:	d0c3      	beq.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
	return node->next;
    138e:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1390:	9a02      	ldr	r2, [sp, #8]
    1392:	2b00      	cmp	r3, #0
    1394:	bf38      	it	cc
    1396:	2300      	movcc	r3, #0
    1398:	4699      	mov	r9, r3
    139a:	684b      	ldr	r3, [r1, #4]
    139c:	4620      	mov	r0, r4
    139e:	461e      	mov	r6, r3
    13a0:	465b      	mov	r3, fp
    13a2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    13a4:	f1b9 0f00 	cmp.w	r9, #0
    13a8:	d0b5      	beq.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
    13aa:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    13ae:	4649      	mov	r1, r9
    13b0:	e7ee      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    13b2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    13b4:	9a02      	ldr	r2, [sp, #8]
    13b6:	682d      	ldr	r5, [r5, #0]
    13b8:	465b      	mov	r3, fp
    13ba:	4620      	mov	r0, r4
    13bc:	f005 fbd8 	bl	6b70 <notify_one>
    13c0:	e7a9      	b.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    13c2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    13c6:	bf1e      	ittt	ne
    13c8:	f023 0320 	bicne.w	r3, r3, #32
    13cc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    13ce:	2102      	movne	r1, #2
    13d0:	e7d2      	b.n	1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>
    13d2:	bf00      	nop
    13d4:	000078b0 	.word	0x000078b0
    13d8:	000078d6 	.word	0x000078d6
    13dc:	000078ed 	.word	0x000078ed
    13e0:	000013ed 	.word	0x000013ed
    13e4:	00007902 	.word	0x00007902
    13e8:	00007917 	.word	0x00007917

000013ec <transition_complete>:
{
    13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13ee:	4604      	mov	r4, r0
    13f0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    13f2:	f100 0614 	add.w	r6, r0, #20
    13f6:	f04f 0320 	mov.w	r3, #32
    13fa:	f3ef 8711 	mrs	r7, BASEPRI
    13fe:	f383 8812 	msr	BASEPRI_MAX, r3
    1402:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1406:	4630      	mov	r0, r6
    1408:	f004 fdb8 	bl	5f7c <z_spin_lock_valid>
    140c:	b968      	cbnz	r0, 142a <transition_complete+0x3e>
    140e:	4a0c      	ldr	r2, [pc, #48]	; (1440 <transition_complete+0x54>)
    1410:	490c      	ldr	r1, [pc, #48]	; (1444 <transition_complete+0x58>)
    1412:	480d      	ldr	r0, [pc, #52]	; (1448 <transition_complete+0x5c>)
    1414:	2381      	movs	r3, #129	; 0x81
    1416:	f005 fbe5 	bl	6be4 <printk>
    141a:	480c      	ldr	r0, [pc, #48]	; (144c <transition_complete+0x60>)
    141c:	4631      	mov	r1, r6
    141e:	f005 fbe1 	bl	6be4 <printk>
    1422:	4807      	ldr	r0, [pc, #28]	; (1440 <transition_complete+0x54>)
    1424:	2181      	movs	r1, #129	; 0x81
    1426:	f005 fb09 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    142a:	4630      	mov	r0, r6
    142c:	f004 fdc4 	bl	5fb8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1430:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1432:	463a      	mov	r2, r7
    1434:	4620      	mov	r0, r4
    1436:	2101      	movs	r1, #1
}
    1438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    143c:	f7ff bddc 	b.w	ff8 <process_event>
    1440:	000078b0 	.word	0x000078b0
    1444:	00007902 	.word	0x00007902
    1448:	0000779d 	.word	0x0000779d
    144c:	00007917 	.word	0x00007917

00001450 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1454:	4604      	mov	r4, r0
    1456:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1458:	f005 fba0 	bl	6b9c <validate_args>

	if (rv < 0) {
    145c:	1e05      	subs	r5, r0, #0
    145e:	db5e      	blt.n	151e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1460:	f104 0914 	add.w	r9, r4, #20
    1464:	f04f 0320 	mov.w	r3, #32
    1468:	f3ef 8a11 	mrs	sl, BASEPRI
    146c:	f383 8812 	msr	BASEPRI_MAX, r3
    1470:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1474:	4648      	mov	r0, r9
    1476:	f004 fd81 	bl	5f7c <z_spin_lock_valid>
    147a:	b968      	cbnz	r0, 1498 <onoff_request+0x48>
    147c:	4a38      	ldr	r2, [pc, #224]	; (1560 <onoff_request+0x110>)
    147e:	4939      	ldr	r1, [pc, #228]	; (1564 <onoff_request+0x114>)
    1480:	4839      	ldr	r0, [pc, #228]	; (1568 <onoff_request+0x118>)
    1482:	2381      	movs	r3, #129	; 0x81
    1484:	f005 fbae 	bl	6be4 <printk>
    1488:	4838      	ldr	r0, [pc, #224]	; (156c <onoff_request+0x11c>)
    148a:	4649      	mov	r1, r9
    148c:	f005 fbaa 	bl	6be4 <printk>
    1490:	4833      	ldr	r0, [pc, #204]	; (1560 <onoff_request+0x110>)
    1492:	2181      	movs	r1, #129	; 0x81
    1494:	f005 fad2 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    1498:	4648      	mov	r0, r9
    149a:	f004 fd8d 	bl	5fb8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    149e:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14a0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    14a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    14a6:	428b      	cmp	r3, r1
    14a8:	f002 0607 	and.w	r6, r2, #7
    14ac:	d050      	beq.n	1550 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    14ae:	2e02      	cmp	r6, #2
    14b0:	d124      	bne.n	14fc <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    14b2:	3301      	adds	r3, #1
    14b4:	83e3      	strh	r3, [r4, #30]
	rv = state;
    14b6:	4635      	mov	r5, r6
		notify = true;
    14b8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    14bc:	4648      	mov	r0, r9
    14be:	f004 fd6b 	bl	5f98 <z_spin_unlock_valid>
    14c2:	b968      	cbnz	r0, 14e0 <onoff_request+0x90>
    14c4:	4a26      	ldr	r2, [pc, #152]	; (1560 <onoff_request+0x110>)
    14c6:	492a      	ldr	r1, [pc, #168]	; (1570 <onoff_request+0x120>)
    14c8:	4827      	ldr	r0, [pc, #156]	; (1568 <onoff_request+0x118>)
    14ca:	23ac      	movs	r3, #172	; 0xac
    14cc:	f005 fb8a 	bl	6be4 <printk>
    14d0:	4828      	ldr	r0, [pc, #160]	; (1574 <onoff_request+0x124>)
    14d2:	4649      	mov	r1, r9
    14d4:	f005 fb86 	bl	6be4 <printk>
    14d8:	4821      	ldr	r0, [pc, #132]	; (1560 <onoff_request+0x110>)
    14da:	21ac      	movs	r1, #172	; 0xac
    14dc:	f005 faae 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    14e0:	f38a 8811 	msr	BASEPRI, sl
    14e4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    14e8:	f1b8 0f00 	cmp.w	r8, #0
    14ec:	d017      	beq.n	151e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    14ee:	2300      	movs	r3, #0
    14f0:	4632      	mov	r2, r6
    14f2:	4639      	mov	r1, r7
    14f4:	4620      	mov	r0, r4
    14f6:	f005 fb3b 	bl	6b70 <notify_one>
    14fa:	e010      	b.n	151e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    14fc:	0793      	lsls	r3, r2, #30
    14fe:	d001      	beq.n	1504 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1500:	2e06      	cmp	r6, #6
    1502:	d10f      	bne.n	1524 <onoff_request+0xd4>
	parent->next = child;
    1504:	2300      	movs	r3, #0
    1506:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1508:	6863      	ldr	r3, [r4, #4]
    150a:	b9f3      	cbnz	r3, 154a <onoff_request+0xfa>
	list->head = node;
    150c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1510:	4635      	mov	r5, r6
    1512:	b9fe      	cbnz	r6, 1554 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1514:	4652      	mov	r2, sl
    1516:	2102      	movs	r1, #2
    1518:	4620      	mov	r0, r4
    151a:	f7ff fd6d 	bl	ff8 <process_event>
		}
	}

	return rv;
}
    151e:	4628      	mov	r0, r5
    1520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1524:	2e05      	cmp	r6, #5
    1526:	d018      	beq.n	155a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1528:	2e01      	cmp	r6, #1
    152a:	d00b      	beq.n	1544 <onoff_request+0xf4>
    152c:	4912      	ldr	r1, [pc, #72]	; (1578 <onoff_request+0x128>)
    152e:	480e      	ldr	r0, [pc, #56]	; (1568 <onoff_request+0x118>)
    1530:	4a12      	ldr	r2, [pc, #72]	; (157c <onoff_request+0x12c>)
    1532:	f240 13c9 	movw	r3, #457	; 0x1c9
    1536:	f005 fb55 	bl	6be4 <printk>
    153a:	4810      	ldr	r0, [pc, #64]	; (157c <onoff_request+0x12c>)
    153c:	f240 11c9 	movw	r1, #457	; 0x1c9
    1540:	f005 fa7c 	bl	6a3c <assert_post_action>
		rv = -EIO;
    1544:	f06f 0504 	mvn.w	r5, #4
    1548:	e004      	b.n	1554 <onoff_request+0x104>
	parent->next = child;
    154a:	601f      	str	r7, [r3, #0]
	list->tail = node;
    154c:	6067      	str	r7, [r4, #4]
}
    154e:	e7df      	b.n	1510 <onoff_request+0xc0>
		rv = -EAGAIN;
    1550:	f06f 050a 	mvn.w	r5, #10
    1554:	f04f 0800 	mov.w	r8, #0
    1558:	e7b0      	b.n	14bc <onoff_request+0x6c>
		rv = -ENOTSUP;
    155a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    155e:	e7f9      	b.n	1554 <onoff_request+0x104>
    1560:	000078b0 	.word	0x000078b0
    1564:	00007902 	.word	0x00007902
    1568:	0000779d 	.word	0x0000779d
    156c:	00007917 	.word	0x00007917
    1570:	000078d6 	.word	0x000078d6
    1574:	000078ed 	.word	0x000078ed
    1578:	0000789a 	.word	0x0000789a
    157c:	0000780d 	.word	0x0000780d

00001580 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1584:	4605      	mov	r5, r0
	__asm__ volatile(
    1586:	f04f 0320 	mov.w	r3, #32
    158a:	f3ef 8611 	mrs	r6, BASEPRI
    158e:	f383 8812 	msr	BASEPRI_MAX, r3
    1592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1596:	4823      	ldr	r0, [pc, #140]	; (1624 <pm_state_notify+0xa4>)
    1598:	f004 fcf0 	bl	5f7c <z_spin_lock_valid>
    159c:	b968      	cbnz	r0, 15ba <pm_state_notify+0x3a>
    159e:	4a22      	ldr	r2, [pc, #136]	; (1628 <pm_state_notify+0xa8>)
    15a0:	4922      	ldr	r1, [pc, #136]	; (162c <pm_state_notify+0xac>)
    15a2:	4823      	ldr	r0, [pc, #140]	; (1630 <pm_state_notify+0xb0>)
    15a4:	2381      	movs	r3, #129	; 0x81
    15a6:	f005 fb1d 	bl	6be4 <printk>
    15aa:	491e      	ldr	r1, [pc, #120]	; (1624 <pm_state_notify+0xa4>)
    15ac:	4821      	ldr	r0, [pc, #132]	; (1634 <pm_state_notify+0xb4>)
    15ae:	f005 fb19 	bl	6be4 <printk>
    15b2:	481d      	ldr	r0, [pc, #116]	; (1628 <pm_state_notify+0xa8>)
    15b4:	2181      	movs	r1, #129	; 0x81
    15b6:	f005 fa41 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    15ba:	481a      	ldr	r0, [pc, #104]	; (1624 <pm_state_notify+0xa4>)
    15bc:	f004 fcfc 	bl	5fb8 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    15c0:	4b1d      	ldr	r3, [pc, #116]	; (1638 <pm_state_notify+0xb8>)
    15c2:	681c      	ldr	r4, [r3, #0]
    15c4:	2c00      	cmp	r4, #0
    15c6:	bf38      	it	cc
    15c8:	2400      	movcc	r4, #0
    15ca:	b19c      	cbz	r4, 15f4 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    15cc:	4f1b      	ldr	r7, [pc, #108]	; (163c <pm_state_notify+0xbc>)
    15ce:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1648 <pm_state_notify+0xc8>
    15d2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    15d6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    15da:	2d00      	cmp	r5, #0
    15dc:	bf08      	it	eq
    15de:	4613      	moveq	r3, r2
		if (callback) {
    15e0:	b12b      	cbz	r3, 15ee <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    15e2:	f898 2014 	ldrb.w	r2, [r8, #20]
    15e6:	fb09 f202 	mul.w	r2, r9, r2
    15ea:	5cb8      	ldrb	r0, [r7, r2]
    15ec:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    15ee:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    15f0:	2c00      	cmp	r4, #0
    15f2:	d1f0      	bne.n	15d6 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    15f4:	480b      	ldr	r0, [pc, #44]	; (1624 <pm_state_notify+0xa4>)
    15f6:	f004 fccf 	bl	5f98 <z_spin_unlock_valid>
    15fa:	b968      	cbnz	r0, 1618 <pm_state_notify+0x98>
    15fc:	4a0a      	ldr	r2, [pc, #40]	; (1628 <pm_state_notify+0xa8>)
    15fe:	4910      	ldr	r1, [pc, #64]	; (1640 <pm_state_notify+0xc0>)
    1600:	480b      	ldr	r0, [pc, #44]	; (1630 <pm_state_notify+0xb0>)
    1602:	23ac      	movs	r3, #172	; 0xac
    1604:	f005 faee 	bl	6be4 <printk>
    1608:	4906      	ldr	r1, [pc, #24]	; (1624 <pm_state_notify+0xa4>)
    160a:	480e      	ldr	r0, [pc, #56]	; (1644 <pm_state_notify+0xc4>)
    160c:	f005 faea 	bl	6be4 <printk>
    1610:	4805      	ldr	r0, [pc, #20]	; (1628 <pm_state_notify+0xa8>)
    1612:	21ac      	movs	r1, #172	; 0xac
    1614:	f005 fa12 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    1618:	f386 8811 	msr	BASEPRI, r6
    161c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1624:	20000998 	.word	0x20000998
    1628:	000078b0 	.word	0x000078b0
    162c:	00007902 	.word	0x00007902
    1630:	0000779d 	.word	0x0000779d
    1634:	00007917 	.word	0x00007917
    1638:	2000099c 	.word	0x2000099c
    163c:	200009a8 	.word	0x200009a8
    1640:	000078d6 	.word	0x000078d6
    1644:	000078ed 	.word	0x000078ed
    1648:	20000b0c 	.word	0x20000b0c

0000164c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    164c:	f000 031f 	and.w	r3, r0, #31
    1650:	2201      	movs	r2, #1
    1652:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1654:	4b0a      	ldr	r3, [pc, #40]	; (1680 <atomic_test_and_set_bit.constprop.0+0x34>)
    1656:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    165a:	0940      	lsrs	r0, r0, #5
    165c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1660:	e850 3f00 	ldrex	r3, [r0]
    1664:	ea43 0102 	orr.w	r1, r3, r2
    1668:	e840 1c00 	strex	ip, r1, [r0]
    166c:	f1bc 0f00 	cmp.w	ip, #0
    1670:	d1f6      	bne.n	1660 <atomic_test_and_set_bit.constprop.0+0x14>
    1672:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1676:	421a      	tst	r2, r3
}
    1678:	bf14      	ite	ne
    167a:	2001      	movne	r0, #1
    167c:	2000      	moveq	r0, #0
    167e:	4770      	bx	lr
    1680:	200009b4 	.word	0x200009b4

00001684 <pm_system_resume>:

void pm_system_resume(void)
{
    1684:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1686:	4b1d      	ldr	r3, [pc, #116]	; (16fc <pm_system_resume+0x78>)
    1688:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    168a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    168e:	f005 031f 	and.w	r3, r5, #31
    1692:	2201      	movs	r2, #1
    1694:	409a      	lsls	r2, r3
    1696:	4b1a      	ldr	r3, [pc, #104]	; (1700 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1698:	0969      	lsrs	r1, r5, #5
{
    169a:	b085      	sub	sp, #20
    169c:	43d0      	mvns	r0, r2
    169e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    16a2:	e853 1f00 	ldrex	r1, [r3]
    16a6:	ea01 0400 	and.w	r4, r1, r0
    16aa:	e843 4c00 	strex	ip, r4, [r3]
    16ae:	f1bc 0f00 	cmp.w	ip, #0
    16b2:	d1f6      	bne.n	16a2 <pm_system_resume+0x1e>
    16b4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    16b8:	4211      	tst	r1, r2
    16ba:	d017      	beq.n	16ec <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    16bc:	4c11      	ldr	r4, [pc, #68]	; (1704 <pm_system_resume+0x80>)
    16be:	220c      	movs	r2, #12
    16c0:	fb02 4205 	mla	r2, r2, r5, r4
    16c4:	ca07      	ldmia	r2, {r0, r1, r2}
    16c6:	ab01      	add	r3, sp, #4
    16c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    16cc:	4a0e      	ldr	r2, [pc, #56]	; (1708 <pm_system_resume+0x84>)
    16ce:	b17a      	cbz	r2, 16f0 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    16d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    16d4:	f005 fb05 	bl	6ce2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    16d8:	2000      	movs	r0, #0
    16da:	f7ff ff51 	bl	1580 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    16de:	230c      	movs	r3, #12
    16e0:	436b      	muls	r3, r5
    16e2:	2200      	movs	r2, #0
    16e4:	18e1      	adds	r1, r4, r3
    16e6:	50e2      	str	r2, [r4, r3]
    16e8:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    16ec:	b005      	add	sp, #20
    16ee:	bd30      	pop	{r4, r5, pc}
    16f0:	f382 8811 	msr	BASEPRI, r2
    16f4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    16f8:	e7ee      	b.n	16d8 <pm_system_resume+0x54>
    16fa:	bf00      	nop
    16fc:	20000b0c 	.word	0x20000b0c
    1700:	200009a4 	.word	0x200009a4
    1704:	200009a8 	.word	0x200009a8
    1708:	00006ce3 	.word	0x00006ce3

0000170c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    170c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1710:	4b37      	ldr	r3, [pc, #220]	; (17f0 <pm_system_suspend+0xe4>)
    1712:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1808 <pm_system_suspend+0xfc>
    1716:	7d1c      	ldrb	r4, [r3, #20]
{
    1718:	b088      	sub	sp, #32
    171a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    171c:	4620      	mov	r0, r4
    171e:	f7ff ff95 	bl	164c <atomic_test_and_set_bit.constprop.0>
    1722:	b960      	cbnz	r0, 173e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    1724:	466e      	mov	r6, sp
    1726:	463a      	mov	r2, r7
    1728:	4621      	mov	r1, r4
    172a:	4630      	mov	r0, r6
    172c:	f005 fa67 	bl	6bfe <pm_policy_next_state>
    1730:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1734:	250c      	movs	r5, #12
    1736:	fb05 8504 	mla	r5, r5, r4, r8
    173a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    173e:	230c      	movs	r3, #12
    1740:	4363      	muls	r3, r4
    1742:	eb08 0203 	add.w	r2, r8, r3
    1746:	f818 0003 	ldrb.w	r0, [r8, r3]
    174a:	0965      	lsrs	r5, r4, #5
    174c:	f004 061f 	and.w	r6, r4, #31
    1750:	b3c8      	cbz	r0, 17c6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1752:	1c7b      	adds	r3, r7, #1
    1754:	d00f      	beq.n	1776 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1756:	f8d2 e008 	ldr.w	lr, [r2, #8]
    175a:	4826      	ldr	r0, [pc, #152]	; (17f4 <pm_system_suspend+0xe8>)
    175c:	4a26      	ldr	r2, [pc, #152]	; (17f8 <pm_system_suspend+0xec>)
    175e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1762:	2100      	movs	r1, #0
    1764:	2300      	movs	r3, #0
    1766:	fbec 010e 	umlal	r0, r1, ip, lr
    176a:	f7fe fcc9 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    176e:	2101      	movs	r1, #1
    1770:	1a38      	subs	r0, r7, r0
    1772:	f004 fde3 	bl	633c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1776:	f003 f9e3 	bl	4b40 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    177a:	2001      	movs	r0, #1
    177c:	f7ff ff00 	bl	1580 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1780:	f3bf 8f5b 	dmb	ish
    1784:	4b1d      	ldr	r3, [pc, #116]	; (17fc <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1786:	2201      	movs	r2, #1
    1788:	40b2      	lsls	r2, r6
    178a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    178e:	e853 1f00 	ldrex	r1, [r3]
    1792:	4311      	orrs	r1, r2
    1794:	e843 1000 	strex	r0, r1, [r3]
    1798:	2800      	cmp	r0, #0
    179a:	d1f8      	bne.n	178e <pm_system_suspend+0x82>
    179c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    17a0:	230c      	movs	r3, #12
    17a2:	fb03 8404 	mla	r4, r3, r4, r8
    17a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    17aa:	ab05      	add	r3, sp, #20
    17ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    17b0:	4a13      	ldr	r2, [pc, #76]	; (1800 <pm_system_suspend+0xf4>)
    17b2:	b11a      	cbz	r2, 17bc <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    17b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    17b8:	f005 fa80 	bl	6cbc <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    17bc:	f7ff ff62 	bl	1684 <pm_system_resume>
	k_sched_unlock();
    17c0:	f003 feb6 	bl	5530 <k_sched_unlock>
	bool ret = true;
    17c4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    17c6:	4a0f      	ldr	r2, [pc, #60]	; (1804 <pm_system_suspend+0xf8>)
    17c8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    17cc:	2301      	movs	r3, #1
    17ce:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    17d0:	43db      	mvns	r3, r3
    17d2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    17d6:	e855 2f00 	ldrex	r2, [r5]
    17da:	401a      	ands	r2, r3
    17dc:	e845 2100 	strex	r1, r2, [r5]
    17e0:	2900      	cmp	r1, #0
    17e2:	d1f8      	bne.n	17d6 <pm_system_suspend+0xca>
    17e4:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    17e8:	b008      	add	sp, #32
    17ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17ee:	bf00      	nop
    17f0:	20000b0c 	.word	0x20000b0c
    17f4:	000f423f 	.word	0x000f423f
    17f8:	000f4240 	.word	0x000f4240
    17fc:	200009a4 	.word	0x200009a4
    1800:	00006cbd 	.word	0x00006cbd
    1804:	200009b4 	.word	0x200009b4
    1808:	200009a8 	.word	0x200009a8

0000180c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    180c:	680b      	ldr	r3, [r1, #0]
    180e:	3301      	adds	r3, #1
    1810:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1812:	4b01      	ldr	r3, [pc, #4]	; (1818 <char_out+0xc>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	4718      	bx	r3
    1818:	20000028 	.word	0x20000028

0000181c <__printk_hook_install>:
	_char_out = fn;
    181c:	4b01      	ldr	r3, [pc, #4]	; (1824 <__printk_hook_install+0x8>)
    181e:	6018      	str	r0, [r3, #0]
}
    1820:	4770      	bx	lr
    1822:	bf00      	nop
    1824:	20000028 	.word	0x20000028

00001828 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1828:	b507      	push	{r0, r1, r2, lr}
    182a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    182c:	2100      	movs	r1, #0
{
    182e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1830:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1832:	4803      	ldr	r0, [pc, #12]	; (1840 <vprintk+0x18>)
    1834:	a901      	add	r1, sp, #4
    1836:	f7fe ff35 	bl	6a4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    183a:	b003      	add	sp, #12
    183c:	f85d fb04 	ldr.w	pc, [sp], #4
    1840:	0000180d 	.word	0x0000180d

00001844 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1844:	b508      	push	{r3, lr}
	__asm__ volatile(
    1846:	f04f 0220 	mov.w	r2, #32
    184a:	f3ef 8311 	mrs	r3, BASEPRI
    184e:	f382 8812 	msr	BASEPRI_MAX, r2
    1852:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1856:	f000 fcbf 	bl	21d8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    185a:	4803      	ldr	r0, [pc, #12]	; (1868 <sys_reboot+0x24>)
    185c:	f005 f9c2 	bl	6be4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1860:	f000 f80a 	bl	1878 <arch_cpu_idle>
    1864:	e7fc      	b.n	1860 <sys_reboot+0x1c>
    1866:	bf00      	nop
    1868:	0000792f 	.word	0x0000792f

0000186c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    186c:	4901      	ldr	r1, [pc, #4]	; (1874 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    186e:	2210      	movs	r2, #16
	str	r2, [r1]
    1870:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1872:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1874:	e000ed10 	.word	0xe000ed10

00001878 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1878:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    187a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    187c:	f380 8811 	msr	BASEPRI, r0
	isb
    1880:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1884:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1888:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    188a:	b662      	cpsie	i
	isb
    188c:	f3bf 8f6f 	isb	sy

	bx	lr
    1890:	4770      	bx	lr
    1892:	bf00      	nop

00001894 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1894:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1896:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1898:	f381 8811 	msr	BASEPRI, r1

	wfe
    189c:	bf20      	wfe

	msr	BASEPRI, r0
    189e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    18a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    18a4:	4770      	bx	lr
    18a6:	bf00      	nop

000018a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    18a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    18aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    18ac:	4a0b      	ldr	r2, [pc, #44]	; (18dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    18ae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    18b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    18b2:	bf1e      	ittt	ne
	movne	r1, #0
    18b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    18b6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    18b8:	f005 fbc1 	blne	703e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    18bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    18be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    18c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    18c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    18ca:	4905      	ldr	r1, [pc, #20]	; (18e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    18cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    18ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    18d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    18d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    18d6:	4903      	ldr	r1, [pc, #12]	; (18e4 <_isr_wrapper+0x3c>)
	bx r1
    18d8:	4708      	bx	r1
    18da:	0000      	.short	0x0000
	ldr r2, =_kernel
    18dc:	20000b0c 	.word	0x20000b0c
	ldr r1, =_sw_isr_table
    18e0:	000071f0 	.word	0x000071f0
	ldr r1, =z_arm_int_exit
    18e4:	00001b0d 	.word	0x00001b0d

000018e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    18e8:	bf30      	wfi
    b z_SysNmiOnReset
    18ea:	f7ff bffd 	b.w	18e8 <z_SysNmiOnReset>
    18ee:	bf00      	nop

000018f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    18f0:	4912      	ldr	r1, [pc, #72]	; (193c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    18f2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    18f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    18f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    18fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    18fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1902:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1904:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1908:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    190c:	4f0c      	ldr	r7, [pc, #48]	; (1940 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    190e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1912:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1914:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1916:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1918:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    191a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    191c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    191e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1922:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1924:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1926:	f000 fae7 	bl	1ef8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    192a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    192e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1932:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1936:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    193a:	4770      	bx	lr
    ldr r1, =_kernel
    193c:	20000b0c 	.word	0x20000b0c
    ldr v4, =_SCS_ICSR
    1940:	e000ed04 	.word	0xe000ed04

00001944 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1944:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1948:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    194a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    194e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1952:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1954:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1958:	2902      	cmp	r1, #2
    beq _oops
    195a:	d0ff      	beq.n	195c <_oops>

0000195c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    195c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    195e:	f005 f95f 	bl	6c20 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1962:	bd01      	pop	{r0, pc}

00001964 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1964:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1966:	2b00      	cmp	r3, #0
    1968:	db08      	blt.n	197c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    196a:	2201      	movs	r2, #1
    196c:	f000 001f 	and.w	r0, r0, #31
    1970:	fa02 f000 	lsl.w	r0, r2, r0
    1974:	095b      	lsrs	r3, r3, #5
    1976:	4a02      	ldr	r2, [pc, #8]	; (1980 <arch_irq_enable+0x1c>)
    1978:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    197c:	4770      	bx	lr
    197e:	bf00      	nop
    1980:	e000e100 	.word	0xe000e100

00001984 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1984:	4b05      	ldr	r3, [pc, #20]	; (199c <arch_irq_is_enabled+0x18>)
    1986:	0942      	lsrs	r2, r0, #5
    1988:	f000 001f 	and.w	r0, r0, #31
    198c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1990:	2301      	movs	r3, #1
    1992:	fa03 f000 	lsl.w	r0, r3, r0
}
    1996:	4010      	ands	r0, r2
    1998:	4770      	bx	lr
    199a:	bf00      	nop
    199c:	e000e100 	.word	0xe000e100

000019a0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    19a0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    19a2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19a4:	2c07      	cmp	r4, #7
{
    19a6:	4605      	mov	r5, r0
    19a8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    19aa:	d90f      	bls.n	19cc <z_arm_irq_priority_set+0x2c>
    19ac:	4a11      	ldr	r2, [pc, #68]	; (19f4 <z_arm_irq_priority_set+0x54>)
    19ae:	4912      	ldr	r1, [pc, #72]	; (19f8 <z_arm_irq_priority_set+0x58>)
    19b0:	4812      	ldr	r0, [pc, #72]	; (19fc <z_arm_irq_priority_set+0x5c>)
    19b2:	2359      	movs	r3, #89	; 0x59
    19b4:	f005 f916 	bl	6be4 <printk>
    19b8:	4811      	ldr	r0, [pc, #68]	; (1a00 <z_arm_irq_priority_set+0x60>)
    19ba:	4631      	mov	r1, r6
    19bc:	2307      	movs	r3, #7
    19be:	462a      	mov	r2, r5
    19c0:	f005 f910 	bl	6be4 <printk>
    19c4:	480b      	ldr	r0, [pc, #44]	; (19f4 <z_arm_irq_priority_set+0x54>)
    19c6:	2159      	movs	r1, #89	; 0x59
    19c8:	f005 f838 	bl	6a3c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    19cc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    19ce:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19d0:	bfac      	ite	ge
    19d2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19d6:	4b0b      	ldrlt	r3, [pc, #44]	; (1a04 <z_arm_irq_priority_set+0x64>)
    19d8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    19dc:	bfb8      	it	lt
    19de:	f005 050f 	andlt.w	r5, r5, #15
    19e2:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19e4:	bfaa      	itet	ge
    19e6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ea:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19ec:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    19f0:	bd70      	pop	{r4, r5, r6, pc}
    19f2:	bf00      	nop
    19f4:	00007958 	.word	0x00007958
    19f8:	0000798e 	.word	0x0000798e
    19fc:	0000779d 	.word	0x0000779d
    1a00:	000079a9 	.word	0x000079a9
    1a04:	e000ed14 	.word	0xe000ed14

00001a08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a08:	4a0b      	ldr	r2, [pc, #44]	; (1a38 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1a0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1a0c:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <z_arm_prep_c+0x34>)
    1a0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1a12:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1a1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1a20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1a28:	f002 fc7a 	bl	4320 <z_bss_zero>
	z_data_copy();
    1a2c:	f004 fdf2 	bl	6614 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1a30:	f000 f9f6 	bl	1e20 <z_arm_interrupt_init>
	z_cstart();
    1a34:	f002 fc7e 	bl	4334 <z_cstart>
    1a38:	00000000 	.word	0x00000000
    1a3c:	e000ed00 	.word	0xe000ed00

00001a40 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1a40:	4a09      	ldr	r2, [pc, #36]	; (1a68 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1a42:	490a      	ldr	r1, [pc, #40]	; (1a6c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1a44:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1a46:	6809      	ldr	r1, [r1, #0]
    1a48:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a4a:	4909      	ldr	r1, [pc, #36]	; (1a70 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1a4c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a4e:	684b      	ldr	r3, [r1, #4]
    1a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1a54:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    1a56:	2300      	movs	r3, #0
    1a58:	f383 8811 	msr	BASEPRI, r3
    1a5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1a60:	6893      	ldr	r3, [r2, #8]
}
    1a62:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1a64:	4770      	bx	lr
    1a66:	bf00      	nop
    1a68:	20000b0c 	.word	0x20000b0c
    1a6c:	000074d0 	.word	0x000074d0
    1a70:	e000ed00 	.word	0xe000ed00

00001a74 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1a74:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1a78:	9b00      	ldr	r3, [sp, #0]
    1a7a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1a7e:	490a      	ldr	r1, [pc, #40]	; (1aa8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1a80:	9b01      	ldr	r3, [sp, #4]
    1a82:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1a86:	9b02      	ldr	r3, [sp, #8]
    1a88:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1a8c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1a94:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1a98:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1a9c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1a9e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1aa0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1aa2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop
    1aa8:	00006c09 	.word	0x00006c09

00001aac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1aac:	4a0b      	ldr	r2, [pc, #44]	; (1adc <z_check_thread_stack_fail+0x30>)
{
    1aae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1ab0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1ab2:	b190      	cbz	r0, 1ada <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1ab4:	f113 0f16 	cmn.w	r3, #22
    1ab8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1aba:	d005      	beq.n	1ac8 <z_check_thread_stack_fail+0x1c>
    1abc:	f1a0 0220 	sub.w	r2, r0, #32
    1ac0:	429a      	cmp	r2, r3
    1ac2:	d806      	bhi.n	1ad2 <z_check_thread_stack_fail+0x26>
    1ac4:	4283      	cmp	r3, r0
    1ac6:	d204      	bcs.n	1ad2 <z_check_thread_stack_fail+0x26>
    1ac8:	4281      	cmp	r1, r0
    1aca:	bf2c      	ite	cs
    1acc:	2100      	movcs	r1, #0
    1ace:	2101      	movcc	r1, #1
    1ad0:	e000      	b.n	1ad4 <z_check_thread_stack_fail+0x28>
    1ad2:	2100      	movs	r1, #0
    1ad4:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1ad6:	bf08      	it	eq
    1ad8:	2000      	moveq	r0, #0
}
    1ada:	4770      	bx	lr
    1adc:	20000b0c 	.word	0x20000b0c

00001ae0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ae0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1ae2:	4b09      	ldr	r3, [pc, #36]	; (1b08 <arch_switch_to_main_thread+0x28>)
    1ae4:	6098      	str	r0, [r3, #8]
{
    1ae6:	460d      	mov	r5, r1
    1ae8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1aea:	f000 fa05 	bl	1ef8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1aee:	4620      	mov	r0, r4
    1af0:	f385 8809 	msr	PSP, r5
    1af4:	2100      	movs	r1, #0
    1af6:	b663      	cpsie	if
    1af8:	f381 8811 	msr	BASEPRI, r1
    1afc:	f3bf 8f6f 	isb	sy
    1b00:	2200      	movs	r2, #0
    1b02:	2300      	movs	r3, #0
    1b04:	f005 f880 	bl	6c08 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1b08:	20000b0c 	.word	0x20000b0c

00001b0c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1b0c:	4b04      	ldr	r3, [pc, #16]	; (1b20 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1b0e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1b10:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1b12:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1b14:	d003      	beq.n	1b1e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1b16:	4903      	ldr	r1, [pc, #12]	; (1b24 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1b1c:	600a      	str	r2, [r1, #0]

00001b1e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1b1e:	4770      	bx	lr
	ldr r3, =_kernel
    1b20:	20000b0c 	.word	0x20000b0c
	ldr r1, =_SCS_ICSR
    1b24:	e000ed04 	.word	0xe000ed04

00001b28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1b28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1b2c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1b30:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1b32:	4672      	mov	r2, lr
	bl z_arm_fault
    1b34:	f000 f8ae 	bl	1c94 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1b38:	bd01      	pop	{r0, pc}
    1b3a:	bf00      	nop

00001b3c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1b3c:	2000      	movs	r0, #0
    msr CONTROL, r0
    1b3e:	f380 8814 	msr	CONTROL, r0
    isb
    1b42:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1b46:	f005 fae1 	bl	710c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1b4a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1b4c:	490d      	ldr	r1, [pc, #52]	; (1b84 <__start+0x48>)
    str r0, [r1]
    1b4e:	6008      	str	r0, [r1, #0]
    dsb
    1b50:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1b54:	480c      	ldr	r0, [pc, #48]	; (1b88 <__start+0x4c>)
    msr msp, r0
    1b56:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1b5a:	f000 f97d 	bl	1e58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b5e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b60:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1b64:	4809      	ldr	r0, [pc, #36]	; (1b8c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1b66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1b6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1b70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1b74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1b76:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1b78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1b7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1b80:	f7ff ff42 	bl	1a08 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1b84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1b88:	200021a0 	.word	0x200021a0
    ldr r0, =z_interrupt_stacks
    1b8c:	20002320 	.word	0x20002320

00001b90 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b90:	4b23      	ldr	r3, [pc, #140]	; (1c20 <mem_manage_fault+0x90>)
{
    1b92:	b570      	push	{r4, r5, r6, lr}
    1b94:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1b9c:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b9e:	0790      	lsls	r0, r2, #30
    1ba0:	d51a      	bpl.n	1bd8 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1ba2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ba6:	0612      	lsls	r2, r2, #24
    1ba8:	d516      	bpl.n	1bd8 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1baa:	b119      	cbz	r1, 1bb4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1bb2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bba:	06d6      	lsls	r6, r2, #27
    1bbc:	d40f      	bmi.n	1bde <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1bc0:	0799      	lsls	r1, r3, #30
    1bc2:	d40c      	bmi.n	1bde <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1bc4:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1bc6:	4a16      	ldr	r2, [pc, #88]	; (1c20 <mem_manage_fault+0x90>)
    1bc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1bca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1bce:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1bd0:	2300      	movs	r3, #0
    1bd2:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1bd4:	4620      	mov	r0, r4
    1bd6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1bd8:	f06f 0015 	mvn.w	r0, #21
    1bdc:	e7ea      	b.n	1bb4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1bde:	4e10      	ldr	r6, [pc, #64]	; (1c20 <mem_manage_fault+0x90>)
    1be0:	6873      	ldr	r3, [r6, #4]
    1be2:	051a      	lsls	r2, r3, #20
    1be4:	d5ee      	bpl.n	1bc4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1be6:	4621      	mov	r1, r4
    1be8:	f7ff ff60 	bl	1aac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1bec:	4604      	mov	r4, r0
    1bee:	b118      	cbz	r0, 1bf8 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1bf0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1bf4:	2402      	movs	r4, #2
    1bf6:	e7e6      	b.n	1bc6 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1bf8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1bfa:	06db      	lsls	r3, r3, #27
    1bfc:	d5e2      	bpl.n	1bc4 <mem_manage_fault+0x34>
    1bfe:	4a09      	ldr	r2, [pc, #36]	; (1c24 <mem_manage_fault+0x94>)
    1c00:	4909      	ldr	r1, [pc, #36]	; (1c28 <mem_manage_fault+0x98>)
    1c02:	480a      	ldr	r0, [pc, #40]	; (1c2c <mem_manage_fault+0x9c>)
    1c04:	f240 1349 	movw	r3, #329	; 0x149
    1c08:	f004 ffec 	bl	6be4 <printk>
    1c0c:	4808      	ldr	r0, [pc, #32]	; (1c30 <mem_manage_fault+0xa0>)
    1c0e:	f004 ffe9 	bl	6be4 <printk>
    1c12:	4804      	ldr	r0, [pc, #16]	; (1c24 <mem_manage_fault+0x94>)
    1c14:	f240 1149 	movw	r1, #329	; 0x149
    1c18:	f004 ff10 	bl	6a3c <assert_post_action>
    1c1c:	e7d3      	b.n	1bc6 <mem_manage_fault+0x36>
    1c1e:	bf00      	nop
    1c20:	e000ed00 	.word	0xe000ed00
    1c24:	000079e9 	.word	0x000079e9
    1c28:	00007a23 	.word	0x00007a23
    1c2c:	0000779d 	.word	0x0000779d
    1c30:	00007a6d 	.word	0x00007a6d

00001c34 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1c34:	4b0d      	ldr	r3, [pc, #52]	; (1c6c <bus_fault.isra.0+0x38>)
    1c36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c3c:	0592      	lsls	r2, r2, #22
    1c3e:	d508      	bpl.n	1c52 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c44:	0412      	lsls	r2, r2, #16
    1c46:	d504      	bpl.n	1c52 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1c48:	b118      	cbz	r0, 1c52 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1c4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1c50:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1c52:	4b06      	ldr	r3, [pc, #24]	; (1c6c <bus_fault.isra.0+0x38>)
    1c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c58:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1c5a:	bf58      	it	pl
    1c5c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1c60:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c62:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1c66:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c68:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1c6a:	4770      	bx	lr
    1c6c:	e000ed00 	.word	0xe000ed00

00001c70 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1c70:	4b07      	ldr	r3, [pc, #28]	; (1c90 <usage_fault.isra.0+0x20>)
    1c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1c7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c80:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1c84:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1c88:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1c8a:	2000      	movs	r0, #0
    1c8c:	4770      	bx	lr
    1c8e:	bf00      	nop
    1c90:	e000ed00 	.word	0xe000ed00

00001c94 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c94:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c96:	4b54      	ldr	r3, [pc, #336]	; (1de8 <z_arm_fault+0x154>)
    1c98:	685c      	ldr	r4, [r3, #4]
{
    1c9a:	b08a      	sub	sp, #40	; 0x28
    1c9c:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c9e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1ca2:	2600      	movs	r6, #0
    1ca4:	f386 8811 	msr	BASEPRI, r6
    1ca8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1cac:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1cb0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1cb4:	d108      	bne.n	1cc8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1cb6:	f002 030c 	and.w	r3, r2, #12
    1cba:	2b08      	cmp	r3, #8
    1cbc:	d004      	beq.n	1cc8 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1cbe:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1cc0:	bf5c      	itt	pl
    1cc2:	4605      	movpl	r5, r0
			*nested_exc = true;
    1cc4:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1cc6:	b97d      	cbnz	r5, 1ce8 <z_arm_fault+0x54>
    1cc8:	4a48      	ldr	r2, [pc, #288]	; (1dec <z_arm_fault+0x158>)
    1cca:	4949      	ldr	r1, [pc, #292]	; (1df0 <z_arm_fault+0x15c>)
    1ccc:	4849      	ldr	r0, [pc, #292]	; (1df4 <z_arm_fault+0x160>)
    1cce:	f240 33f2 	movw	r3, #1010	; 0x3f2
    1cd2:	f004 ff87 	bl	6be4 <printk>
    1cd6:	4848      	ldr	r0, [pc, #288]	; (1df8 <z_arm_fault+0x164>)
    1cd8:	f004 ff84 	bl	6be4 <printk>
    1cdc:	4843      	ldr	r0, [pc, #268]	; (1dec <z_arm_fault+0x158>)
    1cde:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1ce2:	f004 feab 	bl	6a3c <assert_post_action>
    1ce6:	2500      	movs	r5, #0
	*recoverable = false;
    1ce8:	2300      	movs	r3, #0
    1cea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1cee:	1ee3      	subs	r3, r4, #3
    1cf0:	2b03      	cmp	r3, #3
    1cf2:	d872      	bhi.n	1dda <z_arm_fault+0x146>
    1cf4:	e8df f003 	tbb	[pc, r3]
    1cf8:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1cfc:	4b3a      	ldr	r3, [pc, #232]	; (1de8 <z_arm_fault+0x154>)
    1cfe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1d00:	f014 0402 	ands.w	r4, r4, #2
    1d04:	d169      	bne.n	1dda <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1d08:	2a00      	cmp	r2, #0
    1d0a:	db18      	blt.n	1d3e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d0e:	005b      	lsls	r3, r3, #1
    1d10:	d54e      	bpl.n	1db0 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    1d12:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1d14:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1d18:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1d1c:	429a      	cmp	r2, r3
    1d1e:	d00d      	beq.n	1d3c <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1d20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d24:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	b30b      	cbz	r3, 1d70 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d2c:	f10d 0207 	add.w	r2, sp, #7
    1d30:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1d32:	4628      	mov	r0, r5
    1d34:	f7ff ff2c 	bl	1b90 <mem_manage_fault>
		reason = usage_fault(esf);
    1d38:	4604      	mov	r4, r0
		break;
    1d3a:	e000      	b.n	1d3e <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    1d3c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d42:	b99b      	cbnz	r3, 1d6c <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1d44:	2220      	movs	r2, #32
    1d46:	4629      	mov	r1, r5
    1d48:	a802      	add	r0, sp, #8
    1d4a:	f004 ffa3 	bl	6c94 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d50:	2e00      	cmp	r6, #0
    1d52:	d044      	beq.n	1dde <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d58:	b922      	cbnz	r2, 1d64 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d5e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d62:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d64:	a902      	add	r1, sp, #8
    1d66:	4620      	mov	r0, r4
    1d68:	f004 ff58 	bl	6c1c <z_arm_fatal_error>
}
    1d6c:	b00a      	add	sp, #40	; 0x28
    1d6e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1d70:	4b22      	ldr	r3, [pc, #136]	; (1dfc <z_arm_fault+0x168>)
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	b12b      	cbz	r3, 1d82 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1d76:	f10d 0107 	add.w	r1, sp, #7
    1d7a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1d7c:	f7ff ff5a 	bl	1c34 <bus_fault.isra.0>
    1d80:	e7da      	b.n	1d38 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    1d82:	4b1f      	ldr	r3, [pc, #124]	; (1e00 <z_arm_fault+0x16c>)
    1d84:	881b      	ldrh	r3, [r3, #0]
    1d86:	b29b      	uxth	r3, r3
    1d88:	b113      	cbz	r3, 1d90 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    1d8a:	f7ff ff71 	bl	1c70 <usage_fault.isra.0>
    1d8e:	e7d3      	b.n	1d38 <z_arm_fault+0xa4>
			__ASSERT(0,
    1d90:	491c      	ldr	r1, [pc, #112]	; (1e04 <z_arm_fault+0x170>)
    1d92:	4a16      	ldr	r2, [pc, #88]	; (1dec <z_arm_fault+0x158>)
    1d94:	4817      	ldr	r0, [pc, #92]	; (1df4 <z_arm_fault+0x160>)
    1d96:	f240 23c3 	movw	r3, #707	; 0x2c3
    1d9a:	f004 ff23 	bl	6be4 <printk>
    1d9e:	481a      	ldr	r0, [pc, #104]	; (1e08 <z_arm_fault+0x174>)
    1da0:	f004 ff20 	bl	6be4 <printk>
    1da4:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1da8:	4810      	ldr	r0, [pc, #64]	; (1dec <z_arm_fault+0x158>)
    1daa:	f004 fe47 	bl	6a3c <assert_post_action>
    1dae:	e7c6      	b.n	1d3e <z_arm_fault+0xaa>
    1db0:	4914      	ldr	r1, [pc, #80]	; (1e04 <z_arm_fault+0x170>)
    1db2:	4a0e      	ldr	r2, [pc, #56]	; (1dec <z_arm_fault+0x158>)
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <z_arm_fault+0x160>)
    1db6:	f240 23c7 	movw	r3, #711	; 0x2c7
    1dba:	f004 ff13 	bl	6be4 <printk>
    1dbe:	4813      	ldr	r0, [pc, #76]	; (1e0c <z_arm_fault+0x178>)
    1dc0:	f004 ff10 	bl	6be4 <printk>
    1dc4:	f240 21c7 	movw	r1, #711	; 0x2c7
    1dc8:	e7ee      	b.n	1da8 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    1dca:	f10d 0207 	add.w	r2, sp, #7
    1dce:	2100      	movs	r1, #0
    1dd0:	e7af      	b.n	1d32 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    1dd2:	f10d 0107 	add.w	r1, sp, #7
    1dd6:	2000      	movs	r0, #0
    1dd8:	e7d0      	b.n	1d7c <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1dda:	2400      	movs	r4, #0
    1ddc:	e7af      	b.n	1d3e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1dde:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1de2:	f023 0301 	bic.w	r3, r3, #1
    1de6:	e7bc      	b.n	1d62 <z_arm_fault+0xce>
    1de8:	e000ed00 	.word	0xe000ed00
    1dec:	000079e9 	.word	0x000079e9
    1df0:	00007a90 	.word	0x00007a90
    1df4:	0000779d 	.word	0x0000779d
    1df8:	00007aa3 	.word	0x00007aa3
    1dfc:	e000ed29 	.word	0xe000ed29
    1e00:	e000ed2a 	.word	0xe000ed2a
    1e04:	00007898 	.word	0x00007898
    1e08:	00007ae1 	.word	0x00007ae1
    1e0c:	00007b05 	.word	0x00007b05

00001e10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e10:	4a02      	ldr	r2, [pc, #8]	; (1e1c <z_arm_fault_init+0xc>)
    1e12:	6953      	ldr	r3, [r2, #20]
    1e14:	f043 0310 	orr.w	r3, r3, #16
    1e18:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1e1a:	4770      	bx	lr
    1e1c:	e000ed00 	.word	0xe000ed00

00001e20 <z_arm_interrupt_init>:
    1e20:	4804      	ldr	r0, [pc, #16]	; (1e34 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e22:	2300      	movs	r3, #0
    1e24:	2120      	movs	r1, #32
    1e26:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e28:	3301      	adds	r3, #1
    1e2a:	2b30      	cmp	r3, #48	; 0x30
    1e2c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e30:	d1f9      	bne.n	1e26 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e32:	4770      	bx	lr
    1e34:	e000e100 	.word	0xe000e100

00001e38 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1e38:	4a06      	ldr	r2, [pc, #24]	; (1e54 <z_arm_clear_arm_mpu_config+0x1c>)
    1e3a:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1e3c:	2300      	movs	r3, #0
	int num_regions =
    1e3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1e42:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1e44:	428b      	cmp	r3, r1
    1e46:	d100      	bne.n	1e4a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1e48:	4770      	bx	lr
  MPU->RNR = rnr;
    1e4a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1e4c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1e4e:	3301      	adds	r3, #1
    1e50:	e7f8      	b.n	1e44 <z_arm_clear_arm_mpu_config+0xc>
    1e52:	bf00      	nop
    1e54:	e000ed90 	.word	0xe000ed90

00001e58 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1e58:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1e5a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1e5c:	2300      	movs	r3, #0
    1e5e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1e62:	f7ff ffe9 	bl	1e38 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1e66:	4b14      	ldr	r3, [pc, #80]	; (1eb8 <z_arm_init_arch_hw_at_boot+0x60>)
    1e68:	f04f 32ff 	mov.w	r2, #4294967295
    1e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1e80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1e84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1e88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1e8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1e90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1e94:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1e98:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1e9c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1ea0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ea4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1ea8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1eac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1eb2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1eb6:	bd08      	pop	{r3, pc}
    1eb8:	e000e100 	.word	0xe000e100

00001ebc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ebc:	4b06      	ldr	r3, [pc, #24]	; (1ed8 <z_impl_k_thread_abort+0x1c>)
    1ebe:	689b      	ldr	r3, [r3, #8]
    1ec0:	4283      	cmp	r3, r0
    1ec2:	d107      	bne.n	1ed4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ec4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1ec8:	b123      	cbz	r3, 1ed4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1eca:	4a04      	ldr	r2, [pc, #16]	; (1edc <z_impl_k_thread_abort+0x20>)
    1ecc:	6853      	ldr	r3, [r2, #4]
    1ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1ed2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1ed4:	f003 bd94 	b.w	5a00 <z_thread_abort>
    1ed8:	20000b0c 	.word	0x20000b0c
    1edc:	e000ed00 	.word	0xe000ed00

00001ee0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ee0:	4b02      	ldr	r3, [pc, #8]	; (1eec <z_arm_configure_static_mpu_regions+0xc>)
    1ee2:	4a03      	ldr	r2, [pc, #12]	; (1ef0 <z_arm_configure_static_mpu_regions+0x10>)
    1ee4:	4803      	ldr	r0, [pc, #12]	; (1ef4 <z_arm_configure_static_mpu_regions+0x14>)
    1ee6:	2101      	movs	r1, #1
    1ee8:	f000 b868 	b.w	1fbc <arm_core_mpu_configure_static_mpu_regions>
    1eec:	20040000 	.word	0x20040000
    1ef0:	20000000 	.word	0x20000000
    1ef4:	000073c4 	.word	0x000073c4

00001ef8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1ef8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1efc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1efe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1f00:	4a04      	ldr	r2, [pc, #16]	; (1f14 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1f02:	2120      	movs	r1, #32
    1f04:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1f08:	4618      	mov	r0, r3
    1f0a:	2101      	movs	r1, #1
    1f0c:	f000 b87e 	b.w	200c <arm_core_mpu_configure_dynamic_mpu_regions>
    1f10:	200009b8 	.word	0x200009b8
    1f14:	150b0000 	.word	0x150b0000

00001f18 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1f18:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1f1a:	4f1e      	ldr	r7, [pc, #120]	; (1f94 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1f1c:	2600      	movs	r6, #0
    1f1e:	428e      	cmp	r6, r1
    1f20:	db01      	blt.n	1f26 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1f22:	4610      	mov	r0, r2
    1f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1f26:	6844      	ldr	r4, [r0, #4]
    1f28:	b384      	cbz	r4, 1f8c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    1f2a:	b153      	cbz	r3, 1f42 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1f2c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1f30:	ea14 0f0c 	tst.w	r4, ip
    1f34:	d118      	bne.n	1f68 <mpu_configure_regions+0x50>
		&&
    1f36:	2c1f      	cmp	r4, #31
    1f38:	d916      	bls.n	1f68 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1f3a:	6805      	ldr	r5, [r0, #0]
		&&
    1f3c:	ea1c 0f05 	tst.w	ip, r5
    1f40:	d112      	bne.n	1f68 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1f42:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1f44:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1f46:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1f4a:	b2d2      	uxtb	r2, r2
    1f4c:	d90f      	bls.n	1f6e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1f4e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1f52:	d80e      	bhi.n	1f72 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1f54:	3c01      	subs	r4, #1
    1f56:	fab4 f484 	clz	r4, r4
    1f5a:	f1c4 041f 	rsb	r4, r4, #31
    1f5e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1f60:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1f62:	ea4c 0404 	orr.w	r4, ip, r4
    1f66:	d906      	bls.n	1f76 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1f68:	f06f 0215 	mvn.w	r2, #21
    1f6c:	e7d9      	b.n	1f22 <mpu_configure_regions+0xa>
		return REGION_32B;
    1f6e:	2408      	movs	r4, #8
    1f70:	e7f6      	b.n	1f60 <mpu_configure_regions+0x48>
		return REGION_4G;
    1f72:	243e      	movs	r4, #62	; 0x3e
    1f74:	e7f4      	b.n	1f60 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f76:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1f7a:	4315      	orrs	r5, r2
    1f7c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1f80:	f044 0401 	orr.w	r4, r4, #1
    1f84:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f86:	60fd      	str	r5, [r7, #12]
		reg_index++;
    1f88:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1f8a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    1f8c:	3601      	adds	r6, #1
    1f8e:	300c      	adds	r0, #12
    1f90:	e7c5      	b.n	1f1e <mpu_configure_regions+0x6>
    1f92:	bf00      	nop
    1f94:	e000ed90 	.word	0xe000ed90

00001f98 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1f98:	4b03      	ldr	r3, [pc, #12]	; (1fa8 <arm_core_mpu_enable+0x10>)
    1f9a:	2205      	movs	r2, #5
    1f9c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1fa2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1fa6:	4770      	bx	lr
    1fa8:	e000ed90 	.word	0xe000ed90

00001fac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1fac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1fb0:	4b01      	ldr	r3, [pc, #4]	; (1fb8 <arm_core_mpu_disable+0xc>)
    1fb2:	2200      	movs	r2, #0
    1fb4:	605a      	str	r2, [r3, #4]
}
    1fb6:	4770      	bx	lr
    1fb8:	e000ed90 	.word	0xe000ed90

00001fbc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1fbc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1fbe:	4d0e      	ldr	r5, [pc, #56]	; (1ff8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1fc0:	2301      	movs	r3, #1
    1fc2:	782a      	ldrb	r2, [r5, #0]
    1fc4:	460c      	mov	r4, r1
    1fc6:	f7ff ffa7 	bl	1f18 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1fca:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1fcc:	3016      	adds	r0, #22
    1fce:	d111      	bne.n	1ff4 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1fd0:	f240 1311 	movw	r3, #273	; 0x111
    1fd4:	4a09      	ldr	r2, [pc, #36]	; (1ffc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1fd6:	490a      	ldr	r1, [pc, #40]	; (2000 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1fd8:	480a      	ldr	r0, [pc, #40]	; (2004 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    1fda:	f004 fe03 	bl	6be4 <printk>
    1fde:	4621      	mov	r1, r4
    1fe0:	4809      	ldr	r0, [pc, #36]	; (2008 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    1fe2:	f004 fdff 	bl	6be4 <printk>
			regions_num);
	}
}
    1fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1fea:	4804      	ldr	r0, [pc, #16]	; (1ffc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1fec:	f240 1111 	movw	r1, #273	; 0x111
    1ff0:	f004 bd24 	b.w	6a3c <assert_post_action>
}
    1ff4:	bd38      	pop	{r3, r4, r5, pc}
    1ff6:	bf00      	nop
    1ff8:	20000b6c 	.word	0x20000b6c
    1ffc:	00007b35 	.word	0x00007b35
    2000:	00007898 	.word	0x00007898
    2004:	0000779d 	.word	0x0000779d
    2008:	00007b6c 	.word	0x00007b6c

0000200c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    200c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    200e:	4a12      	ldr	r2, [pc, #72]	; (2058 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2010:	2300      	movs	r3, #0
    2012:	7812      	ldrb	r2, [r2, #0]
    2014:	460c      	mov	r4, r1
    2016:	f7ff ff7f 	bl	1f18 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    201a:	f110 0f16 	cmn.w	r0, #22
    201e:	d008      	beq.n	2032 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2020:	4b0e      	ldr	r3, [pc, #56]	; (205c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2022:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2024:	2807      	cmp	r0, #7
    2026:	dd00      	ble.n	202a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2028:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    202a:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    202c:	611a      	str	r2, [r3, #16]
    202e:	3001      	adds	r0, #1
    2030:	e7f8      	b.n	2024 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2032:	4a0b      	ldr	r2, [pc, #44]	; (2060 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2034:	490b      	ldr	r1, [pc, #44]	; (2064 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2036:	480c      	ldr	r0, [pc, #48]	; (2068 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2038:	f44f 7398 	mov.w	r3, #304	; 0x130
    203c:	f004 fdd2 	bl	6be4 <printk>
    2040:	4621      	mov	r1, r4
    2042:	480a      	ldr	r0, [pc, #40]	; (206c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2044:	f004 fdce 	bl	6be4 <printk>
}
    2048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    204c:	4804      	ldr	r0, [pc, #16]	; (2060 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    204e:	f44f 7198 	mov.w	r1, #304	; 0x130
    2052:	f004 bcf3 	b.w	6a3c <assert_post_action>
    2056:	bf00      	nop
    2058:	20000b6c 	.word	0x20000b6c
    205c:	e000ed90 	.word	0xe000ed90
    2060:	00007b35 	.word	0x00007b35
    2064:	00007898 	.word	0x00007898
    2068:	0000779d 	.word	0x0000779d
    206c:	00007b98 	.word	0x00007b98

00002070 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2070:	4925      	ldr	r1, [pc, #148]	; (2108 <z_arm_mpu_init+0x98>)
{
    2072:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2074:	680c      	ldr	r4, [r1, #0]
    2076:	2c08      	cmp	r4, #8
    2078:	d913      	bls.n	20a2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    207a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    207e:	4a23      	ldr	r2, [pc, #140]	; (210c <z_arm_mpu_init+0x9c>)
    2080:	4923      	ldr	r1, [pc, #140]	; (2110 <z_arm_mpu_init+0xa0>)
    2082:	4824      	ldr	r0, [pc, #144]	; (2114 <z_arm_mpu_init+0xa4>)
    2084:	f004 fdae 	bl	6be4 <printk>
    2088:	4823      	ldr	r0, [pc, #140]	; (2118 <z_arm_mpu_init+0xa8>)
    208a:	2208      	movs	r2, #8
    208c:	4621      	mov	r1, r4
    208e:	f004 fda9 	bl	6be4 <printk>
    2092:	481e      	ldr	r0, [pc, #120]	; (210c <z_arm_mpu_init+0x9c>)
    2094:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2098:	f004 fcd0 	bl	6a3c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    209c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    20a0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    20a2:	f7ff ff83 	bl	1fac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    20a6:	6848      	ldr	r0, [r1, #4]
    20a8:	491c      	ldr	r1, [pc, #112]	; (211c <z_arm_mpu_init+0xac>)
    20aa:	2200      	movs	r2, #0
    20ac:	4294      	cmp	r4, r2
    20ae:	f100 000c 	add.w	r0, r0, #12
    20b2:	d119      	bne.n	20e8 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    20b4:	4b1a      	ldr	r3, [pc, #104]	; (2120 <z_arm_mpu_init+0xb0>)
    20b6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    20b8:	f7ff ff6e 	bl	1f98 <arm_core_mpu_enable>
	__ASSERT(
    20bc:	680b      	ldr	r3, [r1, #0]
    20be:	f3c3 2307 	ubfx	r3, r3, #8, #8
    20c2:	2b08      	cmp	r3, #8
    20c4:	d00e      	beq.n	20e4 <z_arm_mpu_init+0x74>
    20c6:	4917      	ldr	r1, [pc, #92]	; (2124 <z_arm_mpu_init+0xb4>)
    20c8:	4a10      	ldr	r2, [pc, #64]	; (210c <z_arm_mpu_init+0x9c>)
    20ca:	4812      	ldr	r0, [pc, #72]	; (2114 <z_arm_mpu_init+0xa4>)
    20cc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    20d0:	f004 fd88 	bl	6be4 <printk>
    20d4:	4814      	ldr	r0, [pc, #80]	; (2128 <z_arm_mpu_init+0xb8>)
    20d6:	f004 fd85 	bl	6be4 <printk>
    20da:	480c      	ldr	r0, [pc, #48]	; (210c <z_arm_mpu_init+0x9c>)
    20dc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    20e0:	f004 fcac 	bl	6a3c <assert_post_action>
	return 0;
    20e4:	2000      	movs	r0, #0
    20e6:	e7db      	b.n	20a0 <z_arm_mpu_init+0x30>
    20e8:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20ea:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    20ee:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    20f2:	4313      	orrs	r3, r2
    20f4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    20f8:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    20fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
    20fe:	f043 0301 	orr.w	r3, r3, #1
    2102:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2104:	3201      	adds	r2, #1
    2106:	e7d1      	b.n	20ac <z_arm_mpu_init+0x3c>
    2108:	000073d0 	.word	0x000073d0
    210c:	00007b35 	.word	0x00007b35
    2110:	00007898 	.word	0x00007898
    2114:	0000779d 	.word	0x0000779d
    2118:	00007bc5 	.word	0x00007bc5
    211c:	e000ed90 	.word	0xe000ed90
    2120:	20000b6c 	.word	0x20000b6c
    2124:	00007bf9 	.word	0x00007bf9
    2128:	00007c49 	.word	0x00007c49

0000212c <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    212c:	b40f      	push	{r0, r1, r2, r3}
    212e:	b507      	push	{r0, r1, r2, lr}
    2130:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2132:	2102      	movs	r1, #2
{
    2134:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2138:	4804      	ldr	r0, [pc, #16]	; (214c <printf+0x20>)
	va_start(vargs, format);
    213a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    213c:	f7fe fab2 	bl	6a4 <cbvprintf>
	va_end(vargs);

	return r;
}
    2140:	b003      	add	sp, #12
    2142:	f85d eb04 	ldr.w	lr, [sp], #4
    2146:	b004      	add	sp, #16
    2148:	4770      	bx	lr
    214a:	bf00      	nop
    214c:	00006c45 	.word	0x00006c45

00002150 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2150:	4b01      	ldr	r3, [pc, #4]	; (2158 <__stdout_hook_install+0x8>)
    2152:	6018      	str	r0, [r3, #0]
}
    2154:	4770      	bx	lr
    2156:	bf00      	nop
    2158:	2000002c 	.word	0x2000002c

0000215c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    215c:	3902      	subs	r1, #2
    215e:	2901      	cmp	r1, #1
    2160:	d802      	bhi.n	2168 <z_impl_zephyr_fputc+0xc>
    2162:	4b03      	ldr	r3, [pc, #12]	; (2170 <z_impl_zephyr_fputc+0x14>)
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	4718      	bx	r3
}
    2168:	f04f 30ff 	mov.w	r0, #4294967295
    216c:	4770      	bx	lr
    216e:	bf00      	nop
    2170:	2000002c 	.word	0x2000002c

00002174 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2174:	f04f 0320 	mov.w	r3, #32
    2178:	f3ef 8111 	mrs	r1, BASEPRI
    217c:	f383 8812 	msr	BASEPRI_MAX, r3
    2180:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2184:	4a0f      	ldr	r2, [pc, #60]	; (21c4 <nordicsemi_nrf52_init+0x50>)
    2186:	2301      	movs	r3, #1
    2188:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    218c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2190:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2194:	4a0c      	ldr	r2, [pc, #48]	; (21c8 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2196:	6812      	ldr	r2, [r2, #0]
    2198:	2a08      	cmp	r2, #8
    219a:	d108      	bne.n	21ae <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    219c:	4a0b      	ldr	r2, [pc, #44]	; (21cc <nordicsemi_nrf52_init+0x58>)
    219e:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    21a0:	2a05      	cmp	r2, #5
    21a2:	d804      	bhi.n	21ae <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    21a4:	480a      	ldr	r0, [pc, #40]	; (21d0 <nordicsemi_nrf52_init+0x5c>)
    21a6:	5c82      	ldrb	r2, [r0, r2]
    21a8:	b10a      	cbz	r2, 21ae <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    21aa:	4a0a      	ldr	r2, [pc, #40]	; (21d4 <nordicsemi_nrf52_init+0x60>)
    21ac:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    21ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21b2:	2201      	movs	r2, #1
    21b4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    21b8:	f381 8811 	msr	BASEPRI, r1
    21bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    21c0:	2000      	movs	r0, #0
    21c2:	4770      	bx	lr
    21c4:	4001e000 	.word	0x4001e000
    21c8:	10000130 	.word	0x10000130
    21cc:	10000134 	.word	0x10000134
    21d0:	00007c79 	.word	0x00007c79
    21d4:	40000638 	.word	0x40000638

000021d8 <sys_arch_reboot>:
    *p_gpregret = val;
    21d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21dc:	b2c0      	uxtb	r0, r0
    21de:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    21e2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    21e6:	4905      	ldr	r1, [pc, #20]	; (21fc <sys_arch_reboot+0x24>)
    21e8:	4b05      	ldr	r3, [pc, #20]	; (2200 <sys_arch_reboot+0x28>)
    21ea:	68ca      	ldr	r2, [r1, #12]
    21ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    21f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    21f2:	60cb      	str	r3, [r1, #12]
    21f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    21f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    21fa:	e7fd      	b.n	21f8 <sys_arch_reboot+0x20>
    21fc:	e000ed00 	.word	0xe000ed00
    2200:	05fa0004 	.word	0x05fa0004

00002204 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2204:	b120      	cbz	r0, 2210 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2206:	4b03      	ldr	r3, [pc, #12]	; (2214 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2208:	0180      	lsls	r0, r0, #6
    220a:	f043 0301 	orr.w	r3, r3, #1
    220e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2210:	4770      	bx	lr
    2212:	bf00      	nop
    2214:	00007390 	.word	0x00007390

00002218 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    221c:	4c10      	ldr	r4, [pc, #64]	; (2260 <onoff_start+0x48>)
    221e:	1b07      	subs	r7, r0, r4
    2220:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2224:	f04f 080c 	mov.w	r8, #12
    2228:	fb08 f807 	mul.w	r8, r8, r7
{
    222c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    222e:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2232:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2234:	4420      	add	r0, r4
    2236:	2140      	movs	r1, #64	; 0x40
    2238:	f004 fd5e 	bl	6cf8 <set_starting_state>
	if (err < 0) {
    223c:	1e01      	subs	r1, r0, #0
    223e:	db09      	blt.n	2254 <onoff_start+0x3c>
	subdata->cb = cb;
    2240:	4b08      	ldr	r3, [pc, #32]	; (2264 <onoff_start+0x4c>)
    2242:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2244:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2248:	4b07      	ldr	r3, [pc, #28]	; (2268 <onoff_start+0x50>)
    224a:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    224e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2252:	4718      	bx	r3
		notify(mgr, err);
    2254:	4630      	mov	r0, r6
    2256:	462b      	mov	r3, r5
}
    2258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    225c:	4718      	bx	r3
    225e:	bf00      	nop
    2260:	200009d4 	.word	0x200009d4
    2264:	00006d5b 	.word	0x00006d5b
    2268:	00007408 	.word	0x00007408

0000226c <get_status>:
{
    226c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    226e:	b2cc      	uxtb	r4, r1
    2270:	2c01      	cmp	r4, #1
{
    2272:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2274:	d909      	bls.n	228a <get_status+0x1e>
    2276:	4909      	ldr	r1, [pc, #36]	; (229c <get_status+0x30>)
    2278:	4809      	ldr	r0, [pc, #36]	; (22a0 <get_status+0x34>)
    227a:	4a0a      	ldr	r2, [pc, #40]	; (22a4 <get_status+0x38>)
    227c:	2379      	movs	r3, #121	; 0x79
    227e:	f004 fcb1 	bl	6be4 <printk>
    2282:	4808      	ldr	r0, [pc, #32]	; (22a4 <get_status+0x38>)
    2284:	2179      	movs	r1, #121	; 0x79
    2286:	f004 fbd9 	bl	6a3c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    228a:	692b      	ldr	r3, [r5, #16]
    228c:	210c      	movs	r1, #12
    228e:	fb04 3401 	mla	r4, r4, r1, r3
    2292:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2294:	f000 0007 	and.w	r0, r0, #7
    2298:	bd38      	pop	{r3, r4, r5, pc}
    229a:	bf00      	nop
    229c:	00007cbc 	.word	0x00007cbc
    22a0:	0000779d 	.word	0x0000779d
    22a4:	00007c7f 	.word	0x00007c7f

000022a8 <stop>:
{
    22a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22aa:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    22ac:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    22ae:	6907      	ldr	r7, [r0, #16]
{
    22b0:	4605      	mov	r5, r0
    22b2:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    22b4:	d90b      	bls.n	22ce <stop+0x26>
    22b6:	4918      	ldr	r1, [pc, #96]	; (2318 <stop+0x70>)
    22b8:	4818      	ldr	r0, [pc, #96]	; (231c <stop+0x74>)
    22ba:	4a19      	ldr	r2, [pc, #100]	; (2320 <stop+0x78>)
    22bc:	f240 134d 	movw	r3, #333	; 0x14d
    22c0:	f004 fc90 	bl	6be4 <printk>
    22c4:	4816      	ldr	r0, [pc, #88]	; (2320 <stop+0x78>)
    22c6:	f240 114d 	movw	r1, #333	; 0x14d
    22ca:	f004 fbb7 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    22ce:	f04f 0320 	mov.w	r3, #32
    22d2:	f3ef 8211 	mrs	r2, BASEPRI
    22d6:	f383 8812 	msr	BASEPRI_MAX, r3
    22da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    22de:	230c      	movs	r3, #12
    22e0:	fb03 7104 	mla	r1, r3, r4, r7
    22e4:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    22e6:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    22ea:	d001      	beq.n	22f0 <stop+0x48>
    22ec:	428e      	cmp	r6, r1
    22ee:	d110      	bne.n	2312 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    22f0:	fb03 7304 	mla	r3, r3, r4, r7
    22f4:	2101      	movs	r1, #1
    22f6:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    22f8:	2000      	movs	r0, #0
	__asm__ volatile(
    22fa:	f382 8811 	msr	BASEPRI, r2
    22fe:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2302:	b928      	cbnz	r0, 2310 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2304:	6869      	ldr	r1, [r5, #4]
    2306:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    230a:	6863      	ldr	r3, [r4, #4]
    230c:	4798      	blx	r3
	return 0;
    230e:	2000      	movs	r0, #0
}
    2310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2312:	f04f 30ff 	mov.w	r0, #4294967295
    2316:	e7f0      	b.n	22fa <stop+0x52>
    2318:	00007cbc 	.word	0x00007cbc
    231c:	0000779d 	.word	0x0000779d
    2320:	00007c7f 	.word	0x00007c7f

00002324 <onoff_stop>:
{
    2324:	b570      	push	{r4, r5, r6, lr}
    2326:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2328:	4906      	ldr	r1, [pc, #24]	; (2344 <onoff_stop+0x20>)
    232a:	1a41      	subs	r1, r0, r1
{
    232c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    232e:	1149      	asrs	r1, r1, #5
    2330:	4805      	ldr	r0, [pc, #20]	; (2348 <onoff_stop+0x24>)
    2332:	2240      	movs	r2, #64	; 0x40
    2334:	f7ff ffb8 	bl	22a8 <stop>
	notify(mgr, res);
    2338:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    233a:	4601      	mov	r1, r0
	notify(mgr, res);
    233c:	4620      	mov	r0, r4
}
    233e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2342:	4718      	bx	r3
    2344:	200009d4 	.word	0x200009d4
    2348:	00007178 	.word	0x00007178

0000234c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    234c:	2200      	movs	r2, #0
{
    234e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2350:	2101      	movs	r1, #1
{
    2352:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2354:	4610      	mov	r0, r2
    2356:	f7ff fb23 	bl	19a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    235a:	2000      	movs	r0, #0
    235c:	f7ff fb02 	bl	1964 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2360:	480f      	ldr	r0, [pc, #60]	; (23a0 <clk_init+0x54>)
    2362:	f001 f853 	bl	340c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2366:	4b0f      	ldr	r3, [pc, #60]	; (23a4 <clk_init+0x58>)
    2368:	4298      	cmp	r0, r3
    236a:	d115      	bne.n	2398 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    236c:	f001 f872 	bl	3454 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2370:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2372:	490d      	ldr	r1, [pc, #52]	; (23a8 <clk_init+0x5c>)
    2374:	4630      	mov	r0, r6
    2376:	f004 fc20 	bl	6bba <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    237a:	2800      	cmp	r0, #0
    237c:	db0b      	blt.n	2396 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    237e:	2501      	movs	r5, #1
    2380:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2382:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2384:	4908      	ldr	r1, [pc, #32]	; (23a8 <clk_init+0x5c>)
    2386:	f104 0020 	add.w	r0, r4, #32
    238a:	f004 fc16 	bl	6bba <onoff_manager_init>
		if (err < 0) {
    238e:	2800      	cmp	r0, #0
    2390:	db01      	blt.n	2396 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2392:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2394:	2000      	movs	r0, #0
}
    2396:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2398:	f06f 0004 	mvn.w	r0, #4
    239c:	e7fb      	b.n	2396 <clk_init+0x4a>
    239e:	bf00      	nop
    23a0:	000023e1 	.word	0x000023e1
    23a4:	0bad0000 	.word	0x0bad0000
    23a8:	00007418 	.word	0x00007418

000023ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    23ac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    23ae:	230c      	movs	r3, #12
    23b0:	4809      	ldr	r0, [pc, #36]	; (23d8 <clkstarted_handle.constprop.0+0x2c>)
    23b2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    23b4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    23b6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    23b8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    23bc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    23be:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    23c0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    23c2:	4418      	add	r0, r3
    23c4:	f004 fcb6 	bl	6d34 <set_on_state>
	if (callback) {
    23c8:	b12d      	cbz	r5, 23d6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    23ca:	4632      	mov	r2, r6
    23cc:	462b      	mov	r3, r5
    23ce:	4803      	ldr	r0, [pc, #12]	; (23dc <clkstarted_handle.constprop.0+0x30>)
}
    23d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    23d4:	4718      	bx	r3
}
    23d6:	bd70      	pop	{r4, r5, r6, pc}
    23d8:	200009d4 	.word	0x200009d4
    23dc:	00007178 	.word	0x00007178

000023e0 <clock_event_handler>:
	switch (event) {
    23e0:	2801      	cmp	r0, #1
{
    23e2:	b508      	push	{r3, lr}
	switch (event) {
    23e4:	d006      	beq.n	23f4 <clock_event_handler+0x14>
    23e6:	2803      	cmp	r0, #3
    23e8:	d008      	beq.n	23fc <clock_event_handler+0x1c>
    23ea:	b9a8      	cbnz	r0, 2418 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    23ec:	4b10      	ldr	r3, [pc, #64]	; (2430 <clock_event_handler+0x50>)
    23ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    23f0:	075b      	lsls	r3, r3, #29
    23f2:	d11b      	bne.n	242c <clock_event_handler+0x4c>
}
    23f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    23f8:	f7ff bfd8 	b.w	23ac <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    23fc:	490d      	ldr	r1, [pc, #52]	; (2434 <clock_event_handler+0x54>)
    23fe:	4a0e      	ldr	r2, [pc, #56]	; (2438 <clock_event_handler+0x58>)
    2400:	480e      	ldr	r0, [pc, #56]	; (243c <clock_event_handler+0x5c>)
    2402:	f240 235e 	movw	r3, #606	; 0x25e
    2406:	f004 fbed 	bl	6be4 <printk>
    240a:	f240 215e 	movw	r1, #606	; 0x25e
}
    240e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2412:	4809      	ldr	r0, [pc, #36]	; (2438 <clock_event_handler+0x58>)
    2414:	f004 bb12 	b.w	6a3c <assert_post_action>
    2418:	4906      	ldr	r1, [pc, #24]	; (2434 <clock_event_handler+0x54>)
    241a:	4a07      	ldr	r2, [pc, #28]	; (2438 <clock_event_handler+0x58>)
    241c:	4807      	ldr	r0, [pc, #28]	; (243c <clock_event_handler+0x5c>)
    241e:	f240 2362 	movw	r3, #610	; 0x262
    2422:	f004 fbdf 	bl	6be4 <printk>
    2426:	f240 2162 	movw	r1, #610	; 0x262
    242a:	e7f0      	b.n	240e <clock_event_handler+0x2e>
}
    242c:	bd08      	pop	{r3, pc}
    242e:	bf00      	nop
    2430:	200009d4 	.word	0x200009d4
    2434:	00007898 	.word	0x00007898
    2438:	00007c7f 	.word	0x00007c7f
    243c:	0000779d 	.word	0x0000779d

00002440 <generic_hfclk_start>:
{
    2440:	b508      	push	{r3, lr}
	__asm__ volatile(
    2442:	f04f 0320 	mov.w	r3, #32
    2446:	f3ef 8111 	mrs	r1, BASEPRI
    244a:	f383 8812 	msr	BASEPRI_MAX, r3
    244e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2452:	4a12      	ldr	r2, [pc, #72]	; (249c <generic_hfclk_start+0x5c>)
    2454:	6813      	ldr	r3, [r2, #0]
    2456:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    245a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    245e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2460:	d00c      	beq.n	247c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2466:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    246a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    246e:	f013 0301 	ands.w	r3, r3, #1
    2472:	d003      	beq.n	247c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2474:	480a      	ldr	r0, [pc, #40]	; (24a0 <generic_hfclk_start+0x60>)
    2476:	f004 fc5d 	bl	6d34 <set_on_state>
			already_started = true;
    247a:	2301      	movs	r3, #1
	__asm__ volatile(
    247c:	f381 8811 	msr	BASEPRI, r1
    2480:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2484:	b123      	cbz	r3, 2490 <generic_hfclk_start+0x50>
}
    2486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    248a:	2000      	movs	r0, #0
    248c:	f7ff bf8e 	b.w	23ac <clkstarted_handle.constprop.0>
}
    2490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2494:	2001      	movs	r0, #1
    2496:	f000 bffd 	b.w	3494 <nrfx_clock_start>
    249a:	bf00      	nop
    249c:	20000a2c 	.word	0x20000a2c
    24a0:	20000a1c 	.word	0x20000a1c

000024a4 <generic_hfclk_stop>:
    24a4:	4b09      	ldr	r3, [pc, #36]	; (24cc <generic_hfclk_stop+0x28>)
    24a6:	f3bf 8f5b 	dmb	ish
    24aa:	e853 2f00 	ldrex	r2, [r3]
    24ae:	f022 0102 	bic.w	r1, r2, #2
    24b2:	e843 1000 	strex	r0, r1, [r3]
    24b6:	2800      	cmp	r0, #0
    24b8:	d1f7      	bne.n	24aa <generic_hfclk_stop+0x6>
    24ba:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    24be:	07d3      	lsls	r3, r2, #31
    24c0:	d402      	bmi.n	24c8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    24c2:	2001      	movs	r0, #1
    24c4:	f001 b83a 	b.w	353c <nrfx_clock_stop>
}
    24c8:	4770      	bx	lr
    24ca:	bf00      	nop
    24cc:	20000a2c 	.word	0x20000a2c

000024d0 <api_blocking_start>:
{
    24d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24d2:	2200      	movs	r2, #0
    24d4:	2301      	movs	r3, #1
    24d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24da:	4a09      	ldr	r2, [pc, #36]	; (2500 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24dc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24e0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    24e2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    24e6:	f004 fc4a 	bl	6d7e <api_start>
	if (err < 0) {
    24ea:	2800      	cmp	r0, #0
    24ec:	db05      	blt.n	24fa <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    24ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24f2:	2300      	movs	r3, #0
    24f4:	4668      	mov	r0, sp
    24f6:	f003 fb75 	bl	5be4 <z_impl_k_sem_take>
}
    24fa:	b005      	add	sp, #20
    24fc:	f85d fb04 	ldr.w	pc, [sp], #4
    2500:	00006d79 	.word	0x00006d79

00002504 <z_nrf_clock_control_lf_on>:
{
    2504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2508:	4949      	ldr	r1, [pc, #292]	; (2630 <z_nrf_clock_control_lf_on+0x12c>)
    250a:	f3bf 8f5b 	dmb	ish
    250e:	4605      	mov	r5, r0
    2510:	2201      	movs	r2, #1
    2512:	e851 3f00 	ldrex	r3, [r1]
    2516:	e841 2000 	strex	r0, r2, [r1]
    251a:	2800      	cmp	r0, #0
    251c:	d1f9      	bne.n	2512 <z_nrf_clock_control_lf_on+0xe>
    251e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2522:	b9a3      	cbnz	r3, 254e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2524:	4943      	ldr	r1, [pc, #268]	; (2634 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2526:	4844      	ldr	r0, [pc, #272]	; (2638 <z_nrf_clock_control_lf_on+0x134>)
    2528:	604b      	str	r3, [r1, #4]
    252a:	60cb      	str	r3, [r1, #12]
    252c:	608a      	str	r2, [r1, #8]
    252e:	f7fe ff8f 	bl	1450 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2532:	2800      	cmp	r0, #0
    2534:	da0b      	bge.n	254e <z_nrf_clock_control_lf_on+0x4a>
    2536:	4941      	ldr	r1, [pc, #260]	; (263c <z_nrf_clock_control_lf_on+0x138>)
    2538:	4841      	ldr	r0, [pc, #260]	; (2640 <z_nrf_clock_control_lf_on+0x13c>)
    253a:	4a42      	ldr	r2, [pc, #264]	; (2644 <z_nrf_clock_control_lf_on+0x140>)
    253c:	f44f 7308 	mov.w	r3, #544	; 0x220
    2540:	f004 fb50 	bl	6be4 <printk>
    2544:	483f      	ldr	r0, [pc, #252]	; (2644 <z_nrf_clock_control_lf_on+0x140>)
    2546:	f44f 7108 	mov.w	r1, #544	; 0x220
    254a:	f004 fa77 	bl	6a3c <assert_post_action>
	switch (start_mode) {
    254e:	b3ad      	cbz	r5, 25bc <z_nrf_clock_control_lf_on+0xb8>
    2550:	1e6b      	subs	r3, r5, #1
    2552:	2b01      	cmp	r3, #1
    2554:	d856      	bhi.n	2604 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2556:	2d01      	cmp	r5, #1
    2558:	d107      	bne.n	256a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    255a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    255e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2562:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2566:	2b01      	cmp	r3, #1
    2568:	d028      	beq.n	25bc <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    256a:	f004 fdbe 	bl	70ea <k_is_in_isr>
    256e:	4604      	mov	r4, r0
    2570:	b918      	cbnz	r0, 257a <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2572:	4b35      	ldr	r3, [pc, #212]	; (2648 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2574:	781b      	ldrb	r3, [r3, #0]
    2576:	2b00      	cmp	r3, #0
    2578:	d152      	bne.n	2620 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    257a:	f04f 0320 	mov.w	r3, #32
    257e:	f3ef 8611 	mrs	r6, BASEPRI
    2582:	f383 8812 	msr	BASEPRI_MAX, r3
    2586:	f3bf 8f6f 	isb	sy
    258a:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    258c:	4f2f      	ldr	r7, [pc, #188]	; (264c <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    258e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2654 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2592:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2658 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    259a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    259e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    25a2:	03d2      	lsls	r2, r2, #15
    25a4:	d50c      	bpl.n	25c0 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    25a6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    25aa:	2b01      	cmp	r3, #1
    25ac:	d001      	beq.n	25b2 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    25ae:	2d01      	cmp	r5, #1
    25b0:	d106      	bne.n	25c0 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    25b2:	b30c      	cbz	r4, 25f8 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    25b4:	f386 8811 	msr	BASEPRI, r6
    25b8:	f3bf 8f6f 	isb	sy
}
    25bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    25c0:	b1ac      	cbz	r4, 25ee <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    25c2:	4630      	mov	r0, r6
    25c4:	f7ff f966 	bl	1894 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    25c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25cc:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    25d0:	2b00      	cmp	r3, #0
    25d2:	d1e0      	bne.n	2596 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    25d4:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    25d6:	2900      	cmp	r1, #0
    25d8:	d0dd      	beq.n	2596 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25da:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    25dc:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    25de:	2301      	movs	r3, #1
    25e0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    25e4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25e8:	f8c9 3000 	str.w	r3, [r9]
}
    25ec:	e7d3      	b.n	2596 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    25ee:	2100      	movs	r1, #0
    25f0:	2021      	movs	r0, #33	; 0x21
    25f2:	f003 f9c7 	bl	5984 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    25f6:	e7e7      	b.n	25c8 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    25f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25fc:	2202      	movs	r2, #2
    25fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2602:	e7db      	b.n	25bc <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2604:	4912      	ldr	r1, [pc, #72]	; (2650 <z_nrf_clock_control_lf_on+0x14c>)
    2606:	480e      	ldr	r0, [pc, #56]	; (2640 <z_nrf_clock_control_lf_on+0x13c>)
    2608:	4a0e      	ldr	r2, [pc, #56]	; (2644 <z_nrf_clock_control_lf_on+0x140>)
    260a:	f240 2332 	movw	r3, #562	; 0x232
    260e:	f004 fae9 	bl	6be4 <printk>
}
    2612:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2616:	480b      	ldr	r0, [pc, #44]	; (2644 <z_nrf_clock_control_lf_on+0x140>)
    2618:	f240 2132 	movw	r1, #562	; 0x232
    261c:	f004 ba0e 	b.w	6a3c <assert_post_action>
    p_reg->INTENCLR = mask;
    2620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2624:	2202      	movs	r2, #2
    2626:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    262a:	4606      	mov	r6, r0
}
    262c:	e7ae      	b.n	258c <z_nrf_clock_control_lf_on+0x88>
    262e:	bf00      	nop
    2630:	20000a30 	.word	0x20000a30
    2634:	200009c4 	.word	0x200009c4
    2638:	200009f4 	.word	0x200009f4
    263c:	00007ce0 	.word	0x00007ce0
    2640:	0000779d 	.word	0x0000779d
    2644:	00007c7f 	.word	0x00007c7f
    2648:	20000f7d 	.word	0x20000f7d
    264c:	40000104 	.word	0x40000104
    2650:	00007898 	.word	0x00007898
    2654:	e000e100 	.word	0xe000e100
    2658:	40000008 	.word	0x40000008

0000265c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    265c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    265e:	4b08      	ldr	r3, [pc, #32]	; (2680 <uart_console_init+0x24>)
    2660:	4808      	ldr	r0, [pc, #32]	; (2684 <uart_console_init+0x28>)
    2662:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2664:	f004 fce1 	bl	702a <z_device_ready>
    2668:	b138      	cbz	r0, 267a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    266a:	4807      	ldr	r0, [pc, #28]	; (2688 <uart_console_init+0x2c>)
    266c:	f7ff fd70 	bl	2150 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2670:	4805      	ldr	r0, [pc, #20]	; (2688 <uart_console_init+0x2c>)
    2672:	f7ff f8d3 	bl	181c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2676:	2000      	movs	r0, #0
}
    2678:	bd08      	pop	{r3, pc}
		return -ENODEV;
    267a:	f06f 0012 	mvn.w	r0, #18
    267e:	e7fb      	b.n	2678 <uart_console_init+0x1c>
    2680:	20000a34 	.word	0x20000a34
    2684:	000071d8 	.word	0x000071d8
    2688:	0000268d 	.word	0x0000268d

0000268c <console_out>:
	if ('\n' == c) {
    268c:	280a      	cmp	r0, #10
{
    268e:	b538      	push	{r3, r4, r5, lr}
    2690:	4d07      	ldr	r5, [pc, #28]	; (26b0 <console_out+0x24>)
    2692:	4604      	mov	r4, r0
	if ('\n' == c) {
    2694:	d104      	bne.n	26a0 <console_out+0x14>
    2696:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2698:	6883      	ldr	r3, [r0, #8]
    269a:	210d      	movs	r1, #13
    269c:	685b      	ldr	r3, [r3, #4]
    269e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    26a0:	6828      	ldr	r0, [r5, #0]
    26a2:	6883      	ldr	r3, [r0, #8]
    26a4:	b2e1      	uxtb	r1, r4
    26a6:	685b      	ldr	r3, [r3, #4]
    26a8:	4798      	blx	r3
}
    26aa:	4620      	mov	r0, r4
    26ac:	bd38      	pop	{r3, r4, r5, pc}
    26ae:	bf00      	nop
    26b0:	20000a34 	.word	0x20000a34

000026b4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    26b4:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    26b6:	6905      	ldr	r5, [r0, #16]
{
    26b8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    26ba:	460c      	mov	r4, r1
    26bc:	b961      	cbnz	r1, 26d8 <gpio_nrfx_manage_callback+0x24>
    26be:	4922      	ldr	r1, [pc, #136]	; (2748 <gpio_nrfx_manage_callback+0x94>)
    26c0:	4a22      	ldr	r2, [pc, #136]	; (274c <gpio_nrfx_manage_callback+0x98>)
    26c2:	4823      	ldr	r0, [pc, #140]	; (2750 <gpio_nrfx_manage_callback+0x9c>)
    26c4:	2324      	movs	r3, #36	; 0x24
    26c6:	f004 fa8d 	bl	6be4 <printk>
    26ca:	4822      	ldr	r0, [pc, #136]	; (2754 <gpio_nrfx_manage_callback+0xa0>)
    26cc:	f004 fa8a 	bl	6be4 <printk>
    26d0:	481e      	ldr	r0, [pc, #120]	; (274c <gpio_nrfx_manage_callback+0x98>)
    26d2:	2124      	movs	r1, #36	; 0x24
    26d4:	f004 f9b2 	bl	6a3c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    26d8:	6863      	ldr	r3, [r4, #4]
    26da:	b963      	cbnz	r3, 26f6 <gpio_nrfx_manage_callback+0x42>
    26dc:	491e      	ldr	r1, [pc, #120]	; (2758 <gpio_nrfx_manage_callback+0xa4>)
    26de:	4a1b      	ldr	r2, [pc, #108]	; (274c <gpio_nrfx_manage_callback+0x98>)
    26e0:	481b      	ldr	r0, [pc, #108]	; (2750 <gpio_nrfx_manage_callback+0x9c>)
    26e2:	2325      	movs	r3, #37	; 0x25
    26e4:	f004 fa7e 	bl	6be4 <printk>
    26e8:	481c      	ldr	r0, [pc, #112]	; (275c <gpio_nrfx_manage_callback+0xa8>)
    26ea:	f004 fa7b 	bl	6be4 <printk>
    26ee:	4817      	ldr	r0, [pc, #92]	; (274c <gpio_nrfx_manage_callback+0x98>)
    26f0:	2125      	movs	r1, #37	; 0x25
    26f2:	f004 f9a3 	bl	6a3c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    26f6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    26f8:	b15b      	cbz	r3, 2712 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    26fa:	2200      	movs	r2, #0
    26fc:	429c      	cmp	r4, r3
    26fe:	d113      	bne.n	2728 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2700:	6823      	ldr	r3, [r4, #0]
    2702:	b95a      	cbnz	r2, 271c <gpio_nrfx_manage_callback+0x68>
    2704:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2706:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2708:	4294      	cmp	r4, r2
    270a:	d100      	bne.n	270e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    270c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    270e:	2300      	movs	r3, #0
    2710:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2712:	b976      	cbnz	r6, 2732 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2714:	2000      	movs	r0, #0
				     callback, set);
}
    2716:	bd70      	pop	{r4, r5, r6, pc}
    2718:	460b      	mov	r3, r1
    271a:	e7ef      	b.n	26fc <gpio_nrfx_manage_callback+0x48>
    271c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    271e:	68ab      	ldr	r3, [r5, #8]
    2720:	429c      	cmp	r4, r3
	list->tail = node;
    2722:	bf08      	it	eq
    2724:	60aa      	streq	r2, [r5, #8]
}
    2726:	e7f2      	b.n	270e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2728:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    272a:	461a      	mov	r2, r3
    272c:	2900      	cmp	r1, #0
    272e:	d1f3      	bne.n	2718 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    2730:	b13e      	cbz	r6, 2742 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    2732:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2734:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2736:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2738:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    273a:	2800      	cmp	r0, #0
    273c:	d1ea      	bne.n	2714 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    273e:	60ac      	str	r4, [r5, #8]
}
    2740:	e7e9      	b.n	2716 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    2742:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2746:	e7e6      	b.n	2716 <gpio_nrfx_manage_callback+0x62>
    2748:	00007d1c 	.word	0x00007d1c
    274c:	00007cef 	.word	0x00007cef
    2750:	0000779d 	.word	0x0000779d
    2754:	00007d25 	.word	0x00007d25
    2758:	00007d34 	.word	0x00007d34
    275c:	00007d46 	.word	0x00007d46

00002760 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2760:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    2762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2766:	d003      	beq.n	2770 <nrfx_gpio_handler+0x10>
    2768:	2b01      	cmp	r3, #1
    276a:	d036      	beq.n	27da <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    276c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2770:	4f1b      	ldr	r7, [pc, #108]	; (27e0 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2772:	693b      	ldr	r3, [r7, #16]
    2774:	685c      	ldr	r4, [r3, #4]
    2776:	2c00      	cmp	r4, #0
    2778:	d0f8      	beq.n	276c <nrfx_gpio_handler+0xc>
    277a:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    277c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 27ec <nrfx_gpio_handler+0x8c>
    2780:	f8df 906c 	ldr.w	r9, [pc, #108]	; 27f0 <nrfx_gpio_handler+0x90>
    2784:	f8df a06c 	ldr.w	sl, [pc, #108]	; 27f4 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2788:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    278c:	2601      	movs	r6, #1
    278e:	2d00      	cmp	r5, #0
    2790:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    2794:	bf38      	it	cc
    2796:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2798:	68a3      	ldr	r3, [r4, #8]
    279a:	421e      	tst	r6, r3
    279c:	d014      	beq.n	27c8 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    279e:	6863      	ldr	r3, [r4, #4]
    27a0:	b963      	cbnz	r3, 27bc <nrfx_gpio_handler+0x5c>
    27a2:	4649      	mov	r1, r9
    27a4:	2345      	movs	r3, #69	; 0x45
    27a6:	4642      	mov	r2, r8
    27a8:	4650      	mov	r0, sl
    27aa:	f004 fa1b 	bl	6be4 <printk>
    27ae:	480d      	ldr	r0, [pc, #52]	; (27e4 <nrfx_gpio_handler+0x84>)
    27b0:	f004 fa18 	bl	6be4 <printk>
    27b4:	2145      	movs	r1, #69	; 0x45
    27b6:	4640      	mov	r0, r8
    27b8:	f004 f940 	bl	6a3c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    27bc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    27c0:	4621      	mov	r1, r4
    27c2:	4032      	ands	r2, r6
    27c4:	4638      	mov	r0, r7
    27c6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    27c8:	2d00      	cmp	r5, #0
    27ca:	d0cf      	beq.n	276c <nrfx_gpio_handler+0xc>
    27cc:	682b      	ldr	r3, [r5, #0]
    27ce:	2b00      	cmp	r3, #0
    27d0:	bf38      	it	cc
    27d2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    27d4:	462c      	mov	r4, r5
    27d6:	461d      	mov	r5, r3
    27d8:	e7de      	b.n	2798 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    27da:	4f03      	ldr	r7, [pc, #12]	; (27e8 <nrfx_gpio_handler+0x88>)
    27dc:	e7c9      	b.n	2772 <nrfx_gpio_handler+0x12>
    27de:	bf00      	nop
    27e0:	00007190 	.word	0x00007190
    27e4:	00007d46 	.word	0x00007d46
    27e8:	000071a8 	.word	0x000071a8
    27ec:	00007cef 	.word	0x00007cef
    27f0:	00007d5d 	.word	0x00007d5d
    27f4:	0000779d 	.word	0x0000779d

000027f8 <gpio_nrfx_pin_interrupt_configure>:
{
    27f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27fa:	6840      	ldr	r0, [r0, #4]
    27fc:	7b05      	ldrb	r5, [r0, #12]
    27fe:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    2802:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2806:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    280a:	f04f 0500 	mov.w	r5, #0
    280e:	d104      	bne.n	281a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2810:	4620      	mov	r0, r4
    2812:	f001 fa2b 	bl	3c6c <nrfx_gpiote_trigger_disable>
	return 0;
    2816:	2000      	movs	r0, #0
    2818:	e054      	b.n	28c4 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    281a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    281e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2822:	d151      	bne.n	28c8 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2828:	bf0c      	ite	eq
    282a:	2304      	moveq	r3, #4
    282c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    282e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2832:	6883      	ldr	r3, [r0, #8]
    2834:	fa23 f101 	lsr.w	r1, r3, r1
    2838:	f011 0101 	ands.w	r1, r1, #1
    283c:	d155      	bne.n	28ea <gpio_nrfx_pin_interrupt_configure+0xf2>
    283e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2842:	d152      	bne.n	28ea <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    2844:	0966      	lsrs	r6, r4, #5
    2846:	d04a      	beq.n	28de <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    2848:	f64f 73ff 	movw	r3, #65535	; 0xffff
    284c:	2e01      	cmp	r6, #1
    284e:	bf08      	it	eq
    2850:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    2852:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2856:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2858:	07ca      	lsls	r2, r1, #31
    285a:	d40b      	bmi.n	2874 <gpio_nrfx_pin_interrupt_configure+0x7c>
    285c:	492b      	ldr	r1, [pc, #172]	; (290c <gpio_nrfx_pin_interrupt_configure+0x114>)
    285e:	482c      	ldr	r0, [pc, #176]	; (2910 <gpio_nrfx_pin_interrupt_configure+0x118>)
    2860:	4a2c      	ldr	r2, [pc, #176]	; (2914 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2862:	f240 2329 	movw	r3, #553	; 0x229
    2866:	f004 f9bd 	bl	6be4 <printk>
    286a:	482a      	ldr	r0, [pc, #168]	; (2914 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    286c:	f240 2129 	movw	r1, #553	; 0x229
    2870:	f004 f8e4 	bl	6a3c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2874:	b16e      	cbz	r6, 2892 <gpio_nrfx_pin_interrupt_configure+0x9a>
    2876:	2e01      	cmp	r6, #1
    2878:	d034      	beq.n	28e4 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    287a:	4927      	ldr	r1, [pc, #156]	; (2918 <gpio_nrfx_pin_interrupt_configure+0x120>)
    287c:	4824      	ldr	r0, [pc, #144]	; (2910 <gpio_nrfx_pin_interrupt_configure+0x118>)
    287e:	4a25      	ldr	r2, [pc, #148]	; (2914 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    2880:	f240 232e 	movw	r3, #558	; 0x22e
    2884:	f004 f9ae 	bl	6be4 <printk>
    2888:	4822      	ldr	r0, [pc, #136]	; (2914 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    288a:	f240 212e 	movw	r1, #558	; 0x22e
    288e:	f004 f8d5 	bl	6a3c <assert_post_action>
        case 0: return NRF_P0;
    2892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2896:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    289a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    289e:	07db      	lsls	r3, r3, #31
    28a0:	d423      	bmi.n	28ea <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28a2:	f10d 0507 	add.w	r5, sp, #7
    28a6:	4629      	mov	r1, r5
    28a8:	4620      	mov	r0, r4
    28aa:	f001 f909 	bl	3ac0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    28ae:	4b1b      	ldr	r3, [pc, #108]	; (291c <gpio_nrfx_pin_interrupt_configure+0x124>)
    28b0:	4298      	cmp	r0, r3
    28b2:	d119      	bne.n	28e8 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    28b4:	4628      	mov	r0, r5
    28b6:	f001 f963 	bl	3b80 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    28ba:	4b19      	ldr	r3, [pc, #100]	; (2920 <gpio_nrfx_pin_interrupt_configure+0x128>)
    28bc:	4298      	cmp	r0, r3
    28be:	d013      	beq.n	28e8 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    28c0:	f06f 000b 	mvn.w	r0, #11
}
    28c4:	b004      	add	sp, #16
    28c6:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    28c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    28cc:	d005      	beq.n	28da <gpio_nrfx_pin_interrupt_configure+0xe2>
    28ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    28d2:	bf0c      	ite	eq
    28d4:	2302      	moveq	r3, #2
    28d6:	2301      	movne	r3, #1
    28d8:	e7a9      	b.n	282e <gpio_nrfx_pin_interrupt_configure+0x36>
    28da:	2303      	movs	r3, #3
    28dc:	e7a7      	b.n	282e <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    28de:	f04f 31ff 	mov.w	r1, #4294967295
    28e2:	e7b6      	b.n	2852 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    28e4:	4b0f      	ldr	r3, [pc, #60]	; (2924 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    28e6:	e7d6      	b.n	2896 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    28e8:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    28ea:	2300      	movs	r3, #0
    28ec:	4619      	mov	r1, r3
    28ee:	aa02      	add	r2, sp, #8
    28f0:	4620      	mov	r0, r4
    28f2:	f000 ffc7 	bl	3884 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    28f6:	4b0a      	ldr	r3, [pc, #40]	; (2920 <gpio_nrfx_pin_interrupt_configure+0x128>)
    28f8:	4298      	cmp	r0, r3
    28fa:	d104      	bne.n	2906 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    28fc:	2101      	movs	r1, #1
    28fe:	4620      	mov	r0, r4
    2900:	f001 f944 	bl	3b8c <nrfx_gpiote_trigger_enable>
    2904:	e787      	b.n	2816 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2906:	f06f 0004 	mvn.w	r0, #4
    290a:	e7db      	b.n	28c4 <gpio_nrfx_pin_interrupt_configure+0xcc>
    290c:	00007d9c 	.word	0x00007d9c
    2910:	0000779d 	.word	0x0000779d
    2914:	00007d69 	.word	0x00007d69
    2918:	00007898 	.word	0x00007898
    291c:	0bad0004 	.word	0x0bad0004
    2920:	0bad0000 	.word	0x0bad0000
    2924:	50000300 	.word	0x50000300

00002928 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2928:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    292a:	f001 f919 	bl	3b60 <nrfx_gpiote_is_init>
    292e:	4604      	mov	r4, r0
    2930:	b968      	cbnz	r0, 294e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2932:	f001 f8ed 	bl	3b10 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2936:	4b08      	ldr	r3, [pc, #32]	; (2958 <gpio_nrfx_init+0x30>)
    2938:	4298      	cmp	r0, r3
    293a:	d10a      	bne.n	2952 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    293c:	4807      	ldr	r0, [pc, #28]	; (295c <gpio_nrfx_init+0x34>)
    293e:	4621      	mov	r1, r4
    2940:	f001 f8b8 	bl	3ab4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2944:	4622      	mov	r2, r4
    2946:	2105      	movs	r1, #5
    2948:	2006      	movs	r0, #6
    294a:	f7ff f829 	bl	19a0 <z_arm_irq_priority_set>
		return 0;
    294e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2950:	bd10      	pop	{r4, pc}
		return -EIO;
    2952:	f06f 0004 	mvn.w	r0, #4
    2956:	e7fb      	b.n	2950 <gpio_nrfx_init+0x28>
    2958:	0bad0000 	.word	0x0bad0000
    295c:	00002761 	.word	0x00002761

00002960 <gpio_nrfx_pin_configure>:
{
    2960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2964:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2966:	7b3b      	ldrb	r3, [r7, #12]
    2968:	f001 051f 	and.w	r5, r1, #31
{
    296c:	b085      	sub	sp, #20
    296e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2970:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    2974:	4614      	mov	r4, r2
    2976:	b9ca      	cbnz	r2, 29ac <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2978:	a902      	add	r1, sp, #8
    297a:	4628      	mov	r0, r5
    297c:	f001 f8a0 	bl	3ac0 <nrfx_gpiote_channel_get>
    2980:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2982:	4628      	mov	r0, r5
    2984:	f001 f994 	bl	3cb0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2988:	4b48      	ldr	r3, [pc, #288]	; (2aac <gpio_nrfx_pin_configure+0x14c>)
    298a:	4298      	cmp	r0, r3
    298c:	d004      	beq.n	2998 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    298e:	f06f 0004 	mvn.w	r0, #4
}
    2992:	b005      	add	sp, #20
    2994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2998:	4284      	cmp	r4, r0
    299a:	d105      	bne.n	29a8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    299c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    29a0:	f001 f8e8 	bl	3b74 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    29a4:	42a0      	cmp	r0, r4
    29a6:	d1f2      	bne.n	298e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    29a8:	2000      	movs	r0, #0
    29aa:	e7f2      	b.n	2992 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    29ac:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    29b0:	f10d 0103 	add.w	r1, sp, #3
    29b4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    29b6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    29ba:	f001 f881 	bl	3ac0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    29be:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    29c0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    29c2:	aa02      	add	r2, sp, #8
    29c4:	4649      	mov	r1, r9
    29c6:	4628      	mov	r0, r5
    29c8:	f000 ff5c 	bl	3884 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    29cc:	4b37      	ldr	r3, [pc, #220]	; (2aac <gpio_nrfx_pin_configure+0x14c>)
    29ce:	4298      	cmp	r0, r3
    29d0:	d002      	beq.n	29d8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29d2:	f06f 0015 	mvn.w	r0, #21
    29d6:	e7dc      	b.n	2992 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    29d8:	4580      	cmp	r8, r0
    29da:	d103      	bne.n	29e4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    29dc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    29e0:	f001 f8c8 	bl	3b74 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    29e4:	05a3      	lsls	r3, r4, #22
    29e6:	d54e      	bpl.n	2a86 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29e8:	4b31      	ldr	r3, [pc, #196]	; (2ab0 <gpio_nrfx_pin_configure+0x150>)
    29ea:	4a32      	ldr	r2, [pc, #200]	; (2ab4 <gpio_nrfx_pin_configure+0x154>)
    29ec:	4023      	ands	r3, r4
    29ee:	4293      	cmp	r3, r2
    29f0:	d03a      	beq.n	2a68 <gpio_nrfx_pin_configure+0x108>
    29f2:	d80c      	bhi.n	2a0e <gpio_nrfx_pin_configure+0xae>
    29f4:	2b06      	cmp	r3, #6
    29f6:	d014      	beq.n	2a22 <gpio_nrfx_pin_configure+0xc2>
    29f8:	d804      	bhi.n	2a04 <gpio_nrfx_pin_configure+0xa4>
    29fa:	b193      	cbz	r3, 2a22 <gpio_nrfx_pin_configure+0xc2>
    29fc:	2b02      	cmp	r3, #2
    29fe:	d1e8      	bne.n	29d2 <gpio_nrfx_pin_configure+0x72>
    2a00:	2304      	movs	r3, #4
    2a02:	e00e      	b.n	2a22 <gpio_nrfx_pin_configure+0xc2>
    2a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a08:	d1e3      	bne.n	29d2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    2a0a:	2301      	movs	r3, #1
    2a0c:	e009      	b.n	2a22 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a0e:	4a2a      	ldr	r2, [pc, #168]	; (2ab8 <gpio_nrfx_pin_configure+0x158>)
    2a10:	4293      	cmp	r3, r2
    2a12:	d02b      	beq.n	2a6c <gpio_nrfx_pin_configure+0x10c>
    2a14:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2a18:	d02a      	beq.n	2a70 <gpio_nrfx_pin_configure+0x110>
    2a1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2a1e:	d1d8      	bne.n	29d2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    2a20:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    2a22:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2a26:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    2a2a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2a2e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2a30:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2a34:	bf54      	ite	pl
    2a36:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2a3a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a3c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2a3e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a42:	d517      	bpl.n	2a74 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	2101      	movs	r1, #1
    2a48:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2a4c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2a50:	2200      	movs	r2, #0
    2a52:	a901      	add	r1, sp, #4
    2a54:	4628      	mov	r0, r5
    2a56:	f000 ffbd 	bl	39d4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a5a:	4b14      	ldr	r3, [pc, #80]	; (2aac <gpio_nrfx_pin_configure+0x14c>)
    2a5c:	4298      	cmp	r0, r3
    2a5e:	bf14      	ite	ne
    2a60:	f06f 0015 	mvnne.w	r0, #21
    2a64:	2000      	moveq	r0, #0
    2a66:	e794      	b.n	2992 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2a68:	2307      	movs	r3, #7
    2a6a:	e7da      	b.n	2a22 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2a6c:	2305      	movs	r3, #5
    2a6e:	e7d8      	b.n	2a22 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2a70:	2303      	movs	r3, #3
    2a72:	e7d6      	b.n	2a22 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2a74:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2a76:	bf41      	itttt	mi
    2a78:	687b      	ldrmi	r3, [r7, #4]
    2a7a:	2101      	movmi	r1, #1
    2a7c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2a80:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    2a84:	e7e4      	b.n	2a50 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    2a86:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a88:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2a8c:	bf54      	ite	pl
    2a8e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    2a92:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a94:	461a      	mov	r2, r3
    2a96:	a901      	add	r1, sp, #4
    2a98:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2a9a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a9e:	f000 fef1 	bl	3884 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2aa2:	4b02      	ldr	r3, [pc, #8]	; (2aac <gpio_nrfx_pin_configure+0x14c>)
    2aa4:	4298      	cmp	r0, r3
    2aa6:	f43f af7f 	beq.w	29a8 <gpio_nrfx_pin_configure+0x48>
    2aaa:	e792      	b.n	29d2 <gpio_nrfx_pin_configure+0x72>
    2aac:	0bad0000 	.word	0x0bad0000
    2ab0:	00f00006 	.word	0x00f00006
    2ab4:	00100006 	.word	0x00100006
    2ab8:	00400002 	.word	0x00400002

00002abc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2abe:	794b      	ldrb	r3, [r1, #5]
    2ac0:	2b01      	cmp	r3, #1
    2ac2:	d026      	beq.n	2b12 <uarte_nrfx_configure+0x56>
    2ac4:	2b03      	cmp	r3, #3
    2ac6:	d121      	bne.n	2b0c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2ac8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2aca:	798b      	ldrb	r3, [r1, #6]
    2acc:	2b03      	cmp	r3, #3
    2ace:	d11d      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2ad0:	79cc      	ldrb	r4, [r1, #7]
    2ad2:	b10c      	cbz	r4, 2ad8 <uarte_nrfx_configure+0x1c>
    2ad4:	2c01      	cmp	r4, #1
    2ad6:	d119      	bne.n	2b0c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2ad8:	790a      	ldrb	r2, [r1, #4]
    2ada:	b112      	cbz	r2, 2ae2 <uarte_nrfx_configure+0x26>
    2adc:	2a02      	cmp	r2, #2
    2ade:	d115      	bne.n	2b0c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2ae0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2ae2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2ae4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2ae6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2aea:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2aec:	d065      	beq.n	2bba <uarte_nrfx_configure+0xfe>
    2aee:	d82d      	bhi.n	2b4c <uarte_nrfx_configure+0x90>
    2af0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2af4:	d064      	beq.n	2bc0 <uarte_nrfx_configure+0x104>
    2af6:	d816      	bhi.n	2b26 <uarte_nrfx_configure+0x6a>
    2af8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2afc:	d062      	beq.n	2bc4 <uarte_nrfx_configure+0x108>
    2afe:	d80a      	bhi.n	2b16 <uarte_nrfx_configure+0x5a>
    2b00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2b04:	d061      	beq.n	2bca <uarte_nrfx_configure+0x10e>
    2b06:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2b0a:	d061      	beq.n	2bd0 <uarte_nrfx_configure+0x114>
    2b0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2b10:	e052      	b.n	2bb8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2b12:	2600      	movs	r6, #0
    2b14:	e7d9      	b.n	2aca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2b16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2b1a:	d05c      	beq.n	2bd6 <uarte_nrfx_configure+0x11a>
    2b1c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2b20:	d1f4      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2b22:	4b37      	ldr	r3, [pc, #220]	; (2c00 <uarte_nrfx_configure+0x144>)
    2b24:	e03c      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b26:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2b2a:	d057      	beq.n	2bdc <uarte_nrfx_configure+0x120>
    2b2c:	d807      	bhi.n	2b3e <uarte_nrfx_configure+0x82>
    2b2e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2b32:	d055      	beq.n	2be0 <uarte_nrfx_configure+0x124>
    2b34:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2b38:	d1e8      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2b3a:	4b32      	ldr	r3, [pc, #200]	; (2c04 <uarte_nrfx_configure+0x148>)
    2b3c:	e030      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b3e:	f647 2712 	movw	r7, #31250	; 0x7a12
    2b42:	42bb      	cmp	r3, r7
    2b44:	d1e2      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2b46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2b4a:	e029      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b4c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2b50:	d048      	beq.n	2be4 <uarte_nrfx_configure+0x128>
    2b52:	d813      	bhi.n	2b7c <uarte_nrfx_configure+0xc0>
    2b54:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2b58:	d047      	beq.n	2bea <uarte_nrfx_configure+0x12e>
    2b5a:	d809      	bhi.n	2b70 <uarte_nrfx_configure+0xb4>
    2b5c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2b60:	42bb      	cmp	r3, r7
    2b62:	d044      	beq.n	2bee <uarte_nrfx_configure+0x132>
    2b64:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2b68:	d1d0      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2b6a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2b6e:	e017      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b70:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2b74:	d1ca      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2b76:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2b7a:	e011      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b7c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2b80:	d038      	beq.n	2bf4 <uarte_nrfx_configure+0x138>
    2b82:	d808      	bhi.n	2b96 <uarte_nrfx_configure+0xda>
    2b84:	4f20      	ldr	r7, [pc, #128]	; (2c08 <uarte_nrfx_configure+0x14c>)
    2b86:	42bb      	cmp	r3, r7
    2b88:	d037      	beq.n	2bfa <uarte_nrfx_configure+0x13e>
    2b8a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2b8e:	d1bd      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2b90:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2b94:	e004      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2b96:	4f1d      	ldr	r7, [pc, #116]	; (2c0c <uarte_nrfx_configure+0x150>)
    2b98:	42bb      	cmp	r3, r7
    2b9a:	d1b7      	bne.n	2b0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2ba0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2ba4:	6903      	ldr	r3, [r0, #16]
    2ba6:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2ba8:	4334      	orrs	r4, r6
    2baa:	4322      	orrs	r2, r4
    2bac:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2bae:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2bb2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2bb6:	2000      	movs	r0, #0
}
    2bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2bba:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2bbe:	e7ef      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2bc0:	4b13      	ldr	r3, [pc, #76]	; (2c10 <uarte_nrfx_configure+0x154>)
    2bc2:	e7ed      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2bc4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2bc8:	e7ea      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2bca:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2bce:	e7e7      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2bd0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2bd4:	e7e4      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2bd6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2bda:	e7e1      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2bdc:	4b0d      	ldr	r3, [pc, #52]	; (2c14 <uarte_nrfx_configure+0x158>)
    2bde:	e7df      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2be0:	4b0d      	ldr	r3, [pc, #52]	; (2c18 <uarte_nrfx_configure+0x15c>)
    2be2:	e7dd      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2be4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2be8:	e7da      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2bea:	4b0c      	ldr	r3, [pc, #48]	; (2c1c <uarte_nrfx_configure+0x160>)
    2bec:	e7d8      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2bee:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2bf2:	e7d5      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2bf4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2bf8:	e7d2      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2bfe:	e7cf      	b.n	2ba0 <uarte_nrfx_configure+0xe4>
    2c00:	0013b000 	.word	0x0013b000
    2c04:	004ea000 	.word	0x004ea000
    2c08:	0003d090 	.word	0x0003d090
    2c0c:	000f4240 	.word	0x000f4240
    2c10:	00275000 	.word	0x00275000
    2c14:	0075c000 	.word	0x0075c000
    2c18:	003af000 	.word	0x003af000
    2c1c:	013a9000 	.word	0x013a9000

00002c20 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c20:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2c22:	0953      	lsrs	r3, r2, #5
{
    2c24:	b510      	push	{r4, lr}
    2c26:	4604      	mov	r4, r0
    switch (port)
    2c28:	d02c      	beq.n	2c84 <nrf_gpio_pin_port_decode+0x64>
    2c2a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c30:	bf18      	it	ne
    2c32:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2c34:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2c38:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2c3a:	07db      	lsls	r3, r3, #31
    2c3c:	d40b      	bmi.n	2c56 <nrf_gpio_pin_port_decode+0x36>
    2c3e:	4914      	ldr	r1, [pc, #80]	; (2c90 <nrf_gpio_pin_port_decode+0x70>)
    2c40:	4814      	ldr	r0, [pc, #80]	; (2c94 <nrf_gpio_pin_port_decode+0x74>)
    2c42:	4a15      	ldr	r2, [pc, #84]	; (2c98 <nrf_gpio_pin_port_decode+0x78>)
    2c44:	f240 2329 	movw	r3, #553	; 0x229
    2c48:	f003 ffcc 	bl	6be4 <printk>
    2c4c:	4812      	ldr	r0, [pc, #72]	; (2c98 <nrf_gpio_pin_port_decode+0x78>)
    2c4e:	f240 2129 	movw	r1, #553	; 0x229
    2c52:	f003 fef3 	bl	6a3c <assert_post_action>
    uint32_t pin_number = *p_pin;
    2c56:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2c58:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c5c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2c5e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c60:	d00d      	beq.n	2c7e <nrf_gpio_pin_port_decode+0x5e>
    2c62:	2b01      	cmp	r3, #1
    2c64:	d011      	beq.n	2c8a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2c66:	490d      	ldr	r1, [pc, #52]	; (2c9c <nrf_gpio_pin_port_decode+0x7c>)
    2c68:	480a      	ldr	r0, [pc, #40]	; (2c94 <nrf_gpio_pin_port_decode+0x74>)
    2c6a:	4a0b      	ldr	r2, [pc, #44]	; (2c98 <nrf_gpio_pin_port_decode+0x78>)
    2c6c:	f240 232e 	movw	r3, #558	; 0x22e
    2c70:	f003 ffb8 	bl	6be4 <printk>
    2c74:	4808      	ldr	r0, [pc, #32]	; (2c98 <nrf_gpio_pin_port_decode+0x78>)
    2c76:	f240 212e 	movw	r1, #558	; 0x22e
    2c7a:	f003 fedf 	bl	6a3c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2c82:	bd10      	pop	{r4, pc}
    switch (port)
    2c84:	f04f 33ff 	mov.w	r3, #4294967295
    2c88:	e7d4      	b.n	2c34 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    2c8a:	4805      	ldr	r0, [pc, #20]	; (2ca0 <nrf_gpio_pin_port_decode+0x80>)
    2c8c:	e7f9      	b.n	2c82 <nrf_gpio_pin_port_decode+0x62>
    2c8e:	bf00      	nop
    2c90:	00007d9c 	.word	0x00007d9c
    2c94:	0000779d 	.word	0x0000779d
    2c98:	00007d69 	.word	0x00007d69
    2c9c:	00007898 	.word	0x00007898
    2ca0:	50000300 	.word	0x50000300

00002ca4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2ca6:	6906      	ldr	r6, [r0, #16]
{
    2ca8:	4605      	mov	r5, r0
    2caa:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2cac:	f004 fa1d 	bl	70ea <k_is_in_isr>
    2cb0:	b910      	cbnz	r0, 2cb8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2cb2:	4b2c      	ldr	r3, [pc, #176]	; (2d64 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2cb4:	781b      	ldrb	r3, [r3, #0]
    2cb6:	b983      	cbnz	r3, 2cda <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2cb8:	f04f 0320 	mov.w	r3, #32
    2cbc:	f3ef 8411 	mrs	r4, BASEPRI
    2cc0:	f383 8812 	msr	BASEPRI_MAX, r3
    2cc4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2cc8:	4628      	mov	r0, r5
    2cca:	f004 f8e3 	bl	6e94 <is_tx_ready>
    2cce:	bb28      	cbnz	r0, 2d1c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2cd0:	f384 8811 	msr	BASEPRI, r4
    2cd4:	f3bf 8f6f 	isb	sy
}
    2cd8:	e7ee      	b.n	2cb8 <uarte_nrfx_poll_out+0x14>
{
    2cda:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2cdc:	4628      	mov	r0, r5
    2cde:	f004 f8d9 	bl	6e94 <is_tx_ready>
    2ce2:	b970      	cbnz	r0, 2d02 <uarte_nrfx_poll_out+0x5e>
    2ce4:	2001      	movs	r0, #1
    2ce6:	f004 f927 	bl	6f38 <nrfx_busy_wait>
    2cea:	3c01      	subs	r4, #1
    2cec:	d1f6      	bne.n	2cdc <uarte_nrfx_poll_out+0x38>
    2cee:	2100      	movs	r1, #0
    2cf0:	2021      	movs	r0, #33	; 0x21
    2cf2:	f002 fe47 	bl	5984 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2cf6:	e7f0      	b.n	2cda <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2cf8:	f384 8811 	msr	BASEPRI, r4
    2cfc:	f3bf 8f6f 	isb	sy
}
    2d00:	e7f5      	b.n	2cee <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2d02:	f04f 0320 	mov.w	r3, #32
    2d06:	f3ef 8411 	mrs	r4, BASEPRI
    2d0a:	f383 8812 	msr	BASEPRI_MAX, r3
    2d0e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2d12:	4628      	mov	r0, r5
    2d14:	f004 f8be 	bl	6e94 <is_tx_ready>
    2d18:	2800      	cmp	r0, #0
    2d1a:	d0ed      	beq.n	2cf8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2d1c:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2d20:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2d22:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2d24:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d26:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d2a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d2e:	2200      	movs	r2, #0
    2d30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2d34:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2d38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2d3c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2d40:	684a      	ldr	r2, [r1, #4]
    2d42:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2d44:	bf41      	itttt	mi
    2d46:	2208      	movmi	r2, #8
    2d48:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2d4c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2d50:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d54:	2201      	movs	r2, #1
    2d56:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2d58:	f384 8811 	msr	BASEPRI, r4
    2d5c:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d62:	bf00      	nop
    2d64:	20000f7d 	.word	0x20000f7d

00002d68 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2d6c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2d70:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    2d72:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d76:	2300      	movs	r3, #0
    2d78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2d7c:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    2d7e:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2d80:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    2d82:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2d84:	1c58      	adds	r0, r3, #1
    2d86:	d013      	beq.n	2db0 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d88:	a801      	add	r0, sp, #4
    2d8a:	9301      	str	r3, [sp, #4]
    2d8c:	f7ff ff48 	bl	2c20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d90:	9a01      	ldr	r2, [sp, #4]
    2d92:	2301      	movs	r3, #1
    2d94:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2d96:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2d9a:	68eb      	ldr	r3, [r5, #12]
    2d9c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d9e:	a801      	add	r0, sp, #4
    2da0:	f7ff ff3e 	bl	2c20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2da4:	9b01      	ldr	r3, [sp, #4]
    2da6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2daa:	2203      	movs	r2, #3
    2dac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2db0:	692b      	ldr	r3, [r5, #16]
    2db2:	1c59      	adds	r1, r3, #1
    2db4:	d011      	beq.n	2dda <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2db6:	7f2a      	ldrb	r2, [r5, #28]
    2db8:	9301      	str	r3, [sp, #4]
    2dba:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2dbc:	a801      	add	r0, sp, #4
    2dbe:	bf14      	ite	ne
    2dc0:	f04f 0903 	movne.w	r9, #3
    2dc4:	f04f 0900 	moveq.w	r9, #0
    2dc8:	f7ff ff2a 	bl	2c20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2dcc:	9b01      	ldr	r3, [sp, #4]
    2dce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2dd2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2dd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2dda:	696b      	ldr	r3, [r5, #20]
    2ddc:	1c5a      	adds	r2, r3, #1
    2dde:	d013      	beq.n	2e08 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2de0:	a801      	add	r0, sp, #4
    2de2:	9301      	str	r3, [sp, #4]
    2de4:	f7ff ff1c 	bl	2c20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2de8:	9a01      	ldr	r2, [sp, #4]
    2dea:	2301      	movs	r3, #1
    2dec:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2dee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2df2:	696b      	ldr	r3, [r5, #20]
    2df4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2df6:	a801      	add	r0, sp, #4
    2df8:	f7ff ff12 	bl	2c20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2dfc:	9b01      	ldr	r3, [sp, #4]
    2dfe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2e02:	2203      	movs	r2, #3
    2e04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2e08:	69ab      	ldr	r3, [r5, #24]
    2e0a:	1c58      	adds	r0, r3, #1
    2e0c:	d011      	beq.n	2e32 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2e0e:	7f6a      	ldrb	r2, [r5, #29]
    2e10:	9301      	str	r3, [sp, #4]
    2e12:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e14:	a801      	add	r0, sp, #4
    2e16:	bf14      	ite	ne
    2e18:	f04f 0903 	movne.w	r9, #3
    2e1c:	f04f 0900 	moveq.w	r9, #0
    2e20:	f7ff fefe 	bl	2c20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2e24:	9b01      	ldr	r3, [sp, #4]
    2e26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e2a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2e2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    2e32:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    2e36:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    2e38:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2e3c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    2e40:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    2e44:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2e48:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    2e4a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    2e4e:	3104      	adds	r1, #4
    2e50:	4630      	mov	r0, r6
    2e52:	f7ff fe33 	bl	2abc <uarte_nrfx_configure>
	if (err) {
    2e56:	4605      	mov	r5, r0
    2e58:	2800      	cmp	r0, #0
    2e5a:	d146      	bne.n	2eea <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2e5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2e60:	0799      	lsls	r1, r3, #30
    2e62:	d519      	bpl.n	2e98 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2e64:	f107 0012 	add.w	r0, r7, #18
    2e68:	f001 f820 	bl	3eac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2e6c:	4b22      	ldr	r3, [pc, #136]	; (2ef8 <uarte_instance_init.isra.0+0x190>)
    2e6e:	4298      	cmp	r0, r3
    2e70:	d13f      	bne.n	2ef2 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2e72:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2e74:	00c3      	lsls	r3, r0, #3
    2e76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2e7a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2e7e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2e82:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2e86:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2e8a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2e8e:	4a1b      	ldr	r2, [pc, #108]	; (2efc <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2e90:	2301      	movs	r3, #1
    2e92:	4083      	lsls	r3, r0
    2e94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e98:	2308      	movs	r3, #8
    2e9a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    2e9e:	f898 3008 	ldrb.w	r3, [r8, #8]
    2ea2:	b95b      	cbnz	r3, 2ebc <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ea4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2ea8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2eac:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2eb0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2eb4:	2301      	movs	r3, #1
    2eb6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2eba:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2ebc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2ec0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2ec2:	bf5c      	itt	pl
    2ec4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2ec8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2ecc:	06db      	lsls	r3, r3, #27
    2ece:	bf44      	itt	mi
    2ed0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2ed4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2ed8:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    2eda:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2edc:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2ee0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ee4:	2301      	movs	r3, #1
    2ee6:	60a3      	str	r3, [r4, #8]
    2ee8:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2eea:	4628      	mov	r0, r5
    2eec:	b003      	add	sp, #12
    2eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2ef2:	f06f 0504 	mvn.w	r5, #4
    2ef6:	e7f8      	b.n	2eea <uarte_instance_init.isra.0+0x182>
    2ef8:	0bad0000 	.word	0x0bad0000
    2efc:	4001f000 	.word	0x4001f000

00002f00 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f00:	4919      	ldr	r1, [pc, #100]	; (2f68 <sys_clock_timeout_handler+0x68>)
{
    2f02:	b570      	push	{r4, r5, r6, lr}
    2f04:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2f06:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f0a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2f0c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f10:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f14:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2f16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2f1a:	f04f 0500 	mov.w	r5, #0
    2f1e:	d20a      	bcs.n	2f36 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2f20:	4b12      	ldr	r3, [pc, #72]	; (2f6c <sys_clock_timeout_handler+0x6c>)
    2f22:	6819      	ldr	r1, [r3, #0]
    2f24:	060a      	lsls	r2, r1, #24
    2f26:	0a0b      	lsrs	r3, r1, #8
    2f28:	1992      	adds	r2, r2, r6
    2f2a:	4911      	ldr	r1, [pc, #68]	; (2f70 <sys_clock_timeout_handler+0x70>)
    2f2c:	f143 0300 	adc.w	r3, r3, #0
    2f30:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2f34:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2f36:	f003 fa51 	bl	63dc <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2f3a:	00a3      	lsls	r3, r4, #2
    2f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f40:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2f44:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2f48:	42b2      	cmp	r2, r6
    2f4a:	d10b      	bne.n	2f64 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2f4c:	b91d      	cbnz	r5, 2f56 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    2f4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2f52:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2f56:	4b07      	ldr	r3, [pc, #28]	; (2f74 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2f5c:	fa00 f404 	lsl.w	r4, r0, r4
    2f60:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2f64:	bd70      	pop	{r4, r5, r6, pc}
    2f66:	bf00      	nop
    2f68:	20000340 	.word	0x20000340
    2f6c:	20000a58 	.word	0x20000a58
    2f70:	20000328 	.word	0x20000328
    2f74:	40011000 	.word	0x40011000

00002f78 <compare_int_lock>:
{
    2f78:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2f7a:	2301      	movs	r3, #1
    2f7c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f7e:	4a11      	ldr	r2, [pc, #68]	; (2fc4 <compare_int_lock+0x4c>)
    2f80:	f3bf 8f5b 	dmb	ish
    2f84:	43dc      	mvns	r4, r3
    2f86:	e852 1f00 	ldrex	r1, [r2]
    2f8a:	ea01 0c04 	and.w	ip, r1, r4
    2f8e:	e842 ce00 	strex	lr, ip, [r2]
    2f92:	f1be 0f00 	cmp.w	lr, #0
    2f96:	d1f6      	bne.n	2f86 <compare_int_lock+0xe>
    2f98:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2fa0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2fa4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2fa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2fac:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2fb0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fb4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    2fb8:	420b      	tst	r3, r1
}
    2fba:	bf14      	ite	ne
    2fbc:	2001      	movne	r0, #1
    2fbe:	2000      	moveq	r0, #0
    2fc0:	bd10      	pop	{r4, pc}
    2fc2:	bf00      	nop
    2fc4:	20000a54 	.word	0x20000a54

00002fc8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    2fc8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2fca:	4a12      	ldr	r2, [pc, #72]	; (3014 <compare_int_unlock.part.0+0x4c>)
    2fcc:	f3bf 8f5b 	dmb	ish
    2fd0:	4083      	lsls	r3, r0
    2fd2:	e852 1f00 	ldrex	r1, [r2]
    2fd6:	4319      	orrs	r1, r3
    2fd8:	e842 1c00 	strex	ip, r1, [r2]
    2fdc:	f1bc 0f00 	cmp.w	ip, #0
    2fe0:	d1f7      	bne.n	2fd2 <compare_int_unlock.part.0+0xa>
    2fe2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2fe6:	4a0c      	ldr	r2, [pc, #48]	; (3018 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2fec:	4083      	lsls	r3, r0
    2fee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2ff2:	4b0a      	ldr	r3, [pc, #40]	; (301c <compare_int_unlock.part.0+0x54>)
    2ff4:	f3bf 8f5b 	dmb	ish
    2ff8:	681b      	ldr	r3, [r3, #0]
    2ffa:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2ffe:	fa23 f000 	lsr.w	r0, r3, r0
    3002:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3004:	bf42      	ittt	mi
    3006:	4b06      	ldrmi	r3, [pc, #24]	; (3020 <compare_int_unlock.part.0+0x58>)
    3008:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    300c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3010:	4770      	bx	lr
    3012:	bf00      	nop
    3014:	20000a54 	.word	0x20000a54
    3018:	40011000 	.word	0x40011000
    301c:	20000a50 	.word	0x20000a50
    3020:	e000e100 	.word	0xe000e100

00003024 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3024:	4b0d      	ldr	r3, [pc, #52]	; (305c <z_nrf_rtc_timer_read+0x38>)
    3026:	681b      	ldr	r3, [r3, #0]
    3028:	0a19      	lsrs	r1, r3, #8
    302a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    302c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3030:	4b0b      	ldr	r3, [pc, #44]	; (3060 <z_nrf_rtc_timer_read+0x3c>)
    3032:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3036:	18c0      	adds	r0, r0, r3
    3038:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    303c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3040:	d20a      	bcs.n	3058 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3042:	4b08      	ldr	r3, [pc, #32]	; (3064 <z_nrf_rtc_timer_read+0x40>)
    3044:	e9d3 2300 	ldrd	r2, r3, [r3]
    3048:	4299      	cmp	r1, r3
    304a:	bf08      	it	eq
    304c:	4290      	cmpeq	r0, r2
    304e:	d203      	bcs.n	3058 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3050:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3054:	f141 0100 	adc.w	r1, r1, #0
}
    3058:	4770      	bx	lr
    305a:	bf00      	nop
    305c:	20000a58 	.word	0x20000a58
    3060:	40011000 	.word	0x40011000
    3064:	20000328 	.word	0x20000328

00003068 <compare_set>:
{
    3068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    306c:	b085      	sub	sp, #20
    306e:	4616      	mov	r6, r2
    3070:	461f      	mov	r7, r3
    3072:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3074:	f7ff ff80 	bl	2f78 <compare_int_lock>
    3078:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    307a:	f7ff ffd3 	bl	3024 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    307e:	42b9      	cmp	r1, r7
    3080:	bf08      	it	eq
    3082:	42b0      	cmpeq	r0, r6
    3084:	d27f      	bcs.n	3186 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3086:	ebb6 0800 	subs.w	r8, r6, r0
    308a:	eb67 0901 	sbc.w	r9, r7, r1
    308e:	2300      	movs	r3, #0
    3090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3094:	454b      	cmp	r3, r9
    3096:	bf08      	it	eq
    3098:	4542      	cmpeq	r2, r8
    309a:	f0c0 8085 	bcc.w	31a8 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    309e:	4b44      	ldr	r3, [pc, #272]	; (31b0 <compare_set+0x148>)
    30a0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    30a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    30a8:	429f      	cmp	r7, r3
    30aa:	bf08      	it	eq
    30ac:	4296      	cmpeq	r6, r2
    30ae:	d054      	beq.n	315a <compare_set+0xf2>
    30b0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30b4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    30b8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30bc:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30c0:	fa0b f205 	lsl.w	r2, fp, r5
    30c4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30cc:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30d0:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    30d2:	4a38      	ldr	r2, [pc, #224]	; (31b4 <compare_set+0x14c>)
    return p_reg->CC[ch];
    30d4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    30d8:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30dc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    30e0:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    30e4:	461c      	mov	r4, r3
    30e6:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    30e8:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    30ec:	eba0 000a 	sub.w	r0, r0, sl
    30f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    30f4:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    30f8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    30fa:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    30fe:	d105      	bne.n	310c <compare_set+0xa4>
    3100:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3102:	2013      	movs	r0, #19
    3104:	f003 fffd 	bl	7102 <z_impl_k_busy_wait>
    3108:	4a2a      	ldr	r2, [pc, #168]	; (31b4 <compare_set+0x14c>)
    310a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    310c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    310e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3112:	eba4 000c 	sub.w	r0, r4, ip
    3116:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    311a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    311e:	bf88      	it	hi
    3120:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3122:	2000      	movs	r0, #0
    3124:	f8c8 0000 	str.w	r0, [r8]
    3128:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    312c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3130:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3134:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3138:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    313c:	4582      	cmp	sl, r0
    313e:	d006      	beq.n	314e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3140:	1a20      	subs	r0, r4, r0
    3142:	3802      	subs	r0, #2
    3144:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3148:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    314c:	d819      	bhi.n	3182 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    314e:	1ae4      	subs	r4, r4, r3
    3150:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3154:	1932      	adds	r2, r6, r4
    3156:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    315a:	4c15      	ldr	r4, [pc, #84]	; (31b0 <compare_set+0x148>)
    315c:	0129      	lsls	r1, r5, #4
    315e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3162:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    316a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    316c:	6043      	str	r3, [r0, #4]
	return ret;
    316e:	2400      	movs	r4, #0
	if (key) {
    3170:	9b01      	ldr	r3, [sp, #4]
    3172:	b113      	cbz	r3, 317a <compare_set+0x112>
    3174:	4628      	mov	r0, r5
    3176:	f7ff ff27 	bl	2fc8 <compare_int_unlock.part.0>
}
    317a:	4620      	mov	r0, r4
    317c:	b005      	add	sp, #20
    317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3182:	4620      	mov	r0, r4
    3184:	e7b0      	b.n	30e8 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3186:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3188:	4a0b      	ldr	r2, [pc, #44]	; (31b8 <compare_set+0x150>)
    318a:	f3bf 8f5b 	dmb	ish
    318e:	40ab      	lsls	r3, r5
    3190:	e852 1f00 	ldrex	r1, [r2]
    3194:	4319      	orrs	r1, r3
    3196:	e842 1000 	strex	r0, r1, [r2]
    319a:	2800      	cmp	r0, #0
    319c:	d1f8      	bne.n	3190 <compare_set+0x128>
    319e:	f3bf 8f5b 	dmb	ish
    31a2:	4632      	mov	r2, r6
    31a4:	463b      	mov	r3, r7
    31a6:	e7d8      	b.n	315a <compare_set+0xf2>
			return -EINVAL;
    31a8:	f06f 0415 	mvn.w	r4, #21
    31ac:	e7e0      	b.n	3170 <compare_set+0x108>
    31ae:	bf00      	nop
    31b0:	20000330 	.word	0x20000330
    31b4:	40011000 	.word	0x40011000
    31b8:	20000a50 	.word	0x20000a50

000031bc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    31bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    31be:	4b19      	ldr	r3, [pc, #100]	; (3224 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    31c0:	4d19      	ldr	r5, [pc, #100]	; (3228 <sys_clock_driver_init+0x6c>)
    31c2:	2400      	movs	r4, #0
    31c4:	f04f 30ff 	mov.w	r0, #4294967295
    31c8:	f04f 31ff 	mov.w	r1, #4294967295
    31cc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    31d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    31d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    31d8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31dc:	4b13      	ldr	r3, [pc, #76]	; (322c <sys_clock_driver_init+0x70>)
    31de:	2602      	movs	r6, #2
    31e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    31e4:	2101      	movs	r1, #1
    31e6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    31ea:	2011      	movs	r0, #17
    31ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    31f0:	4622      	mov	r2, r4
    31f2:	f7fe fbd5 	bl	19a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    31f6:	2011      	movs	r0, #17
    31f8:	f7fe fbb4 	bl	1964 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    31fc:	4a0c      	ldr	r2, [pc, #48]	; (3230 <sys_clock_driver_init+0x74>)
    31fe:	2301      	movs	r3, #1
    3200:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3202:	4a0c      	ldr	r2, [pc, #48]	; (3234 <sys_clock_driver_init+0x78>)
    3204:	602b      	str	r3, [r5, #0]
    3206:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3208:	4b0b      	ldr	r3, [pc, #44]	; (3238 <sys_clock_driver_init+0x7c>)
    320a:	4a0c      	ldr	r2, [pc, #48]	; (323c <sys_clock_driver_init+0x80>)
    320c:	9300      	str	r3, [sp, #0]
    320e:	9401      	str	r4, [sp, #4]
    3210:	2300      	movs	r3, #0
    3212:	4620      	mov	r0, r4
    3214:	f7ff ff28 	bl	3068 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3218:	4630      	mov	r0, r6
    321a:	f7ff f973 	bl	2504 <z_nrf_clock_control_lf_on>

	return 0;
}
    321e:	4620      	mov	r0, r4
    3220:	b002      	add	sp, #8
    3222:	bd70      	pop	{r4, r5, r6, pc}
    3224:	20000330 	.word	0x20000330
    3228:	40011000 	.word	0x40011000
    322c:	e000e100 	.word	0xe000e100
    3230:	40011008 	.word	0x40011008
    3234:	20000a54 	.word	0x20000a54
    3238:	00002f01 	.word	0x00002f01
    323c:	007fffff 	.word	0x007fffff

00003240 <rtc_nrf_isr>:
{
    3240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3244:	4c34      	ldr	r4, [pc, #208]	; (3318 <rtc_nrf_isr+0xd8>)
    3246:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    324a:	079a      	lsls	r2, r3, #30
    324c:	d509      	bpl.n	3262 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    324e:	4b33      	ldr	r3, [pc, #204]	; (331c <rtc_nrf_isr+0xdc>)
    3250:	681a      	ldr	r2, [r3, #0]
    3252:	b132      	cbz	r2, 3262 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3254:	2200      	movs	r2, #0
    3256:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3258:	4a31      	ldr	r2, [pc, #196]	; (3320 <rtc_nrf_isr+0xe0>)
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	6813      	ldr	r3, [r2, #0]
    325e:	3301      	adds	r3, #1
    3260:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3262:	f04f 0320 	mov.w	r3, #32
    3266:	f3ef 8211 	mrs	r2, BASEPRI
    326a:	f383 8812 	msr	BASEPRI_MAX, r3
    326e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3272:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3276:	03db      	lsls	r3, r3, #15
    3278:	d512      	bpl.n	32a0 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    327a:	f3bf 8f5b 	dmb	ish
    327e:	4b29      	ldr	r3, [pc, #164]	; (3324 <rtc_nrf_isr+0xe4>)
    3280:	e853 1f00 	ldrex	r1, [r3]
    3284:	f021 0001 	bic.w	r0, r1, #1
    3288:	e843 0600 	strex	r6, r0, [r3]
    328c:	2e00      	cmp	r6, #0
    328e:	d1f7      	bne.n	3280 <rtc_nrf_isr+0x40>
    3290:	f3bf 8f5b 	dmb	ish
    3294:	4b24      	ldr	r3, [pc, #144]	; (3328 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3296:	2900      	cmp	r1, #0
    3298:	d136      	bne.n	3308 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    329a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    329c:	2900      	cmp	r1, #0
    329e:	d133      	bne.n	3308 <rtc_nrf_isr+0xc8>
{
    32a0:	2300      	movs	r3, #0
	__asm__ volatile(
    32a2:	f382 8811 	msr	BASEPRI, r2
    32a6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    32aa:	b353      	cbz	r3, 3302 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    32ac:	f7ff feba 	bl	3024 <z_nrf_rtc_timer_read>
    32b0:	4606      	mov	r6, r0
	__asm__ volatile(
    32b2:	f04f 0320 	mov.w	r3, #32
    32b6:	f3ef 8011 	mrs	r0, BASEPRI
    32ba:	f383 8812 	msr	BASEPRI_MAX, r3
    32be:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    32c2:	4b1a      	ldr	r3, [pc, #104]	; (332c <rtc_nrf_isr+0xec>)
    32c4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    32c8:	4549      	cmp	r1, r9
    32ca:	bf08      	it	eq
    32cc:	4546      	cmpeq	r6, r8
    32ce:	f04f 0200 	mov.w	r2, #0
    32d2:	d31e      	bcc.n	3312 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    32d4:	f04f 36ff 	mov.w	r6, #4294967295
    32d8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    32dc:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    32e0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    32e4:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    32e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    32ea:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    32ee:	f380 8811 	msr	BASEPRI, r0
    32f2:	f3bf 8f6f 	isb	sy
		if (handler) {
    32f6:	b121      	cbz	r1, 3302 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    32f8:	9500      	str	r5, [sp, #0]
    32fa:	4642      	mov	r2, r8
    32fc:	464b      	mov	r3, r9
    32fe:	2000      	movs	r0, #0
    3300:	4788      	blx	r1
}
    3302:	b003      	add	sp, #12
    3304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3308:	2100      	movs	r1, #0
    330a:	6019      	str	r1, [r3, #0]
    330c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    330e:	2301      	movs	r3, #1
}
    3310:	e7c7      	b.n	32a2 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3312:	4611      	mov	r1, r2
    3314:	e7eb      	b.n	32ee <rtc_nrf_isr+0xae>
    3316:	bf00      	nop
    3318:	40011000 	.word	0x40011000
    331c:	40011104 	.word	0x40011104
    3320:	20000a58 	.word	0x20000a58
    3324:	20000a50 	.word	0x20000a50
    3328:	40011140 	.word	0x40011140
    332c:	20000330 	.word	0x20000330

00003330 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3330:	4b14      	ldr	r3, [pc, #80]	; (3384 <sys_clock_set_timeout+0x54>)
{
    3332:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3334:	f1b0 3fff 	cmp.w	r0, #4294967295
    3338:	bf08      	it	eq
    333a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    333c:	1e44      	subs	r4, r0, #1
    333e:	2c00      	cmp	r4, #0
    3340:	dd1e      	ble.n	3380 <sys_clock_set_timeout+0x50>
    3342:	429c      	cmp	r4, r3
    3344:	bfa8      	it	ge
    3346:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3348:	f7ff fe6c 	bl	3024 <z_nrf_rtc_timer_read>
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    334e:	490f      	ldr	r1, [pc, #60]	; (338c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3350:	e9d3 2300 	ldrd	r2, r3, [r3]
    3354:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3356:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    335a:	bf28      	it	cs
    335c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    335e:	3001      	adds	r0, #1
    3360:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3362:	4808      	ldr	r0, [pc, #32]	; (3384 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3364:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3366:	4284      	cmp	r4, r0
    3368:	bf28      	it	cs
    336a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    336c:	1912      	adds	r2, r2, r4
    336e:	f04f 0000 	mov.w	r0, #0
    3372:	9001      	str	r0, [sp, #4]
    3374:	f143 0300 	adc.w	r3, r3, #0
    3378:	f7ff fe76 	bl	3068 <compare_set>
}
    337c:	b002      	add	sp, #8
    337e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3380:	2400      	movs	r4, #0
    3382:	e7e1      	b.n	3348 <sys_clock_set_timeout+0x18>
    3384:	007fffff 	.word	0x007fffff
    3388:	20000340 	.word	0x20000340
    338c:	00002f01 	.word	0x00002f01

00003390 <sys_clock_elapsed>:
{
    3390:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3392:	f7ff fe47 	bl	3024 <z_nrf_rtc_timer_read>
    3396:	4b02      	ldr	r3, [pc, #8]	; (33a0 <sys_clock_elapsed+0x10>)
    3398:	681b      	ldr	r3, [r3, #0]
}
    339a:	1ac0      	subs	r0, r0, r3
    339c:	bd08      	pop	{r3, pc}
    339e:	bf00      	nop
    33a0:	20000340 	.word	0x20000340

000033a4 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    33a4:	b508      	push	{r3, lr}
    switch (domain)
    33a6:	b178      	cbz	r0, 33c8 <nrf_clock_is_running.constprop.0+0x24>
    33a8:	2801      	cmp	r0, #1
    33aa:	d01c      	beq.n	33e6 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    33ac:	4a14      	ldr	r2, [pc, #80]	; (3400 <nrf_clock_is_running.constprop.0+0x5c>)
    33ae:	4915      	ldr	r1, [pc, #84]	; (3404 <nrf_clock_is_running.constprop.0+0x60>)
    33b0:	4815      	ldr	r0, [pc, #84]	; (3408 <nrf_clock_is_running.constprop.0+0x64>)
    33b2:	f44f 734f 	mov.w	r3, #828	; 0x33c
    33b6:	f003 fc15 	bl	6be4 <printk>
    33ba:	4811      	ldr	r0, [pc, #68]	; (3400 <nrf_clock_is_running.constprop.0+0x5c>)
    33bc:	f44f 714f 	mov.w	r1, #828	; 0x33c
    33c0:	f003 fb3c 	bl	6a3c <assert_post_action>
            return false;
    33c4:	2000      	movs	r0, #0
    33c6:	e00d      	b.n	33e4 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    33c8:	b131      	cbz	r1, 33d8 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    33ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33ce:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    33d2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    33d6:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    33d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33dc:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33e0:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    33e4:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    33e6:	b131      	cbz	r1, 33f6 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    33e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    33f0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    33f4:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    33f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    33fa:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    33fe:	e7ef      	b.n	33e0 <nrf_clock_is_running.constprop.0+0x3c>
    3400:	00007ddb 	.word	0x00007ddb
    3404:	00007898 	.word	0x00007898
    3408:	0000779d 	.word	0x0000779d

0000340c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    340c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    340e:	4604      	mov	r4, r0
    3410:	b948      	cbnz	r0, 3426 <nrfx_clock_init+0x1a>
    3412:	490a      	ldr	r1, [pc, #40]	; (343c <nrfx_clock_init+0x30>)
    3414:	480a      	ldr	r0, [pc, #40]	; (3440 <nrfx_clock_init+0x34>)
    3416:	4a0b      	ldr	r2, [pc, #44]	; (3444 <nrfx_clock_init+0x38>)
    3418:	23bd      	movs	r3, #189	; 0xbd
    341a:	f003 fbe3 	bl	6be4 <printk>
    341e:	4809      	ldr	r0, [pc, #36]	; (3444 <nrfx_clock_init+0x38>)
    3420:	21bd      	movs	r1, #189	; 0xbd
    3422:	f003 fb0b 	bl	6a3c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3426:	4b08      	ldr	r3, [pc, #32]	; (3448 <nrfx_clock_init+0x3c>)
    3428:	791a      	ldrb	r2, [r3, #4]
    342a:	b922      	cbnz	r2, 3436 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    342c:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    342e:	4807      	ldr	r0, [pc, #28]	; (344c <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3430:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3432:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3434:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3436:	4806      	ldr	r0, [pc, #24]	; (3450 <nrfx_clock_init+0x44>)
    return err_code;
    3438:	e7fc      	b.n	3434 <nrfx_clock_init+0x28>
    343a:	bf00      	nop
    343c:	00007e4c 	.word	0x00007e4c
    3440:	0000779d 	.word	0x0000779d
    3444:	00007e0f 	.word	0x00007e0f
    3448:	20000a5c 	.word	0x20000a5c
    344c:	0bad0000 	.word	0x0bad0000
    3450:	0bad000c 	.word	0x0bad000c

00003454 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3454:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3456:	4b0b      	ldr	r3, [pc, #44]	; (3484 <nrfx_clock_enable+0x30>)
    3458:	791b      	ldrb	r3, [r3, #4]
    345a:	b94b      	cbnz	r3, 3470 <nrfx_clock_enable+0x1c>
    345c:	490a      	ldr	r1, [pc, #40]	; (3488 <nrfx_clock_enable+0x34>)
    345e:	480b      	ldr	r0, [pc, #44]	; (348c <nrfx_clock_enable+0x38>)
    3460:	4a0b      	ldr	r2, [pc, #44]	; (3490 <nrfx_clock_enable+0x3c>)
    3462:	23d6      	movs	r3, #214	; 0xd6
    3464:	f003 fbbe 	bl	6be4 <printk>
    3468:	4809      	ldr	r0, [pc, #36]	; (3490 <nrfx_clock_enable+0x3c>)
    346a:	21d6      	movs	r1, #214	; 0xd6
    346c:	f003 fae6 	bl	6a3c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3470:	2000      	movs	r0, #0
    3472:	f7fe fa87 	bl	1984 <arch_irq_is_enabled>
    3476:	b918      	cbnz	r0, 3480 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    347c:	f7fe ba72 	b.w	1964 <arch_irq_enable>
    3480:	bd08      	pop	{r3, pc}
    3482:	bf00      	nop
    3484:	20000a5c 	.word	0x20000a5c
    3488:	00007e5a 	.word	0x00007e5a
    348c:	0000779d 	.word	0x0000779d
    3490:	00007e0f 	.word	0x00007e0f

00003494 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3494:	4b22      	ldr	r3, [pc, #136]	; (3520 <nrfx_clock_start+0x8c>)
    3496:	791b      	ldrb	r3, [r3, #4]
{
    3498:	b513      	push	{r0, r1, r4, lr}
    349a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    349c:	b95b      	cbnz	r3, 34b6 <nrfx_clock_start+0x22>
    349e:	4921      	ldr	r1, [pc, #132]	; (3524 <nrfx_clock_start+0x90>)
    34a0:	4821      	ldr	r0, [pc, #132]	; (3528 <nrfx_clock_start+0x94>)
    34a2:	4a22      	ldr	r2, [pc, #136]	; (352c <nrfx_clock_start+0x98>)
    34a4:	f44f 7389 	mov.w	r3, #274	; 0x112
    34a8:	f003 fb9c 	bl	6be4 <printk>
    34ac:	481f      	ldr	r0, [pc, #124]	; (352c <nrfx_clock_start+0x98>)
    34ae:	f44f 7189 	mov.w	r1, #274	; 0x112
    34b2:	f003 fac3 	bl	6a3c <assert_post_action>
    switch (domain)
    34b6:	b174      	cbz	r4, 34d6 <nrfx_clock_start+0x42>
    34b8:	2c01      	cmp	r4, #1
    34ba:	d027      	beq.n	350c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    34bc:	4a1b      	ldr	r2, [pc, #108]	; (352c <nrfx_clock_start+0x98>)
    34be:	491c      	ldr	r1, [pc, #112]	; (3530 <nrfx_clock_start+0x9c>)
    34c0:	4819      	ldr	r0, [pc, #100]	; (3528 <nrfx_clock_start+0x94>)
    34c2:	f44f 73a2 	mov.w	r3, #324	; 0x144
    34c6:	f003 fb8d 	bl	6be4 <printk>
    34ca:	4818      	ldr	r0, [pc, #96]	; (352c <nrfx_clock_start+0x98>)
    34cc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    34d0:	f003 fab4 	bl	6a3c <assert_post_action>
            break;
    }
}
    34d4:	e016      	b.n	3504 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    34d6:	a901      	add	r1, sp, #4
    34d8:	4620      	mov	r0, r4
    34da:	f7ff ff63 	bl	33a4 <nrf_clock_is_running.constprop.0>
    34de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34e2:	b188      	cbz	r0, 3508 <nrfx_clock_start+0x74>
    34e4:	9a01      	ldr	r2, [sp, #4]
    34e6:	2a01      	cmp	r2, #1
    34e8:	d10e      	bne.n	3508 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    34ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34ee:	4b11      	ldr	r3, [pc, #68]	; (3534 <nrfx_clock_start+0xa0>)
    34f0:	2200      	movs	r2, #0
    34f2:	601a      	str	r2, [r3, #0]
    34f4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    34f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34fa:	2202      	movs	r2, #2
    34fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3500:	2201      	movs	r2, #1
    3502:	609a      	str	r2, [r3, #8]
}
    3504:	b002      	add	sp, #8
    3506:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3508:	2200      	movs	r2, #0
    350a:	e7ee      	b.n	34ea <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    350c:	4b0a      	ldr	r3, [pc, #40]	; (3538 <nrfx_clock_start+0xa4>)
    350e:	2200      	movs	r2, #0
    3510:	601a      	str	r2, [r3, #0]
    3512:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3518:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    351c:	601c      	str	r4, [r3, #0]
}
    351e:	e7f1      	b.n	3504 <nrfx_clock_start+0x70>
    3520:	20000a5c 	.word	0x20000a5c
    3524:	00007e5a 	.word	0x00007e5a
    3528:	0000779d 	.word	0x0000779d
    352c:	00007e0f 	.word	0x00007e0f
    3530:	00007898 	.word	0x00007898
    3534:	40000104 	.word	0x40000104
    3538:	40000100 	.word	0x40000100

0000353c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    353e:	4d2f      	ldr	r5, [pc, #188]	; (35fc <nrfx_clock_stop+0xc0>)
    3540:	792a      	ldrb	r2, [r5, #4]
{
    3542:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3544:	b95a      	cbnz	r2, 355e <nrfx_clock_stop+0x22>
    3546:	492e      	ldr	r1, [pc, #184]	; (3600 <nrfx_clock_stop+0xc4>)
    3548:	482e      	ldr	r0, [pc, #184]	; (3604 <nrfx_clock_stop+0xc8>)
    354a:	4a2f      	ldr	r2, [pc, #188]	; (3608 <nrfx_clock_stop+0xcc>)
    354c:	f240 134b 	movw	r3, #331	; 0x14b
    3550:	f003 fb48 	bl	6be4 <printk>
    3554:	482c      	ldr	r0, [pc, #176]	; (3608 <nrfx_clock_stop+0xcc>)
    3556:	f240 114b 	movw	r1, #331	; 0x14b
    355a:	f003 fa6f 	bl	6a3c <assert_post_action>
    switch (domain)
    355e:	b17c      	cbz	r4, 3580 <nrfx_clock_stop+0x44>
    3560:	2c01      	cmp	r4, #1
    3562:	d028      	beq.n	35b6 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3564:	4929      	ldr	r1, [pc, #164]	; (360c <nrfx_clock_stop+0xd0>)
    3566:	4827      	ldr	r0, [pc, #156]	; (3604 <nrfx_clock_stop+0xc8>)
    3568:	4a27      	ldr	r2, [pc, #156]	; (3608 <nrfx_clock_stop+0xcc>)
    356a:	f240 1367 	movw	r3, #359	; 0x167
    356e:	f003 fb39 	bl	6be4 <printk>
    3572:	4825      	ldr	r0, [pc, #148]	; (3608 <nrfx_clock_stop+0xcc>)
    3574:	f240 1167 	movw	r1, #359	; 0x167
    3578:	f003 fa60 	bl	6a3c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    357c:	b003      	add	sp, #12
    357e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3584:	2202      	movs	r2, #2
    3586:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    358a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    358e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3592:	2201      	movs	r2, #1
    3594:	681b      	ldr	r3, [r3, #0]
    3596:	4b1e      	ldr	r3, [pc, #120]	; (3610 <nrfx_clock_stop+0xd4>)
    3598:	f242 7410 	movw	r4, #10000	; 0x2710
    359c:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    359e:	2100      	movs	r1, #0
    35a0:	4608      	mov	r0, r1
    35a2:	f7ff feff 	bl	33a4 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    35a6:	2800      	cmp	r0, #0
    35a8:	d0e8      	beq.n	357c <nrfx_clock_stop+0x40>
    35aa:	2001      	movs	r0, #1
    35ac:	f003 fcc4 	bl	6f38 <nrfx_busy_wait>
    35b0:	3c01      	subs	r4, #1
    35b2:	d1f4      	bne.n	359e <nrfx_clock_stop+0x62>
    35b4:	e7e2      	b.n	357c <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    35b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35ba:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    35bc:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    35c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    35c8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ca:	4b12      	ldr	r3, [pc, #72]	; (3614 <nrfx_clock_stop+0xd8>)
    35cc:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    35ce:	f88d 4007 	strb.w	r4, [sp, #7]
    35d2:	f242 7410 	movw	r4, #10000	; 0x2710
    35d6:	f10d 0107 	add.w	r1, sp, #7
    35da:	2001      	movs	r0, #1
    35dc:	f7ff fee2 	bl	33a4 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    35e0:	b910      	cbnz	r0, 35e8 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    35e2:	2300      	movs	r3, #0
    35e4:	716b      	strb	r3, [r5, #5]
    35e6:	e7c9      	b.n	357c <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    35e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    35ec:	2801      	cmp	r0, #1
    35ee:	d1f8      	bne.n	35e2 <nrfx_clock_stop+0xa6>
    35f0:	f003 fca2 	bl	6f38 <nrfx_busy_wait>
    35f4:	3c01      	subs	r4, #1
    35f6:	d1ee      	bne.n	35d6 <nrfx_clock_stop+0x9a>
    35f8:	e7f3      	b.n	35e2 <nrfx_clock_stop+0xa6>
    35fa:	bf00      	nop
    35fc:	20000a5c 	.word	0x20000a5c
    3600:	00007e5a 	.word	0x00007e5a
    3604:	0000779d 	.word	0x0000779d
    3608:	00007e0f 	.word	0x00007e0f
    360c:	00007898 	.word	0x00007898
    3610:	4000000c 	.word	0x4000000c
    3614:	40000004 	.word	0x40000004

00003618 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3618:	4b16      	ldr	r3, [pc, #88]	; (3674 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    361a:	b507      	push	{r0, r1, r2, lr}
    361c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    361e:	b16a      	cbz	r2, 363c <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3620:	2200      	movs	r2, #0
    3622:	601a      	str	r2, [r3, #0]
    3624:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    362a:	2201      	movs	r2, #1
    362c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3630:	4b11      	ldr	r3, [pc, #68]	; (3678 <nrfx_power_clock_irq_handler+0x60>)
    3632:	7958      	ldrb	r0, [r3, #5]
    3634:	b910      	cbnz	r0, 363c <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3636:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    363c:	4b0f      	ldr	r3, [pc, #60]	; (367c <nrfx_power_clock_irq_handler+0x64>)
    363e:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3640:	b16a      	cbz	r2, 365e <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3642:	2000      	movs	r0, #0
    3644:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3646:	a901      	add	r1, sp, #4
    3648:	681b      	ldr	r3, [r3, #0]
    364a:	f7ff feab 	bl	33a4 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    364e:	9a01      	ldr	r2, [sp, #4]
    3650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3654:	b932      	cbnz	r2, 3664 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3656:	2201      	movs	r2, #1
    3658:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    365c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    365e:	b003      	add	sp, #12
    3660:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3664:	2202      	movs	r2, #2
    3666:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    366a:	4b03      	ldr	r3, [pc, #12]	; (3678 <nrfx_power_clock_irq_handler+0x60>)
    366c:	2001      	movs	r0, #1
    366e:	681b      	ldr	r3, [r3, #0]
    3670:	4798      	blx	r3
}
    3672:	e7f4      	b.n	365e <nrfx_power_clock_irq_handler+0x46>
    3674:	40000100 	.word	0x40000100
    3678:	20000a5c 	.word	0x20000a5c
    367c:	40000104 	.word	0x40000104

00003680 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3680:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3682:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3684:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3686:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    368a:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    368c:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3690:	d014      	beq.n	36bc <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3692:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3696:	fa05 f204 	lsl.w	r2, r5, r4
    369a:	ea23 0202 	bic.w	r2, r3, r2
    369e:	e850 6f00 	ldrex	r6, [r0]
    36a2:	429e      	cmp	r6, r3
    36a4:	d104      	bne.n	36b0 <nrfx_flag32_alloc+0x30>
    36a6:	e840 2c00 	strex	ip, r2, [r0]
    36aa:	f1bc 0f00 	cmp.w	ip, #0
    36ae:	d1f6      	bne.n	369e <nrfx_flag32_alloc+0x1e>
    36b0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    36b4:	d1e6      	bne.n	3684 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    36b8:	700c      	strb	r4, [r1, #0]
}
    36ba:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    36bc:	4801      	ldr	r0, [pc, #4]	; (36c4 <nrfx_flag32_alloc+0x44>)
    36be:	e7fc      	b.n	36ba <nrfx_flag32_alloc+0x3a>
    36c0:	0bad0000 	.word	0x0bad0000
    36c4:	0bad0002 	.word	0x0bad0002

000036c8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    36c8:	6803      	ldr	r3, [r0, #0]
    36ca:	40cb      	lsrs	r3, r1
    36cc:	07db      	lsls	r3, r3, #31
{
    36ce:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    36d0:	d415      	bmi.n	36fe <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    36d2:	2301      	movs	r3, #1
    36d4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    36d8:	6803      	ldr	r3, [r0, #0]
    36da:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    36de:	ea41 0203 	orr.w	r2, r1, r3
    36e2:	e850 4f00 	ldrex	r4, [r0]
    36e6:	429c      	cmp	r4, r3
    36e8:	d104      	bne.n	36f4 <nrfx_flag32_free+0x2c>
    36ea:	e840 2c00 	strex	ip, r2, [r0]
    36ee:	f1bc 0f00 	cmp.w	ip, #0
    36f2:	d1f6      	bne.n	36e2 <nrfx_flag32_free+0x1a>
    36f4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    36f8:	d1ee      	bne.n	36d8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    36fa:	4802      	ldr	r0, [pc, #8]	; (3704 <nrfx_flag32_free+0x3c>)
}
    36fc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    36fe:	4802      	ldr	r0, [pc, #8]	; (3708 <nrfx_flag32_free+0x40>)
    3700:	e7fc      	b.n	36fc <nrfx_flag32_free+0x34>
    3702:	bf00      	nop
    3704:	0bad0000 	.word	0x0bad0000
    3708:	0bad0004 	.word	0x0bad0004

0000370c <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    370c:	4b05      	ldr	r3, [pc, #20]	; (3724 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    370e:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3710:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3714:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    3718:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    371c:	4258      	negs	r0, r3
    371e:	4158      	adcs	r0, r3
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	20000058 	.word	0x20000058

00003728 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3728:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    372a:	f100 0308 	add.w	r3, r0, #8
    372e:	4c0c      	ldr	r4, [pc, #48]	; (3760 <call_handler+0x38>)
    3730:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    3734:	05da      	lsls	r2, r3, #23
{
    3736:	4605      	mov	r5, r0
    3738:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    373a:	d507      	bpl.n	374c <call_handler+0x24>
    373c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3740:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3744:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3748:	6852      	ldr	r2, [r2, #4]
    374a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    374c:	68a3      	ldr	r3, [r4, #8]
    374e:	b12b      	cbz	r3, 375c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3750:	68e2      	ldr	r2, [r4, #12]
    3752:	4631      	mov	r1, r6
    3754:	4628      	mov	r0, r5
    }
}
    3756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    375a:	4718      	bx	r3
}
    375c:	bd70      	pop	{r4, r5, r6, pc}
    375e:	bf00      	nop
    3760:	20000058 	.word	0x20000058

00003764 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3764:	4b19      	ldr	r3, [pc, #100]	; (37cc <release_handler+0x68>)
    3766:	3008      	adds	r0, #8
{
    3768:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    376a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    376e:	05d1      	lsls	r1, r2, #23
    3770:	d51d      	bpl.n	37ae <release_handler+0x4a>
    3772:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3776:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    377a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    377e:	f103 0410 	add.w	r4, r3, #16
    3782:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3784:	f834 2b02 	ldrh.w	r2, [r4], #2
    3788:	f412 7f80 	tst.w	r2, #256	; 0x100
    378c:	d003      	beq.n	3796 <release_handler+0x32>
    378e:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3792:	4291      	cmp	r1, r2
    3794:	d00b      	beq.n	37ae <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3796:	3001      	adds	r0, #1
    3798:	2830      	cmp	r0, #48	; 0x30
    379a:	d1f3      	bne.n	3784 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    379c:	2200      	movs	r2, #0
    379e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    37a2:	480b      	ldr	r0, [pc, #44]	; (37d0 <release_handler+0x6c>)
    37a4:	f7ff ff90 	bl	36c8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    37a8:	4b0a      	ldr	r3, [pc, #40]	; (37d4 <release_handler+0x70>)
    37aa:	4298      	cmp	r0, r3
    37ac:	d100      	bne.n	37b0 <release_handler+0x4c>
}
    37ae:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    37b0:	4909      	ldr	r1, [pc, #36]	; (37d8 <release_handler+0x74>)
    37b2:	480a      	ldr	r0, [pc, #40]	; (37dc <release_handler+0x78>)
    37b4:	4a0a      	ldr	r2, [pc, #40]	; (37e0 <release_handler+0x7c>)
    37b6:	f44f 7399 	mov.w	r3, #306	; 0x132
    37ba:	f003 fa13 	bl	6be4 <printk>
}
    37be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    37c2:	4807      	ldr	r0, [pc, #28]	; (37e0 <release_handler+0x7c>)
    37c4:	f44f 7199 	mov.w	r1, #306	; 0x132
    37c8:	f003 b938 	b.w	6a3c <assert_post_action>
    37cc:	20000058 	.word	0x20000058
    37d0:	200000cc 	.word	0x200000cc
    37d4:	0bad0000 	.word	0x0bad0000
    37d8:	00007edc 	.word	0x00007edc
    37dc:	0000779d 	.word	0x0000779d
    37e0:	00007e78 	.word	0x00007e78

000037e4 <pin_handler_trigger_uninit>:
{
    37e4:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    37e6:	4c0a      	ldr	r4, [pc, #40]	; (3810 <pin_handler_trigger_uninit+0x2c>)
    37e8:	f100 0508 	add.w	r5, r0, #8
    37ec:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    37f0:	069a      	lsls	r2, r3, #26
    37f2:	d506      	bpl.n	3802 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    37f4:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    37f6:	4a07      	ldr	r2, [pc, #28]	; (3814 <pin_handler_trigger_uninit+0x30>)
    37f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    37fc:	2100      	movs	r1, #0
    37fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    3802:	f7ff ffaf 	bl	3764 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3806:	2300      	movs	r3, #0
    3808:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    380c:	bd38      	pop	{r3, r4, r5, pc}
    380e:	bf00      	nop
    3810:	20000058 	.word	0x20000058
    3814:	40006000 	.word	0x40006000

00003818 <nrf_gpio_pin_port_decode>:
{
    3818:	b510      	push	{r4, lr}
    381a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    381c:	6800      	ldr	r0, [r0, #0]
    381e:	f003 fb8d 	bl	6f3c <nrf_gpio_pin_present_check>
    3822:	b958      	cbnz	r0, 383c <nrf_gpio_pin_port_decode+0x24>
    3824:	4912      	ldr	r1, [pc, #72]	; (3870 <nrf_gpio_pin_port_decode+0x58>)
    3826:	4813      	ldr	r0, [pc, #76]	; (3874 <nrf_gpio_pin_port_decode+0x5c>)
    3828:	4a13      	ldr	r2, [pc, #76]	; (3878 <nrf_gpio_pin_port_decode+0x60>)
    382a:	f240 2329 	movw	r3, #553	; 0x229
    382e:	f003 f9d9 	bl	6be4 <printk>
    3832:	4811      	ldr	r0, [pc, #68]	; (3878 <nrf_gpio_pin_port_decode+0x60>)
    3834:	f240 2129 	movw	r1, #553	; 0x229
    3838:	f003 f900 	bl	6a3c <assert_post_action>
    uint32_t pin_number = *p_pin;
    383c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    383e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3842:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3844:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3846:	d00d      	beq.n	3864 <nrf_gpio_pin_port_decode+0x4c>
    3848:	2b01      	cmp	r3, #1
    384a:	d00e      	beq.n	386a <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    384c:	490b      	ldr	r1, [pc, #44]	; (387c <nrf_gpio_pin_port_decode+0x64>)
    384e:	4809      	ldr	r0, [pc, #36]	; (3874 <nrf_gpio_pin_port_decode+0x5c>)
    3850:	4a09      	ldr	r2, [pc, #36]	; (3878 <nrf_gpio_pin_port_decode+0x60>)
    3852:	f240 232e 	movw	r3, #558	; 0x22e
    3856:	f003 f9c5 	bl	6be4 <printk>
    385a:	4807      	ldr	r0, [pc, #28]	; (3878 <nrf_gpio_pin_port_decode+0x60>)
    385c:	f240 212e 	movw	r1, #558	; 0x22e
    3860:	f003 f8ec 	bl	6a3c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3864:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3868:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    386a:	4805      	ldr	r0, [pc, #20]	; (3880 <nrf_gpio_pin_port_decode+0x68>)
    386c:	e7fc      	b.n	3868 <nrf_gpio_pin_port_decode+0x50>
    386e:	bf00      	nop
    3870:	00007d9c 	.word	0x00007d9c
    3874:	0000779d 	.word	0x0000779d
    3878:	00007d69 	.word	0x00007d69
    387c:	00007898 	.word	0x00007898
    3880:	50000300 	.word	0x50000300

00003884 <nrfx_gpiote_input_configure>:
{
    3884:	b5f0      	push	{r4, r5, r6, r7, lr}
    3886:	4604      	mov	r4, r0
    3888:	b085      	sub	sp, #20
    388a:	4617      	mov	r7, r2
    388c:	461d      	mov	r5, r3
    if (p_input_config)
    388e:	b1f1      	cbz	r1, 38ce <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    3890:	f7ff ff3c 	bl	370c <pin_is_task_output>
    3894:	b110      	cbz	r0, 389c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3896:	484a      	ldr	r0, [pc, #296]	; (39c0 <nrfx_gpiote_input_configure+0x13c>)
}
    3898:	b005      	add	sp, #20
    389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    389c:	460b      	mov	r3, r1
    389e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    38a2:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    38a6:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    38aa:	f10d 020f 	add.w	r2, sp, #15
    38ae:	f10d 010e 	add.w	r1, sp, #14
    38b2:	4620      	mov	r0, r4
    38b4:	f003 fb57 	bl	6f66 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    38b8:	4a42      	ldr	r2, [pc, #264]	; (39c4 <nrfx_gpiote_input_configure+0x140>)
    38ba:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    38be:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    38c2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    38c6:	f043 0301 	orr.w	r3, r3, #1
    38ca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    38ce:	b197      	cbz	r7, 38f6 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    38d0:	4b3c      	ldr	r3, [pc, #240]	; (39c4 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    38d2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    38d4:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    38d6:	f104 0008 	add.w	r0, r4, #8
    38da:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    38de:	078f      	lsls	r7, r1, #30
    38e0:	d50c      	bpl.n	38fc <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    38e2:	2a00      	cmp	r2, #0
    38e4:	d1d7      	bne.n	3896 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    38e6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    38ea:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    38ee:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    38f2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    38f6:	bbcd      	cbnz	r5, 396c <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    38f8:	4833      	ldr	r0, [pc, #204]	; (39c8 <nrfx_gpiote_input_configure+0x144>)
    38fa:	e7cd      	b.n	3898 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    38fc:	f021 0120 	bic.w	r1, r1, #32
    3900:	04c9      	lsls	r1, r1, #19
    3902:	0cc9      	lsrs	r1, r1, #19
    3904:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3908:	2a00      	cmp	r2, #0
    390a:	d0ec      	beq.n	38e6 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    390c:	2e03      	cmp	r6, #3
    390e:	d8c2      	bhi.n	3896 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3910:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3912:	b92e      	cbnz	r6, 3920 <nrfx_gpiote_input_configure+0x9c>
    3914:	4a2d      	ldr	r2, [pc, #180]	; (39cc <nrfx_gpiote_input_configure+0x148>)
    3916:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    391a:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    391e:	e7e2      	b.n	38e6 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3920:	00ba      	lsls	r2, r7, #2
    3922:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3926:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    392a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    392e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3932:	f02c 0c03 	bic.w	ip, ip, #3
    3936:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    393a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    393e:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    3942:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3946:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    394a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    394e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3952:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    3956:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    395a:	ea4c 0c0e 	orr.w	ip, ip, lr
    395e:	f041 0120 	orr.w	r1, r1, #32
    3962:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3966:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    396a:	e7bc      	b.n	38e6 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    396c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3970:	4620      	mov	r0, r4
    3972:	f7ff fef7 	bl	3764 <release_handler>
    if (!handler)
    3976:	2e00      	cmp	r6, #0
    3978:	d0be      	beq.n	38f8 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    397a:	4d12      	ldr	r5, [pc, #72]	; (39c4 <nrfx_gpiote_input_configure+0x140>)
    397c:	682b      	ldr	r3, [r5, #0]
    397e:	429e      	cmp	r6, r3
    3980:	d104      	bne.n	398c <nrfx_gpiote_input_configure+0x108>
    3982:	686b      	ldr	r3, [r5, #4]
    3984:	429f      	cmp	r7, r3
    3986:	d101      	bne.n	398c <nrfx_gpiote_input_configure+0x108>
    3988:	2200      	movs	r2, #0
    398a:	e00a      	b.n	39a2 <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    398c:	4810      	ldr	r0, [pc, #64]	; (39d0 <nrfx_gpiote_input_configure+0x14c>)
    398e:	f10d 010f 	add.w	r1, sp, #15
    3992:	f7ff fe75 	bl	3680 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3996:	4b0c      	ldr	r3, [pc, #48]	; (39c8 <nrfx_gpiote_input_configure+0x144>)
    3998:	4298      	cmp	r0, r3
    399a:	f47f af7d 	bne.w	3898 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    399e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    39a2:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    39a6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    39aa:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    39ac:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    39ae:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    39b2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    39b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    39ba:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    39be:	e79b      	b.n	38f8 <nrfx_gpiote_input_configure+0x74>
    39c0:	0bad0004 	.word	0x0bad0004
    39c4:	20000058 	.word	0x20000058
    39c8:	0bad0000 	.word	0x0bad0000
    39cc:	40006000 	.word	0x40006000
    39d0:	200000cc 	.word	0x200000cc

000039d4 <nrfx_gpiote_output_configure>:
{
    39d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d6:	4604      	mov	r4, r0
    39d8:	b085      	sub	sp, #20
    39da:	4615      	mov	r5, r2
    if (p_config)
    39dc:	b309      	cbz	r1, 3a22 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    39de:	f100 0708 	add.w	r7, r0, #8
    39e2:	4e31      	ldr	r6, [pc, #196]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    39e4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    39e8:	0798      	lsls	r0, r3, #30
    39ea:	d401      	bmi.n	39f0 <nrfx_gpiote_output_configure+0x1c>
    39ec:	069a      	lsls	r2, r3, #26
    39ee:	d458      	bmi.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    39f0:	f013 0f1c 	tst.w	r3, #28
    39f4:	d002      	beq.n	39fc <nrfx_gpiote_output_configure+0x28>
    39f6:	784b      	ldrb	r3, [r1, #1]
    39f8:	2b01      	cmp	r3, #1
    39fa:	d052      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    39fc:	2301      	movs	r3, #1
    39fe:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3a02:	2300      	movs	r3, #0
    3a04:	e9cd 1300 	strd	r1, r3, [sp]
    3a08:	1c4a      	adds	r2, r1, #1
    3a0a:	1c8b      	adds	r3, r1, #2
    3a0c:	4620      	mov	r0, r4
    3a0e:	f10d 010f 	add.w	r1, sp, #15
    3a12:	f003 faa8 	bl	6f66 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3a16:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3a1a:	f043 0303 	orr.w	r3, r3, #3
    3a1e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    3a22:	b915      	cbnz	r5, 3a2a <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    3a24:	4821      	ldr	r0, [pc, #132]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
}
    3a26:	b005      	add	sp, #20
    3a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a2a:	4e1f      	ldr	r6, [pc, #124]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a2c:	f104 0708 	add.w	r7, r4, #8
    3a30:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3a34:	0783      	lsls	r3, r0, #30
    3a36:	d534      	bpl.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
        uint32_t ch = p_task_config->task_ch;
    3a38:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3a3c:	4661      	mov	r1, ip
    3a3e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3a40:	f020 0020 	bic.w	r0, r0, #32
    3a44:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3a48:	04c0      	lsls	r0, r0, #19
    3a4a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3a4e:	0cc0      	lsrs	r0, r0, #19
    3a50:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3a54:	2300      	movs	r3, #0
    3a56:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3a5a:	786a      	ldrb	r2, [r5, #1]
    3a5c:	2a00      	cmp	r2, #0
    3a5e:	d0e1      	beq.n	3a24 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3a60:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3a64:	78ad      	ldrb	r5, [r5, #2]
    3a66:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3a6a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3a6e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a72:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3a76:	0223      	lsls	r3, r4, #8
    3a78:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a7c:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a7e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3a82:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3a86:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a88:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3a8a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3a8e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3a92:	432b      	orrs	r3, r5
    3a94:	f040 0020 	orr.w	r0, r0, #32
    3a98:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3a9c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3aa0:	e7c0      	b.n	3a24 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    3aa2:	4803      	ldr	r0, [pc, #12]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3aa4:	e7bf      	b.n	3a26 <nrfx_gpiote_output_configure+0x52>
    3aa6:	bf00      	nop
    3aa8:	20000058 	.word	0x20000058
    3aac:	0bad0000 	.word	0x0bad0000
    3ab0:	0bad0004 	.word	0x0bad0004

00003ab4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3ab4:	4b01      	ldr	r3, [pc, #4]	; (3abc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3ab6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3aba:	4770      	bx	lr
    3abc:	20000058 	.word	0x20000058

00003ac0 <nrfx_gpiote_channel_get>:
{
    3ac0:	b538      	push	{r3, r4, r5, lr}
    3ac2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    3ac4:	460d      	mov	r5, r1
    3ac6:	b959      	cbnz	r1, 3ae0 <nrfx_gpiote_channel_get+0x20>
    3ac8:	490b      	ldr	r1, [pc, #44]	; (3af8 <nrfx_gpiote_channel_get+0x38>)
    3aca:	480c      	ldr	r0, [pc, #48]	; (3afc <nrfx_gpiote_channel_get+0x3c>)
    3acc:	4a0c      	ldr	r2, [pc, #48]	; (3b00 <nrfx_gpiote_channel_get+0x40>)
    3ace:	f240 2335 	movw	r3, #565	; 0x235
    3ad2:	f003 f887 	bl	6be4 <printk>
    3ad6:	480a      	ldr	r0, [pc, #40]	; (3b00 <nrfx_gpiote_channel_get+0x40>)
    3ad8:	f240 2135 	movw	r1, #565	; 0x235
    3adc:	f002 ffae 	bl	6a3c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ae0:	3408      	adds	r4, #8
    3ae2:	4b08      	ldr	r3, [pc, #32]	; (3b04 <nrfx_gpiote_channel_get+0x44>)
    3ae4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    3ae8:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3aea:	bf43      	ittte	mi
    3aec:	0b5b      	lsrmi	r3, r3, #13
    3aee:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    3af0:	4805      	ldrmi	r0, [pc, #20]	; (3b08 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    3af2:	4806      	ldrpl	r0, [pc, #24]	; (3b0c <nrfx_gpiote_channel_get+0x4c>)
}
    3af4:	bd38      	pop	{r3, r4, r5, pc}
    3af6:	bf00      	nop
    3af8:	00007ef0 	.word	0x00007ef0
    3afc:	0000779d 	.word	0x0000779d
    3b00:	00007e78 	.word	0x00007e78
    3b04:	20000058 	.word	0x20000058
    3b08:	0bad0000 	.word	0x0bad0000
    3b0c:	0bad0004 	.word	0x0bad0004

00003b10 <nrfx_gpiote_init>:
{
    3b10:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3b12:	4c0e      	ldr	r4, [pc, #56]	; (3b4c <nrfx_gpiote_init+0x3c>)
    3b14:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3b18:	b9b5      	cbnz	r5, 3b48 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3b1a:	2260      	movs	r2, #96	; 0x60
    3b1c:	4629      	mov	r1, r5
    3b1e:	f104 0010 	add.w	r0, r4, #16
    3b22:	f003 f8c2 	bl	6caa <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3b26:	2006      	movs	r0, #6
    3b28:	f7fd ff1c 	bl	1964 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3b2c:	4b08      	ldr	r3, [pc, #32]	; (3b50 <nrfx_gpiote_init+0x40>)
    return err_code;
    3b2e:	4809      	ldr	r0, [pc, #36]	; (3b54 <nrfx_gpiote_init+0x44>)
    3b30:	601d      	str	r5, [r3, #0]
    3b32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3b34:	4b08      	ldr	r3, [pc, #32]	; (3b58 <nrfx_gpiote_init+0x48>)
    3b36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3b3e:	2301      	movs	r3, #1
    3b40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3b44:	6763      	str	r3, [r4, #116]	; 0x74
}
    3b46:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3b48:	4804      	ldr	r0, [pc, #16]	; (3b5c <nrfx_gpiote_init+0x4c>)
    3b4a:	e7fc      	b.n	3b46 <nrfx_gpiote_init+0x36>
    3b4c:	20000058 	.word	0x20000058
    3b50:	4000617c 	.word	0x4000617c
    3b54:	0bad0000 	.word	0x0bad0000
    3b58:	40006000 	.word	0x40006000
    3b5c:	0bad0005 	.word	0x0bad0005

00003b60 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3b60:	4b03      	ldr	r3, [pc, #12]	; (3b70 <nrfx_gpiote_is_init+0x10>)
    3b62:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3b66:	3800      	subs	r0, #0
    3b68:	bf18      	it	ne
    3b6a:	2001      	movne	r0, #1
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop
    3b70:	20000058 	.word	0x20000058

00003b74 <nrfx_gpiote_channel_free>:
{
    3b74:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3b76:	4801      	ldr	r0, [pc, #4]	; (3b7c <nrfx_gpiote_channel_free+0x8>)
    3b78:	f7ff bda6 	b.w	36c8 <nrfx_flag32_free>
    3b7c:	200000c8 	.word	0x200000c8

00003b80 <nrfx_gpiote_channel_alloc>:
{
    3b80:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3b82:	4801      	ldr	r0, [pc, #4]	; (3b88 <nrfx_gpiote_channel_alloc+0x8>)
    3b84:	f7ff bd7c 	b.w	3680 <nrfx_flag32_alloc>
    3b88:	200000c8 	.word	0x200000c8

00003b8c <nrfx_gpiote_trigger_enable>:
{
    3b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3b8e:	4d31      	ldr	r5, [pc, #196]	; (3c54 <nrfx_gpiote_trigger_enable+0xc8>)
    3b90:	f100 0708 	add.w	r7, r0, #8
{
    3b94:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3b96:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    3b9a:	f013 0f1c 	tst.w	r3, #28
{
    3b9e:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3ba0:	d10b      	bne.n	3bba <nrfx_gpiote_trigger_enable+0x2e>
    3ba2:	492d      	ldr	r1, [pc, #180]	; (3c58 <nrfx_gpiote_trigger_enable+0xcc>)
    3ba4:	482d      	ldr	r0, [pc, #180]	; (3c5c <nrfx_gpiote_trigger_enable+0xd0>)
    3ba6:	4a2e      	ldr	r2, [pc, #184]	; (3c60 <nrfx_gpiote_trigger_enable+0xd4>)
    3ba8:	f240 33df 	movw	r3, #991	; 0x3df
    3bac:	f003 f81a 	bl	6be4 <printk>
    3bb0:	482b      	ldr	r0, [pc, #172]	; (3c60 <nrfx_gpiote_trigger_enable+0xd4>)
    3bb2:	f240 31df 	movw	r1, #991	; 0x3df
    3bb6:	f002 ff41 	bl	6a3c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3bba:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3bbe:	0683      	lsls	r3, r0, #26
    3bc0:	d51f      	bpl.n	3c02 <nrfx_gpiote_trigger_enable+0x76>
    3bc2:	f010 0302 	ands.w	r3, r0, #2
    3bc6:	d11c      	bne.n	3c02 <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3bc8:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    3bca:	4608      	mov	r0, r1
    3bcc:	f003 f9c7 	bl	6f5e <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    3bd0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3bd4:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd8:	6003      	str	r3, [r0, #0]
    3bda:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3bdc:	008b      	lsls	r3, r1, #2
    3bde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3be2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3be6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3bea:	f042 0201 	orr.w	r2, r2, #1
    3bee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    3bf2:	b126      	cbz	r6, 3bfe <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    3bf4:	4a1b      	ldr	r2, [pc, #108]	; (3c64 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3bf6:	2301      	movs	r3, #1
    3bf8:	408b      	lsls	r3, r1
    3bfa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3bfe:	b003      	add	sp, #12
    3c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    3c02:	b95e      	cbnz	r6, 3c1c <nrfx_gpiote_trigger_enable+0x90>
    3c04:	4918      	ldr	r1, [pc, #96]	; (3c68 <nrfx_gpiote_trigger_enable+0xdc>)
    3c06:	4815      	ldr	r0, [pc, #84]	; (3c5c <nrfx_gpiote_trigger_enable+0xd0>)
    3c08:	4a15      	ldr	r2, [pc, #84]	; (3c60 <nrfx_gpiote_trigger_enable+0xd4>)
    3c0a:	f240 33ee 	movw	r3, #1006	; 0x3ee
    3c0e:	f002 ffe9 	bl	6be4 <printk>
    3c12:	4813      	ldr	r0, [pc, #76]	; (3c60 <nrfx_gpiote_trigger_enable+0xd4>)
    3c14:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3c18:	f002 ff10 	bl	6a3c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c1c:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    3c20:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3c24:	2b04      	cmp	r3, #4
    3c26:	d010      	beq.n	3c4a <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3c28:	2b05      	cmp	r3, #5
    3c2a:	d010      	beq.n	3c4e <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3c2c:	a801      	add	r0, sp, #4
    3c2e:	9401      	str	r4, [sp, #4]
    3c30:	f7ff fdf2 	bl	3818 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3c34:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3c36:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3c3a:	40d9      	lsrs	r1, r3
    3c3c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3c40:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3c42:	4620      	mov	r0, r4
    3c44:	f003 f9da 	bl	6ffc <nrf_gpio_cfg_sense_set>
}
    3c48:	e7d9      	b.n	3bfe <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3c4a:	2103      	movs	r1, #3
    3c4c:	e7f9      	b.n	3c42 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3c4e:	2102      	movs	r1, #2
    3c50:	e7f7      	b.n	3c42 <nrfx_gpiote_trigger_enable+0xb6>
    3c52:	bf00      	nop
    3c54:	20000058 	.word	0x20000058
    3c58:	00007efa 	.word	0x00007efa
    3c5c:	0000779d 	.word	0x0000779d
    3c60:	00007e78 	.word	0x00007e78
    3c64:	40006000 	.word	0x40006000
    3c68:	00007f0f 	.word	0x00007f0f

00003c6c <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3c6c:	4b0e      	ldr	r3, [pc, #56]	; (3ca8 <nrfx_gpiote_trigger_disable+0x3c>)
    3c6e:	f100 0208 	add.w	r2, r0, #8
    3c72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3c76:	0699      	lsls	r1, r3, #26
    3c78:	d513      	bpl.n	3ca2 <nrfx_gpiote_trigger_disable+0x36>
    3c7a:	079a      	lsls	r2, r3, #30
    3c7c:	d411      	bmi.n	3ca2 <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c7e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3c80:	2201      	movs	r2, #1
    3c82:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3c84:	009b      	lsls	r3, r3, #2
    3c86:	4909      	ldr	r1, [pc, #36]	; (3cac <nrfx_gpiote_trigger_disable+0x40>)
    3c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3c8c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3c90:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3c94:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3c98:	f022 0203 	bic.w	r2, r2, #3
    3c9c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3ca0:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3ca2:	2100      	movs	r1, #0
    3ca4:	f003 b9aa 	b.w	6ffc <nrf_gpio_cfg_sense_set>
    3ca8:	20000058 	.word	0x20000058
    3cac:	40006000 	.word	0x40006000

00003cb0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3cb0:	4b0e      	ldr	r3, [pc, #56]	; (3cec <nrfx_gpiote_pin_uninit+0x3c>)
    3cb2:	f100 0208 	add.w	r2, r0, #8
{
    3cb6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3cb8:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3cbc:	07db      	lsls	r3, r3, #31
{
    3cbe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3cc0:	d511      	bpl.n	3ce6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3cc2:	f7ff ffd3 	bl	3c6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3cc6:	4620      	mov	r0, r4
    3cc8:	f7ff fd8c 	bl	37e4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ccc:	a801      	add	r0, sp, #4
    3cce:	9401      	str	r4, [sp, #4]
    3cd0:	f7ff fda2 	bl	3818 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3cd4:	9b01      	ldr	r3, [sp, #4]
    3cd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3cda:	2202      	movs	r2, #2
    3cdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3ce0:	4803      	ldr	r0, [pc, #12]	; (3cf0 <nrfx_gpiote_pin_uninit+0x40>)
}
    3ce2:	b002      	add	sp, #8
    3ce4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3ce6:	4803      	ldr	r0, [pc, #12]	; (3cf4 <nrfx_gpiote_pin_uninit+0x44>)
    3ce8:	e7fb      	b.n	3ce2 <nrfx_gpiote_pin_uninit+0x32>
    3cea:	bf00      	nop
    3cec:	20000058 	.word	0x20000058
    3cf0:	0bad0000 	.word	0x0bad0000
    3cf4:	0bad0004 	.word	0x0bad0004

00003cf8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cfc:	4b65      	ldr	r3, [pc, #404]	; (3e94 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    3cfe:	4866      	ldr	r0, [pc, #408]	; (3e98 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d00:	4966      	ldr	r1, [pc, #408]	; (3e9c <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    3d02:	2500      	movs	r5, #0
{
    3d04:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3d06:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d08:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d0a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3d0c:	b136      	cbz	r6, 3d1c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3d0e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3d12:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d14:	bf1e      	ittt	ne
    3d16:	601c      	strne	r4, [r3, #0]
    3d18:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3d1a:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    3d1c:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d1e:	428b      	cmp	r3, r1
        mask <<= 1;
    3d20:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3d24:	d1f1      	bne.n	3d0a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d26:	4f5e      	ldr	r7, [pc, #376]	; (3ea0 <nrfx_gpiote_irq_handler+0x1a8>)
    3d28:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3d2a:	b37b      	cbz	r3, 3d8c <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    3d2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3d30:	4e5c      	ldr	r6, [pc, #368]	; (3ea4 <nrfx_gpiote_irq_handler+0x1ac>)
    3d32:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3d36:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    3d38:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3d3c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3d40:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    3d42:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3d46:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3d48:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3d4c:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3d50:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    3d54:	f8d9 3000 	ldr.w	r3, [r9]
    3d58:	b9f3      	cbnz	r3, 3d98 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3d5a:	f108 0820 	add.w	r8, r8, #32
    3d5e:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    3d62:	f109 0904 	add.w	r9, r9, #4
    3d66:	d1f5      	bne.n	3d54 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d68:	603b      	str	r3, [r7, #0]
    3d6a:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    3d6c:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    3d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3d72:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3d76:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    3d78:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    3d82:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    3d84:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    3d88:	4313      	orrs	r3, r2
    3d8a:	d1dd      	bne.n	3d48 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    3d8c:	2401      	movs	r4, #1
    while (mask)
    3d8e:	2d00      	cmp	r5, #0
    3d90:	d168      	bne.n	3e64 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3d92:	b009      	add	sp, #36	; 0x24
    3d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    3d98:	fa93 f3a3 	rbit	r3, r3
    3d9c:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    3da0:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3da4:	f106 0208 	add.w	r2, r6, #8
    3da8:	4b3f      	ldr	r3, [pc, #252]	; (3ea8 <nrfx_gpiote_irq_handler+0x1b0>)
    3daa:	9605      	str	r6, [sp, #20]
    3dac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    3db0:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3db4:	08f4      	lsrs	r4, r6, #3
    3db6:	9302      	str	r3, [sp, #8]
    3db8:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    3dba:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    3dbc:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3dc0:	fa0b fc00 	lsl.w	ip, fp, r0
    3dc4:	5d18      	ldrb	r0, [r3, r4]
    3dc6:	ea20 000c 	bic.w	r0, r0, ip
    3dca:	5518      	strb	r0, [r3, r4]
    3dcc:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3dce:	a805      	add	r0, sp, #20
    3dd0:	9103      	str	r1, [sp, #12]
    3dd2:	f7ff fd21 	bl	3818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3dd6:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    3dd8:	9903      	ldr	r1, [sp, #12]
    3dda:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3dde:	074b      	lsls	r3, r1, #29
    3de0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3de4:	f3c4 4401 	ubfx	r4, r4, #16, #2
    3de8:	d523      	bpl.n	3e32 <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    3dea:	4651      	mov	r1, sl
    3dec:	4630      	mov	r0, r6
    3dee:	f7ff fc9b 	bl	3728 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3df2:	a805      	add	r0, sp, #20
    3df4:	9605      	str	r6, [sp, #20]
    3df6:	f7ff fd0f 	bl	3818 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3dfa:	9a05      	ldr	r2, [sp, #20]
    3dfc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    3e00:	b2e4      	uxtb	r4, r4
    3e02:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3e06:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3e0a:	4294      	cmp	r4, r2
    3e0c:	d107      	bne.n	3e1e <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3e0e:	2100      	movs	r1, #0
    3e10:	4630      	mov	r0, r6
    3e12:	f003 f8f3 	bl	6ffc <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3e16:	4621      	mov	r1, r4
    3e18:	4630      	mov	r0, r6
    3e1a:	f003 f8ef 	bl	6ffc <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e1e:	a805      	add	r0, sp, #20
    3e20:	9605      	str	r6, [sp, #20]
    3e22:	f7ff fcf9 	bl	3818 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3e26:	9b05      	ldr	r3, [sp, #20]
    3e28:	fa0b f303 	lsl.w	r3, fp, r3
    3e2c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    3e30:	e790      	b.n	3d54 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3e32:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3e34:	bf0c      	ite	eq
    3e36:	2103      	moveq	r1, #3
    3e38:	2102      	movne	r1, #2
    3e3a:	4630      	mov	r0, r6
    3e3c:	f003 f8de 	bl	6ffc <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3e40:	9b02      	ldr	r3, [sp, #8]
    3e42:	2b03      	cmp	r3, #3
    3e44:	d004      	beq.n	3e50 <nrfx_gpiote_irq_handler+0x158>
    3e46:	2c02      	cmp	r4, #2
    3e48:	d107      	bne.n	3e5a <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3e4a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3e4e:	d1e6      	bne.n	3e1e <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    3e50:	4651      	mov	r1, sl
    3e52:	4630      	mov	r0, r6
    3e54:	f7ff fc68 	bl	3728 <call_handler>
    3e58:	e7e1      	b.n	3e1e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3e5a:	2c03      	cmp	r4, #3
    3e5c:	d1df      	bne.n	3e1e <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3e5e:	f1ba 0f02 	cmp.w	sl, #2
    3e62:	e7f4      	b.n	3e4e <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    3e64:	fa95 f3a5 	rbit	r3, r5
    3e68:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3e6c:	fa04 f203 	lsl.w	r2, r4, r3
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3e7a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3e7e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3e82:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3e86:	f3c0 2005 	ubfx	r0, r0, #8, #6
    3e8a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    3e8e:	f7ff fc4b 	bl	3728 <call_handler>
    3e92:	e77c      	b.n	3d8e <nrfx_gpiote_irq_handler+0x96>
    3e94:	40006100 	.word	0x40006100
    3e98:	40006000 	.word	0x40006000
    3e9c:	40006120 	.word	0x40006120
    3ea0:	4000617c 	.word	0x4000617c
    3ea4:	50000300 	.word	0x50000300
    3ea8:	20000058 	.word	0x20000058

00003eac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3eac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3eae:	4801      	ldr	r0, [pc, #4]	; (3eb4 <nrfx_ppi_channel_alloc+0x8>)
    3eb0:	f7ff bbe6 	b.w	3680 <nrfx_flag32_alloc>
    3eb4:	200000d4 	.word	0x200000d4

00003eb8 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3eb8:	4b03      	ldr	r3, [pc, #12]	; (3ec8 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    3eba:	6818      	ldr	r0, [r3, #0]
}
    3ebc:	f1a0 0308 	sub.w	r3, r0, #8
    3ec0:	4258      	negs	r0, r3
    3ec2:	4158      	adcs	r0, r3
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop
    3ec8:	10000130 	.word	0x10000130

00003ecc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3ecc:	4b06      	ldr	r3, [pc, #24]	; (3ee8 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    3ece:	681b      	ldr	r3, [r3, #0]
    3ed0:	2b08      	cmp	r3, #8
    3ed2:	d106      	bne.n	3ee2 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3ed4:	4b05      	ldr	r3, [pc, #20]	; (3eec <nrf52_errata_103+0x20>)
    3ed6:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    3ed8:	2b05      	cmp	r3, #5
    3eda:	d802      	bhi.n	3ee2 <nrf52_errata_103+0x16>
    3edc:	4a04      	ldr	r2, [pc, #16]	; (3ef0 <nrf52_errata_103+0x24>)
    3ede:	5cd0      	ldrb	r0, [r2, r3]
    3ee0:	4770      	bx	lr
        return false;
    3ee2:	2000      	movs	r0, #0
}
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop
    3ee8:	10000130 	.word	0x10000130
    3eec:	10000134 	.word	0x10000134
    3ef0:	00007f20 	.word	0x00007f20

00003ef4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3ef4:	4a02      	ldr	r2, [pc, #8]	; (3f00 <nvmc_wait+0xc>)
    3ef6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3efa:	2b00      	cmp	r3, #0
    3efc:	d0fb      	beq.n	3ef6 <nvmc_wait+0x2>
}
    3efe:	4770      	bx	lr
    3f00:	4001e000 	.word	0x4001e000

00003f04 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3f04:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3f06:	f7ff ffd7 	bl	3eb8 <nrf52_errata_136>
    3f0a:	b140      	cbz	r0, 3f1e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f10:	2200      	movs	r2, #0
    3f12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3f16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3f1a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3f1e:	f7ff ffcb 	bl	3eb8 <nrf52_errata_136>
    3f22:	2800      	cmp	r0, #0
    3f24:	d046      	beq.n	3fb4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f2a:	4b5b      	ldr	r3, [pc, #364]	; (4098 <SystemInit+0x194>)
    3f2c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3f30:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3f34:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3f38:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3f3c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3f40:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3f44:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3f48:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3f4c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3f50:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3f54:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3f58:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3f5c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3f60:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3f64:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3f68:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3f6c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3f70:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3f74:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3f78:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3f7c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3f80:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3f84:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3f88:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3f8c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3f90:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3f94:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3f98:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3f9c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3fa0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3fa4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3fa8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3fac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3fb0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3fb4:	f7ff ff8a 	bl	3ecc <nrf52_errata_103>
    3fb8:	b110      	cbz	r0, 3fc0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    3fba:	4b38      	ldr	r3, [pc, #224]	; (409c <SystemInit+0x198>)
    3fbc:	4a38      	ldr	r2, [pc, #224]	; (40a0 <SystemInit+0x19c>)
    3fbe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3fc0:	f7ff ff84 	bl	3ecc <nrf52_errata_103>
    3fc4:	b118      	cbz	r0, 3fce <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3fc6:	4b37      	ldr	r3, [pc, #220]	; (40a4 <SystemInit+0x1a0>)
    3fc8:	22fb      	movs	r2, #251	; 0xfb
    3fca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    3fce:	f7ff ff7d 	bl	3ecc <nrf52_errata_103>
    3fd2:	b148      	cbz	r0, 3fe8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3fd4:	4934      	ldr	r1, [pc, #208]	; (40a8 <SystemInit+0x1a4>)
    3fd6:	4b35      	ldr	r3, [pc, #212]	; (40ac <SystemInit+0x1a8>)
    3fd8:	680a      	ldr	r2, [r1, #0]
    3fda:	681b      	ldr	r3, [r3, #0]
    3fdc:	f022 020f 	bic.w	r2, r2, #15
    3fe0:	f003 030f 	and.w	r3, r3, #15
    3fe4:	4313      	orrs	r3, r2
    3fe6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3fe8:	f7ff ff70 	bl	3ecc <nrf52_errata_103>
    3fec:	b118      	cbz	r0, 3ff6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3fee:	4b30      	ldr	r3, [pc, #192]	; (40b0 <SystemInit+0x1ac>)
    3ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
    3ff4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3ff6:	f7ff ff5f 	bl	3eb8 <nrf52_errata_136>
    3ffa:	b148      	cbz	r0, 4010 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4000:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4004:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4006:	bf44      	itt	mi
    4008:	f06f 0201 	mvnmi.w	r2, #1
    400c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4010:	4b28      	ldr	r3, [pc, #160]	; (40b4 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	2b08      	cmp	r3, #8
    4016:	d10e      	bne.n	4036 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4018:	4b27      	ldr	r3, [pc, #156]	; (40b8 <SystemInit+0x1b4>)
    401a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    401c:	2b05      	cmp	r3, #5
    401e:	d802      	bhi.n	4026 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4020:	4a26      	ldr	r2, [pc, #152]	; (40bc <SystemInit+0x1b8>)
    4022:	5cd3      	ldrb	r3, [r2, r3]
    4024:	b13b      	cbz	r3, 4036 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4026:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    402a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    402e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4032:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4036:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    403a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    403e:	2a00      	cmp	r2, #0
    4040:	db03      	blt.n	404a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4042:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4046:	2b00      	cmp	r3, #0
    4048:	da22      	bge.n	4090 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    404a:	491d      	ldr	r1, [pc, #116]	; (40c0 <SystemInit+0x1bc>)
    404c:	2301      	movs	r3, #1
    404e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4052:	f7ff ff4f 	bl	3ef4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4056:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    405a:	2412      	movs	r4, #18
    405c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4060:	f7ff ff48 	bl	3ef4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4064:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4068:	f7ff ff44 	bl	3ef4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    406c:	2300      	movs	r3, #0
    406e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4072:	f7ff ff3f 	bl	3ef4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4076:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    407a:	4912      	ldr	r1, [pc, #72]	; (40c4 <SystemInit+0x1c0>)
    407c:	4b12      	ldr	r3, [pc, #72]	; (40c8 <SystemInit+0x1c4>)
    407e:	68ca      	ldr	r2, [r1, #12]
    4080:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4084:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4086:	60cb      	str	r3, [r1, #12]
    4088:	f3bf 8f4f 	dsb	sy
    __NOP();
    408c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    408e:	e7fd      	b.n	408c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4090:	4b0e      	ldr	r3, [pc, #56]	; (40cc <SystemInit+0x1c8>)
    4092:	4a0f      	ldr	r2, [pc, #60]	; (40d0 <SystemInit+0x1cc>)
    4094:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4096:	bd10      	pop	{r4, pc}
    4098:	4000c000 	.word	0x4000c000
    409c:	4000568c 	.word	0x4000568c
    40a0:	00038148 	.word	0x00038148
    40a4:	4000f000 	.word	0x4000f000
    40a8:	40000ee4 	.word	0x40000ee4
    40ac:	10000258 	.word	0x10000258
    40b0:	40029640 	.word	0x40029640
    40b4:	10000130 	.word	0x10000130
    40b8:	10000134 	.word	0x10000134
    40bc:	00007f1a 	.word	0x00007f1a
    40c0:	4001e000 	.word	0x4001e000
    40c4:	e000ed00 	.word	0xe000ed00
    40c8:	05fa0004 	.word	0x05fa0004
    40cc:	200000d8 	.word	0x200000d8
    40d0:	03d09000 	.word	0x03d09000

000040d4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    40d4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40d6:	4c14      	ldr	r4, [pc, #80]	; (4128 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    40d8:	4a14      	ldr	r2, [pc, #80]	; (412c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    40da:	4915      	ldr	r1, [pc, #84]	; (4130 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40dc:	2303      	movs	r3, #3
    40de:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    40e0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    40e2:	4b14      	ldr	r3, [pc, #80]	; (4134 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    40e4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    40e6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    40e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    40ec:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    40ee:	2300      	movs	r3, #0
    40f0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    40f2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    40f4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    40f6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    40f8:	4a0f      	ldr	r2, [pc, #60]	; (4138 <_DoInit+0x64>)
    40fa:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    40fc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    40fe:	2210      	movs	r2, #16
    4100:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4102:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4104:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4106:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4108:	f002 fd9e 	bl	6c48 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    410c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4110:	490a      	ldr	r1, [pc, #40]	; (413c <_DoInit+0x68>)
    4112:	4620      	mov	r0, r4
    4114:	f002 fd98 	bl	6c48 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4118:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    411c:	2320      	movs	r3, #32
    411e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4120:	f3bf 8f5f 	dmb	sy
}
    4124:	bd10      	pop	{r4, pc}
    4126:	bf00      	nop
    4128:	20000a64 	.word	0x20000a64
    412c:	00007f26 	.word	0x00007f26
    4130:	00007f2f 	.word	0x00007f2f
    4134:	20000b7d 	.word	0x20000b7d
    4138:	20000b6d 	.word	0x20000b6d
    413c:	00007f33 	.word	0x00007f33

00004140 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4140:	4b0e      	ldr	r3, [pc, #56]	; (417c <z_sys_init_run_level+0x3c>)
{
    4142:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4144:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4148:	3001      	adds	r0, #1
    414a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    414e:	42a6      	cmp	r6, r4
    4150:	d800      	bhi.n	4154 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4152:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4154:	e9d4 3500 	ldrd	r3, r5, [r4]
    4158:	4628      	mov	r0, r5
    415a:	4798      	blx	r3
		if (dev != NULL) {
    415c:	b165      	cbz	r5, 4178 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    415e:	68eb      	ldr	r3, [r5, #12]
    4160:	b130      	cbz	r0, 4170 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4162:	2800      	cmp	r0, #0
    4164:	bfb8      	it	lt
    4166:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4168:	28ff      	cmp	r0, #255	; 0xff
    416a:	bfa8      	it	ge
    416c:	20ff      	movge	r0, #255	; 0xff
    416e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4170:	785a      	ldrb	r2, [r3, #1]
    4172:	f042 0201 	orr.w	r2, r2, #1
    4176:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4178:	3408      	adds	r4, #8
    417a:	e7e8      	b.n	414e <z_sys_init_run_level+0xe>
    417c:	000074bc 	.word	0x000074bc

00004180 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4180:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4182:	4605      	mov	r5, r0
    4184:	b910      	cbnz	r0, 418c <z_impl_device_get_binding+0xc>
		return NULL;
    4186:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4188:	4620      	mov	r0, r4
    418a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    418c:	7803      	ldrb	r3, [r0, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d0f9      	beq.n	4186 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4192:	4a0f      	ldr	r2, [pc, #60]	; (41d0 <z_impl_device_get_binding+0x50>)
    4194:	4c0f      	ldr	r4, [pc, #60]	; (41d4 <z_impl_device_get_binding+0x54>)
    4196:	4616      	mov	r6, r2
    4198:	4294      	cmp	r4, r2
    419a:	d108      	bne.n	41ae <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    419c:	4c0d      	ldr	r4, [pc, #52]	; (41d4 <z_impl_device_get_binding+0x54>)
    419e:	42b4      	cmp	r4, r6
    41a0:	d0f1      	beq.n	4186 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    41a2:	4620      	mov	r0, r4
    41a4:	f002 ff41 	bl	702a <z_device_ready>
    41a8:	b950      	cbnz	r0, 41c0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    41aa:	3418      	adds	r4, #24
    41ac:	e7f7      	b.n	419e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    41ae:	4620      	mov	r0, r4
    41b0:	f002 ff3b 	bl	702a <z_device_ready>
    41b4:	b110      	cbz	r0, 41bc <z_impl_device_get_binding+0x3c>
    41b6:	6823      	ldr	r3, [r4, #0]
    41b8:	42ab      	cmp	r3, r5
    41ba:	d0e5      	beq.n	4188 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    41bc:	3418      	adds	r4, #24
    41be:	e7eb      	b.n	4198 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    41c0:	6821      	ldr	r1, [r4, #0]
    41c2:	4628      	mov	r0, r5
    41c4:	f002 fd5a 	bl	6c7c <strcmp>
    41c8:	2800      	cmp	r0, #0
    41ca:	d1ee      	bne.n	41aa <z_impl_device_get_binding+0x2a>
    41cc:	e7dc      	b.n	4188 <z_impl_device_get_binding+0x8>
    41ce:	bf00      	nop
    41d0:	000071f0 	.word	0x000071f0
    41d4:	00007178 	.word	0x00007178

000041d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41da:	4604      	mov	r4, r0
    41dc:	460e      	mov	r6, r1
	__asm__ volatile(
    41de:	f04f 0320 	mov.w	r3, #32
    41e2:	f3ef 8711 	mrs	r7, BASEPRI
    41e6:	f383 8812 	msr	BASEPRI_MAX, r3
    41ea:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    41ee:	f001 fc01 	bl	59f4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    41f2:	4631      	mov	r1, r6
    41f4:	4605      	mov	r5, r0
    41f6:	4620      	mov	r0, r4
    41f8:	f002 fe8e 	bl	6f18 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    41fc:	2c04      	cmp	r4, #4
    41fe:	d10c      	bne.n	421a <z_fatal_error+0x42>
    4200:	490a      	ldr	r1, [pc, #40]	; (422c <z_fatal_error+0x54>)
    4202:	4a0b      	ldr	r2, [pc, #44]	; (4230 <z_fatal_error+0x58>)
    4204:	480b      	ldr	r0, [pc, #44]	; (4234 <z_fatal_error+0x5c>)
    4206:	238f      	movs	r3, #143	; 0x8f
    4208:	f002 fcec 	bl	6be4 <printk>
    420c:	480a      	ldr	r0, [pc, #40]	; (4238 <z_fatal_error+0x60>)
    420e:	f002 fce9 	bl	6be4 <printk>
    4212:	4807      	ldr	r0, [pc, #28]	; (4230 <z_fatal_error+0x58>)
    4214:	218f      	movs	r1, #143	; 0x8f
    4216:	f002 fc11 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    421a:	f387 8811 	msr	BASEPRI, r7
    421e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4222:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4228:	f7fd be48 	b.w	1ebc <z_impl_k_thread_abort>
    422c:	00007f5c 	.word	0x00007f5c
    4230:	00007f3a 	.word	0x00007f3a
    4234:	0000779d 	.word	0x0000779d
    4238:	00007f79 	.word	0x00007f79

0000423c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    423c:	4c11      	ldr	r4, [pc, #68]	; (4284 <idle+0x48>)
    423e:	68a2      	ldr	r2, [r4, #8]
    4240:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4244:	2a00      	cmp	r2, #0
{
    4246:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4248:	da09      	bge.n	425e <idle+0x22>
    424a:	490f      	ldr	r1, [pc, #60]	; (4288 <idle+0x4c>)
    424c:	480f      	ldr	r0, [pc, #60]	; (428c <idle+0x50>)
    424e:	4a10      	ldr	r2, [pc, #64]	; (4290 <idle+0x54>)
    4250:	2327      	movs	r3, #39	; 0x27
    4252:	f002 fcc7 	bl	6be4 <printk>
    4256:	480e      	ldr	r0, [pc, #56]	; (4290 <idle+0x54>)
    4258:	2127      	movs	r1, #39	; 0x27
    425a:	f002 fbef 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    425e:	f04f 0220 	mov.w	r2, #32
    4262:	f3ef 8311 	mrs	r3, BASEPRI
    4266:	f382 8812 	msr	BASEPRI_MAX, r2
    426a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    426e:	f002 f81d 	bl	62ac <z_get_next_timeout_expiry>
    4272:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4274:	f7fd fa4a 	bl	170c <pm_system_suspend>
    4278:	2800      	cmp	r0, #0
    427a:	d1f0      	bne.n	425e <idle+0x22>
	arch_cpu_idle();
    427c:	f7fd fafc 	bl	1878 <arch_cpu_idle>
}
    4280:	e7ed      	b.n	425e <idle+0x22>
    4282:	bf00      	nop
    4284:	20000b0c 	.word	0x20000b0c
    4288:	00007fcf 	.word	0x00007fcf
    428c:	0000779d 	.word	0x0000779d
    4290:	00007fae 	.word	0x00007fae

00004294 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4294:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4296:	2300      	movs	r3, #0
{
    4298:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    429a:	2201      	movs	r2, #1
    429c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    42a0:	220f      	movs	r2, #15
    42a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    42a6:	4c0d      	ldr	r4, [pc, #52]	; (42dc <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42a8:	4a0d      	ldr	r2, [pc, #52]	; (42e0 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    42aa:	9301      	str	r3, [sp, #4]
    42ac:	490d      	ldr	r1, [pc, #52]	; (42e4 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42ae:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    42b0:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    42b4:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    42b8:	f44f 75b0 	mov.w	r5, #352	; 0x160
    42bc:	9300      	str	r3, [sp, #0]
    42be:	fb05 1100 	mla	r1, r5, r0, r1
    42c2:	4b09      	ldr	r3, [pc, #36]	; (42e8 <init_idle_thread+0x54>)
    42c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    42c8:	4620      	mov	r0, r4
    42ca:	f001 fd15 	bl	5cf8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    42ce:	7b63      	ldrb	r3, [r4, #13]
    42d0:	f023 0304 	bic.w	r3, r3, #4
    42d4:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    42d6:	b007      	add	sp, #28
    42d8:	bd30      	pop	{r4, r5, pc}
    42da:	bf00      	nop
    42dc:	20000348 	.word	0x20000348
    42e0:	20000b0c 	.word	0x20000b0c
    42e4:	200021c0 	.word	0x200021c0
    42e8:	0000423d 	.word	0x0000423d

000042ec <bg_thread_main>:
{
    42ec:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    42ee:	4b0a      	ldr	r3, [pc, #40]	; (4318 <bg_thread_main+0x2c>)
    42f0:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    42f2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    42f4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    42f6:	f7ff ff23 	bl	4140 <z_sys_init_run_level>
	boot_banner();
    42fa:	f002 f9a5 	bl	6648 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    42fe:	2003      	movs	r0, #3
    4300:	f7ff ff1e 	bl	4140 <z_sys_init_run_level>
	z_init_static_threads();
    4304:	f001 fdaa 	bl	5e5c <z_init_static_threads>
	main();
    4308:	f7fc f920 	bl	54c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    430c:	4a03      	ldr	r2, [pc, #12]	; (431c <bg_thread_main+0x30>)
    430e:	7b13      	ldrb	r3, [r2, #12]
    4310:	f023 0301 	bic.w	r3, r3, #1
    4314:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4316:	bd08      	pop	{r3, pc}
    4318:	20000f7d 	.word	0x20000f7d
    431c:	200003c8 	.word	0x200003c8

00004320 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4320:	4802      	ldr	r0, [pc, #8]	; (432c <z_bss_zero+0xc>)
    4322:	4a03      	ldr	r2, [pc, #12]	; (4330 <z_bss_zero+0x10>)
    4324:	2100      	movs	r1, #0
    4326:	1a12      	subs	r2, r2, r0
    4328:	f002 bcbf 	b.w	6caa <memset>
    432c:	200001a8 	.word	0x200001a8
    4330:	2000113c 	.word	0x2000113c

00004334 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4334:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4336:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4410 <z_cstart+0xdc>
    433a:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    433c:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4340:	4d2d      	ldr	r5, [pc, #180]	; (43f8 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4342:	4e2e      	ldr	r6, [pc, #184]	; (43fc <z_cstart+0xc8>)
    4344:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4346:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4414 <z_cstart+0xe0>
    434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    434e:	2400      	movs	r4, #0
    4350:	616b      	str	r3, [r5, #20]
    4352:	23e0      	movs	r3, #224	; 0xe0
    4354:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4358:	77ec      	strb	r4, [r5, #31]
    435a:	762c      	strb	r4, [r5, #24]
    435c:	766c      	strb	r4, [r5, #25]
    435e:	76ac      	strb	r4, [r5, #26]
    4360:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4364:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4366:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    436a:	626b      	str	r3, [r5, #36]	; 0x24
    436c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4370:	f7fd fd4e 	bl	1e10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4374:	f7fd fa7a 	bl	186c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4378:	f04f 33ff 	mov.w	r3, #4294967295
    437c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    437e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4380:	f7fd fe76 	bl	2070 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4384:	f7fd fdac 	bl	1ee0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4388:	f240 1301 	movw	r3, #257	; 0x101
    438c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4390:	ab06      	add	r3, sp, #24
    4392:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4394:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4398:	f002 fe46 	bl	7028 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    439c:	4620      	mov	r0, r4
    439e:	f7ff fecf 	bl	4140 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    43a2:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    43a4:	4d16      	ldr	r5, [pc, #88]	; (4400 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    43a6:	f7ff fecb 	bl	4140 <z_sys_init_run_level>
	z_sched_init();
    43aa:	f001 f98d 	bl	56c8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    43ae:	4b15      	ldr	r3, [pc, #84]	; (4404 <z_cstart+0xd0>)
    43b0:	9305      	str	r3, [sp, #20]
    43b2:	2301      	movs	r3, #1
    43b4:	4914      	ldr	r1, [pc, #80]	; (4408 <z_cstart+0xd4>)
    43b6:	9400      	str	r4, [sp, #0]
    43b8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    43bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    43c0:	464b      	mov	r3, r9
    43c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    43c6:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    43c8:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    43ca:	f001 fc95 	bl	5cf8 <z_setup_new_thread>
    43ce:	7b6a      	ldrb	r2, [r5, #13]
    43d0:	f022 0204 	bic.w	r2, r2, #4
    43d4:	736a      	strb	r2, [r5, #13]
    43d6:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    43d8:	4628      	mov	r0, r5
    43da:	f000 fdc1 	bl	4f60 <z_ready_thread>
		init_idle_thread(i);
    43de:	4620      	mov	r0, r4
    43e0:	f7ff ff58 	bl	4294 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    43e4:	4b09      	ldr	r3, [pc, #36]	; (440c <z_cstart+0xd8>)
    43e6:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    43e8:	464a      	mov	r2, r9
    43ea:	4639      	mov	r1, r7
    43ec:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    43ee:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    43f0:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    43f4:	f7fd fb74 	bl	1ae0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    43f8:	e000ed00 	.word	0xe000ed00
    43fc:	20000b0c 	.word	0x20000b0c
    4400:	200003c8 	.word	0x200003c8
    4404:	00007ff7 	.word	0x00007ff7
    4408:	20001da0 	.word	0x20001da0
    440c:	20000348 	.word	0x20000348
    4410:	20002b40 	.word	0x20002b40
    4414:	000042ed 	.word	0x000042ed

00004418 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    441c:	4d16      	ldr	r5, [pc, #88]	; (4478 <init_mem_slab_module+0x60>)
    441e:	4c17      	ldr	r4, [pc, #92]	; (447c <init_mem_slab_module+0x64>)
    4420:	4e17      	ldr	r6, [pc, #92]	; (4480 <init_mem_slab_module+0x68>)
    4422:	46a8      	mov	r8, r5
    4424:	42ac      	cmp	r4, r5
    4426:	d90c      	bls.n	4442 <init_mem_slab_module+0x2a>
    4428:	4916      	ldr	r1, [pc, #88]	; (4484 <init_mem_slab_module+0x6c>)
    442a:	4817      	ldr	r0, [pc, #92]	; (4488 <init_mem_slab_module+0x70>)
    442c:	233c      	movs	r3, #60	; 0x3c
    442e:	4632      	mov	r2, r6
    4430:	f002 fbd8 	bl	6be4 <printk>
    4434:	4815      	ldr	r0, [pc, #84]	; (448c <init_mem_slab_module+0x74>)
    4436:	f002 fbd5 	bl	6be4 <printk>
    443a:	213c      	movs	r1, #60	; 0x3c
    443c:	4630      	mov	r0, r6
    443e:	f002 fafd 	bl	6a3c <assert_post_action>
    4442:	4544      	cmp	r4, r8
    4444:	d302      	bcc.n	444c <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4446:	2000      	movs	r0, #0
	return rc;
}
    4448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    444c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4450:	ea41 0302 	orr.w	r3, r1, r2
    4454:	f013 0303 	ands.w	r3, r3, #3
    4458:	d10b      	bne.n	4472 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    445a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    445c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    445e:	4283      	cmp	r3, r0
    4460:	d101      	bne.n	4466 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4462:	3420      	adds	r4, #32
    4464:	e7de      	b.n	4424 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4466:	69a7      	ldr	r7, [r4, #24]
    4468:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    446a:	3301      	adds	r3, #1
		slab->free_list = p;
    446c:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    446e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4470:	e7f5      	b.n	445e <init_mem_slab_module+0x46>
		return -EINVAL;
    4472:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4476:	e7e7      	b.n	4448 <init_mem_slab_module+0x30>
    4478:	20000158 	.word	0x20000158
    447c:	20000158 	.word	0x20000158
    4480:	00007ffc 	.word	0x00007ffc
    4484:	00008021 	.word	0x00008021
    4488:	0000779d 	.word	0x0000779d
    448c:	0000803e 	.word	0x0000803e

00004490 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4494:	4604      	mov	r4, r0
    4496:	460e      	mov	r6, r1
    4498:	4690      	mov	r8, r2
    449a:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    449c:	f100 0508 	add.w	r5, r0, #8
    44a0:	f04f 0320 	mov.w	r3, #32
    44a4:	f3ef 8711 	mrs	r7, BASEPRI
    44a8:	f383 8812 	msr	BASEPRI_MAX, r3
    44ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    44b0:	4628      	mov	r0, r5
    44b2:	f001 fd63 	bl	5f7c <z_spin_lock_valid>
    44b6:	b968      	cbnz	r0, 44d4 <k_mem_slab_alloc+0x44>
    44b8:	4a24      	ldr	r2, [pc, #144]	; (454c <k_mem_slab_alloc+0xbc>)
    44ba:	4925      	ldr	r1, [pc, #148]	; (4550 <k_mem_slab_alloc+0xc0>)
    44bc:	4825      	ldr	r0, [pc, #148]	; (4554 <k_mem_slab_alloc+0xc4>)
    44be:	2381      	movs	r3, #129	; 0x81
    44c0:	f002 fb90 	bl	6be4 <printk>
    44c4:	4824      	ldr	r0, [pc, #144]	; (4558 <k_mem_slab_alloc+0xc8>)
    44c6:	4629      	mov	r1, r5
    44c8:	f002 fb8c 	bl	6be4 <printk>
    44cc:	481f      	ldr	r0, [pc, #124]	; (454c <k_mem_slab_alloc+0xbc>)
    44ce:	2181      	movs	r1, #129	; 0x81
    44d0:	f002 fab4 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    44d4:	4628      	mov	r0, r5
    44d6:	f001 fd6f 	bl	5fb8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    44da:	69a3      	ldr	r3, [r4, #24]
    44dc:	b1eb      	cbz	r3, 451a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    44de:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    44e4:	69e3      	ldr	r3, [r4, #28]
    44e6:	3301      	adds	r3, #1
    44e8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    44ea:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    44ec:	4628      	mov	r0, r5
    44ee:	f001 fd53 	bl	5f98 <z_spin_unlock_valid>
    44f2:	b968      	cbnz	r0, 4510 <k_mem_slab_alloc+0x80>
    44f4:	4a15      	ldr	r2, [pc, #84]	; (454c <k_mem_slab_alloc+0xbc>)
    44f6:	4919      	ldr	r1, [pc, #100]	; (455c <k_mem_slab_alloc+0xcc>)
    44f8:	4816      	ldr	r0, [pc, #88]	; (4554 <k_mem_slab_alloc+0xc4>)
    44fa:	23ac      	movs	r3, #172	; 0xac
    44fc:	f002 fb72 	bl	6be4 <printk>
    4500:	4817      	ldr	r0, [pc, #92]	; (4560 <k_mem_slab_alloc+0xd0>)
    4502:	4629      	mov	r1, r5
    4504:	f002 fb6e 	bl	6be4 <printk>
    4508:	4810      	ldr	r0, [pc, #64]	; (454c <k_mem_slab_alloc+0xbc>)
    450a:	21ac      	movs	r1, #172	; 0xac
    450c:	f002 fa96 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    4510:	f387 8811 	msr	BASEPRI, r7
    4514:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4518:	e013      	b.n	4542 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    451a:	ea58 0209 	orrs.w	r2, r8, r9
    451e:	d103      	bne.n	4528 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4520:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4522:	f06f 040b 	mvn.w	r4, #11
    4526:	e7e1      	b.n	44ec <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4528:	4622      	mov	r2, r4
    452a:	e9cd 8900 	strd	r8, r9, [sp]
    452e:	4639      	mov	r1, r7
    4530:	4628      	mov	r0, r5
    4532:	f000 fec7 	bl	52c4 <z_pend_curr>
		if (result == 0) {
    4536:	4604      	mov	r4, r0
    4538:	b918      	cbnz	r0, 4542 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    453a:	4b0a      	ldr	r3, [pc, #40]	; (4564 <k_mem_slab_alloc+0xd4>)
    453c:	689b      	ldr	r3, [r3, #8]
    453e:	695b      	ldr	r3, [r3, #20]
    4540:	6033      	str	r3, [r6, #0]
}
    4542:	4620      	mov	r0, r4
    4544:	b003      	add	sp, #12
    4546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    454a:	bf00      	nop
    454c:	000078b0 	.word	0x000078b0
    4550:	00007902 	.word	0x00007902
    4554:	0000779d 	.word	0x0000779d
    4558:	00007917 	.word	0x00007917
    455c:	000078d6 	.word	0x000078d6
    4560:	000078ed 	.word	0x000078ed
    4564:	20000b0c 	.word	0x20000b0c

00004568 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    456c:	4604      	mov	r4, r0
    456e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4570:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4574:	f04f 0320 	mov.w	r3, #32
    4578:	f3ef 8711 	mrs	r7, BASEPRI
    457c:	f383 8812 	msr	BASEPRI_MAX, r3
    4580:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4584:	4628      	mov	r0, r5
    4586:	f001 fcf9 	bl	5f7c <z_spin_lock_valid>
    458a:	b968      	cbnz	r0, 45a8 <k_mem_slab_free+0x40>
    458c:	4a22      	ldr	r2, [pc, #136]	; (4618 <k_mem_slab_free+0xb0>)
    458e:	4923      	ldr	r1, [pc, #140]	; (461c <k_mem_slab_free+0xb4>)
    4590:	4823      	ldr	r0, [pc, #140]	; (4620 <k_mem_slab_free+0xb8>)
    4592:	2381      	movs	r3, #129	; 0x81
    4594:	f002 fb26 	bl	6be4 <printk>
    4598:	4822      	ldr	r0, [pc, #136]	; (4624 <k_mem_slab_free+0xbc>)
    459a:	4629      	mov	r1, r5
    459c:	f002 fb22 	bl	6be4 <printk>
    45a0:	481d      	ldr	r0, [pc, #116]	; (4618 <k_mem_slab_free+0xb0>)
    45a2:	2181      	movs	r1, #129	; 0x81
    45a4:	f002 fa4a 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    45a8:	4628      	mov	r0, r5
    45aa:	f001 fd05 	bl	5fb8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    45ae:	f8d4 8018 	ldr.w	r8, [r4, #24]
    45b2:	f1b8 0f00 	cmp.w	r8, #0
    45b6:	d10f      	bne.n	45d8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    45b8:	4620      	mov	r0, r4
    45ba:	f001 f835 	bl	5628 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    45be:	b158      	cbz	r0, 45d8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    45c0:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    45c2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    45c4:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    45c8:	f000 fcca 	bl	4f60 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    45cc:	4639      	mov	r1, r7
    45ce:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    45d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    45d4:	f000 ba70 	b.w	4ab8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    45d8:	6833      	ldr	r3, [r6, #0]
    45da:	69a2      	ldr	r2, [r4, #24]
    45dc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    45de:	6833      	ldr	r3, [r6, #0]
    45e0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    45e2:	69e3      	ldr	r3, [r4, #28]
    45e4:	3b01      	subs	r3, #1
    45e6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45e8:	4628      	mov	r0, r5
    45ea:	f001 fcd5 	bl	5f98 <z_spin_unlock_valid>
    45ee:	b968      	cbnz	r0, 460c <k_mem_slab_free+0xa4>
    45f0:	4a09      	ldr	r2, [pc, #36]	; (4618 <k_mem_slab_free+0xb0>)
    45f2:	490d      	ldr	r1, [pc, #52]	; (4628 <k_mem_slab_free+0xc0>)
    45f4:	480a      	ldr	r0, [pc, #40]	; (4620 <k_mem_slab_free+0xb8>)
    45f6:	23ac      	movs	r3, #172	; 0xac
    45f8:	f002 faf4 	bl	6be4 <printk>
    45fc:	480b      	ldr	r0, [pc, #44]	; (462c <k_mem_slab_free+0xc4>)
    45fe:	4629      	mov	r1, r5
    4600:	f002 faf0 	bl	6be4 <printk>
    4604:	4804      	ldr	r0, [pc, #16]	; (4618 <k_mem_slab_free+0xb0>)
    4606:	21ac      	movs	r1, #172	; 0xac
    4608:	f002 fa18 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    460c:	f387 8811 	msr	BASEPRI, r7
    4610:	f3bf 8f6f 	isb	sy
}
    4614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4618:	000078b0 	.word	0x000078b0
    461c:	00007902 	.word	0x00007902
    4620:	0000779d 	.word	0x0000779d
    4624:	00007917 	.word	0x00007917
    4628:	000078d6 	.word	0x000078d6
    462c:	000078ed 	.word	0x000078ed

00004630 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4634:	4604      	mov	r4, r0
    4636:	4616      	mov	r6, r2
    4638:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    463a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    463e:	b163      	cbz	r3, 465a <z_impl_k_mutex_lock+0x2a>
    4640:	4970      	ldr	r1, [pc, #448]	; (4804 <z_impl_k_mutex_lock+0x1d4>)
    4642:	4a71      	ldr	r2, [pc, #452]	; (4808 <z_impl_k_mutex_lock+0x1d8>)
    4644:	4871      	ldr	r0, [pc, #452]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    4646:	2365      	movs	r3, #101	; 0x65
    4648:	f002 facc 	bl	6be4 <printk>
    464c:	4870      	ldr	r0, [pc, #448]	; (4810 <z_impl_k_mutex_lock+0x1e0>)
    464e:	f002 fac9 	bl	6be4 <printk>
    4652:	486d      	ldr	r0, [pc, #436]	; (4808 <z_impl_k_mutex_lock+0x1d8>)
    4654:	2165      	movs	r1, #101	; 0x65
    4656:	f002 f9f1 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    465a:	f04f 0320 	mov.w	r3, #32
    465e:	f3ef 8811 	mrs	r8, BASEPRI
    4662:	f383 8812 	msr	BASEPRI_MAX, r3
    4666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    466a:	486a      	ldr	r0, [pc, #424]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    466c:	f001 fc86 	bl	5f7c <z_spin_lock_valid>
    4670:	b968      	cbnz	r0, 468e <z_impl_k_mutex_lock+0x5e>
    4672:	4a69      	ldr	r2, [pc, #420]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    4674:	4969      	ldr	r1, [pc, #420]	; (481c <z_impl_k_mutex_lock+0x1ec>)
    4676:	4865      	ldr	r0, [pc, #404]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    4678:	2381      	movs	r3, #129	; 0x81
    467a:	f002 fab3 	bl	6be4 <printk>
    467e:	4965      	ldr	r1, [pc, #404]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    4680:	4867      	ldr	r0, [pc, #412]	; (4820 <z_impl_k_mutex_lock+0x1f0>)
    4682:	f002 faaf 	bl	6be4 <printk>
    4686:	4864      	ldr	r0, [pc, #400]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    4688:	2181      	movs	r1, #129	; 0x81
    468a:	f002 f9d7 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    468e:	4861      	ldr	r0, [pc, #388]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    4690:	f001 fc92 	bl	5fb8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4694:	68e3      	ldr	r3, [r4, #12]
    4696:	4a63      	ldr	r2, [pc, #396]	; (4824 <z_impl_k_mutex_lock+0x1f4>)
    4698:	b1fb      	cbz	r3, 46da <z_impl_k_mutex_lock+0xaa>
    469a:	68a0      	ldr	r0, [r4, #8]
    469c:	6891      	ldr	r1, [r2, #8]
    469e:	4288      	cmp	r0, r1
    46a0:	d03d      	beq.n	471e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    46a2:	ea56 0307 	orrs.w	r3, r6, r7
    46a6:	d13c      	bne.n	4722 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    46a8:	485a      	ldr	r0, [pc, #360]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    46aa:	f001 fc75 	bl	5f98 <z_spin_unlock_valid>
    46ae:	b968      	cbnz	r0, 46cc <z_impl_k_mutex_lock+0x9c>
    46b0:	4a59      	ldr	r2, [pc, #356]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    46b2:	495d      	ldr	r1, [pc, #372]	; (4828 <z_impl_k_mutex_lock+0x1f8>)
    46b4:	4855      	ldr	r0, [pc, #340]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    46b6:	23ac      	movs	r3, #172	; 0xac
    46b8:	f002 fa94 	bl	6be4 <printk>
    46bc:	4955      	ldr	r1, [pc, #340]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    46be:	485b      	ldr	r0, [pc, #364]	; (482c <z_impl_k_mutex_lock+0x1fc>)
    46c0:	f002 fa90 	bl	6be4 <printk>
    46c4:	4854      	ldr	r0, [pc, #336]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    46c6:	21ac      	movs	r1, #172	; 0xac
    46c8:	f002 f9b8 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    46cc:	f388 8811 	msr	BASEPRI, r8
    46d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    46d4:	f06f 000f 	mvn.w	r0, #15
    46d8:	e01e      	b.n	4718 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    46da:	6891      	ldr	r1, [r2, #8]
    46dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    46e0:	484c      	ldr	r0, [pc, #304]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    46e2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    46e4:	3301      	adds	r3, #1
    46e6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    46e8:	6893      	ldr	r3, [r2, #8]
    46ea:	60a3      	str	r3, [r4, #8]
    46ec:	f001 fc54 	bl	5f98 <z_spin_unlock_valid>
    46f0:	b968      	cbnz	r0, 470e <z_impl_k_mutex_lock+0xde>
    46f2:	4a49      	ldr	r2, [pc, #292]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    46f4:	494c      	ldr	r1, [pc, #304]	; (4828 <z_impl_k_mutex_lock+0x1f8>)
    46f6:	4845      	ldr	r0, [pc, #276]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    46f8:	23ac      	movs	r3, #172	; 0xac
    46fa:	f002 fa73 	bl	6be4 <printk>
    46fe:	4945      	ldr	r1, [pc, #276]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    4700:	484a      	ldr	r0, [pc, #296]	; (482c <z_impl_k_mutex_lock+0x1fc>)
    4702:	f002 fa6f 	bl	6be4 <printk>
    4706:	4844      	ldr	r0, [pc, #272]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    4708:	21ac      	movs	r1, #172	; 0xac
    470a:	f002 f997 	bl	6a3c <assert_post_action>
    470e:	f388 8811 	msr	BASEPRI, r8
    4712:	f3bf 8f6f 	isb	sy
		return 0;
    4716:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4718:	b002      	add	sp, #8
    471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    471e:	6921      	ldr	r1, [r4, #16]
    4720:	e7de      	b.n	46e0 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4722:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4726:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    472a:	4299      	cmp	r1, r3
    472c:	bfa8      	it	ge
    472e:	4619      	movge	r1, r3
    4730:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4734:	4291      	cmp	r1, r2
    4736:	bfb8      	it	lt
    4738:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    473a:	428b      	cmp	r3, r1
    473c:	dd44      	ble.n	47c8 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    473e:	f000 fdf1 	bl	5324 <z_set_prio>
    4742:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4744:	e9cd 6700 	strd	r6, r7, [sp]
    4748:	4832      	ldr	r0, [pc, #200]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    474a:	4622      	mov	r2, r4
    474c:	4641      	mov	r1, r8
    474e:	f000 fdb9 	bl	52c4 <z_pend_curr>
	if (got_mutex == 0) {
    4752:	2800      	cmp	r0, #0
    4754:	d0e0      	beq.n	4718 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    4756:	f04f 0320 	mov.w	r3, #32
    475a:	f3ef 8611 	mrs	r6, BASEPRI
    475e:	f383 8812 	msr	BASEPRI_MAX, r3
    4762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4766:	482b      	ldr	r0, [pc, #172]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    4768:	f001 fc08 	bl	5f7c <z_spin_lock_valid>
    476c:	b968      	cbnz	r0, 478a <z_impl_k_mutex_lock+0x15a>
    476e:	4a2a      	ldr	r2, [pc, #168]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    4770:	492a      	ldr	r1, [pc, #168]	; (481c <z_impl_k_mutex_lock+0x1ec>)
    4772:	4826      	ldr	r0, [pc, #152]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    4774:	2381      	movs	r3, #129	; 0x81
    4776:	f002 fa35 	bl	6be4 <printk>
    477a:	4926      	ldr	r1, [pc, #152]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    477c:	4828      	ldr	r0, [pc, #160]	; (4820 <z_impl_k_mutex_lock+0x1f0>)
    477e:	f002 fa31 	bl	6be4 <printk>
    4782:	4825      	ldr	r0, [pc, #148]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    4784:	2181      	movs	r1, #129	; 0x81
    4786:	f002 f959 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    478a:	4822      	ldr	r0, [pc, #136]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    478c:	f001 fc14 	bl	5fb8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4790:	6823      	ldr	r3, [r4, #0]
    4792:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4794:	429c      	cmp	r4, r3
    4796:	d00a      	beq.n	47ae <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    4798:	b14b      	cbz	r3, 47ae <z_impl_k_mutex_lock+0x17e>
    479a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    479e:	4299      	cmp	r1, r3
    47a0:	bfa8      	it	ge
    47a2:	4619      	movge	r1, r3
    47a4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    47a8:	4299      	cmp	r1, r3
    47aa:	bfb8      	it	lt
    47ac:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    47ae:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    47b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    47b4:	4299      	cmp	r1, r3
    47b6:	d109      	bne.n	47cc <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    47b8:	b16d      	cbz	r5, 47d6 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    47ba:	4816      	ldr	r0, [pc, #88]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    47bc:	4631      	mov	r1, r6
    47be:	f000 f97b 	bl	4ab8 <z_reschedule>
	return -EAGAIN;
    47c2:	f06f 000a 	mvn.w	r0, #10
    47c6:	e7a7      	b.n	4718 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    47c8:	2500      	movs	r5, #0
    47ca:	e7bb      	b.n	4744 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    47cc:	f000 fdaa 	bl	5324 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    47d0:	2800      	cmp	r0, #0
    47d2:	d1f2      	bne.n	47ba <z_impl_k_mutex_lock+0x18a>
    47d4:	e7f0      	b.n	47b8 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    47d6:	480f      	ldr	r0, [pc, #60]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    47d8:	f001 fbde 	bl	5f98 <z_spin_unlock_valid>
    47dc:	b968      	cbnz	r0, 47fa <z_impl_k_mutex_lock+0x1ca>
    47de:	4a0e      	ldr	r2, [pc, #56]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    47e0:	4911      	ldr	r1, [pc, #68]	; (4828 <z_impl_k_mutex_lock+0x1f8>)
    47e2:	480a      	ldr	r0, [pc, #40]	; (480c <z_impl_k_mutex_lock+0x1dc>)
    47e4:	23ac      	movs	r3, #172	; 0xac
    47e6:	f002 f9fd 	bl	6be4 <printk>
    47ea:	490a      	ldr	r1, [pc, #40]	; (4814 <z_impl_k_mutex_lock+0x1e4>)
    47ec:	480f      	ldr	r0, [pc, #60]	; (482c <z_impl_k_mutex_lock+0x1fc>)
    47ee:	f002 f9f9 	bl	6be4 <printk>
    47f2:	4809      	ldr	r0, [pc, #36]	; (4818 <z_impl_k_mutex_lock+0x1e8>)
    47f4:	21ac      	movs	r1, #172	; 0xac
    47f6:	f002 f921 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    47fa:	f386 8811 	msr	BASEPRI, r6
    47fe:	f3bf 8f6f 	isb	sy
    4802:	e7de      	b.n	47c2 <z_impl_k_mutex_lock+0x192>
    4804:	0000807f 	.word	0x0000807f
    4808:	0000805d 	.word	0x0000805d
    480c:	0000779d 	.word	0x0000779d
    4810:	00008091 	.word	0x00008091
    4814:	20000b34 	.word	0x20000b34
    4818:	000078b0 	.word	0x000078b0
    481c:	00007902 	.word	0x00007902
    4820:	00007917 	.word	0x00007917
    4824:	20000b0c 	.word	0x20000b0c
    4828:	000078d6 	.word	0x000078d6
    482c:	000078ed 	.word	0x000078ed

00004830 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4830:	b538      	push	{r3, r4, r5, lr}
    4832:	4604      	mov	r4, r0
    4834:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4838:	b163      	cbz	r3, 4854 <z_impl_k_mutex_unlock+0x24>
    483a:	4952      	ldr	r1, [pc, #328]	; (4984 <z_impl_k_mutex_unlock+0x154>)
    483c:	4a52      	ldr	r2, [pc, #328]	; (4988 <z_impl_k_mutex_unlock+0x158>)
    483e:	4853      	ldr	r0, [pc, #332]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    4840:	23c7      	movs	r3, #199	; 0xc7
    4842:	f002 f9cf 	bl	6be4 <printk>
    4846:	4852      	ldr	r0, [pc, #328]	; (4990 <z_impl_k_mutex_unlock+0x160>)
    4848:	f002 f9cc 	bl	6be4 <printk>
    484c:	484e      	ldr	r0, [pc, #312]	; (4988 <z_impl_k_mutex_unlock+0x158>)
    484e:	21c7      	movs	r1, #199	; 0xc7
    4850:	f002 f8f4 	bl	6a3c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4854:	68a3      	ldr	r3, [r4, #8]
    4856:	2b00      	cmp	r3, #0
    4858:	f000 808d 	beq.w	4976 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    485c:	4d4d      	ldr	r5, [pc, #308]	; (4994 <z_impl_k_mutex_unlock+0x164>)
    485e:	68aa      	ldr	r2, [r5, #8]
    4860:	4293      	cmp	r3, r2
    4862:	f040 808b 	bne.w	497c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    4866:	68e3      	ldr	r3, [r4, #12]
    4868:	b94b      	cbnz	r3, 487e <z_impl_k_mutex_unlock+0x4e>
    486a:	494b      	ldr	r1, [pc, #300]	; (4998 <z_impl_k_mutex_unlock+0x168>)
    486c:	4847      	ldr	r0, [pc, #284]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    486e:	4a46      	ldr	r2, [pc, #280]	; (4988 <z_impl_k_mutex_unlock+0x158>)
    4870:	23df      	movs	r3, #223	; 0xdf
    4872:	f002 f9b7 	bl	6be4 <printk>
    4876:	4844      	ldr	r0, [pc, #272]	; (4988 <z_impl_k_mutex_unlock+0x158>)
    4878:	21df      	movs	r1, #223	; 0xdf
    487a:	f002 f8df 	bl	6a3c <assert_post_action>
    487e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    4882:	b163      	cbz	r3, 489e <z_impl_k_mutex_unlock+0x6e>
    4884:	493f      	ldr	r1, [pc, #252]	; (4984 <z_impl_k_mutex_unlock+0x154>)
    4886:	4a45      	ldr	r2, [pc, #276]	; (499c <z_impl_k_mutex_unlock+0x16c>)
    4888:	4840      	ldr	r0, [pc, #256]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    488a:	23fd      	movs	r3, #253	; 0xfd
    488c:	f002 f9aa 	bl	6be4 <printk>
    4890:	4843      	ldr	r0, [pc, #268]	; (49a0 <z_impl_k_mutex_unlock+0x170>)
    4892:	f002 f9a7 	bl	6be4 <printk>
    4896:	4841      	ldr	r0, [pc, #260]	; (499c <z_impl_k_mutex_unlock+0x16c>)
    4898:	21fd      	movs	r1, #253	; 0xfd
    489a:	f002 f8cf 	bl	6a3c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    489e:	68ab      	ldr	r3, [r5, #8]
    48a0:	7bdb      	ldrb	r3, [r3, #15]
    48a2:	2b01      	cmp	r3, #1
    48a4:	d10c      	bne.n	48c0 <z_impl_k_mutex_unlock+0x90>
    48a6:	493f      	ldr	r1, [pc, #252]	; (49a4 <z_impl_k_mutex_unlock+0x174>)
    48a8:	4a3c      	ldr	r2, [pc, #240]	; (499c <z_impl_k_mutex_unlock+0x16c>)
    48aa:	4838      	ldr	r0, [pc, #224]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    48ac:	23fe      	movs	r3, #254	; 0xfe
    48ae:	f002 f999 	bl	6be4 <printk>
    48b2:	483b      	ldr	r0, [pc, #236]	; (49a0 <z_impl_k_mutex_unlock+0x170>)
    48b4:	f002 f996 	bl	6be4 <printk>
    48b8:	4838      	ldr	r0, [pc, #224]	; (499c <z_impl_k_mutex_unlock+0x16c>)
    48ba:	21fe      	movs	r1, #254	; 0xfe
    48bc:	f002 f8be 	bl	6a3c <assert_post_action>

	--_current->base.sched_locked;
    48c0:	68aa      	ldr	r2, [r5, #8]
    48c2:	7bd3      	ldrb	r3, [r2, #15]
    48c4:	3b01      	subs	r3, #1
    48c6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    48c8:	68e3      	ldr	r3, [r4, #12]
    48ca:	2b01      	cmp	r3, #1
    48cc:	d905      	bls.n	48da <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    48ce:	3b01      	subs	r3, #1
    48d0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    48d2:	f000 fe2d 	bl	5530 <k_sched_unlock>

	return 0;
    48d6:	2000      	movs	r0, #0
}
    48d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    48da:	f04f 0320 	mov.w	r3, #32
    48de:	f3ef 8511 	mrs	r5, BASEPRI
    48e2:	f383 8812 	msr	BASEPRI_MAX, r3
    48e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48ea:	482f      	ldr	r0, [pc, #188]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    48ec:	f001 fb46 	bl	5f7c <z_spin_lock_valid>
    48f0:	b968      	cbnz	r0, 490e <z_impl_k_mutex_unlock+0xde>
    48f2:	4a2e      	ldr	r2, [pc, #184]	; (49ac <z_impl_k_mutex_unlock+0x17c>)
    48f4:	492e      	ldr	r1, [pc, #184]	; (49b0 <z_impl_k_mutex_unlock+0x180>)
    48f6:	4825      	ldr	r0, [pc, #148]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    48f8:	2381      	movs	r3, #129	; 0x81
    48fa:	f002 f973 	bl	6be4 <printk>
    48fe:	492a      	ldr	r1, [pc, #168]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    4900:	482c      	ldr	r0, [pc, #176]	; (49b4 <z_impl_k_mutex_unlock+0x184>)
    4902:	f002 f96f 	bl	6be4 <printk>
    4906:	4829      	ldr	r0, [pc, #164]	; (49ac <z_impl_k_mutex_unlock+0x17c>)
    4908:	2181      	movs	r1, #129	; 0x81
    490a:	f002 f897 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    490e:	4826      	ldr	r0, [pc, #152]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    4910:	f001 fb52 	bl	5fb8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4914:	68a0      	ldr	r0, [r4, #8]
    4916:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4918:	f990 300e 	ldrsb.w	r3, [r0, #14]
    491c:	4299      	cmp	r1, r3
    491e:	d001      	beq.n	4924 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    4920:	f000 fd00 	bl	5324 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4924:	4620      	mov	r0, r4
    4926:	f000 fe7f 	bl	5628 <z_unpend_first_thread>
	mutex->owner = new_owner;
    492a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    492c:	b158      	cbz	r0, 4946 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    492e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4932:	6122      	str	r2, [r4, #16]
    4934:	2200      	movs	r2, #0
    4936:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4938:	f000 fb12 	bl	4f60 <z_ready_thread>
		z_reschedule(&lock, key);
    493c:	481a      	ldr	r0, [pc, #104]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    493e:	4629      	mov	r1, r5
    4940:	f000 f8ba 	bl	4ab8 <z_reschedule>
    4944:	e7c5      	b.n	48d2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    4946:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4948:	4817      	ldr	r0, [pc, #92]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    494a:	f001 fb25 	bl	5f98 <z_spin_unlock_valid>
    494e:	b968      	cbnz	r0, 496c <z_impl_k_mutex_unlock+0x13c>
    4950:	4a16      	ldr	r2, [pc, #88]	; (49ac <z_impl_k_mutex_unlock+0x17c>)
    4952:	4919      	ldr	r1, [pc, #100]	; (49b8 <z_impl_k_mutex_unlock+0x188>)
    4954:	480d      	ldr	r0, [pc, #52]	; (498c <z_impl_k_mutex_unlock+0x15c>)
    4956:	23ac      	movs	r3, #172	; 0xac
    4958:	f002 f944 	bl	6be4 <printk>
    495c:	4912      	ldr	r1, [pc, #72]	; (49a8 <z_impl_k_mutex_unlock+0x178>)
    495e:	4817      	ldr	r0, [pc, #92]	; (49bc <z_impl_k_mutex_unlock+0x18c>)
    4960:	f002 f940 	bl	6be4 <printk>
    4964:	4811      	ldr	r0, [pc, #68]	; (49ac <z_impl_k_mutex_unlock+0x17c>)
    4966:	21ac      	movs	r1, #172	; 0xac
    4968:	f002 f868 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    496c:	f385 8811 	msr	BASEPRI, r5
    4970:	f3bf 8f6f 	isb	sy
    4974:	e7ad      	b.n	48d2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    4976:	f06f 0015 	mvn.w	r0, #21
    497a:	e7ad      	b.n	48d8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    497c:	f04f 30ff 	mov.w	r0, #4294967295
    4980:	e7aa      	b.n	48d8 <z_impl_k_mutex_unlock+0xa8>
    4982:	bf00      	nop
    4984:	0000807f 	.word	0x0000807f
    4988:	0000805d 	.word	0x0000805d
    498c:	0000779d 	.word	0x0000779d
    4990:	00008091 	.word	0x00008091
    4994:	20000b0c 	.word	0x20000b0c
    4998:	000080b6 	.word	0x000080b6
    499c:	000080cd 	.word	0x000080cd
    49a0:	000080f8 	.word	0x000080f8
    49a4:	000080fb 	.word	0x000080fb
    49a8:	20000b34 	.word	0x20000b34
    49ac:	000078b0 	.word	0x000078b0
    49b0:	00007902 	.word	0x00007902
    49b4:	00007917 	.word	0x00007917
    49b8:	000078d6 	.word	0x000078d6
    49bc:	000078ed 	.word	0x000078ed

000049c0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    49c0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    49c2:	4c08      	ldr	r4, [pc, #32]	; (49e4 <z_reset_time_slice+0x24>)
    49c4:	6823      	ldr	r3, [r4, #0]
    49c6:	b15b      	cbz	r3, 49e0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    49c8:	f7fe fce2 	bl	3390 <sys_clock_elapsed>
    49cc:	4603      	mov	r3, r0
    49ce:	6820      	ldr	r0, [r4, #0]
    49d0:	4a05      	ldr	r2, [pc, #20]	; (49e8 <z_reset_time_slice+0x28>)
    49d2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    49d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    49d8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    49da:	2100      	movs	r1, #0
    49dc:	f001 bcae 	b.w	633c <z_set_timeout_expiry>
}
    49e0:	bd10      	pop	{r4, pc}
    49e2:	bf00      	nop
    49e4:	20000b44 	.word	0x20000b44
    49e8:	20000b0c 	.word	0x20000b0c

000049ec <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    49ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49ee:	4604      	mov	r4, r0
    49f0:	460d      	mov	r5, r1
	__asm__ volatile(
    49f2:	f04f 0320 	mov.w	r3, #32
    49f6:	f3ef 8611 	mrs	r6, BASEPRI
    49fa:	f383 8812 	msr	BASEPRI_MAX, r3
    49fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a02:	4823      	ldr	r0, [pc, #140]	; (4a90 <k_sched_time_slice_set+0xa4>)
    4a04:	f001 faba 	bl	5f7c <z_spin_lock_valid>
    4a08:	b968      	cbnz	r0, 4a26 <k_sched_time_slice_set+0x3a>
    4a0a:	4a22      	ldr	r2, [pc, #136]	; (4a94 <k_sched_time_slice_set+0xa8>)
    4a0c:	4922      	ldr	r1, [pc, #136]	; (4a98 <k_sched_time_slice_set+0xac>)
    4a0e:	4823      	ldr	r0, [pc, #140]	; (4a9c <k_sched_time_slice_set+0xb0>)
    4a10:	2381      	movs	r3, #129	; 0x81
    4a12:	f002 f8e7 	bl	6be4 <printk>
    4a16:	491e      	ldr	r1, [pc, #120]	; (4a90 <k_sched_time_slice_set+0xa4>)
    4a18:	4821      	ldr	r0, [pc, #132]	; (4aa0 <k_sched_time_slice_set+0xb4>)
    4a1a:	f002 f8e3 	bl	6be4 <printk>
    4a1e:	481d      	ldr	r0, [pc, #116]	; (4a94 <k_sched_time_slice_set+0xa8>)
    4a20:	2181      	movs	r1, #129	; 0x81
    4a22:	f002 f80b 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    4a26:	481a      	ldr	r0, [pc, #104]	; (4a90 <k_sched_time_slice_set+0xa4>)
    4a28:	f001 fac6 	bl	5fb8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4a2c:	4b1d      	ldr	r3, [pc, #116]	; (4aa4 <k_sched_time_slice_set+0xb8>)
    4a2e:	2200      	movs	r2, #0
    4a30:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4a34:	f240 30e7 	movw	r0, #999	; 0x3e7
    4a38:	2100      	movs	r1, #0
    4a3a:	611a      	str	r2, [r3, #16]
    4a3c:	fbe7 0104 	umlal	r0, r1, r7, r4
    4a40:	2300      	movs	r3, #0
    4a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a46:	f7fb fb5b 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4a4a:	2c00      	cmp	r4, #0
    4a4c:	4b16      	ldr	r3, [pc, #88]	; (4aa8 <k_sched_time_slice_set+0xbc>)
    4a4e:	dc1b      	bgt.n	4a88 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4a50:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4a52:	4b16      	ldr	r3, [pc, #88]	; (4aac <k_sched_time_slice_set+0xc0>)
    4a54:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4a56:	f7ff ffb3 	bl	49c0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a5a:	480d      	ldr	r0, [pc, #52]	; (4a90 <k_sched_time_slice_set+0xa4>)
    4a5c:	f001 fa9c 	bl	5f98 <z_spin_unlock_valid>
    4a60:	b968      	cbnz	r0, 4a7e <k_sched_time_slice_set+0x92>
    4a62:	4a0c      	ldr	r2, [pc, #48]	; (4a94 <k_sched_time_slice_set+0xa8>)
    4a64:	4912      	ldr	r1, [pc, #72]	; (4ab0 <k_sched_time_slice_set+0xc4>)
    4a66:	480d      	ldr	r0, [pc, #52]	; (4a9c <k_sched_time_slice_set+0xb0>)
    4a68:	23ac      	movs	r3, #172	; 0xac
    4a6a:	f002 f8bb 	bl	6be4 <printk>
    4a6e:	4908      	ldr	r1, [pc, #32]	; (4a90 <k_sched_time_slice_set+0xa4>)
    4a70:	4810      	ldr	r0, [pc, #64]	; (4ab4 <k_sched_time_slice_set+0xc8>)
    4a72:	f002 f8b7 	bl	6be4 <printk>
    4a76:	4807      	ldr	r0, [pc, #28]	; (4a94 <k_sched_time_slice_set+0xa8>)
    4a78:	21ac      	movs	r1, #172	; 0xac
    4a7a:	f001 ffdf 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    4a7e:	f386 8811 	msr	BASEPRI, r6
    4a82:	f3bf 8f6f 	isb	sy
	}
}
    4a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4a88:	2802      	cmp	r0, #2
    4a8a:	bfb8      	it	lt
    4a8c:	2002      	movlt	r0, #2
    4a8e:	e7df      	b.n	4a50 <k_sched_time_slice_set+0x64>
    4a90:	20000b3c 	.word	0x20000b3c
    4a94:	000078b0 	.word	0x000078b0
    4a98:	00007902 	.word	0x00007902
    4a9c:	0000779d 	.word	0x0000779d
    4aa0:	00007917 	.word	0x00007917
    4aa4:	20000b0c 	.word	0x20000b0c
    4aa8:	20000b44 	.word	0x20000b44
    4aac:	20000b40 	.word	0x20000b40
    4ab0:	000078d6 	.word	0x000078d6
    4ab4:	000078ed 	.word	0x000078ed

00004ab8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    4ab8:	b538      	push	{r3, r4, r5, lr}
    4aba:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4abc:	460d      	mov	r5, r1
    4abe:	b9e9      	cbnz	r1, 4afc <z_reschedule+0x44>
    4ac0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    4ac4:	b9d3      	cbnz	r3, 4afc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    4ac6:	4b19      	ldr	r3, [pc, #100]	; (4b2c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    4ac8:	69da      	ldr	r2, [r3, #28]
    4aca:	689b      	ldr	r3, [r3, #8]
    4acc:	429a      	cmp	r2, r3
    4ace:	d015      	beq.n	4afc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ad0:	f001 fa62 	bl	5f98 <z_spin_unlock_valid>
    4ad4:	b968      	cbnz	r0, 4af2 <z_reschedule+0x3a>
    4ad6:	4a16      	ldr	r2, [pc, #88]	; (4b30 <z_reschedule+0x78>)
    4ad8:	4916      	ldr	r1, [pc, #88]	; (4b34 <z_reschedule+0x7c>)
    4ada:	4817      	ldr	r0, [pc, #92]	; (4b38 <z_reschedule+0x80>)
    4adc:	23c3      	movs	r3, #195	; 0xc3
    4ade:	f002 f881 	bl	6be4 <printk>
    4ae2:	4816      	ldr	r0, [pc, #88]	; (4b3c <z_reschedule+0x84>)
    4ae4:	4621      	mov	r1, r4
    4ae6:	f002 f87d 	bl	6be4 <printk>
    4aea:	4811      	ldr	r0, [pc, #68]	; (4b30 <z_reschedule+0x78>)
    4aec:	21c3      	movs	r1, #195	; 0xc3
    4aee:	f001 ffa5 	bl	6a3c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    4af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    4af6:	2000      	movs	r0, #0
    4af8:	f7fc bfa2 	b.w	1a40 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4afc:	4620      	mov	r0, r4
    4afe:	f001 fa4b 	bl	5f98 <z_spin_unlock_valid>
    4b02:	b968      	cbnz	r0, 4b20 <z_reschedule+0x68>
    4b04:	4a0a      	ldr	r2, [pc, #40]	; (4b30 <z_reschedule+0x78>)
    4b06:	490b      	ldr	r1, [pc, #44]	; (4b34 <z_reschedule+0x7c>)
    4b08:	480b      	ldr	r0, [pc, #44]	; (4b38 <z_reschedule+0x80>)
    4b0a:	23ac      	movs	r3, #172	; 0xac
    4b0c:	f002 f86a 	bl	6be4 <printk>
    4b10:	480a      	ldr	r0, [pc, #40]	; (4b3c <z_reschedule+0x84>)
    4b12:	4621      	mov	r1, r4
    4b14:	f002 f866 	bl	6be4 <printk>
    4b18:	4805      	ldr	r0, [pc, #20]	; (4b30 <z_reschedule+0x78>)
    4b1a:	21ac      	movs	r1, #172	; 0xac
    4b1c:	f001 ff8e 	bl	6a3c <assert_post_action>
    4b20:	f385 8811 	msr	BASEPRI, r5
    4b24:	f3bf 8f6f 	isb	sy
    4b28:	bd38      	pop	{r3, r4, r5, pc}
    4b2a:	bf00      	nop
    4b2c:	20000b0c 	.word	0x20000b0c
    4b30:	000078b0 	.word	0x000078b0
    4b34:	000078d6 	.word	0x000078d6
    4b38:	0000779d 	.word	0x0000779d
    4b3c:	000078ed 	.word	0x000078ed

00004b40 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4b40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4b42:	f04f 0320 	mov.w	r3, #32
    4b46:	f3ef 8511 	mrs	r5, BASEPRI
    4b4a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b52:	4829      	ldr	r0, [pc, #164]	; (4bf8 <k_sched_lock+0xb8>)
    4b54:	f001 fa12 	bl	5f7c <z_spin_lock_valid>
    4b58:	b968      	cbnz	r0, 4b76 <k_sched_lock+0x36>
    4b5a:	4a28      	ldr	r2, [pc, #160]	; (4bfc <k_sched_lock+0xbc>)
    4b5c:	4928      	ldr	r1, [pc, #160]	; (4c00 <k_sched_lock+0xc0>)
    4b5e:	4829      	ldr	r0, [pc, #164]	; (4c04 <k_sched_lock+0xc4>)
    4b60:	2381      	movs	r3, #129	; 0x81
    4b62:	f002 f83f 	bl	6be4 <printk>
    4b66:	4924      	ldr	r1, [pc, #144]	; (4bf8 <k_sched_lock+0xb8>)
    4b68:	4827      	ldr	r0, [pc, #156]	; (4c08 <k_sched_lock+0xc8>)
    4b6a:	f002 f83b 	bl	6be4 <printk>
    4b6e:	4823      	ldr	r0, [pc, #140]	; (4bfc <k_sched_lock+0xbc>)
    4b70:	2181      	movs	r1, #129	; 0x81
    4b72:	f001 ff63 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    4b76:	4820      	ldr	r0, [pc, #128]	; (4bf8 <k_sched_lock+0xb8>)
    4b78:	f001 fa1e 	bl	5fb8 <z_spin_lock_set_owner>
    4b7c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4b80:	b163      	cbz	r3, 4b9c <k_sched_lock+0x5c>
    4b82:	4922      	ldr	r1, [pc, #136]	; (4c0c <k_sched_lock+0xcc>)
    4b84:	4a22      	ldr	r2, [pc, #136]	; (4c10 <k_sched_lock+0xd0>)
    4b86:	481f      	ldr	r0, [pc, #124]	; (4c04 <k_sched_lock+0xc4>)
    4b88:	23fd      	movs	r3, #253	; 0xfd
    4b8a:	f002 f82b 	bl	6be4 <printk>
    4b8e:	4821      	ldr	r0, [pc, #132]	; (4c14 <k_sched_lock+0xd4>)
    4b90:	f002 f828 	bl	6be4 <printk>
    4b94:	481e      	ldr	r0, [pc, #120]	; (4c10 <k_sched_lock+0xd0>)
    4b96:	21fd      	movs	r1, #253	; 0xfd
    4b98:	f001 ff50 	bl	6a3c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4b9c:	4c1e      	ldr	r4, [pc, #120]	; (4c18 <k_sched_lock+0xd8>)
    4b9e:	68a2      	ldr	r2, [r4, #8]
    4ba0:	7bd2      	ldrb	r2, [r2, #15]
    4ba2:	2a01      	cmp	r2, #1
    4ba4:	d10c      	bne.n	4bc0 <k_sched_lock+0x80>
    4ba6:	491d      	ldr	r1, [pc, #116]	; (4c1c <k_sched_lock+0xdc>)
    4ba8:	4a19      	ldr	r2, [pc, #100]	; (4c10 <k_sched_lock+0xd0>)
    4baa:	4816      	ldr	r0, [pc, #88]	; (4c04 <k_sched_lock+0xc4>)
    4bac:	23fe      	movs	r3, #254	; 0xfe
    4bae:	f002 f819 	bl	6be4 <printk>
    4bb2:	4818      	ldr	r0, [pc, #96]	; (4c14 <k_sched_lock+0xd4>)
    4bb4:	f002 f816 	bl	6be4 <printk>
    4bb8:	4815      	ldr	r0, [pc, #84]	; (4c10 <k_sched_lock+0xd0>)
    4bba:	21fe      	movs	r1, #254	; 0xfe
    4bbc:	f001 ff3e 	bl	6a3c <assert_post_action>
	--_current->base.sched_locked;
    4bc0:	68a2      	ldr	r2, [r4, #8]
    4bc2:	7bd3      	ldrb	r3, [r2, #15]
    4bc4:	3b01      	subs	r3, #1
    4bc6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bc8:	480b      	ldr	r0, [pc, #44]	; (4bf8 <k_sched_lock+0xb8>)
    4bca:	f001 f9e5 	bl	5f98 <z_spin_unlock_valid>
    4bce:	b968      	cbnz	r0, 4bec <k_sched_lock+0xac>
    4bd0:	4a0a      	ldr	r2, [pc, #40]	; (4bfc <k_sched_lock+0xbc>)
    4bd2:	4913      	ldr	r1, [pc, #76]	; (4c20 <k_sched_lock+0xe0>)
    4bd4:	480b      	ldr	r0, [pc, #44]	; (4c04 <k_sched_lock+0xc4>)
    4bd6:	23ac      	movs	r3, #172	; 0xac
    4bd8:	f002 f804 	bl	6be4 <printk>
    4bdc:	4906      	ldr	r1, [pc, #24]	; (4bf8 <k_sched_lock+0xb8>)
    4bde:	4811      	ldr	r0, [pc, #68]	; (4c24 <k_sched_lock+0xe4>)
    4be0:	f002 f800 	bl	6be4 <printk>
    4be4:	4805      	ldr	r0, [pc, #20]	; (4bfc <k_sched_lock+0xbc>)
    4be6:	21ac      	movs	r1, #172	; 0xac
    4be8:	f001 ff28 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    4bec:	f385 8811 	msr	BASEPRI, r5
    4bf0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4bf4:	bd38      	pop	{r3, r4, r5, pc}
    4bf6:	bf00      	nop
    4bf8:	20000b3c 	.word	0x20000b3c
    4bfc:	000078b0 	.word	0x000078b0
    4c00:	00007902 	.word	0x00007902
    4c04:	0000779d 	.word	0x0000779d
    4c08:	00007917 	.word	0x00007917
    4c0c:	0000807f 	.word	0x0000807f
    4c10:	000080cd 	.word	0x000080cd
    4c14:	000080f8 	.word	0x000080f8
    4c18:	20000b0c 	.word	0x20000b0c
    4c1c:	000080fb 	.word	0x000080fb
    4c20:	000078d6 	.word	0x000078d6
    4c24:	000078ed 	.word	0x000078ed

00004c28 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4c28:	4b0c      	ldr	r3, [pc, #48]	; (4c5c <z_priq_dumb_remove+0x34>)
    4c2a:	4299      	cmp	r1, r3
{
    4c2c:	b510      	push	{r4, lr}
    4c2e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4c30:	d10b      	bne.n	4c4a <z_priq_dumb_remove+0x22>
    4c32:	490b      	ldr	r1, [pc, #44]	; (4c60 <z_priq_dumb_remove+0x38>)
    4c34:	480b      	ldr	r0, [pc, #44]	; (4c64 <z_priq_dumb_remove+0x3c>)
    4c36:	4a0c      	ldr	r2, [pc, #48]	; (4c68 <z_priq_dumb_remove+0x40>)
    4c38:	f240 33e7 	movw	r3, #999	; 0x3e7
    4c3c:	f001 ffd2 	bl	6be4 <printk>
    4c40:	4809      	ldr	r0, [pc, #36]	; (4c68 <z_priq_dumb_remove+0x40>)
    4c42:	f240 31e7 	movw	r1, #999	; 0x3e7
    4c46:	f001 fef9 	bl	6a3c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4c4a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    4c4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4c50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4c52:	2300      	movs	r3, #0
	node->prev = NULL;
    4c54:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4c58:	bd10      	pop	{r4, pc}
    4c5a:	bf00      	nop
    4c5c:	20000348 	.word	0x20000348
    4c60:	0000814e 	.word	0x0000814e
    4c64:	0000779d 	.word	0x0000779d
    4c68:	0000812c 	.word	0x0000812c

00004c6c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4c6c:	6883      	ldr	r3, [r0, #8]
{
    4c6e:	b510      	push	{r4, lr}
    4c70:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    4c72:	b95b      	cbnz	r3, 4c8c <unpend_thread_no_timeout+0x20>
    4c74:	490b      	ldr	r1, [pc, #44]	; (4ca4 <unpend_thread_no_timeout+0x38>)
    4c76:	480c      	ldr	r0, [pc, #48]	; (4ca8 <unpend_thread_no_timeout+0x3c>)
    4c78:	4a0c      	ldr	r2, [pc, #48]	; (4cac <unpend_thread_no_timeout+0x40>)
    4c7a:	f240 2383 	movw	r3, #643	; 0x283
    4c7e:	f001 ffb1 	bl	6be4 <printk>
    4c82:	480a      	ldr	r0, [pc, #40]	; (4cac <unpend_thread_no_timeout+0x40>)
    4c84:	f240 2183 	movw	r1, #643	; 0x283
    4c88:	f001 fed8 	bl	6a3c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4c8c:	68a0      	ldr	r0, [r4, #8]
    4c8e:	4621      	mov	r1, r4
    4c90:	f7ff ffca 	bl	4c28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4c94:	7b63      	ldrb	r3, [r4, #13]
    4c96:	f023 0302 	bic.w	r3, r3, #2
    4c9a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4c9c:	2300      	movs	r3, #0
    4c9e:	60a3      	str	r3, [r4, #8]
}
    4ca0:	bd10      	pop	{r4, pc}
    4ca2:	bf00      	nop
    4ca4:	0000816f 	.word	0x0000816f
    4ca8:	0000779d 	.word	0x0000779d
    4cac:	0000812c 	.word	0x0000812c

00004cb0 <update_cache>:
{
    4cb0:	b538      	push	{r3, r4, r5, lr}
    4cb2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    4cb4:	4814      	ldr	r0, [pc, #80]	; (4d08 <update_cache+0x58>)
    4cb6:	4d15      	ldr	r5, [pc, #84]	; (4d0c <update_cache+0x5c>)
    4cb8:	f002 fa01 	bl	70be <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4cbc:	4604      	mov	r4, r0
    4cbe:	b900      	cbnz	r0, 4cc2 <update_cache+0x12>
    4cc0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    4cc2:	b9ca      	cbnz	r2, 4cf8 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    4cc4:	68ab      	ldr	r3, [r5, #8]
    4cc6:	b963      	cbnz	r3, 4ce2 <update_cache+0x32>
    4cc8:	4911      	ldr	r1, [pc, #68]	; (4d10 <update_cache+0x60>)
    4cca:	4a12      	ldr	r2, [pc, #72]	; (4d14 <update_cache+0x64>)
    4ccc:	4812      	ldr	r0, [pc, #72]	; (4d18 <update_cache+0x68>)
    4cce:	2389      	movs	r3, #137	; 0x89
    4cd0:	f001 ff88 	bl	6be4 <printk>
    4cd4:	4811      	ldr	r0, [pc, #68]	; (4d1c <update_cache+0x6c>)
    4cd6:	f001 ff85 	bl	6be4 <printk>
    4cda:	480e      	ldr	r0, [pc, #56]	; (4d14 <update_cache+0x64>)
    4cdc:	2189      	movs	r1, #137	; 0x89
    4cde:	f001 fead 	bl	6a3c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    4ce2:	68ab      	ldr	r3, [r5, #8]
    4ce4:	7b5a      	ldrb	r2, [r3, #13]
    4ce6:	06d2      	lsls	r2, r2, #27
    4ce8:	d106      	bne.n	4cf8 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4cea:	69a2      	ldr	r2, [r4, #24]
    4cec:	b922      	cbnz	r2, 4cf8 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    4cee:	89da      	ldrh	r2, [r3, #14]
    4cf0:	2a7f      	cmp	r2, #127	; 0x7f
    4cf2:	d901      	bls.n	4cf8 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    4cf4:	61eb      	str	r3, [r5, #28]
}
    4cf6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4cf8:	68ab      	ldr	r3, [r5, #8]
    4cfa:	42a3      	cmp	r3, r4
    4cfc:	d001      	beq.n	4d02 <update_cache+0x52>
			z_reset_time_slice();
    4cfe:	f7ff fe5f 	bl	49c0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4d02:	61ec      	str	r4, [r5, #28]
}
    4d04:	e7f7      	b.n	4cf6 <update_cache+0x46>
    4d06:	bf00      	nop
    4d08:	20000b2c 	.word	0x20000b2c
    4d0c:	20000b0c 	.word	0x20000b0c
    4d10:	00008186 	.word	0x00008186
    4d14:	0000812c 	.word	0x0000812c
    4d18:	0000779d 	.word	0x0000779d
    4d1c:	000080f8 	.word	0x000080f8

00004d20 <move_thread_to_end_of_prio_q>:
{
    4d20:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    4d22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4d26:	7b43      	ldrb	r3, [r0, #13]
    4d28:	2a00      	cmp	r2, #0
{
    4d2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4d2c:	da06      	bge.n	4d3c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d32:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4d34:	4601      	mov	r1, r0
    4d36:	481f      	ldr	r0, [pc, #124]	; (4db4 <move_thread_to_end_of_prio_q+0x94>)
    4d38:	f7ff ff76 	bl	4c28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4d3c:	7b63      	ldrb	r3, [r4, #13]
    4d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d42:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4d44:	4b1c      	ldr	r3, [pc, #112]	; (4db8 <move_thread_to_end_of_prio_q+0x98>)
    4d46:	429c      	cmp	r4, r3
    4d48:	d109      	bne.n	4d5e <move_thread_to_end_of_prio_q+0x3e>
    4d4a:	491c      	ldr	r1, [pc, #112]	; (4dbc <move_thread_to_end_of_prio_q+0x9c>)
    4d4c:	481c      	ldr	r0, [pc, #112]	; (4dc0 <move_thread_to_end_of_prio_q+0xa0>)
    4d4e:	4a1d      	ldr	r2, [pc, #116]	; (4dc4 <move_thread_to_end_of_prio_q+0xa4>)
    4d50:	23ba      	movs	r3, #186	; 0xba
    4d52:	f001 ff47 	bl	6be4 <printk>
    4d56:	481b      	ldr	r0, [pc, #108]	; (4dc4 <move_thread_to_end_of_prio_q+0xa4>)
    4d58:	21ba      	movs	r1, #186	; 0xba
    4d5a:	f001 fe6f 	bl	6a3c <assert_post_action>
	return list->head == list;
    4d5e:	4a1a      	ldr	r2, [pc, #104]	; (4dc8 <move_thread_to_end_of_prio_q+0xa8>)
    4d60:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d62:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    4d64:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d68:	428b      	cmp	r3, r1
    4d6a:	bf08      	it	eq
    4d6c:	2300      	moveq	r3, #0
    4d6e:	2b00      	cmp	r3, #0
    4d70:	bf38      	it	cc
    4d72:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d74:	b1cb      	cbz	r3, 4daa <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    4d76:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4d7a:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4d7e:	4286      	cmp	r6, r0
    4d80:	d00f      	beq.n	4da2 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    4d82:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d84:	2800      	cmp	r0, #0
    4d86:	dd0c      	ble.n	4da2 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    4d88:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4d8a:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4d8e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4d90:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4d92:	6890      	ldr	r0, [r2, #8]
    4d94:	1b03      	subs	r3, r0, r4
    4d96:	4258      	negs	r0, r3
}
    4d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4d9c:	4158      	adcs	r0, r3
    4d9e:	f7ff bf87 	b.w	4cb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4da2:	42ab      	cmp	r3, r5
    4da4:	d001      	beq.n	4daa <move_thread_to_end_of_prio_q+0x8a>
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	e7e4      	b.n	4d74 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    4daa:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4dae:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4db0:	6254      	str	r4, [r2, #36]	; 0x24
}
    4db2:	e7ee      	b.n	4d92 <move_thread_to_end_of_prio_q+0x72>
    4db4:	20000b2c 	.word	0x20000b2c
    4db8:	20000348 	.word	0x20000348
    4dbc:	0000814e 	.word	0x0000814e
    4dc0:	0000779d 	.word	0x0000779d
    4dc4:	0000812c 	.word	0x0000812c
    4dc8:	20000b0c 	.word	0x20000b0c

00004dcc <z_time_slice>:
{
    4dcc:	b570      	push	{r4, r5, r6, lr}
    4dce:	4604      	mov	r4, r0
	__asm__ volatile(
    4dd0:	f04f 0320 	mov.w	r3, #32
    4dd4:	f3ef 8511 	mrs	r5, BASEPRI
    4dd8:	f383 8812 	msr	BASEPRI_MAX, r3
    4ddc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4de0:	482a      	ldr	r0, [pc, #168]	; (4e8c <z_time_slice+0xc0>)
    4de2:	f001 f8cb 	bl	5f7c <z_spin_lock_valid>
    4de6:	b968      	cbnz	r0, 4e04 <z_time_slice+0x38>
    4de8:	4a29      	ldr	r2, [pc, #164]	; (4e90 <z_time_slice+0xc4>)
    4dea:	492a      	ldr	r1, [pc, #168]	; (4e94 <z_time_slice+0xc8>)
    4dec:	482a      	ldr	r0, [pc, #168]	; (4e98 <z_time_slice+0xcc>)
    4dee:	2381      	movs	r3, #129	; 0x81
    4df0:	f001 fef8 	bl	6be4 <printk>
    4df4:	4925      	ldr	r1, [pc, #148]	; (4e8c <z_time_slice+0xc0>)
    4df6:	4829      	ldr	r0, [pc, #164]	; (4e9c <z_time_slice+0xd0>)
    4df8:	f001 fef4 	bl	6be4 <printk>
    4dfc:	4824      	ldr	r0, [pc, #144]	; (4e90 <z_time_slice+0xc4>)
    4dfe:	2181      	movs	r1, #129	; 0x81
    4e00:	f001 fe1c 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    4e04:	4821      	ldr	r0, [pc, #132]	; (4e8c <z_time_slice+0xc0>)
    4e06:	f001 f8d7 	bl	5fb8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4e0a:	4b25      	ldr	r3, [pc, #148]	; (4ea0 <z_time_slice+0xd4>)
    4e0c:	4a25      	ldr	r2, [pc, #148]	; (4ea4 <z_time_slice+0xd8>)
    4e0e:	6898      	ldr	r0, [r3, #8]
    4e10:	6811      	ldr	r1, [r2, #0]
    4e12:	4288      	cmp	r0, r1
    4e14:	4619      	mov	r1, r3
    4e16:	d118      	bne.n	4e4a <z_time_slice+0x7e>
			z_reset_time_slice();
    4e18:	f7ff fdd2 	bl	49c0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e1c:	481b      	ldr	r0, [pc, #108]	; (4e8c <z_time_slice+0xc0>)
    4e1e:	f001 f8bb 	bl	5f98 <z_spin_unlock_valid>
    4e22:	b968      	cbnz	r0, 4e40 <z_time_slice+0x74>
    4e24:	4a1a      	ldr	r2, [pc, #104]	; (4e90 <z_time_slice+0xc4>)
    4e26:	4920      	ldr	r1, [pc, #128]	; (4ea8 <z_time_slice+0xdc>)
    4e28:	481b      	ldr	r0, [pc, #108]	; (4e98 <z_time_slice+0xcc>)
    4e2a:	23ac      	movs	r3, #172	; 0xac
    4e2c:	f001 feda 	bl	6be4 <printk>
    4e30:	4916      	ldr	r1, [pc, #88]	; (4e8c <z_time_slice+0xc0>)
    4e32:	481e      	ldr	r0, [pc, #120]	; (4eac <z_time_slice+0xe0>)
    4e34:	f001 fed6 	bl	6be4 <printk>
    4e38:	4815      	ldr	r0, [pc, #84]	; (4e90 <z_time_slice+0xc4>)
    4e3a:	21ac      	movs	r1, #172	; 0xac
    4e3c:	f001 fdfe 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    4e40:	f385 8811 	msr	BASEPRI, r5
    4e44:	f3bf 8f6f 	isb	sy
}
    4e48:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4e4a:	2600      	movs	r6, #0
    4e4c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4e4e:	4a18      	ldr	r2, [pc, #96]	; (4eb0 <z_time_slice+0xe4>)
    4e50:	6812      	ldr	r2, [r2, #0]
    4e52:	b1ba      	cbz	r2, 4e84 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4e54:	89c2      	ldrh	r2, [r0, #14]
    4e56:	2a7f      	cmp	r2, #127	; 0x7f
    4e58:	d814      	bhi.n	4e84 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    4e5a:	7b42      	ldrb	r2, [r0, #13]
    4e5c:	06d2      	lsls	r2, r2, #27
    4e5e:	d111      	bne.n	4e84 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4e60:	4a14      	ldr	r2, [pc, #80]	; (4eb4 <z_time_slice+0xe8>)
    4e62:	f990 600e 	ldrsb.w	r6, [r0, #14]
    4e66:	6812      	ldr	r2, [r2, #0]
    4e68:	4296      	cmp	r6, r2
    4e6a:	db0b      	blt.n	4e84 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4e6c:	4a12      	ldr	r2, [pc, #72]	; (4eb8 <z_time_slice+0xec>)
    4e6e:	4290      	cmp	r0, r2
    4e70:	d008      	beq.n	4e84 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    4e72:	691a      	ldr	r2, [r3, #16]
    4e74:	42a2      	cmp	r2, r4
    4e76:	dc02      	bgt.n	4e7e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    4e78:	f7ff ff52 	bl	4d20 <move_thread_to_end_of_prio_q>
    4e7c:	e7cc      	b.n	4e18 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    4e7e:	1b12      	subs	r2, r2, r4
    4e80:	611a      	str	r2, [r3, #16]
    4e82:	e7cb      	b.n	4e1c <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    4e84:	2300      	movs	r3, #0
    4e86:	610b      	str	r3, [r1, #16]
    4e88:	e7c8      	b.n	4e1c <z_time_slice+0x50>
    4e8a:	bf00      	nop
    4e8c:	20000b3c 	.word	0x20000b3c
    4e90:	000078b0 	.word	0x000078b0
    4e94:	00007902 	.word	0x00007902
    4e98:	0000779d 	.word	0x0000779d
    4e9c:	00007917 	.word	0x00007917
    4ea0:	20000b0c 	.word	0x20000b0c
    4ea4:	20000b38 	.word	0x20000b38
    4ea8:	000078d6 	.word	0x000078d6
    4eac:	000078ed 	.word	0x000078ed
    4eb0:	20000b44 	.word	0x20000b44
    4eb4:	20000b40 	.word	0x20000b40
    4eb8:	20000348 	.word	0x20000348

00004ebc <ready_thread>:
{
    4ebc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4ebe:	f990 200d 	ldrsb.w	r2, [r0, #13]
    4ec2:	7b43      	ldrb	r3, [r0, #13]
    4ec4:	2a00      	cmp	r2, #0
{
    4ec6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4ec8:	db3e      	blt.n	4f48 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4eca:	06da      	lsls	r2, r3, #27
    4ecc:	d13c      	bne.n	4f48 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    4ece:	6985      	ldr	r5, [r0, #24]
    4ed0:	2d00      	cmp	r5, #0
    4ed2:	d139      	bne.n	4f48 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    4ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4ed8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4eda:	4b1c      	ldr	r3, [pc, #112]	; (4f4c <ready_thread+0x90>)
    4edc:	4298      	cmp	r0, r3
    4ede:	d109      	bne.n	4ef4 <ready_thread+0x38>
    4ee0:	491b      	ldr	r1, [pc, #108]	; (4f50 <ready_thread+0x94>)
    4ee2:	481c      	ldr	r0, [pc, #112]	; (4f54 <ready_thread+0x98>)
    4ee4:	4a1c      	ldr	r2, [pc, #112]	; (4f58 <ready_thread+0x9c>)
    4ee6:	23ba      	movs	r3, #186	; 0xba
    4ee8:	f001 fe7c 	bl	6be4 <printk>
    4eec:	481a      	ldr	r0, [pc, #104]	; (4f58 <ready_thread+0x9c>)
    4eee:	21ba      	movs	r1, #186	; 0xba
    4ef0:	f001 fda4 	bl	6a3c <assert_post_action>
	return list->head == list;
    4ef4:	4919      	ldr	r1, [pc, #100]	; (4f5c <ready_thread+0xa0>)
    4ef6:	460b      	mov	r3, r1
    4ef8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4efc:	4298      	cmp	r0, r3
    4efe:	bf18      	it	ne
    4f00:	4605      	movne	r5, r0
    4f02:	2d00      	cmp	r5, #0
    4f04:	461a      	mov	r2, r3
    4f06:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4f08:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    4f0a:	bf38      	it	cc
    4f0c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4f0e:	b1b3      	cbz	r3, 4f3e <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    4f10:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4f14:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4f18:	4286      	cmp	r6, r0
    4f1a:	d00c      	beq.n	4f36 <ready_thread+0x7a>
		return b2 - b1;
    4f1c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4f1e:	2800      	cmp	r0, #0
    4f20:	dd09      	ble.n	4f36 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    4f22:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4f24:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4f28:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4f2a:	605c      	str	r4, [r3, #4]
}
    4f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4f30:	2000      	movs	r0, #0
    4f32:	f7ff bebd 	b.w	4cb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4f36:	42ab      	cmp	r3, r5
    4f38:	d001      	beq.n	4f3e <ready_thread+0x82>
    4f3a:	681b      	ldr	r3, [r3, #0]
    4f3c:	e7e7      	b.n	4f0e <ready_thread+0x52>
	node->prev = tail;
    4f3e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4f42:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4f44:	624c      	str	r4, [r1, #36]	; 0x24
}
    4f46:	e7f1      	b.n	4f2c <ready_thread+0x70>
}
    4f48:	bd70      	pop	{r4, r5, r6, pc}
    4f4a:	bf00      	nop
    4f4c:	20000348 	.word	0x20000348
    4f50:	0000814e 	.word	0x0000814e
    4f54:	0000779d 	.word	0x0000779d
    4f58:	0000812c 	.word	0x0000812c
    4f5c:	20000b0c 	.word	0x20000b0c

00004f60 <z_ready_thread>:
{
    4f60:	b538      	push	{r3, r4, r5, lr}
    4f62:	4604      	mov	r4, r0
	__asm__ volatile(
    4f64:	f04f 0320 	mov.w	r3, #32
    4f68:	f3ef 8511 	mrs	r5, BASEPRI
    4f6c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f74:	4817      	ldr	r0, [pc, #92]	; (4fd4 <z_ready_thread+0x74>)
    4f76:	f001 f801 	bl	5f7c <z_spin_lock_valid>
    4f7a:	b968      	cbnz	r0, 4f98 <z_ready_thread+0x38>
    4f7c:	4a16      	ldr	r2, [pc, #88]	; (4fd8 <z_ready_thread+0x78>)
    4f7e:	4917      	ldr	r1, [pc, #92]	; (4fdc <z_ready_thread+0x7c>)
    4f80:	4817      	ldr	r0, [pc, #92]	; (4fe0 <z_ready_thread+0x80>)
    4f82:	2381      	movs	r3, #129	; 0x81
    4f84:	f001 fe2e 	bl	6be4 <printk>
    4f88:	4912      	ldr	r1, [pc, #72]	; (4fd4 <z_ready_thread+0x74>)
    4f8a:	4816      	ldr	r0, [pc, #88]	; (4fe4 <z_ready_thread+0x84>)
    4f8c:	f001 fe2a 	bl	6be4 <printk>
    4f90:	4811      	ldr	r0, [pc, #68]	; (4fd8 <z_ready_thread+0x78>)
    4f92:	2181      	movs	r1, #129	; 0x81
    4f94:	f001 fd52 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    4f98:	480e      	ldr	r0, [pc, #56]	; (4fd4 <z_ready_thread+0x74>)
    4f9a:	f001 f80d 	bl	5fb8 <z_spin_lock_set_owner>
			ready_thread(thread);
    4f9e:	4620      	mov	r0, r4
    4fa0:	f7ff ff8c 	bl	4ebc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fa4:	480b      	ldr	r0, [pc, #44]	; (4fd4 <z_ready_thread+0x74>)
    4fa6:	f000 fff7 	bl	5f98 <z_spin_unlock_valid>
    4faa:	b968      	cbnz	r0, 4fc8 <z_ready_thread+0x68>
    4fac:	4a0a      	ldr	r2, [pc, #40]	; (4fd8 <z_ready_thread+0x78>)
    4fae:	490e      	ldr	r1, [pc, #56]	; (4fe8 <z_ready_thread+0x88>)
    4fb0:	480b      	ldr	r0, [pc, #44]	; (4fe0 <z_ready_thread+0x80>)
    4fb2:	23ac      	movs	r3, #172	; 0xac
    4fb4:	f001 fe16 	bl	6be4 <printk>
    4fb8:	4906      	ldr	r1, [pc, #24]	; (4fd4 <z_ready_thread+0x74>)
    4fba:	480c      	ldr	r0, [pc, #48]	; (4fec <z_ready_thread+0x8c>)
    4fbc:	f001 fe12 	bl	6be4 <printk>
    4fc0:	4805      	ldr	r0, [pc, #20]	; (4fd8 <z_ready_thread+0x78>)
    4fc2:	21ac      	movs	r1, #172	; 0xac
    4fc4:	f001 fd3a 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    4fc8:	f385 8811 	msr	BASEPRI, r5
    4fcc:	f3bf 8f6f 	isb	sy
}
    4fd0:	bd38      	pop	{r3, r4, r5, pc}
    4fd2:	bf00      	nop
    4fd4:	20000b3c 	.word	0x20000b3c
    4fd8:	000078b0 	.word	0x000078b0
    4fdc:	00007902 	.word	0x00007902
    4fe0:	0000779d 	.word	0x0000779d
    4fe4:	00007917 	.word	0x00007917
    4fe8:	000078d6 	.word	0x000078d6
    4fec:	000078ed 	.word	0x000078ed

00004ff0 <z_sched_start>:
{
    4ff0:	b538      	push	{r3, r4, r5, lr}
    4ff2:	4604      	mov	r4, r0
	__asm__ volatile(
    4ff4:	f04f 0320 	mov.w	r3, #32
    4ff8:	f3ef 8511 	mrs	r5, BASEPRI
    4ffc:	f383 8812 	msr	BASEPRI_MAX, r3
    5000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5004:	481d      	ldr	r0, [pc, #116]	; (507c <z_sched_start+0x8c>)
    5006:	f000 ffb9 	bl	5f7c <z_spin_lock_valid>
    500a:	b968      	cbnz	r0, 5028 <z_sched_start+0x38>
    500c:	4a1c      	ldr	r2, [pc, #112]	; (5080 <z_sched_start+0x90>)
    500e:	491d      	ldr	r1, [pc, #116]	; (5084 <z_sched_start+0x94>)
    5010:	481d      	ldr	r0, [pc, #116]	; (5088 <z_sched_start+0x98>)
    5012:	2381      	movs	r3, #129	; 0x81
    5014:	f001 fde6 	bl	6be4 <printk>
    5018:	4918      	ldr	r1, [pc, #96]	; (507c <z_sched_start+0x8c>)
    501a:	481c      	ldr	r0, [pc, #112]	; (508c <z_sched_start+0x9c>)
    501c:	f001 fde2 	bl	6be4 <printk>
    5020:	4817      	ldr	r0, [pc, #92]	; (5080 <z_sched_start+0x90>)
    5022:	2181      	movs	r1, #129	; 0x81
    5024:	f001 fd0a 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5028:	4814      	ldr	r0, [pc, #80]	; (507c <z_sched_start+0x8c>)
    502a:	f000 ffc5 	bl	5fb8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    502e:	7b63      	ldrb	r3, [r4, #13]
    5030:	075a      	lsls	r2, r3, #29
    5032:	d416      	bmi.n	5062 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5034:	4811      	ldr	r0, [pc, #68]	; (507c <z_sched_start+0x8c>)
    5036:	f000 ffaf 	bl	5f98 <z_spin_unlock_valid>
    503a:	b968      	cbnz	r0, 5058 <z_sched_start+0x68>
    503c:	4a10      	ldr	r2, [pc, #64]	; (5080 <z_sched_start+0x90>)
    503e:	4914      	ldr	r1, [pc, #80]	; (5090 <z_sched_start+0xa0>)
    5040:	4811      	ldr	r0, [pc, #68]	; (5088 <z_sched_start+0x98>)
    5042:	23ac      	movs	r3, #172	; 0xac
    5044:	f001 fdce 	bl	6be4 <printk>
    5048:	490c      	ldr	r1, [pc, #48]	; (507c <z_sched_start+0x8c>)
    504a:	4812      	ldr	r0, [pc, #72]	; (5094 <z_sched_start+0xa4>)
    504c:	f001 fdca 	bl	6be4 <printk>
    5050:	480b      	ldr	r0, [pc, #44]	; (5080 <z_sched_start+0x90>)
    5052:	21ac      	movs	r1, #172	; 0xac
    5054:	f001 fcf2 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5058:	f385 8811 	msr	BASEPRI, r5
    505c:	f3bf 8f6f 	isb	sy
}
    5060:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5062:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5066:	4620      	mov	r0, r4
    5068:	7363      	strb	r3, [r4, #13]
    506a:	f7ff ff27 	bl	4ebc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    506e:	4629      	mov	r1, r5
    5070:	4802      	ldr	r0, [pc, #8]	; (507c <z_sched_start+0x8c>)
}
    5072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5076:	f7ff bd1f 	b.w	4ab8 <z_reschedule>
    507a:	bf00      	nop
    507c:	20000b3c 	.word	0x20000b3c
    5080:	000078b0 	.word	0x000078b0
    5084:	00007902 	.word	0x00007902
    5088:	0000779d 	.word	0x0000779d
    508c:	00007917 	.word	0x00007917
    5090:	000078d6 	.word	0x000078d6
    5094:	000078ed 	.word	0x000078ed

00005098 <z_thread_timeout>:
{
    5098:	b570      	push	{r4, r5, r6, lr}
    509a:	4604      	mov	r4, r0
	__asm__ volatile(
    509c:	f04f 0320 	mov.w	r3, #32
    50a0:	f3ef 8611 	mrs	r6, BASEPRI
    50a4:	f383 8812 	msr	BASEPRI_MAX, r3
    50a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50ac:	4820      	ldr	r0, [pc, #128]	; (5130 <z_thread_timeout+0x98>)
    50ae:	f000 ff65 	bl	5f7c <z_spin_lock_valid>
    50b2:	b968      	cbnz	r0, 50d0 <z_thread_timeout+0x38>
    50b4:	4a1f      	ldr	r2, [pc, #124]	; (5134 <z_thread_timeout+0x9c>)
    50b6:	4920      	ldr	r1, [pc, #128]	; (5138 <z_thread_timeout+0xa0>)
    50b8:	4820      	ldr	r0, [pc, #128]	; (513c <z_thread_timeout+0xa4>)
    50ba:	2381      	movs	r3, #129	; 0x81
    50bc:	f001 fd92 	bl	6be4 <printk>
    50c0:	491b      	ldr	r1, [pc, #108]	; (5130 <z_thread_timeout+0x98>)
    50c2:	481f      	ldr	r0, [pc, #124]	; (5140 <z_thread_timeout+0xa8>)
    50c4:	f001 fd8e 	bl	6be4 <printk>
    50c8:	481a      	ldr	r0, [pc, #104]	; (5134 <z_thread_timeout+0x9c>)
    50ca:	2181      	movs	r1, #129	; 0x81
    50cc:	f001 fcb6 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    50d0:	4817      	ldr	r0, [pc, #92]	; (5130 <z_thread_timeout+0x98>)
    50d2:	f000 ff71 	bl	5fb8 <z_spin_lock_set_owner>
		if (!killed) {
    50d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    50da:	f013 0f28 	tst.w	r3, #40	; 0x28
    50de:	d110      	bne.n	5102 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    50e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    50e4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    50e8:	b113      	cbz	r3, 50f0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    50ea:	4628      	mov	r0, r5
    50ec:	f7ff fdbe 	bl	4c6c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    50f0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    50f4:	f023 0314 	bic.w	r3, r3, #20
    50f8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    50fc:	4628      	mov	r0, r5
    50fe:	f7ff fedd 	bl	4ebc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5102:	480b      	ldr	r0, [pc, #44]	; (5130 <z_thread_timeout+0x98>)
    5104:	f000 ff48 	bl	5f98 <z_spin_unlock_valid>
    5108:	b968      	cbnz	r0, 5126 <z_thread_timeout+0x8e>
    510a:	4a0a      	ldr	r2, [pc, #40]	; (5134 <z_thread_timeout+0x9c>)
    510c:	490d      	ldr	r1, [pc, #52]	; (5144 <z_thread_timeout+0xac>)
    510e:	480b      	ldr	r0, [pc, #44]	; (513c <z_thread_timeout+0xa4>)
    5110:	23ac      	movs	r3, #172	; 0xac
    5112:	f001 fd67 	bl	6be4 <printk>
    5116:	4906      	ldr	r1, [pc, #24]	; (5130 <z_thread_timeout+0x98>)
    5118:	480b      	ldr	r0, [pc, #44]	; (5148 <z_thread_timeout+0xb0>)
    511a:	f001 fd63 	bl	6be4 <printk>
    511e:	4805      	ldr	r0, [pc, #20]	; (5134 <z_thread_timeout+0x9c>)
    5120:	21ac      	movs	r1, #172	; 0xac
    5122:	f001 fc8b 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5126:	f386 8811 	msr	BASEPRI, r6
    512a:	f3bf 8f6f 	isb	sy
}
    512e:	bd70      	pop	{r4, r5, r6, pc}
    5130:	20000b3c 	.word	0x20000b3c
    5134:	000078b0 	.word	0x000078b0
    5138:	00007902 	.word	0x00007902
    513c:	0000779d 	.word	0x0000779d
    5140:	00007917 	.word	0x00007917
    5144:	000078d6 	.word	0x000078d6
    5148:	000078ed 	.word	0x000078ed

0000514c <unready_thread>:
{
    514c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    514e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5152:	7b43      	ldrb	r3, [r0, #13]
    5154:	2a00      	cmp	r2, #0
{
    5156:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5158:	da06      	bge.n	5168 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    515a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    515e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5160:	4601      	mov	r1, r0
    5162:	4806      	ldr	r0, [pc, #24]	; (517c <unready_thread+0x30>)
    5164:	f7ff fd60 	bl	4c28 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5168:	4b05      	ldr	r3, [pc, #20]	; (5180 <unready_thread+0x34>)
    516a:	6898      	ldr	r0, [r3, #8]
    516c:	1b03      	subs	r3, r0, r4
    516e:	4258      	negs	r0, r3
}
    5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5174:	4158      	adcs	r0, r3
    5176:	f7ff bd9b 	b.w	4cb0 <update_cache>
    517a:	bf00      	nop
    517c:	20000b2c 	.word	0x20000b2c
    5180:	20000b0c 	.word	0x20000b0c

00005184 <add_to_waitq_locked>:
{
    5184:	b538      	push	{r3, r4, r5, lr}
    5186:	4604      	mov	r4, r0
    5188:	460d      	mov	r5, r1
	unready_thread(thread);
    518a:	f7ff ffdf 	bl	514c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    518e:	7b63      	ldrb	r3, [r4, #13]
    5190:	f043 0302 	orr.w	r3, r3, #2
    5194:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5196:	b31d      	cbz	r5, 51e0 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5198:	4b17      	ldr	r3, [pc, #92]	; (51f8 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    519a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    519c:	429c      	cmp	r4, r3
    519e:	d109      	bne.n	51b4 <add_to_waitq_locked+0x30>
    51a0:	4916      	ldr	r1, [pc, #88]	; (51fc <add_to_waitq_locked+0x78>)
    51a2:	4817      	ldr	r0, [pc, #92]	; (5200 <add_to_waitq_locked+0x7c>)
    51a4:	4a17      	ldr	r2, [pc, #92]	; (5204 <add_to_waitq_locked+0x80>)
    51a6:	23ba      	movs	r3, #186	; 0xba
    51a8:	f001 fd1c 	bl	6be4 <printk>
    51ac:	4815      	ldr	r0, [pc, #84]	; (5204 <add_to_waitq_locked+0x80>)
    51ae:	21ba      	movs	r1, #186	; 0xba
    51b0:	f001 fc44 	bl	6a3c <assert_post_action>
	return list->head == list;
    51b4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51b6:	429d      	cmp	r5, r3
    51b8:	bf08      	it	eq
    51ba:	2300      	moveq	r3, #0
    51bc:	2b00      	cmp	r3, #0
    51be:	bf38      	it	cc
    51c0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51c2:	b19b      	cbz	r3, 51ec <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    51c4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    51c8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    51cc:	4291      	cmp	r1, r2
    51ce:	d008      	beq.n	51e2 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    51d0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    51d2:	2a00      	cmp	r2, #0
    51d4:	dd05      	ble.n	51e2 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    51d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    51d8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    51dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    51de:	605c      	str	r4, [r3, #4]
}
    51e0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    51e2:	686a      	ldr	r2, [r5, #4]
    51e4:	4293      	cmp	r3, r2
    51e6:	d001      	beq.n	51ec <add_to_waitq_locked+0x68>
    51e8:	681b      	ldr	r3, [r3, #0]
    51ea:	e7ea      	b.n	51c2 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    51ec:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    51ee:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    51f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    51f4:	606c      	str	r4, [r5, #4]
    51f6:	e7f3      	b.n	51e0 <add_to_waitq_locked+0x5c>
    51f8:	20000348 	.word	0x20000348
    51fc:	0000814e 	.word	0x0000814e
    5200:	0000779d 	.word	0x0000779d
    5204:	0000812c 	.word	0x0000812c

00005208 <pend>:
{
    5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	4604      	mov	r4, r0
    520e:	460d      	mov	r5, r1
    5210:	4616      	mov	r6, r2
    5212:	461f      	mov	r7, r3
	__asm__ volatile(
    5214:	f04f 0320 	mov.w	r3, #32
    5218:	f3ef 8811 	mrs	r8, BASEPRI
    521c:	f383 8812 	msr	BASEPRI_MAX, r3
    5220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5224:	481f      	ldr	r0, [pc, #124]	; (52a4 <pend+0x9c>)
    5226:	f000 fea9 	bl	5f7c <z_spin_lock_valid>
    522a:	b968      	cbnz	r0, 5248 <pend+0x40>
    522c:	4a1e      	ldr	r2, [pc, #120]	; (52a8 <pend+0xa0>)
    522e:	491f      	ldr	r1, [pc, #124]	; (52ac <pend+0xa4>)
    5230:	481f      	ldr	r0, [pc, #124]	; (52b0 <pend+0xa8>)
    5232:	2381      	movs	r3, #129	; 0x81
    5234:	f001 fcd6 	bl	6be4 <printk>
    5238:	491a      	ldr	r1, [pc, #104]	; (52a4 <pend+0x9c>)
    523a:	481e      	ldr	r0, [pc, #120]	; (52b4 <pend+0xac>)
    523c:	f001 fcd2 	bl	6be4 <printk>
    5240:	4819      	ldr	r0, [pc, #100]	; (52a8 <pend+0xa0>)
    5242:	2181      	movs	r1, #129	; 0x81
    5244:	f001 fbfa 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5248:	4816      	ldr	r0, [pc, #88]	; (52a4 <pend+0x9c>)
    524a:	f000 feb5 	bl	5fb8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    524e:	4620      	mov	r0, r4
    5250:	4629      	mov	r1, r5
    5252:	f7ff ff97 	bl	5184 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5256:	4813      	ldr	r0, [pc, #76]	; (52a4 <pend+0x9c>)
    5258:	f000 fe9e 	bl	5f98 <z_spin_unlock_valid>
    525c:	b968      	cbnz	r0, 527a <pend+0x72>
    525e:	4a12      	ldr	r2, [pc, #72]	; (52a8 <pend+0xa0>)
    5260:	4915      	ldr	r1, [pc, #84]	; (52b8 <pend+0xb0>)
    5262:	4813      	ldr	r0, [pc, #76]	; (52b0 <pend+0xa8>)
    5264:	23ac      	movs	r3, #172	; 0xac
    5266:	f001 fcbd 	bl	6be4 <printk>
    526a:	490e      	ldr	r1, [pc, #56]	; (52a4 <pend+0x9c>)
    526c:	4813      	ldr	r0, [pc, #76]	; (52bc <pend+0xb4>)
    526e:	f001 fcb9 	bl	6be4 <printk>
    5272:	480d      	ldr	r0, [pc, #52]	; (52a8 <pend+0xa0>)
    5274:	21ac      	movs	r1, #172	; 0xac
    5276:	f001 fbe1 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    527a:	f388 8811 	msr	BASEPRI, r8
    527e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5282:	1c7b      	adds	r3, r7, #1
    5284:	bf08      	it	eq
    5286:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    528a:	d008      	beq.n	529e <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    528c:	4632      	mov	r2, r6
    528e:	463b      	mov	r3, r7
    5290:	f104 0018 	add.w	r0, r4, #24
    5294:	490a      	ldr	r1, [pc, #40]	; (52c0 <pend+0xb8>)
}
    5296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    529a:	f000 bee5 	b.w	6068 <z_add_timeout>
    529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52a2:	bf00      	nop
    52a4:	20000b3c 	.word	0x20000b3c
    52a8:	000078b0 	.word	0x000078b0
    52ac:	00007902 	.word	0x00007902
    52b0:	0000779d 	.word	0x0000779d
    52b4:	00007917 	.word	0x00007917
    52b8:	000078d6 	.word	0x000078d6
    52bc:	000078ed 	.word	0x000078ed
    52c0:	00005099 	.word	0x00005099

000052c4 <z_pend_curr>:
{
    52c4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    52c6:	4b11      	ldr	r3, [pc, #68]	; (530c <z_pend_curr+0x48>)
{
    52c8:	4604      	mov	r4, r0
	pending_current = _current;
    52ca:	6898      	ldr	r0, [r3, #8]
    52cc:	4b10      	ldr	r3, [pc, #64]	; (5310 <z_pend_curr+0x4c>)
{
    52ce:	460d      	mov	r5, r1
	pending_current = _current;
    52d0:	6018      	str	r0, [r3, #0]
{
    52d2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    52d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    52d8:	f7ff ff96 	bl	5208 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52dc:	4620      	mov	r0, r4
    52de:	f000 fe5b 	bl	5f98 <z_spin_unlock_valid>
    52e2:	b968      	cbnz	r0, 5300 <z_pend_curr+0x3c>
    52e4:	4a0b      	ldr	r2, [pc, #44]	; (5314 <z_pend_curr+0x50>)
    52e6:	490c      	ldr	r1, [pc, #48]	; (5318 <z_pend_curr+0x54>)
    52e8:	480c      	ldr	r0, [pc, #48]	; (531c <z_pend_curr+0x58>)
    52ea:	23c3      	movs	r3, #195	; 0xc3
    52ec:	f001 fc7a 	bl	6be4 <printk>
    52f0:	480b      	ldr	r0, [pc, #44]	; (5320 <z_pend_curr+0x5c>)
    52f2:	4621      	mov	r1, r4
    52f4:	f001 fc76 	bl	6be4 <printk>
    52f8:	4806      	ldr	r0, [pc, #24]	; (5314 <z_pend_curr+0x50>)
    52fa:	21c3      	movs	r1, #195	; 0xc3
    52fc:	f001 fb9e 	bl	6a3c <assert_post_action>
    5300:	4628      	mov	r0, r5
}
    5302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5306:	f7fc bb9b 	b.w	1a40 <arch_swap>
    530a:	bf00      	nop
    530c:	20000b0c 	.word	0x20000b0c
    5310:	20000b38 	.word	0x20000b38
    5314:	000078b0 	.word	0x000078b0
    5318:	000078d6 	.word	0x000078d6
    531c:	0000779d 	.word	0x0000779d
    5320:	000078ed 	.word	0x000078ed

00005324 <z_set_prio>:
{
    5324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5326:	4604      	mov	r4, r0
    5328:	460e      	mov	r6, r1
	__asm__ volatile(
    532a:	f04f 0320 	mov.w	r3, #32
    532e:	f3ef 8711 	mrs	r7, BASEPRI
    5332:	f383 8812 	msr	BASEPRI_MAX, r3
    5336:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    533a:	483c      	ldr	r0, [pc, #240]	; (542c <z_set_prio+0x108>)
    533c:	f000 fe1e 	bl	5f7c <z_spin_lock_valid>
    5340:	b968      	cbnz	r0, 535e <z_set_prio+0x3a>
    5342:	4a3b      	ldr	r2, [pc, #236]	; (5430 <z_set_prio+0x10c>)
    5344:	493b      	ldr	r1, [pc, #236]	; (5434 <z_set_prio+0x110>)
    5346:	483c      	ldr	r0, [pc, #240]	; (5438 <z_set_prio+0x114>)
    5348:	2381      	movs	r3, #129	; 0x81
    534a:	f001 fc4b 	bl	6be4 <printk>
    534e:	4937      	ldr	r1, [pc, #220]	; (542c <z_set_prio+0x108>)
    5350:	483a      	ldr	r0, [pc, #232]	; (543c <z_set_prio+0x118>)
    5352:	f001 fc47 	bl	6be4 <printk>
    5356:	4836      	ldr	r0, [pc, #216]	; (5430 <z_set_prio+0x10c>)
    5358:	2181      	movs	r1, #129	; 0x81
    535a:	f001 fb6f 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    535e:	4833      	ldr	r0, [pc, #204]	; (542c <z_set_prio+0x108>)
    5360:	f000 fe2a 	bl	5fb8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5364:	7b63      	ldrb	r3, [r4, #13]
    5366:	06da      	lsls	r2, r3, #27
    5368:	b276      	sxtb	r6, r6
    536a:	d15c      	bne.n	5426 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    536c:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    536e:	2d00      	cmp	r5, #0
    5370:	d159      	bne.n	5426 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5376:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5378:	4831      	ldr	r0, [pc, #196]	; (5440 <z_set_prio+0x11c>)
    537a:	4621      	mov	r1, r4
    537c:	f7ff fc54 	bl	4c28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5380:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5382:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5384:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5388:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    538a:	4b2e      	ldr	r3, [pc, #184]	; (5444 <z_set_prio+0x120>)
    538c:	429c      	cmp	r4, r3
    538e:	d109      	bne.n	53a4 <z_set_prio+0x80>
    5390:	492d      	ldr	r1, [pc, #180]	; (5448 <z_set_prio+0x124>)
    5392:	4829      	ldr	r0, [pc, #164]	; (5438 <z_set_prio+0x114>)
    5394:	4a2d      	ldr	r2, [pc, #180]	; (544c <z_set_prio+0x128>)
    5396:	23ba      	movs	r3, #186	; 0xba
    5398:	f001 fc24 	bl	6be4 <printk>
    539c:	482b      	ldr	r0, [pc, #172]	; (544c <z_set_prio+0x128>)
    539e:	21ba      	movs	r1, #186	; 0xba
    53a0:	f001 fb4c 	bl	6a3c <assert_post_action>
	return list->head == list;
    53a4:	492a      	ldr	r1, [pc, #168]	; (5450 <z_set_prio+0x12c>)
    53a6:	460b      	mov	r3, r1
    53a8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53ac:	4298      	cmp	r0, r3
    53ae:	bf18      	it	ne
    53b0:	4605      	movne	r5, r0
    53b2:	2d00      	cmp	r5, #0
    53b4:	461a      	mov	r2, r3
    53b6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    53b8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    53ba:	bf38      	it	cc
    53bc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53be:	b36b      	cbz	r3, 541c <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    53c0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    53c4:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    53c8:	4286      	cmp	r6, r0
    53ca:	d023      	beq.n	5414 <z_set_prio+0xf0>
		return b2 - b1;
    53cc:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    53ce:	2800      	cmp	r0, #0
    53d0:	dd20      	ble.n	5414 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    53d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    53d4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    53d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    53da:	605c      	str	r4, [r3, #4]
			update_cache(1);
    53dc:	2001      	movs	r0, #1
    53de:	f7ff fc67 	bl	4cb0 <update_cache>
    53e2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53e4:	4811      	ldr	r0, [pc, #68]	; (542c <z_set_prio+0x108>)
    53e6:	f000 fdd7 	bl	5f98 <z_spin_unlock_valid>
    53ea:	b968      	cbnz	r0, 5408 <z_set_prio+0xe4>
    53ec:	4a10      	ldr	r2, [pc, #64]	; (5430 <z_set_prio+0x10c>)
    53ee:	4919      	ldr	r1, [pc, #100]	; (5454 <z_set_prio+0x130>)
    53f0:	4811      	ldr	r0, [pc, #68]	; (5438 <z_set_prio+0x114>)
    53f2:	23ac      	movs	r3, #172	; 0xac
    53f4:	f001 fbf6 	bl	6be4 <printk>
    53f8:	490c      	ldr	r1, [pc, #48]	; (542c <z_set_prio+0x108>)
    53fa:	4817      	ldr	r0, [pc, #92]	; (5458 <z_set_prio+0x134>)
    53fc:	f001 fbf2 	bl	6be4 <printk>
    5400:	480b      	ldr	r0, [pc, #44]	; (5430 <z_set_prio+0x10c>)
    5402:	21ac      	movs	r1, #172	; 0xac
    5404:	f001 fb1a 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5408:	f387 8811 	msr	BASEPRI, r7
    540c:	f3bf 8f6f 	isb	sy
}
    5410:	4620      	mov	r0, r4
    5412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5414:	42ab      	cmp	r3, r5
    5416:	d001      	beq.n	541c <z_set_prio+0xf8>
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	e7d0      	b.n	53be <z_set_prio+0x9a>
	node->prev = tail;
    541c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5420:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5422:	624c      	str	r4, [r1, #36]	; 0x24
}
    5424:	e7da      	b.n	53dc <z_set_prio+0xb8>
			thread->base.prio = prio;
    5426:	73a6      	strb	r6, [r4, #14]
    5428:	2400      	movs	r4, #0
    542a:	e7db      	b.n	53e4 <z_set_prio+0xc0>
    542c:	20000b3c 	.word	0x20000b3c
    5430:	000078b0 	.word	0x000078b0
    5434:	00007902 	.word	0x00007902
    5438:	0000779d 	.word	0x0000779d
    543c:	00007917 	.word	0x00007917
    5440:	20000b2c 	.word	0x20000b2c
    5444:	20000348 	.word	0x20000348
    5448:	0000814e 	.word	0x0000814e
    544c:	0000812c 	.word	0x0000812c
    5450:	20000b0c 	.word	0x20000b0c
    5454:	000078d6 	.word	0x000078d6
    5458:	000078ed 	.word	0x000078ed

0000545c <z_impl_k_thread_suspend>:
{
    545c:	b570      	push	{r4, r5, r6, lr}
    545e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5460:	3018      	adds	r0, #24
    5462:	f000 fed5 	bl	6210 <z_abort_timeout>
	__asm__ volatile(
    5466:	f04f 0320 	mov.w	r3, #32
    546a:	f3ef 8611 	mrs	r6, BASEPRI
    546e:	f383 8812 	msr	BASEPRI_MAX, r3
    5472:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5476:	4825      	ldr	r0, [pc, #148]	; (550c <z_impl_k_thread_suspend+0xb0>)
    5478:	f000 fd80 	bl	5f7c <z_spin_lock_valid>
    547c:	b968      	cbnz	r0, 549a <z_impl_k_thread_suspend+0x3e>
    547e:	4a24      	ldr	r2, [pc, #144]	; (5510 <z_impl_k_thread_suspend+0xb4>)
    5480:	4924      	ldr	r1, [pc, #144]	; (5514 <z_impl_k_thread_suspend+0xb8>)
    5482:	4825      	ldr	r0, [pc, #148]	; (5518 <z_impl_k_thread_suspend+0xbc>)
    5484:	2381      	movs	r3, #129	; 0x81
    5486:	f001 fbad 	bl	6be4 <printk>
    548a:	4920      	ldr	r1, [pc, #128]	; (550c <z_impl_k_thread_suspend+0xb0>)
    548c:	4823      	ldr	r0, [pc, #140]	; (551c <z_impl_k_thread_suspend+0xc0>)
    548e:	f001 fba9 	bl	6be4 <printk>
    5492:	481f      	ldr	r0, [pc, #124]	; (5510 <z_impl_k_thread_suspend+0xb4>)
    5494:	2181      	movs	r1, #129	; 0x81
    5496:	f001 fad1 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    549a:	481c      	ldr	r0, [pc, #112]	; (550c <z_impl_k_thread_suspend+0xb0>)
    549c:	f000 fd8c 	bl	5fb8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    54a0:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    54a4:	7b63      	ldrb	r3, [r4, #13]
    54a6:	2a00      	cmp	r2, #0
    54a8:	da06      	bge.n	54b8 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    54aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    54ae:	481c      	ldr	r0, [pc, #112]	; (5520 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    54b0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    54b2:	4621      	mov	r1, r4
    54b4:	f7ff fbb8 	bl	4c28 <z_priq_dumb_remove>
		update_cache(thread == _current);
    54b8:	4d1a      	ldr	r5, [pc, #104]	; (5524 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    54ba:	7b63      	ldrb	r3, [r4, #13]
    54bc:	68a8      	ldr	r0, [r5, #8]
    54be:	f043 0310 	orr.w	r3, r3, #16
    54c2:	7363      	strb	r3, [r4, #13]
    54c4:	1b03      	subs	r3, r0, r4
    54c6:	4258      	negs	r0, r3
    54c8:	4158      	adcs	r0, r3
    54ca:	f7ff fbf1 	bl	4cb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54ce:	480f      	ldr	r0, [pc, #60]	; (550c <z_impl_k_thread_suspend+0xb0>)
    54d0:	f000 fd62 	bl	5f98 <z_spin_unlock_valid>
    54d4:	b968      	cbnz	r0, 54f2 <z_impl_k_thread_suspend+0x96>
    54d6:	4a0e      	ldr	r2, [pc, #56]	; (5510 <z_impl_k_thread_suspend+0xb4>)
    54d8:	4913      	ldr	r1, [pc, #76]	; (5528 <z_impl_k_thread_suspend+0xcc>)
    54da:	480f      	ldr	r0, [pc, #60]	; (5518 <z_impl_k_thread_suspend+0xbc>)
    54dc:	23ac      	movs	r3, #172	; 0xac
    54de:	f001 fb81 	bl	6be4 <printk>
    54e2:	490a      	ldr	r1, [pc, #40]	; (550c <z_impl_k_thread_suspend+0xb0>)
    54e4:	4811      	ldr	r0, [pc, #68]	; (552c <z_impl_k_thread_suspend+0xd0>)
    54e6:	f001 fb7d 	bl	6be4 <printk>
    54ea:	4809      	ldr	r0, [pc, #36]	; (5510 <z_impl_k_thread_suspend+0xb4>)
    54ec:	21ac      	movs	r1, #172	; 0xac
    54ee:	f001 faa5 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    54f2:	f386 8811 	msr	BASEPRI, r6
    54f6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    54fa:	68ab      	ldr	r3, [r5, #8]
    54fc:	42a3      	cmp	r3, r4
    54fe:	d103      	bne.n	5508 <z_impl_k_thread_suspend+0xac>
}
    5500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5504:	f001 bdd1 	b.w	70aa <z_reschedule_unlocked>
}
    5508:	bd70      	pop	{r4, r5, r6, pc}
    550a:	bf00      	nop
    550c:	20000b3c 	.word	0x20000b3c
    5510:	000078b0 	.word	0x000078b0
    5514:	00007902 	.word	0x00007902
    5518:	0000779d 	.word	0x0000779d
    551c:	00007917 	.word	0x00007917
    5520:	20000b2c 	.word	0x20000b2c
    5524:	20000b0c 	.word	0x20000b0c
    5528:	000078d6 	.word	0x000078d6
    552c:	000078ed 	.word	0x000078ed

00005530 <k_sched_unlock>:
{
    5530:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5532:	f04f 0320 	mov.w	r3, #32
    5536:	f3ef 8511 	mrs	r5, BASEPRI
    553a:	f383 8812 	msr	BASEPRI_MAX, r3
    553e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5542:	482d      	ldr	r0, [pc, #180]	; (55f8 <k_sched_unlock+0xc8>)
    5544:	f000 fd1a 	bl	5f7c <z_spin_lock_valid>
    5548:	b968      	cbnz	r0, 5566 <k_sched_unlock+0x36>
    554a:	4a2c      	ldr	r2, [pc, #176]	; (55fc <k_sched_unlock+0xcc>)
    554c:	492c      	ldr	r1, [pc, #176]	; (5600 <k_sched_unlock+0xd0>)
    554e:	482d      	ldr	r0, [pc, #180]	; (5604 <k_sched_unlock+0xd4>)
    5550:	2381      	movs	r3, #129	; 0x81
    5552:	f001 fb47 	bl	6be4 <printk>
    5556:	4928      	ldr	r1, [pc, #160]	; (55f8 <k_sched_unlock+0xc8>)
    5558:	482b      	ldr	r0, [pc, #172]	; (5608 <k_sched_unlock+0xd8>)
    555a:	f001 fb43 	bl	6be4 <printk>
    555e:	4827      	ldr	r0, [pc, #156]	; (55fc <k_sched_unlock+0xcc>)
    5560:	2181      	movs	r1, #129	; 0x81
    5562:	f001 fa6b 	bl	6a3c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    5566:	4c29      	ldr	r4, [pc, #164]	; (560c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5568:	4823      	ldr	r0, [pc, #140]	; (55f8 <k_sched_unlock+0xc8>)
    556a:	f000 fd25 	bl	5fb8 <z_spin_lock_set_owner>
    556e:	68a2      	ldr	r2, [r4, #8]
    5570:	7bd2      	ldrb	r2, [r2, #15]
    5572:	b972      	cbnz	r2, 5592 <k_sched_unlock+0x62>
    5574:	4926      	ldr	r1, [pc, #152]	; (5610 <k_sched_unlock+0xe0>)
    5576:	4a27      	ldr	r2, [pc, #156]	; (5614 <k_sched_unlock+0xe4>)
    5578:	4822      	ldr	r0, [pc, #136]	; (5604 <k_sched_unlock+0xd4>)
    557a:	f240 3385 	movw	r3, #901	; 0x385
    557e:	f001 fb31 	bl	6be4 <printk>
    5582:	4825      	ldr	r0, [pc, #148]	; (5618 <k_sched_unlock+0xe8>)
    5584:	f001 fb2e 	bl	6be4 <printk>
    5588:	4822      	ldr	r0, [pc, #136]	; (5614 <k_sched_unlock+0xe4>)
    558a:	f240 3185 	movw	r1, #901	; 0x385
    558e:	f001 fa55 	bl	6a3c <assert_post_action>
    5592:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5596:	b173      	cbz	r3, 55b6 <k_sched_unlock+0x86>
    5598:	4920      	ldr	r1, [pc, #128]	; (561c <k_sched_unlock+0xec>)
    559a:	4a1e      	ldr	r2, [pc, #120]	; (5614 <k_sched_unlock+0xe4>)
    559c:	4819      	ldr	r0, [pc, #100]	; (5604 <k_sched_unlock+0xd4>)
    559e:	f240 3386 	movw	r3, #902	; 0x386
    55a2:	f001 fb1f 	bl	6be4 <printk>
    55a6:	481c      	ldr	r0, [pc, #112]	; (5618 <k_sched_unlock+0xe8>)
    55a8:	f001 fb1c 	bl	6be4 <printk>
    55ac:	4819      	ldr	r0, [pc, #100]	; (5614 <k_sched_unlock+0xe4>)
    55ae:	f240 3186 	movw	r1, #902	; 0x386
    55b2:	f001 fa43 	bl	6a3c <assert_post_action>
		++_current->base.sched_locked;
    55b6:	68a2      	ldr	r2, [r4, #8]
    55b8:	7bd3      	ldrb	r3, [r2, #15]
    55ba:	3301      	adds	r3, #1
		update_cache(0);
    55bc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    55be:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    55c0:	f7ff fb76 	bl	4cb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55c4:	480c      	ldr	r0, [pc, #48]	; (55f8 <k_sched_unlock+0xc8>)
    55c6:	f000 fce7 	bl	5f98 <z_spin_unlock_valid>
    55ca:	b968      	cbnz	r0, 55e8 <k_sched_unlock+0xb8>
    55cc:	4a0b      	ldr	r2, [pc, #44]	; (55fc <k_sched_unlock+0xcc>)
    55ce:	4914      	ldr	r1, [pc, #80]	; (5620 <k_sched_unlock+0xf0>)
    55d0:	480c      	ldr	r0, [pc, #48]	; (5604 <k_sched_unlock+0xd4>)
    55d2:	23ac      	movs	r3, #172	; 0xac
    55d4:	f001 fb06 	bl	6be4 <printk>
    55d8:	4907      	ldr	r1, [pc, #28]	; (55f8 <k_sched_unlock+0xc8>)
    55da:	4812      	ldr	r0, [pc, #72]	; (5624 <k_sched_unlock+0xf4>)
    55dc:	f001 fb02 	bl	6be4 <printk>
    55e0:	4806      	ldr	r0, [pc, #24]	; (55fc <k_sched_unlock+0xcc>)
    55e2:	21ac      	movs	r1, #172	; 0xac
    55e4:	f001 fa2a 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    55e8:	f385 8811 	msr	BASEPRI, r5
    55ec:	f3bf 8f6f 	isb	sy
}
    55f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    55f4:	f001 bd59 	b.w	70aa <z_reschedule_unlocked>
    55f8:	20000b3c 	.word	0x20000b3c
    55fc:	000078b0 	.word	0x000078b0
    5600:	00007902 	.word	0x00007902
    5604:	0000779d 	.word	0x0000779d
    5608:	00007917 	.word	0x00007917
    560c:	20000b0c 	.word	0x20000b0c
    5610:	000081ad 	.word	0x000081ad
    5614:	0000812c 	.word	0x0000812c
    5618:	000080f8 	.word	0x000080f8
    561c:	0000807f 	.word	0x0000807f
    5620:	000078d6 	.word	0x000078d6
    5624:	000078ed 	.word	0x000078ed

00005628 <z_unpend_first_thread>:
{
    5628:	b538      	push	{r3, r4, r5, lr}
    562a:	4604      	mov	r4, r0
	__asm__ volatile(
    562c:	f04f 0320 	mov.w	r3, #32
    5630:	f3ef 8511 	mrs	r5, BASEPRI
    5634:	f383 8812 	msr	BASEPRI_MAX, r3
    5638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    563c:	481b      	ldr	r0, [pc, #108]	; (56ac <z_unpend_first_thread+0x84>)
    563e:	f000 fc9d 	bl	5f7c <z_spin_lock_valid>
    5642:	b968      	cbnz	r0, 5660 <z_unpend_first_thread+0x38>
    5644:	4a1a      	ldr	r2, [pc, #104]	; (56b0 <z_unpend_first_thread+0x88>)
    5646:	491b      	ldr	r1, [pc, #108]	; (56b4 <z_unpend_first_thread+0x8c>)
    5648:	481b      	ldr	r0, [pc, #108]	; (56b8 <z_unpend_first_thread+0x90>)
    564a:	2381      	movs	r3, #129	; 0x81
    564c:	f001 faca 	bl	6be4 <printk>
    5650:	4916      	ldr	r1, [pc, #88]	; (56ac <z_unpend_first_thread+0x84>)
    5652:	481a      	ldr	r0, [pc, #104]	; (56bc <z_unpend_first_thread+0x94>)
    5654:	f001 fac6 	bl	6be4 <printk>
    5658:	4815      	ldr	r0, [pc, #84]	; (56b0 <z_unpend_first_thread+0x88>)
    565a:	2181      	movs	r1, #129	; 0x81
    565c:	f001 f9ee 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5660:	4812      	ldr	r0, [pc, #72]	; (56ac <z_unpend_first_thread+0x84>)
    5662:	f000 fca9 	bl	5fb8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    5666:	4620      	mov	r0, r4
    5668:	f001 fd29 	bl	70be <z_priq_dumb_best>
		if (thread != NULL) {
    566c:	4604      	mov	r4, r0
    566e:	b128      	cbz	r0, 567c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5670:	f7ff fafc 	bl	4c6c <unpend_thread_no_timeout>
    5674:	f104 0018 	add.w	r0, r4, #24
    5678:	f000 fdca 	bl	6210 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    567c:	480b      	ldr	r0, [pc, #44]	; (56ac <z_unpend_first_thread+0x84>)
    567e:	f000 fc8b 	bl	5f98 <z_spin_unlock_valid>
    5682:	b968      	cbnz	r0, 56a0 <z_unpend_first_thread+0x78>
    5684:	4a0a      	ldr	r2, [pc, #40]	; (56b0 <z_unpend_first_thread+0x88>)
    5686:	490e      	ldr	r1, [pc, #56]	; (56c0 <z_unpend_first_thread+0x98>)
    5688:	480b      	ldr	r0, [pc, #44]	; (56b8 <z_unpend_first_thread+0x90>)
    568a:	23ac      	movs	r3, #172	; 0xac
    568c:	f001 faaa 	bl	6be4 <printk>
    5690:	4906      	ldr	r1, [pc, #24]	; (56ac <z_unpend_first_thread+0x84>)
    5692:	480c      	ldr	r0, [pc, #48]	; (56c4 <z_unpend_first_thread+0x9c>)
    5694:	f001 faa6 	bl	6be4 <printk>
    5698:	4805      	ldr	r0, [pc, #20]	; (56b0 <z_unpend_first_thread+0x88>)
    569a:	21ac      	movs	r1, #172	; 0xac
    569c:	f001 f9ce 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    56a0:	f385 8811 	msr	BASEPRI, r5
    56a4:	f3bf 8f6f 	isb	sy
}
    56a8:	4620      	mov	r0, r4
    56aa:	bd38      	pop	{r3, r4, r5, pc}
    56ac:	20000b3c 	.word	0x20000b3c
    56b0:	000078b0 	.word	0x000078b0
    56b4:	00007902 	.word	0x00007902
    56b8:	0000779d 	.word	0x0000779d
    56bc:	00007917 	.word	0x00007917
    56c0:	000078d6 	.word	0x000078d6
    56c4:	000078ed 	.word	0x000078ed

000056c8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    56c8:	4b04      	ldr	r3, [pc, #16]	; (56dc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    56ca:	2100      	movs	r1, #0
    56cc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    56d0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    56d4:	4608      	mov	r0, r1
    56d6:	f7ff b989 	b.w	49ec <k_sched_time_slice_set>
    56da:	bf00      	nop
    56dc:	20000b0c 	.word	0x20000b0c

000056e0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    56e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56e2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    56e6:	b173      	cbz	r3, 5706 <z_impl_k_yield+0x26>
    56e8:	4941      	ldr	r1, [pc, #260]	; (57f0 <z_impl_k_yield+0x110>)
    56ea:	4a42      	ldr	r2, [pc, #264]	; (57f4 <z_impl_k_yield+0x114>)
    56ec:	4842      	ldr	r0, [pc, #264]	; (57f8 <z_impl_k_yield+0x118>)
    56ee:	f240 43dc 	movw	r3, #1244	; 0x4dc
    56f2:	f001 fa77 	bl	6be4 <printk>
    56f6:	4841      	ldr	r0, [pc, #260]	; (57fc <z_impl_k_yield+0x11c>)
    56f8:	f001 fa74 	bl	6be4 <printk>
    56fc:	483d      	ldr	r0, [pc, #244]	; (57f4 <z_impl_k_yield+0x114>)
    56fe:	f240 41dc 	movw	r1, #1244	; 0x4dc
    5702:	f001 f99b 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5706:	f04f 0320 	mov.w	r3, #32
    570a:	f3ef 8611 	mrs	r6, BASEPRI
    570e:	f383 8812 	msr	BASEPRI_MAX, r3
    5712:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5716:	483a      	ldr	r0, [pc, #232]	; (5800 <z_impl_k_yield+0x120>)
    5718:	f000 fc30 	bl	5f7c <z_spin_lock_valid>
    571c:	b968      	cbnz	r0, 573a <z_impl_k_yield+0x5a>
    571e:	4a39      	ldr	r2, [pc, #228]	; (5804 <z_impl_k_yield+0x124>)
    5720:	4939      	ldr	r1, [pc, #228]	; (5808 <z_impl_k_yield+0x128>)
    5722:	4835      	ldr	r0, [pc, #212]	; (57f8 <z_impl_k_yield+0x118>)
    5724:	2381      	movs	r3, #129	; 0x81
    5726:	f001 fa5d 	bl	6be4 <printk>
    572a:	4935      	ldr	r1, [pc, #212]	; (5800 <z_impl_k_yield+0x120>)
    572c:	4837      	ldr	r0, [pc, #220]	; (580c <z_impl_k_yield+0x12c>)
    572e:	f001 fa59 	bl	6be4 <printk>
    5732:	4834      	ldr	r0, [pc, #208]	; (5804 <z_impl_k_yield+0x124>)
    5734:	2181      	movs	r1, #129	; 0x81
    5736:	f001 f981 	bl	6a3c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    573a:	4d35      	ldr	r5, [pc, #212]	; (5810 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    573c:	4830      	ldr	r0, [pc, #192]	; (5800 <z_impl_k_yield+0x120>)
    573e:	f000 fc3b 	bl	5fb8 <z_spin_lock_set_owner>
    5742:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5744:	7b4b      	ldrb	r3, [r1, #13]
    5746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    574a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    574c:	f105 0020 	add.w	r0, r5, #32
    5750:	f7ff fa6a 	bl	4c28 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    5754:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5756:	7b63      	ldrb	r3, [r4, #13]
    5758:	f063 037f 	orn	r3, r3, #127	; 0x7f
    575c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    575e:	4b2d      	ldr	r3, [pc, #180]	; (5814 <z_impl_k_yield+0x134>)
    5760:	429c      	cmp	r4, r3
    5762:	d109      	bne.n	5778 <z_impl_k_yield+0x98>
    5764:	492c      	ldr	r1, [pc, #176]	; (5818 <z_impl_k_yield+0x138>)
    5766:	4824      	ldr	r0, [pc, #144]	; (57f8 <z_impl_k_yield+0x118>)
    5768:	4a22      	ldr	r2, [pc, #136]	; (57f4 <z_impl_k_yield+0x114>)
    576a:	23ba      	movs	r3, #186	; 0xba
    576c:	f001 fa3a 	bl	6be4 <printk>
    5770:	4820      	ldr	r0, [pc, #128]	; (57f4 <z_impl_k_yield+0x114>)
    5772:	21ba      	movs	r1, #186	; 0xba
    5774:	f001 f962 	bl	6a3c <assert_post_action>
	return list->head == list;
    5778:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    577a:	4828      	ldr	r0, [pc, #160]	; (581c <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    577c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    577e:	4283      	cmp	r3, r0
    5780:	bf08      	it	eq
    5782:	2300      	moveq	r3, #0
    5784:	2b00      	cmp	r3, #0
    5786:	bf38      	it	cc
    5788:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    578a:	b35b      	cbz	r3, 57e4 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    578c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5790:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5794:	4297      	cmp	r7, r2
    5796:	d021      	beq.n	57dc <z_impl_k_yield+0xfc>
		return b2 - b1;
    5798:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    579a:	2a00      	cmp	r2, #0
    579c:	dd1e      	ble.n	57dc <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    579e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    57a0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    57a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    57a6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    57a8:	2001      	movs	r0, #1
    57aa:	f7ff fa81 	bl	4cb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57ae:	4814      	ldr	r0, [pc, #80]	; (5800 <z_impl_k_yield+0x120>)
    57b0:	f000 fbf2 	bl	5f98 <z_spin_unlock_valid>
    57b4:	b968      	cbnz	r0, 57d2 <z_impl_k_yield+0xf2>
    57b6:	4a13      	ldr	r2, [pc, #76]	; (5804 <z_impl_k_yield+0x124>)
    57b8:	4919      	ldr	r1, [pc, #100]	; (5820 <z_impl_k_yield+0x140>)
    57ba:	480f      	ldr	r0, [pc, #60]	; (57f8 <z_impl_k_yield+0x118>)
    57bc:	23c3      	movs	r3, #195	; 0xc3
    57be:	f001 fa11 	bl	6be4 <printk>
    57c2:	490f      	ldr	r1, [pc, #60]	; (5800 <z_impl_k_yield+0x120>)
    57c4:	4817      	ldr	r0, [pc, #92]	; (5824 <z_impl_k_yield+0x144>)
    57c6:	f001 fa0d 	bl	6be4 <printk>
    57ca:	480e      	ldr	r0, [pc, #56]	; (5804 <z_impl_k_yield+0x124>)
    57cc:	21c3      	movs	r1, #195	; 0xc3
    57ce:	f001 f935 	bl	6a3c <assert_post_action>
    57d2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    57d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57d8:	f7fc b932 	b.w	1a40 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    57dc:	428b      	cmp	r3, r1
    57de:	d001      	beq.n	57e4 <z_impl_k_yield+0x104>
    57e0:	681b      	ldr	r3, [r3, #0]
    57e2:	e7d2      	b.n	578a <z_impl_k_yield+0xaa>
	node->prev = tail;
    57e4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    57e8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    57ea:	626c      	str	r4, [r5, #36]	; 0x24
}
    57ec:	e7dc      	b.n	57a8 <z_impl_k_yield+0xc8>
    57ee:	bf00      	nop
    57f0:	0000807f 	.word	0x0000807f
    57f4:	0000812c 	.word	0x0000812c
    57f8:	0000779d 	.word	0x0000779d
    57fc:	000080f8 	.word	0x000080f8
    5800:	20000b3c 	.word	0x20000b3c
    5804:	000078b0 	.word	0x000078b0
    5808:	00007902 	.word	0x00007902
    580c:	00007917 	.word	0x00007917
    5810:	20000b0c 	.word	0x20000b0c
    5814:	20000348 	.word	0x20000348
    5818:	0000814e 	.word	0x0000814e
    581c:	20000b2c 	.word	0x20000b2c
    5820:	000078d6 	.word	0x000078d6
    5824:	000078ed 	.word	0x000078ed

00005828 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    582c:	4604      	mov	r4, r0
    582e:	460d      	mov	r5, r1
    5830:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    5834:	b173      	cbz	r3, 5854 <z_tick_sleep+0x2c>
    5836:	4945      	ldr	r1, [pc, #276]	; (594c <z_tick_sleep+0x124>)
    5838:	4a45      	ldr	r2, [pc, #276]	; (5950 <z_tick_sleep+0x128>)
    583a:	4846      	ldr	r0, [pc, #280]	; (5954 <z_tick_sleep+0x12c>)
    583c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    5840:	f001 f9d0 	bl	6be4 <printk>
    5844:	4844      	ldr	r0, [pc, #272]	; (5958 <z_tick_sleep+0x130>)
    5846:	f001 f9cd 	bl	6be4 <printk>
    584a:	4841      	ldr	r0, [pc, #260]	; (5950 <z_tick_sleep+0x128>)
    584c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    5850:	f001 f8f4 	bl	6a3c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5854:	ea54 0305 	orrs.w	r3, r4, r5
    5858:	d104      	bne.n	5864 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    585a:	f7ff ff41 	bl	56e0 <z_impl_k_yield>
		k_yield();
		return 0;
    585e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    5864:	f06f 0301 	mvn.w	r3, #1
    5868:	1b1e      	subs	r6, r3, r4
    586a:	f04f 33ff 	mov.w	r3, #4294967295
    586e:	eb63 0705 	sbc.w	r7, r3, r5
    5872:	2e01      	cmp	r6, #1
    5874:	f177 0300 	sbcs.w	r3, r7, #0
    5878:	da64      	bge.n	5944 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    587a:	f001 fc3c 	bl	70f6 <sys_clock_tick_get_32>
    587e:	1906      	adds	r6, r0, r4
    5880:	f04f 0320 	mov.w	r3, #32
    5884:	f3ef 8811 	mrs	r8, BASEPRI
    5888:	f383 8812 	msr	BASEPRI_MAX, r3
    588c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5890:	4832      	ldr	r0, [pc, #200]	; (595c <z_tick_sleep+0x134>)
    5892:	f000 fb73 	bl	5f7c <z_spin_lock_valid>
    5896:	b968      	cbnz	r0, 58b4 <z_tick_sleep+0x8c>
    5898:	4a31      	ldr	r2, [pc, #196]	; (5960 <z_tick_sleep+0x138>)
    589a:	4932      	ldr	r1, [pc, #200]	; (5964 <z_tick_sleep+0x13c>)
    589c:	482d      	ldr	r0, [pc, #180]	; (5954 <z_tick_sleep+0x12c>)
    589e:	2381      	movs	r3, #129	; 0x81
    58a0:	f001 f9a0 	bl	6be4 <printk>
    58a4:	492d      	ldr	r1, [pc, #180]	; (595c <z_tick_sleep+0x134>)
    58a6:	4830      	ldr	r0, [pc, #192]	; (5968 <z_tick_sleep+0x140>)
    58a8:	f001 f99c 	bl	6be4 <printk>
    58ac:	482c      	ldr	r0, [pc, #176]	; (5960 <z_tick_sleep+0x138>)
    58ae:	2181      	movs	r1, #129	; 0x81
    58b0:	f001 f8c4 	bl	6a3c <assert_post_action>
	pending_current = _current;
    58b4:	4f2d      	ldr	r7, [pc, #180]	; (596c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    58b6:	4829      	ldr	r0, [pc, #164]	; (595c <z_tick_sleep+0x134>)
    58b8:	f000 fb7e 	bl	5fb8 <z_spin_lock_set_owner>
    58bc:	4b2c      	ldr	r3, [pc, #176]	; (5970 <z_tick_sleep+0x148>)
    58be:	68b8      	ldr	r0, [r7, #8]
    58c0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    58c2:	f7ff fc43 	bl	514c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    58c6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    58c8:	492a      	ldr	r1, [pc, #168]	; (5974 <z_tick_sleep+0x14c>)
    58ca:	4622      	mov	r2, r4
    58cc:	462b      	mov	r3, r5
    58ce:	3018      	adds	r0, #24
    58d0:	f000 fbca 	bl	6068 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    58d4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58d6:	4821      	ldr	r0, [pc, #132]	; (595c <z_tick_sleep+0x134>)
    58d8:	7b53      	ldrb	r3, [r2, #13]
    58da:	f043 0310 	orr.w	r3, r3, #16
    58de:	7353      	strb	r3, [r2, #13]
    58e0:	f000 fb5a 	bl	5f98 <z_spin_unlock_valid>
    58e4:	b968      	cbnz	r0, 5902 <z_tick_sleep+0xda>
    58e6:	4a1e      	ldr	r2, [pc, #120]	; (5960 <z_tick_sleep+0x138>)
    58e8:	4923      	ldr	r1, [pc, #140]	; (5978 <z_tick_sleep+0x150>)
    58ea:	481a      	ldr	r0, [pc, #104]	; (5954 <z_tick_sleep+0x12c>)
    58ec:	23c3      	movs	r3, #195	; 0xc3
    58ee:	f001 f979 	bl	6be4 <printk>
    58f2:	491a      	ldr	r1, [pc, #104]	; (595c <z_tick_sleep+0x134>)
    58f4:	4821      	ldr	r0, [pc, #132]	; (597c <z_tick_sleep+0x154>)
    58f6:	f001 f975 	bl	6be4 <printk>
    58fa:	4819      	ldr	r0, [pc, #100]	; (5960 <z_tick_sleep+0x138>)
    58fc:	21c3      	movs	r1, #195	; 0xc3
    58fe:	f001 f89d 	bl	6a3c <assert_post_action>
    5902:	4640      	mov	r0, r8
    5904:	f7fc f89c 	bl	1a40 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5908:	68bb      	ldr	r3, [r7, #8]
    590a:	7b5b      	ldrb	r3, [r3, #13]
    590c:	06db      	lsls	r3, r3, #27
    590e:	d50e      	bpl.n	592e <z_tick_sleep+0x106>
    5910:	491b      	ldr	r1, [pc, #108]	; (5980 <z_tick_sleep+0x158>)
    5912:	4a0f      	ldr	r2, [pc, #60]	; (5950 <z_tick_sleep+0x128>)
    5914:	480f      	ldr	r0, [pc, #60]	; (5954 <z_tick_sleep+0x12c>)
    5916:	f240 5319 	movw	r3, #1305	; 0x519
    591a:	f001 f963 	bl	6be4 <printk>
    591e:	480e      	ldr	r0, [pc, #56]	; (5958 <z_tick_sleep+0x130>)
    5920:	f001 f960 	bl	6be4 <printk>
    5924:	480a      	ldr	r0, [pc, #40]	; (5950 <z_tick_sleep+0x128>)
    5926:	f240 5119 	movw	r1, #1305	; 0x519
    592a:	f001 f887 	bl	6a3c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    592e:	f001 fbe2 	bl	70f6 <sys_clock_tick_get_32>
    5932:	1a30      	subs	r0, r6, r0
    5934:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    5938:	2801      	cmp	r0, #1
    593a:	f171 0300 	sbcs.w	r3, r1, #0
    593e:	bfb8      	it	lt
    5940:	2000      	movlt	r0, #0
    5942:	e78d      	b.n	5860 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5944:	f06f 0601 	mvn.w	r6, #1
    5948:	1b36      	subs	r6, r6, r4
    594a:	e799      	b.n	5880 <z_tick_sleep+0x58>
    594c:	0000807f 	.word	0x0000807f
    5950:	0000812c 	.word	0x0000812c
    5954:	0000779d 	.word	0x0000779d
    5958:	000080f8 	.word	0x000080f8
    595c:	20000b3c 	.word	0x20000b3c
    5960:	000078b0 	.word	0x000078b0
    5964:	00007902 	.word	0x00007902
    5968:	00007917 	.word	0x00007917
    596c:	20000b0c 	.word	0x20000b0c
    5970:	20000b38 	.word	0x20000b38
    5974:	00005099 	.word	0x00005099
    5978:	000078d6 	.word	0x000078d6
    597c:	000078ed 	.word	0x000078ed
    5980:	000081de 	.word	0x000081de

00005984 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    5984:	b538      	push	{r3, r4, r5, lr}
    5986:	4604      	mov	r4, r0
    5988:	460d      	mov	r5, r1
    598a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    598e:	b173      	cbz	r3, 59ae <z_impl_k_sleep+0x2a>
    5990:	4913      	ldr	r1, [pc, #76]	; (59e0 <z_impl_k_sleep+0x5c>)
    5992:	4a14      	ldr	r2, [pc, #80]	; (59e4 <z_impl_k_sleep+0x60>)
    5994:	4814      	ldr	r0, [pc, #80]	; (59e8 <z_impl_k_sleep+0x64>)
    5996:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    599a:	f001 f923 	bl	6be4 <printk>
    599e:	4813      	ldr	r0, [pc, #76]	; (59ec <z_impl_k_sleep+0x68>)
    59a0:	f001 f920 	bl	6be4 <printk>
    59a4:	480f      	ldr	r0, [pc, #60]	; (59e4 <z_impl_k_sleep+0x60>)
    59a6:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    59aa:	f001 f847 	bl	6a3c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59ae:	1c6b      	adds	r3, r5, #1
    59b0:	bf08      	it	eq
    59b2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    59b6:	d106      	bne.n	59c6 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    59b8:	4b0d      	ldr	r3, [pc, #52]	; (59f0 <z_impl_k_sleep+0x6c>)
    59ba:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    59bc:	f7ff fd4e 	bl	545c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    59c0:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    59c4:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    59c6:	4620      	mov	r0, r4
    59c8:	4629      	mov	r1, r5
    59ca:	f7ff ff2d 	bl	5828 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    59ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    59d2:	fb80 3403 	smull	r3, r4, r0, r3
    59d6:	0bd8      	lsrs	r0, r3, #15
    59d8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    59dc:	e7f2      	b.n	59c4 <z_impl_k_sleep+0x40>
    59de:	bf00      	nop
    59e0:	0000807f 	.word	0x0000807f
    59e4:	0000812c 	.word	0x0000812c
    59e8:	0000779d 	.word	0x0000779d
    59ec:	000080f8 	.word	0x000080f8
    59f0:	20000b0c 	.word	0x20000b0c

000059f4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    59f4:	4b01      	ldr	r3, [pc, #4]	; (59fc <z_impl_z_current_get+0x8>)
    59f6:	6898      	ldr	r0, [r3, #8]
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop
    59fc:	20000b0c 	.word	0x20000b0c

00005a00 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a04:	4604      	mov	r4, r0
    5a06:	f04f 0320 	mov.w	r3, #32
    5a0a:	f3ef 8611 	mrs	r6, BASEPRI
    5a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a16:	4848      	ldr	r0, [pc, #288]	; (5b38 <z_thread_abort+0x138>)
    5a18:	f000 fab0 	bl	5f7c <z_spin_lock_valid>
    5a1c:	b968      	cbnz	r0, 5a3a <z_thread_abort+0x3a>
    5a1e:	4a47      	ldr	r2, [pc, #284]	; (5b3c <z_thread_abort+0x13c>)
    5a20:	4947      	ldr	r1, [pc, #284]	; (5b40 <z_thread_abort+0x140>)
    5a22:	4848      	ldr	r0, [pc, #288]	; (5b44 <z_thread_abort+0x144>)
    5a24:	2381      	movs	r3, #129	; 0x81
    5a26:	f001 f8dd 	bl	6be4 <printk>
    5a2a:	4943      	ldr	r1, [pc, #268]	; (5b38 <z_thread_abort+0x138>)
    5a2c:	4846      	ldr	r0, [pc, #280]	; (5b48 <z_thread_abort+0x148>)
    5a2e:	f001 f8d9 	bl	6be4 <printk>
    5a32:	4842      	ldr	r0, [pc, #264]	; (5b3c <z_thread_abort+0x13c>)
    5a34:	2181      	movs	r1, #129	; 0x81
    5a36:	f001 f801 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5a3a:	483f      	ldr	r0, [pc, #252]	; (5b38 <z_thread_abort+0x138>)
    5a3c:	f000 fabc 	bl	5fb8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5a40:	7b63      	ldrb	r3, [r4, #13]
    5a42:	071a      	lsls	r2, r3, #28
    5a44:	d517      	bpl.n	5a76 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a46:	483c      	ldr	r0, [pc, #240]	; (5b38 <z_thread_abort+0x138>)
    5a48:	f000 faa6 	bl	5f98 <z_spin_unlock_valid>
    5a4c:	b968      	cbnz	r0, 5a6a <z_thread_abort+0x6a>
    5a4e:	4a3b      	ldr	r2, [pc, #236]	; (5b3c <z_thread_abort+0x13c>)
    5a50:	493e      	ldr	r1, [pc, #248]	; (5b4c <z_thread_abort+0x14c>)
    5a52:	483c      	ldr	r0, [pc, #240]	; (5b44 <z_thread_abort+0x144>)
    5a54:	23ac      	movs	r3, #172	; 0xac
    5a56:	f001 f8c5 	bl	6be4 <printk>
    5a5a:	4937      	ldr	r1, [pc, #220]	; (5b38 <z_thread_abort+0x138>)
    5a5c:	483c      	ldr	r0, [pc, #240]	; (5b50 <z_thread_abort+0x150>)
    5a5e:	f001 f8c1 	bl	6be4 <printk>
    5a62:	4836      	ldr	r0, [pc, #216]	; (5b3c <z_thread_abort+0x13c>)
    5a64:	21ac      	movs	r1, #172	; 0xac
    5a66:	f000 ffe9 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5a6a:	f386 8811 	msr	BASEPRI, r6
    5a6e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5a76:	f023 0220 	bic.w	r2, r3, #32
    5a7a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5a7e:	09d2      	lsrs	r2, r2, #7
    5a80:	d142      	bne.n	5b08 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5a82:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    5a84:	68a3      	ldr	r3, [r4, #8]
    5a86:	b113      	cbz	r3, 5a8e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    5a88:	4620      	mov	r0, r4
    5a8a:	f7ff f8ef 	bl	4c6c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5a8e:	f104 0018 	add.w	r0, r4, #24
    5a92:	f000 fbbd 	bl	6210 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5a96:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5a9a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5a9e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5aa0:	42bd      	cmp	r5, r7
    5aa2:	d001      	beq.n	5aa8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5aa4:	2d00      	cmp	r5, #0
    5aa6:	d139      	bne.n	5b1c <z_thread_abort+0x11c>
		update_cache(1);
    5aa8:	2001      	movs	r0, #1
    5aaa:	f7ff f901 	bl	4cb0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5aae:	4b29      	ldr	r3, [pc, #164]	; (5b54 <z_thread_abort+0x154>)
    5ab0:	689b      	ldr	r3, [r3, #8]
    5ab2:	42a3      	cmp	r3, r4
    5ab4:	d1c7      	bne.n	5a46 <z_thread_abort+0x46>
    5ab6:	f3ef 8305 	mrs	r3, IPSR
    5aba:	2b00      	cmp	r3, #0
    5abc:	d1c3      	bne.n	5a46 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5abe:	481e      	ldr	r0, [pc, #120]	; (5b38 <z_thread_abort+0x138>)
    5ac0:	f000 fa6a 	bl	5f98 <z_spin_unlock_valid>
    5ac4:	b968      	cbnz	r0, 5ae2 <z_thread_abort+0xe2>
    5ac6:	4a1d      	ldr	r2, [pc, #116]	; (5b3c <z_thread_abort+0x13c>)
    5ac8:	4920      	ldr	r1, [pc, #128]	; (5b4c <z_thread_abort+0x14c>)
    5aca:	481e      	ldr	r0, [pc, #120]	; (5b44 <z_thread_abort+0x144>)
    5acc:	23c3      	movs	r3, #195	; 0xc3
    5ace:	f001 f889 	bl	6be4 <printk>
    5ad2:	4919      	ldr	r1, [pc, #100]	; (5b38 <z_thread_abort+0x138>)
    5ad4:	481e      	ldr	r0, [pc, #120]	; (5b50 <z_thread_abort+0x150>)
    5ad6:	f001 f885 	bl	6be4 <printk>
    5ada:	4818      	ldr	r0, [pc, #96]	; (5b3c <z_thread_abort+0x13c>)
    5adc:	21c3      	movs	r1, #195	; 0xc3
    5ade:	f000 ffad 	bl	6a3c <assert_post_action>
    5ae2:	4630      	mov	r0, r6
    5ae4:	f7fb ffac 	bl	1a40 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5ae8:	4a1b      	ldr	r2, [pc, #108]	; (5b58 <z_thread_abort+0x158>)
    5aea:	491c      	ldr	r1, [pc, #112]	; (5b5c <z_thread_abort+0x15c>)
    5aec:	4815      	ldr	r0, [pc, #84]	; (5b44 <z_thread_abort+0x144>)
    5aee:	f240 634b 	movw	r3, #1611	; 0x64b
    5af2:	f001 f877 	bl	6be4 <printk>
    5af6:	481a      	ldr	r0, [pc, #104]	; (5b60 <z_thread_abort+0x160>)
    5af8:	f001 f874 	bl	6be4 <printk>
    5afc:	4816      	ldr	r0, [pc, #88]	; (5b58 <z_thread_abort+0x158>)
    5afe:	f240 614b 	movw	r1, #1611	; 0x64b
    5b02:	f000 ff9b 	bl	6a3c <assert_post_action>
    5b06:	e79e      	b.n	5a46 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b08:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5b0c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5b10:	4814      	ldr	r0, [pc, #80]	; (5b64 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b12:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5b14:	4621      	mov	r1, r4
    5b16:	f7ff f887 	bl	4c28 <z_priq_dumb_remove>
}
    5b1a:	e7b3      	b.n	5a84 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5b1c:	4628      	mov	r0, r5
    5b1e:	f7ff f8a5 	bl	4c6c <unpend_thread_no_timeout>
    5b22:	f105 0018 	add.w	r0, r5, #24
    5b26:	f000 fb73 	bl	6210 <z_abort_timeout>
    5b2a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5b2e:	4628      	mov	r0, r5
    5b30:	f7ff f9c4 	bl	4ebc <ready_thread>
    5b34:	e7b3      	b.n	5a9e <z_thread_abort+0x9e>
    5b36:	bf00      	nop
    5b38:	20000b3c 	.word	0x20000b3c
    5b3c:	000078b0 	.word	0x000078b0
    5b40:	00007902 	.word	0x00007902
    5b44:	0000779d 	.word	0x0000779d
    5b48:	00007917 	.word	0x00007917
    5b4c:	000078d6 	.word	0x000078d6
    5b50:	000078ed 	.word	0x000078ed
    5b54:	20000b0c 	.word	0x20000b0c
    5b58:	0000812c 	.word	0x0000812c
    5b5c:	00007898 	.word	0x00007898
    5b60:	0000821e 	.word	0x0000821e
    5b64:	20000b2c 	.word	0x20000b2c

00005b68 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5b68:	b538      	push	{r3, r4, r5, lr}
    5b6a:	4604      	mov	r4, r0
	__asm__ volatile(
    5b6c:	f04f 0320 	mov.w	r3, #32
    5b70:	f3ef 8511 	mrs	r5, BASEPRI
    5b74:	f383 8812 	msr	BASEPRI_MAX, r3
    5b78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b7c:	4814      	ldr	r0, [pc, #80]	; (5bd0 <z_impl_k_sem_give+0x68>)
    5b7e:	f000 f9fd 	bl	5f7c <z_spin_lock_valid>
    5b82:	b968      	cbnz	r0, 5ba0 <z_impl_k_sem_give+0x38>
    5b84:	4a13      	ldr	r2, [pc, #76]	; (5bd4 <z_impl_k_sem_give+0x6c>)
    5b86:	4914      	ldr	r1, [pc, #80]	; (5bd8 <z_impl_k_sem_give+0x70>)
    5b88:	4814      	ldr	r0, [pc, #80]	; (5bdc <z_impl_k_sem_give+0x74>)
    5b8a:	2381      	movs	r3, #129	; 0x81
    5b8c:	f001 f82a 	bl	6be4 <printk>
    5b90:	490f      	ldr	r1, [pc, #60]	; (5bd0 <z_impl_k_sem_give+0x68>)
    5b92:	4813      	ldr	r0, [pc, #76]	; (5be0 <z_impl_k_sem_give+0x78>)
    5b94:	f001 f826 	bl	6be4 <printk>
    5b98:	480e      	ldr	r0, [pc, #56]	; (5bd4 <z_impl_k_sem_give+0x6c>)
    5b9a:	2181      	movs	r1, #129	; 0x81
    5b9c:	f000 ff4e 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5ba0:	480b      	ldr	r0, [pc, #44]	; (5bd0 <z_impl_k_sem_give+0x68>)
    5ba2:	f000 fa09 	bl	5fb8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5ba6:	4620      	mov	r0, r4
    5ba8:	f7ff fd3e 	bl	5628 <z_unpend_first_thread>

	if (thread != NULL) {
    5bac:	b148      	cbz	r0, 5bc2 <z_impl_k_sem_give+0x5a>
    5bae:	2200      	movs	r2, #0
    5bb0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5bb2:	f7ff f9d5 	bl	4f60 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5bb6:	4629      	mov	r1, r5
    5bb8:	4805      	ldr	r0, [pc, #20]	; (5bd0 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5bbe:	f7fe bf7b 	b.w	4ab8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5bc2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5bc6:	429a      	cmp	r2, r3
    5bc8:	bf18      	it	ne
    5bca:	3301      	addne	r3, #1
    5bcc:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    5bce:	e7f2      	b.n	5bb6 <z_impl_k_sem_give+0x4e>
    5bd0:	20000b48 	.word	0x20000b48
    5bd4:	000078b0 	.word	0x000078b0
    5bd8:	00007902 	.word	0x00007902
    5bdc:	0000779d 	.word	0x0000779d
    5be0:	00007917 	.word	0x00007917

00005be4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5be6:	4604      	mov	r4, r0
    5be8:	4616      	mov	r6, r2
    5bea:	461f      	mov	r7, r3
    5bec:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5bf0:	b17b      	cbz	r3, 5c12 <z_impl_k_sem_take+0x2e>
    5bf2:	ea56 0307 	orrs.w	r3, r6, r7
    5bf6:	d00c      	beq.n	5c12 <z_impl_k_sem_take+0x2e>
    5bf8:	4935      	ldr	r1, [pc, #212]	; (5cd0 <z_impl_k_sem_take+0xec>)
    5bfa:	4a36      	ldr	r2, [pc, #216]	; (5cd4 <z_impl_k_sem_take+0xf0>)
    5bfc:	4836      	ldr	r0, [pc, #216]	; (5cd8 <z_impl_k_sem_take+0xf4>)
    5bfe:	2379      	movs	r3, #121	; 0x79
    5c00:	f000 fff0 	bl	6be4 <printk>
    5c04:	4835      	ldr	r0, [pc, #212]	; (5cdc <z_impl_k_sem_take+0xf8>)
    5c06:	f000 ffed 	bl	6be4 <printk>
    5c0a:	4832      	ldr	r0, [pc, #200]	; (5cd4 <z_impl_k_sem_take+0xf0>)
    5c0c:	2179      	movs	r1, #121	; 0x79
    5c0e:	f000 ff15 	bl	6a3c <assert_post_action>
    5c12:	f04f 0320 	mov.w	r3, #32
    5c16:	f3ef 8511 	mrs	r5, BASEPRI
    5c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c22:	482f      	ldr	r0, [pc, #188]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c24:	f000 f9aa 	bl	5f7c <z_spin_lock_valid>
    5c28:	b968      	cbnz	r0, 5c46 <z_impl_k_sem_take+0x62>
    5c2a:	4a2e      	ldr	r2, [pc, #184]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5c2c:	492e      	ldr	r1, [pc, #184]	; (5ce8 <z_impl_k_sem_take+0x104>)
    5c2e:	482a      	ldr	r0, [pc, #168]	; (5cd8 <z_impl_k_sem_take+0xf4>)
    5c30:	2381      	movs	r3, #129	; 0x81
    5c32:	f000 ffd7 	bl	6be4 <printk>
    5c36:	492a      	ldr	r1, [pc, #168]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c38:	482c      	ldr	r0, [pc, #176]	; (5cec <z_impl_k_sem_take+0x108>)
    5c3a:	f000 ffd3 	bl	6be4 <printk>
    5c3e:	4829      	ldr	r0, [pc, #164]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5c40:	2181      	movs	r1, #129	; 0x81
    5c42:	f000 fefb 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    5c46:	4826      	ldr	r0, [pc, #152]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c48:	f000 f9b6 	bl	5fb8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5c4c:	68a3      	ldr	r3, [r4, #8]
    5c4e:	b1d3      	cbz	r3, 5c86 <z_impl_k_sem_take+0xa2>
		sem->count--;
    5c50:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c52:	4823      	ldr	r0, [pc, #140]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c54:	60a3      	str	r3, [r4, #8]
    5c56:	f000 f99f 	bl	5f98 <z_spin_unlock_valid>
    5c5a:	b968      	cbnz	r0, 5c78 <z_impl_k_sem_take+0x94>
    5c5c:	4a21      	ldr	r2, [pc, #132]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5c5e:	4924      	ldr	r1, [pc, #144]	; (5cf0 <z_impl_k_sem_take+0x10c>)
    5c60:	481d      	ldr	r0, [pc, #116]	; (5cd8 <z_impl_k_sem_take+0xf4>)
    5c62:	23ac      	movs	r3, #172	; 0xac
    5c64:	f000 ffbe 	bl	6be4 <printk>
    5c68:	491d      	ldr	r1, [pc, #116]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c6a:	4822      	ldr	r0, [pc, #136]	; (5cf4 <z_impl_k_sem_take+0x110>)
    5c6c:	f000 ffba 	bl	6be4 <printk>
    5c70:	481c      	ldr	r0, [pc, #112]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5c72:	21ac      	movs	r1, #172	; 0xac
    5c74:	f000 fee2 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    5c78:	f385 8811 	msr	BASEPRI, r5
    5c7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5c80:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5c82:	b003      	add	sp, #12
    5c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5c86:	ea56 0307 	orrs.w	r3, r6, r7
    5c8a:	d118      	bne.n	5cbe <z_impl_k_sem_take+0xda>
    5c8c:	4814      	ldr	r0, [pc, #80]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5c8e:	f000 f983 	bl	5f98 <z_spin_unlock_valid>
    5c92:	b968      	cbnz	r0, 5cb0 <z_impl_k_sem_take+0xcc>
    5c94:	4a13      	ldr	r2, [pc, #76]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5c96:	4916      	ldr	r1, [pc, #88]	; (5cf0 <z_impl_k_sem_take+0x10c>)
    5c98:	480f      	ldr	r0, [pc, #60]	; (5cd8 <z_impl_k_sem_take+0xf4>)
    5c9a:	23ac      	movs	r3, #172	; 0xac
    5c9c:	f000 ffa2 	bl	6be4 <printk>
    5ca0:	490f      	ldr	r1, [pc, #60]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5ca2:	4814      	ldr	r0, [pc, #80]	; (5cf4 <z_impl_k_sem_take+0x110>)
    5ca4:	f000 ff9e 	bl	6be4 <printk>
    5ca8:	480e      	ldr	r0, [pc, #56]	; (5ce4 <z_impl_k_sem_take+0x100>)
    5caa:	21ac      	movs	r1, #172	; 0xac
    5cac:	f000 fec6 	bl	6a3c <assert_post_action>
    5cb0:	f385 8811 	msr	BASEPRI, r5
    5cb4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5cb8:	f06f 000f 	mvn.w	r0, #15
    5cbc:	e7e1      	b.n	5c82 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5cbe:	e9cd 6700 	strd	r6, r7, [sp]
    5cc2:	4622      	mov	r2, r4
    5cc4:	4629      	mov	r1, r5
    5cc6:	4806      	ldr	r0, [pc, #24]	; (5ce0 <z_impl_k_sem_take+0xfc>)
    5cc8:	f7ff fafc 	bl	52c4 <z_pend_curr>
	return ret;
    5ccc:	e7d9      	b.n	5c82 <z_impl_k_sem_take+0x9e>
    5cce:	bf00      	nop
    5cd0:	00008260 	.word	0x00008260
    5cd4:	00008240 	.word	0x00008240
    5cd8:	0000779d 	.word	0x0000779d
    5cdc:	000080f8 	.word	0x000080f8
    5ce0:	20000b48 	.word	0x20000b48
    5ce4:	000078b0 	.word	0x000078b0
    5ce8:	00007902 	.word	0x00007902
    5cec:	00007917 	.word	0x00007917
    5cf0:	000078d6 	.word	0x000078d6
    5cf4:	000078ed 	.word	0x000078ed

00005cf8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5cfc:	b085      	sub	sp, #20
    5cfe:	4604      	mov	r4, r0
    5d00:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    5d04:	f1b8 0f0f 	cmp.w	r8, #15
{
    5d08:	460f      	mov	r7, r1
    5d0a:	4615      	mov	r5, r2
    5d0c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5d0e:	d132      	bne.n	5d76 <z_setup_new_thread+0x7e>
    5d10:	4b25      	ldr	r3, [pc, #148]	; (5da8 <z_setup_new_thread+0xb0>)
    5d12:	4599      	cmp	r9, r3
    5d14:	d133      	bne.n	5d7e <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    5d16:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    5d1a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5d1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5d20:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5d22:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    5d24:	2304      	movs	r3, #4
    5d26:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5d28:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5d2c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5d30:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    5d36:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d3a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5d3c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5d42:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    5d44:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5d48:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    5d4a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d4c:	464b      	mov	r3, r9
	node->prev = NULL;
    5d4e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    5d52:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    5d54:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    5d56:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5d58:	4642      	mov	r2, r8
    5d5a:	4639      	mov	r1, r7
    5d5c:	4620      	mov	r0, r4
    5d5e:	f7fb fe89 	bl	1a74 <arch_new_thread>
	if (!_current) {
    5d62:	4b12      	ldr	r3, [pc, #72]	; (5dac <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    5d64:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    5d66:	689b      	ldr	r3, [r3, #8]
    5d68:	b103      	cbz	r3, 5d6c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    5d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5d6c:	6723      	str	r3, [r4, #112]	; 0x70
}
    5d6e:	4640      	mov	r0, r8
    5d70:	b005      	add	sp, #20
    5d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5d76:	f108 0310 	add.w	r3, r8, #16
    5d7a:	2b1e      	cmp	r3, #30
    5d7c:	d9cb      	bls.n	5d16 <z_setup_new_thread+0x1e>
    5d7e:	4a0c      	ldr	r2, [pc, #48]	; (5db0 <z_setup_new_thread+0xb8>)
    5d80:	490c      	ldr	r1, [pc, #48]	; (5db4 <z_setup_new_thread+0xbc>)
    5d82:	480d      	ldr	r0, [pc, #52]	; (5db8 <z_setup_new_thread+0xc0>)
    5d84:	f240 13ff 	movw	r3, #511	; 0x1ff
    5d88:	f000 ff2c 	bl	6be4 <printk>
    5d8c:	4641      	mov	r1, r8
    5d8e:	480b      	ldr	r0, [pc, #44]	; (5dbc <z_setup_new_thread+0xc4>)
    5d90:	f06f 030f 	mvn.w	r3, #15
    5d94:	220e      	movs	r2, #14
    5d96:	f000 ff25 	bl	6be4 <printk>
    5d9a:	4805      	ldr	r0, [pc, #20]	; (5db0 <z_setup_new_thread+0xb8>)
    5d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
    5da0:	f000 fe4c 	bl	6a3c <assert_post_action>
    5da4:	e7b7      	b.n	5d16 <z_setup_new_thread+0x1e>
    5da6:	bf00      	nop
    5da8:	0000423d 	.word	0x0000423d
    5dac:	20000b0c 	.word	0x20000b0c
    5db0:	000082ad 	.word	0x000082ad
    5db4:	000082d0 	.word	0x000082d0
    5db8:	0000779d 	.word	0x0000779d
    5dbc:	00008350 	.word	0x00008350

00005dc0 <z_impl_k_thread_create>:
{
    5dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5dc4:	b087      	sub	sp, #28
    5dc6:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    5dca:	4604      	mov	r4, r0
    5dcc:	460d      	mov	r5, r1
    5dce:	4690      	mov	r8, r2
    5dd0:	4699      	mov	r9, r3
    5dd2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5dd6:	b173      	cbz	r3, 5df6 <z_impl_k_thread_create+0x36>
    5dd8:	491b      	ldr	r1, [pc, #108]	; (5e48 <z_impl_k_thread_create+0x88>)
    5dda:	4a1c      	ldr	r2, [pc, #112]	; (5e4c <z_impl_k_thread_create+0x8c>)
    5ddc:	481c      	ldr	r0, [pc, #112]	; (5e50 <z_impl_k_thread_create+0x90>)
    5dde:	f44f 731a 	mov.w	r3, #616	; 0x268
    5de2:	f000 feff 	bl	6be4 <printk>
    5de6:	481b      	ldr	r0, [pc, #108]	; (5e54 <z_impl_k_thread_create+0x94>)
    5de8:	f000 fefc 	bl	6be4 <printk>
    5dec:	4817      	ldr	r0, [pc, #92]	; (5e4c <z_impl_k_thread_create+0x8c>)
    5dee:	f44f 711a 	mov.w	r1, #616	; 0x268
    5df2:	f000 fe23 	bl	6a3c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5df6:	2300      	movs	r3, #0
    5df8:	9305      	str	r3, [sp, #20]
    5dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5dfc:	9304      	str	r3, [sp, #16]
    5dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5e00:	9303      	str	r3, [sp, #12]
    5e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5e04:	9302      	str	r3, [sp, #8]
    5e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e08:	9301      	str	r3, [sp, #4]
    5e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5e0c:	9300      	str	r3, [sp, #0]
    5e0e:	4642      	mov	r2, r8
    5e10:	464b      	mov	r3, r9
    5e12:	4629      	mov	r1, r5
    5e14:	4620      	mov	r0, r4
    5e16:	f7ff ff6f 	bl	5cf8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5e1a:	1c7b      	adds	r3, r7, #1
    5e1c:	bf08      	it	eq
    5e1e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5e22:	d005      	beq.n	5e30 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5e24:	ea56 0307 	orrs.w	r3, r6, r7
    5e28:	d106      	bne.n	5e38 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    5e2a:	4620      	mov	r0, r4
    5e2c:	f7ff f8e0 	bl	4ff0 <z_sched_start>
}
    5e30:	4620      	mov	r0, r4
    5e32:	b007      	add	sp, #28
    5e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5e38:	4907      	ldr	r1, [pc, #28]	; (5e58 <z_impl_k_thread_create+0x98>)
    5e3a:	4632      	mov	r2, r6
    5e3c:	463b      	mov	r3, r7
    5e3e:	f104 0018 	add.w	r0, r4, #24
    5e42:	f000 f911 	bl	6068 <z_add_timeout>
    5e46:	e7f3      	b.n	5e30 <z_impl_k_thread_create+0x70>
    5e48:	0000807f 	.word	0x0000807f
    5e4c:	000082ad 	.word	0x000082ad
    5e50:	0000779d 	.word	0x0000779d
    5e54:	00008381 	.word	0x00008381
    5e58:	00005099 	.word	0x00005099

00005e5c <z_init_static_threads>:
{
    5e5c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5e60:	4f3f      	ldr	r7, [pc, #252]	; (5f60 <z_init_static_threads+0x104>)
    5e62:	4d40      	ldr	r5, [pc, #256]	; (5f64 <z_init_static_threads+0x108>)
    5e64:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5f74 <z_init_static_threads+0x118>
{
    5e68:	b086      	sub	sp, #24
    5e6a:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    5e6c:	42bd      	cmp	r5, r7
    5e6e:	d90e      	bls.n	5e8e <z_init_static_threads+0x32>
    5e70:	493d      	ldr	r1, [pc, #244]	; (5f68 <z_init_static_threads+0x10c>)
    5e72:	483e      	ldr	r0, [pc, #248]	; (5f6c <z_init_static_threads+0x110>)
    5e74:	f240 23cf 	movw	r3, #719	; 0x2cf
    5e78:	4642      	mov	r2, r8
    5e7a:	f000 feb3 	bl	6be4 <printk>
    5e7e:	483c      	ldr	r0, [pc, #240]	; (5f70 <z_init_static_threads+0x114>)
    5e80:	f000 feb0 	bl	6be4 <printk>
    5e84:	f240 21cf 	movw	r1, #719	; 0x2cf
    5e88:	4640      	mov	r0, r8
    5e8a:	f000 fdd7 	bl	6a3c <assert_post_action>
    5e8e:	42b5      	cmp	r5, r6
    5e90:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5e94:	d31f      	bcc.n	5ed6 <z_init_static_threads+0x7a>
	k_sched_lock();
    5e96:	f7fe fe53 	bl	4b40 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5e9a:	4c32      	ldr	r4, [pc, #200]	; (5f64 <z_init_static_threads+0x108>)
    5e9c:	4d35      	ldr	r5, [pc, #212]	; (5f74 <z_init_static_threads+0x118>)
    5e9e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 5f68 <z_init_static_threads+0x10c>
    5ea2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 5f6c <z_init_static_threads+0x110>
    5ea6:	42b4      	cmp	r4, r6
    5ea8:	d90e      	bls.n	5ec8 <z_init_static_threads+0x6c>
    5eaa:	4641      	mov	r1, r8
    5eac:	f240 23ee 	movw	r3, #750	; 0x2ee
    5eb0:	462a      	mov	r2, r5
    5eb2:	4648      	mov	r0, r9
    5eb4:	f000 fe96 	bl	6be4 <printk>
    5eb8:	482d      	ldr	r0, [pc, #180]	; (5f70 <z_init_static_threads+0x114>)
    5eba:	f000 fe93 	bl	6be4 <printk>
    5ebe:	f240 21ee 	movw	r1, #750	; 0x2ee
    5ec2:	4628      	mov	r0, r5
    5ec4:	f000 fdba 	bl	6a3c <assert_post_action>
    5ec8:	42b4      	cmp	r4, r6
    5eca:	d321      	bcc.n	5f10 <z_init_static_threads+0xb4>
}
    5ecc:	b006      	add	sp, #24
    5ece:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    5ed2:	f7ff bb2d 	b.w	5530 <k_sched_unlock>
		z_setup_new_thread(
    5ed6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5eda:	9305      	str	r3, [sp, #20]
    5edc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5ee0:	9304      	str	r3, [sp, #16]
    5ee2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5ee6:	9303      	str	r3, [sp, #12]
    5ee8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5eec:	9302      	str	r3, [sp, #8]
    5eee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5ef2:	9301      	str	r3, [sp, #4]
    5ef4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5ef8:	9300      	str	r3, [sp, #0]
    5efa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5efe:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5f02:	f7ff fef9 	bl	5cf8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5f06:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5f0a:	655d      	str	r5, [r3, #84]	; 0x54
    5f0c:	4625      	mov	r5, r4
    5f0e:	e7ad      	b.n	5e6c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5f12:	1c4b      	adds	r3, r1, #1
    5f14:	d014      	beq.n	5f40 <z_init_static_threads+0xe4>
    5f16:	f240 32e7 	movw	r2, #999	; 0x3e7
    5f1a:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    5f1c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5f20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5f24:	4693      	mov	fp, r2
    5f26:	469c      	mov	ip, r3
    5f28:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5f2c:	459c      	cmp	ip, r3
    5f2e:	bf08      	it	eq
    5f30:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    5f32:	6827      	ldr	r7, [r4, #0]
    5f34:	4658      	mov	r0, fp
    5f36:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5f38:	d104      	bne.n	5f44 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    5f3a:	4638      	mov	r0, r7
    5f3c:	f7ff f858 	bl	4ff0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5f40:	3430      	adds	r4, #48	; 0x30
    5f42:	e7b0      	b.n	5ea6 <z_init_static_threads+0x4a>
    5f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f48:	2300      	movs	r3, #0
    5f4a:	f7fa f8d9 	bl	100 <__aeabi_uldivmod>
    5f4e:	4602      	mov	r2, r0
    5f50:	460b      	mov	r3, r1
    5f52:	f107 0018 	add.w	r0, r7, #24
    5f56:	4908      	ldr	r1, [pc, #32]	; (5f78 <z_init_static_threads+0x11c>)
    5f58:	f000 f886 	bl	6068 <z_add_timeout>
    5f5c:	e7f0      	b.n	5f40 <z_init_static_threads+0xe4>
    5f5e:	bf00      	nop
    5f60:	20000158 	.word	0x20000158
    5f64:	20000158 	.word	0x20000158
    5f68:	000083a6 	.word	0x000083a6
    5f6c:	0000779d 	.word	0x0000779d
    5f70:	0000803e 	.word	0x0000803e
    5f74:	000082ad 	.word	0x000082ad
    5f78:	00005099 	.word	0x00005099

00005f7c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5f7c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    5f7e:	b138      	cbz	r0, 5f90 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5f80:	4b04      	ldr	r3, [pc, #16]	; (5f94 <z_spin_lock_valid+0x18>)
    5f82:	7d1b      	ldrb	r3, [r3, #20]
    5f84:	f000 0003 	and.w	r0, r0, #3
    5f88:	1ac0      	subs	r0, r0, r3
    5f8a:	bf18      	it	ne
    5f8c:	2001      	movne	r0, #1
    5f8e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    5f90:	2001      	movs	r0, #1
}
    5f92:	4770      	bx	lr
    5f94:	20000b0c 	.word	0x20000b0c

00005f98 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5f98:	4906      	ldr	r1, [pc, #24]	; (5fb4 <z_spin_unlock_valid+0x1c>)
{
    5f9a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5f9c:	688a      	ldr	r2, [r1, #8]
    5f9e:	7d08      	ldrb	r0, [r1, #20]
    5fa0:	6819      	ldr	r1, [r3, #0]
    5fa2:	4302      	orrs	r2, r0
    5fa4:	4291      	cmp	r1, r2
    5fa6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    5faa:	bf04      	itt	eq
    5fac:	6018      	streq	r0, [r3, #0]
	return true;
    5fae:	2001      	moveq	r0, #1
}
    5fb0:	4770      	bx	lr
    5fb2:	bf00      	nop
    5fb4:	20000b0c 	.word	0x20000b0c

00005fb8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5fb8:	4a02      	ldr	r2, [pc, #8]	; (5fc4 <z_spin_lock_set_owner+0xc>)
    5fba:	7d11      	ldrb	r1, [r2, #20]
    5fbc:	6893      	ldr	r3, [r2, #8]
    5fbe:	430b      	orrs	r3, r1
    5fc0:	6003      	str	r3, [r0, #0]
}
    5fc2:	4770      	bx	lr
    5fc4:	20000b0c 	.word	0x20000b0c

00005fc8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5fc8:	4b03      	ldr	r3, [pc, #12]	; (5fd8 <elapsed+0x10>)
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	b90b      	cbnz	r3, 5fd2 <elapsed+0xa>
    5fce:	f7fd b9df 	b.w	3390 <sys_clock_elapsed>
}
    5fd2:	2000      	movs	r0, #0
    5fd4:	4770      	bx	lr
    5fd6:	bf00      	nop
    5fd8:	20000b4c 	.word	0x20000b4c

00005fdc <next_timeout>:

static int32_t next_timeout(void)
{
    5fdc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5fde:	4b13      	ldr	r3, [pc, #76]	; (602c <next_timeout+0x50>)
    5fe0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fe2:	429c      	cmp	r4, r3
    5fe4:	bf08      	it	eq
    5fe6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5fe8:	f7ff ffee 	bl	5fc8 <elapsed>
    5fec:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5fee:	b1bc      	cbz	r4, 6020 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5ff0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5ff4:	1b40      	subs	r0, r0, r5
    5ff6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5ffa:	2801      	cmp	r0, #1
    5ffc:	f171 0300 	sbcs.w	r3, r1, #0
    6000:	db11      	blt.n	6026 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    6002:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6006:	2300      	movs	r3, #0
    6008:	4282      	cmp	r2, r0
    600a:	eb73 0401 	sbcs.w	r4, r3, r1
    600e:	da00      	bge.n	6012 <next_timeout+0x36>
    6010:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6012:	4b07      	ldr	r3, [pc, #28]	; (6030 <next_timeout+0x54>)
    6014:	691b      	ldr	r3, [r3, #16]
    6016:	b113      	cbz	r3, 601e <next_timeout+0x42>
    6018:	4298      	cmp	r0, r3
    601a:	bfa8      	it	ge
    601c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    601e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    6020:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6024:	e7f5      	b.n	6012 <next_timeout+0x36>
    6026:	2000      	movs	r0, #0
    6028:	e7f3      	b.n	6012 <next_timeout+0x36>
    602a:	bf00      	nop
    602c:	200000dc 	.word	0x200000dc
    6030:	20000b0c 	.word	0x20000b0c

00006034 <remove_timeout>:
{
    6034:	b530      	push	{r4, r5, lr}
    6036:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6038:	b168      	cbz	r0, 6056 <remove_timeout+0x22>
    603a:	4a0a      	ldr	r2, [pc, #40]	; (6064 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    603c:	6852      	ldr	r2, [r2, #4]
    603e:	4290      	cmp	r0, r2
    6040:	d009      	beq.n	6056 <remove_timeout+0x22>
	if (next(t) != NULL) {
    6042:	b143      	cbz	r3, 6056 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6044:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6048:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    604c:	1912      	adds	r2, r2, r4
    604e:	eb45 0101 	adc.w	r1, r5, r1
    6052:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6056:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6058:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    605a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    605c:	2300      	movs	r3, #0
	node->prev = NULL;
    605e:	e9c0 3300 	strd	r3, r3, [r0]
}
    6062:	bd30      	pop	{r4, r5, pc}
    6064:	200000dc 	.word	0x200000dc

00006068 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    606c:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    606e:	1c6b      	adds	r3, r5, #1
    6070:	bf08      	it	eq
    6072:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6076:	4682      	mov	sl, r0
    6078:	468b      	mov	fp, r1
    607a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    607c:	f000 80aa 	beq.w	61d4 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6080:	6803      	ldr	r3, [r0, #0]
    6082:	b163      	cbz	r3, 609e <z_add_timeout+0x36>
    6084:	4955      	ldr	r1, [pc, #340]	; (61dc <z_add_timeout+0x174>)
    6086:	4a56      	ldr	r2, [pc, #344]	; (61e0 <z_add_timeout+0x178>)
    6088:	4856      	ldr	r0, [pc, #344]	; (61e4 <z_add_timeout+0x17c>)
    608a:	235d      	movs	r3, #93	; 0x5d
    608c:	f000 fdaa 	bl	6be4 <printk>
    6090:	4855      	ldr	r0, [pc, #340]	; (61e8 <z_add_timeout+0x180>)
    6092:	f000 fda7 	bl	6be4 <printk>
    6096:	4852      	ldr	r0, [pc, #328]	; (61e0 <z_add_timeout+0x178>)
    6098:	215d      	movs	r1, #93	; 0x5d
    609a:	f000 fccf 	bl	6a3c <assert_post_action>
	to->fn = fn;
    609e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    60a2:	f04f 0320 	mov.w	r3, #32
    60a6:	f3ef 8b11 	mrs	fp, BASEPRI
    60aa:	f383 8812 	msr	BASEPRI_MAX, r3
    60ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60b2:	484e      	ldr	r0, [pc, #312]	; (61ec <z_add_timeout+0x184>)
    60b4:	f7ff ff62 	bl	5f7c <z_spin_lock_valid>
    60b8:	b968      	cbnz	r0, 60d6 <z_add_timeout+0x6e>
    60ba:	4a4d      	ldr	r2, [pc, #308]	; (61f0 <z_add_timeout+0x188>)
    60bc:	494d      	ldr	r1, [pc, #308]	; (61f4 <z_add_timeout+0x18c>)
    60be:	4849      	ldr	r0, [pc, #292]	; (61e4 <z_add_timeout+0x17c>)
    60c0:	2381      	movs	r3, #129	; 0x81
    60c2:	f000 fd8f 	bl	6be4 <printk>
    60c6:	4949      	ldr	r1, [pc, #292]	; (61ec <z_add_timeout+0x184>)
    60c8:	484b      	ldr	r0, [pc, #300]	; (61f8 <z_add_timeout+0x190>)
    60ca:	f000 fd8b 	bl	6be4 <printk>
    60ce:	4848      	ldr	r0, [pc, #288]	; (61f0 <z_add_timeout+0x188>)
    60d0:	2181      	movs	r1, #129	; 0x81
    60d2:	f000 fcb3 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    60d6:	4845      	ldr	r0, [pc, #276]	; (61ec <z_add_timeout+0x184>)
    60d8:	f7ff ff6e 	bl	5fb8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    60dc:	f06f 0301 	mvn.w	r3, #1
    60e0:	ebb3 0804 	subs.w	r8, r3, r4
    60e4:	f04f 32ff 	mov.w	r2, #4294967295
    60e8:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    60ec:	f1b8 0f00 	cmp.w	r8, #0
    60f0:	f179 0100 	sbcs.w	r1, r9, #0
    60f4:	db1c      	blt.n	6130 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    60f6:	4841      	ldr	r0, [pc, #260]	; (61fc <z_add_timeout+0x194>)
    60f8:	e9d0 1000 	ldrd	r1, r0, [r0]
    60fc:	1a5b      	subs	r3, r3, r1
    60fe:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    6102:	1b1e      	subs	r6, r3, r4
    6104:	eb62 0705 	sbc.w	r7, r2, r5
    6108:	2e01      	cmp	r6, #1
    610a:	f177 0300 	sbcs.w	r3, r7, #0
    610e:	bfbc      	itt	lt
    6110:	2601      	movlt	r6, #1
    6112:	2700      	movlt	r7, #0
    6114:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    6118:	4a39      	ldr	r2, [pc, #228]	; (6200 <z_add_timeout+0x198>)
    611a:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    611e:	4293      	cmp	r3, r2
    6120:	d11d      	bne.n	615e <z_add_timeout+0xf6>
	node->prev = tail;
    6122:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    6126:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    612a:	f8c2 a004 	str.w	sl, [r2, #4]
}
    612e:	e02c      	b.n	618a <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6130:	f7ff ff4a 	bl	5fc8 <elapsed>
    6134:	1c63      	adds	r3, r4, #1
    6136:	9300      	str	r3, [sp, #0]
    6138:	f145 0300 	adc.w	r3, r5, #0
    613c:	9301      	str	r3, [sp, #4]
    613e:	e9dd 2300 	ldrd	r2, r3, [sp]
    6142:	1812      	adds	r2, r2, r0
    6144:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6148:	e9ca 2304 	strd	r2, r3, [sl, #16]
    614c:	e7e4      	b.n	6118 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    614e:	1be0      	subs	r0, r4, r7
    6150:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    6154:	42b3      	cmp	r3, r6
    6156:	e9ca 0104 	strd	r0, r1, [sl, #16]
    615a:	d0e2      	beq.n	6122 <z_add_timeout+0xba>
    615c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    615e:	2b00      	cmp	r3, #0
    6160:	d0df      	beq.n	6122 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    6162:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    6166:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    616a:	42bc      	cmp	r4, r7
    616c:	eb75 0108 	sbcs.w	r1, r5, r8
    6170:	daed      	bge.n	614e <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    6172:	1b38      	subs	r0, r7, r4
    6174:	eb68 0105 	sbc.w	r1, r8, r5
    6178:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    617c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    617e:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    6182:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    6186:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    618a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    618c:	4293      	cmp	r3, r2
    618e:	d00b      	beq.n	61a8 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6190:	459a      	cmp	sl, r3
    6192:	d109      	bne.n	61a8 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6194:	f7ff ff22 	bl	5fdc <next_timeout>

			if (next_time == 0 ||
    6198:	b118      	cbz	r0, 61a2 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    619a:	4b1a      	ldr	r3, [pc, #104]	; (6204 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    619c:	691b      	ldr	r3, [r3, #16]
    619e:	4283      	cmp	r3, r0
    61a0:	d002      	beq.n	61a8 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    61a2:	2100      	movs	r1, #0
    61a4:	f7fd f8c4 	bl	3330 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61a8:	4810      	ldr	r0, [pc, #64]	; (61ec <z_add_timeout+0x184>)
    61aa:	f7ff fef5 	bl	5f98 <z_spin_unlock_valid>
    61ae:	b968      	cbnz	r0, 61cc <z_add_timeout+0x164>
    61b0:	4a0f      	ldr	r2, [pc, #60]	; (61f0 <z_add_timeout+0x188>)
    61b2:	4915      	ldr	r1, [pc, #84]	; (6208 <z_add_timeout+0x1a0>)
    61b4:	480b      	ldr	r0, [pc, #44]	; (61e4 <z_add_timeout+0x17c>)
    61b6:	23ac      	movs	r3, #172	; 0xac
    61b8:	f000 fd14 	bl	6be4 <printk>
    61bc:	490b      	ldr	r1, [pc, #44]	; (61ec <z_add_timeout+0x184>)
    61be:	4813      	ldr	r0, [pc, #76]	; (620c <z_add_timeout+0x1a4>)
    61c0:	f000 fd10 	bl	6be4 <printk>
    61c4:	480a      	ldr	r0, [pc, #40]	; (61f0 <z_add_timeout+0x188>)
    61c6:	21ac      	movs	r1, #172	; 0xac
    61c8:	f000 fc38 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    61cc:	f38b 8811 	msr	BASEPRI, fp
    61d0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    61d4:	b003      	add	sp, #12
    61d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61da:	bf00      	nop
    61dc:	000083f7 	.word	0x000083f7
    61e0:	000083d3 	.word	0x000083d3
    61e4:	0000779d 	.word	0x0000779d
    61e8:	000080f8 	.word	0x000080f8
    61ec:	20000b50 	.word	0x20000b50
    61f0:	000078b0 	.word	0x000078b0
    61f4:	00007902 	.word	0x00007902
    61f8:	00007917 	.word	0x00007917
    61fc:	20000448 	.word	0x20000448
    6200:	200000dc 	.word	0x200000dc
    6204:	20000b0c 	.word	0x20000b0c
    6208:	000078d6 	.word	0x000078d6
    620c:	000078ed 	.word	0x000078ed

00006210 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6210:	b538      	push	{r3, r4, r5, lr}
    6212:	4604      	mov	r4, r0
	__asm__ volatile(
    6214:	f04f 0320 	mov.w	r3, #32
    6218:	f3ef 8511 	mrs	r5, BASEPRI
    621c:	f383 8812 	msr	BASEPRI_MAX, r3
    6220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6224:	481a      	ldr	r0, [pc, #104]	; (6290 <z_abort_timeout+0x80>)
    6226:	f7ff fea9 	bl	5f7c <z_spin_lock_valid>
    622a:	b968      	cbnz	r0, 6248 <z_abort_timeout+0x38>
    622c:	4a19      	ldr	r2, [pc, #100]	; (6294 <z_abort_timeout+0x84>)
    622e:	491a      	ldr	r1, [pc, #104]	; (6298 <z_abort_timeout+0x88>)
    6230:	481a      	ldr	r0, [pc, #104]	; (629c <z_abort_timeout+0x8c>)
    6232:	2381      	movs	r3, #129	; 0x81
    6234:	f000 fcd6 	bl	6be4 <printk>
    6238:	4915      	ldr	r1, [pc, #84]	; (6290 <z_abort_timeout+0x80>)
    623a:	4819      	ldr	r0, [pc, #100]	; (62a0 <z_abort_timeout+0x90>)
    623c:	f000 fcd2 	bl	6be4 <printk>
    6240:	4814      	ldr	r0, [pc, #80]	; (6294 <z_abort_timeout+0x84>)
    6242:	2181      	movs	r1, #129	; 0x81
    6244:	f000 fbfa 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    6248:	4811      	ldr	r0, [pc, #68]	; (6290 <z_abort_timeout+0x80>)
    624a:	f7ff feb5 	bl	5fb8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    624e:	6823      	ldr	r3, [r4, #0]
    6250:	b1db      	cbz	r3, 628a <z_abort_timeout+0x7a>
			remove_timeout(to);
    6252:	4620      	mov	r0, r4
    6254:	f7ff feee 	bl	6034 <remove_timeout>
			ret = 0;
    6258:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    625a:	480d      	ldr	r0, [pc, #52]	; (6290 <z_abort_timeout+0x80>)
    625c:	f7ff fe9c 	bl	5f98 <z_spin_unlock_valid>
    6260:	b968      	cbnz	r0, 627e <z_abort_timeout+0x6e>
    6262:	4a0c      	ldr	r2, [pc, #48]	; (6294 <z_abort_timeout+0x84>)
    6264:	490f      	ldr	r1, [pc, #60]	; (62a4 <z_abort_timeout+0x94>)
    6266:	480d      	ldr	r0, [pc, #52]	; (629c <z_abort_timeout+0x8c>)
    6268:	23ac      	movs	r3, #172	; 0xac
    626a:	f000 fcbb 	bl	6be4 <printk>
    626e:	4908      	ldr	r1, [pc, #32]	; (6290 <z_abort_timeout+0x80>)
    6270:	480d      	ldr	r0, [pc, #52]	; (62a8 <z_abort_timeout+0x98>)
    6272:	f000 fcb7 	bl	6be4 <printk>
    6276:	4807      	ldr	r0, [pc, #28]	; (6294 <z_abort_timeout+0x84>)
    6278:	21ac      	movs	r1, #172	; 0xac
    627a:	f000 fbdf 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    627e:	f385 8811 	msr	BASEPRI, r5
    6282:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6286:	4620      	mov	r0, r4
    6288:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    628a:	f06f 0415 	mvn.w	r4, #21
    628e:	e7e4      	b.n	625a <z_abort_timeout+0x4a>
    6290:	20000b50 	.word	0x20000b50
    6294:	000078b0 	.word	0x000078b0
    6298:	00007902 	.word	0x00007902
    629c:	0000779d 	.word	0x0000779d
    62a0:	00007917 	.word	0x00007917
    62a4:	000078d6 	.word	0x000078d6
    62a8:	000078ed 	.word	0x000078ed

000062ac <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    62ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    62ae:	f04f 0320 	mov.w	r3, #32
    62b2:	f3ef 8511 	mrs	r5, BASEPRI
    62b6:	f383 8812 	msr	BASEPRI_MAX, r3
    62ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62be:	4818      	ldr	r0, [pc, #96]	; (6320 <z_get_next_timeout_expiry+0x74>)
    62c0:	f7ff fe5c 	bl	5f7c <z_spin_lock_valid>
    62c4:	b968      	cbnz	r0, 62e2 <z_get_next_timeout_expiry+0x36>
    62c6:	4a17      	ldr	r2, [pc, #92]	; (6324 <z_get_next_timeout_expiry+0x78>)
    62c8:	4917      	ldr	r1, [pc, #92]	; (6328 <z_get_next_timeout_expiry+0x7c>)
    62ca:	4818      	ldr	r0, [pc, #96]	; (632c <z_get_next_timeout_expiry+0x80>)
    62cc:	2381      	movs	r3, #129	; 0x81
    62ce:	f000 fc89 	bl	6be4 <printk>
    62d2:	4913      	ldr	r1, [pc, #76]	; (6320 <z_get_next_timeout_expiry+0x74>)
    62d4:	4816      	ldr	r0, [pc, #88]	; (6330 <z_get_next_timeout_expiry+0x84>)
    62d6:	f000 fc85 	bl	6be4 <printk>
    62da:	4812      	ldr	r0, [pc, #72]	; (6324 <z_get_next_timeout_expiry+0x78>)
    62dc:	2181      	movs	r1, #129	; 0x81
    62de:	f000 fbad 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    62e2:	480f      	ldr	r0, [pc, #60]	; (6320 <z_get_next_timeout_expiry+0x74>)
    62e4:	f7ff fe68 	bl	5fb8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    62e8:	f7ff fe78 	bl	5fdc <next_timeout>
    62ec:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62ee:	480c      	ldr	r0, [pc, #48]	; (6320 <z_get_next_timeout_expiry+0x74>)
    62f0:	f7ff fe52 	bl	5f98 <z_spin_unlock_valid>
    62f4:	b968      	cbnz	r0, 6312 <z_get_next_timeout_expiry+0x66>
    62f6:	4a0b      	ldr	r2, [pc, #44]	; (6324 <z_get_next_timeout_expiry+0x78>)
    62f8:	490e      	ldr	r1, [pc, #56]	; (6334 <z_get_next_timeout_expiry+0x88>)
    62fa:	480c      	ldr	r0, [pc, #48]	; (632c <z_get_next_timeout_expiry+0x80>)
    62fc:	23ac      	movs	r3, #172	; 0xac
    62fe:	f000 fc71 	bl	6be4 <printk>
    6302:	4907      	ldr	r1, [pc, #28]	; (6320 <z_get_next_timeout_expiry+0x74>)
    6304:	480c      	ldr	r0, [pc, #48]	; (6338 <z_get_next_timeout_expiry+0x8c>)
    6306:	f000 fc6d 	bl	6be4 <printk>
    630a:	4806      	ldr	r0, [pc, #24]	; (6324 <z_get_next_timeout_expiry+0x78>)
    630c:	21ac      	movs	r1, #172	; 0xac
    630e:	f000 fb95 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    6312:	f385 8811 	msr	BASEPRI, r5
    6316:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    631a:	4620      	mov	r0, r4
    631c:	bd38      	pop	{r3, r4, r5, pc}
    631e:	bf00      	nop
    6320:	20000b50 	.word	0x20000b50
    6324:	000078b0 	.word	0x000078b0
    6328:	00007902 	.word	0x00007902
    632c:	0000779d 	.word	0x0000779d
    6330:	00007917 	.word	0x00007917
    6334:	000078d6 	.word	0x000078d6
    6338:	000078ed 	.word	0x000078ed

0000633c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    633c:	b570      	push	{r4, r5, r6, lr}
    633e:	4604      	mov	r4, r0
    6340:	460d      	mov	r5, r1
	__asm__ volatile(
    6342:	f04f 0320 	mov.w	r3, #32
    6346:	f3ef 8611 	mrs	r6, BASEPRI
    634a:	f383 8812 	msr	BASEPRI_MAX, r3
    634e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6352:	481b      	ldr	r0, [pc, #108]	; (63c0 <z_set_timeout_expiry+0x84>)
    6354:	f7ff fe12 	bl	5f7c <z_spin_lock_valid>
    6358:	b968      	cbnz	r0, 6376 <z_set_timeout_expiry+0x3a>
    635a:	4a1a      	ldr	r2, [pc, #104]	; (63c4 <z_set_timeout_expiry+0x88>)
    635c:	491a      	ldr	r1, [pc, #104]	; (63c8 <z_set_timeout_expiry+0x8c>)
    635e:	481b      	ldr	r0, [pc, #108]	; (63cc <z_set_timeout_expiry+0x90>)
    6360:	2381      	movs	r3, #129	; 0x81
    6362:	f000 fc3f 	bl	6be4 <printk>
    6366:	4916      	ldr	r1, [pc, #88]	; (63c0 <z_set_timeout_expiry+0x84>)
    6368:	4819      	ldr	r0, [pc, #100]	; (63d0 <z_set_timeout_expiry+0x94>)
    636a:	f000 fc3b 	bl	6be4 <printk>
    636e:	4815      	ldr	r0, [pc, #84]	; (63c4 <z_set_timeout_expiry+0x88>)
    6370:	2181      	movs	r1, #129	; 0x81
    6372:	f000 fb63 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    6376:	4812      	ldr	r0, [pc, #72]	; (63c0 <z_set_timeout_expiry+0x84>)
    6378:	f7ff fe1e 	bl	5fb8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    637c:	f7ff fe2e 	bl	5fdc <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6380:	2801      	cmp	r0, #1
    6382:	dd05      	ble.n	6390 <z_set_timeout_expiry+0x54>
    6384:	42a0      	cmp	r0, r4
    6386:	db03      	blt.n	6390 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6388:	4629      	mov	r1, r5
    638a:	4620      	mov	r0, r4
    638c:	f7fc ffd0 	bl	3330 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6390:	480b      	ldr	r0, [pc, #44]	; (63c0 <z_set_timeout_expiry+0x84>)
    6392:	f7ff fe01 	bl	5f98 <z_spin_unlock_valid>
    6396:	b968      	cbnz	r0, 63b4 <z_set_timeout_expiry+0x78>
    6398:	4a0a      	ldr	r2, [pc, #40]	; (63c4 <z_set_timeout_expiry+0x88>)
    639a:	490e      	ldr	r1, [pc, #56]	; (63d4 <z_set_timeout_expiry+0x98>)
    639c:	480b      	ldr	r0, [pc, #44]	; (63cc <z_set_timeout_expiry+0x90>)
    639e:	23ac      	movs	r3, #172	; 0xac
    63a0:	f000 fc20 	bl	6be4 <printk>
    63a4:	4906      	ldr	r1, [pc, #24]	; (63c0 <z_set_timeout_expiry+0x84>)
    63a6:	480c      	ldr	r0, [pc, #48]	; (63d8 <z_set_timeout_expiry+0x9c>)
    63a8:	f000 fc1c 	bl	6be4 <printk>
    63ac:	4805      	ldr	r0, [pc, #20]	; (63c4 <z_set_timeout_expiry+0x88>)
    63ae:	21ac      	movs	r1, #172	; 0xac
    63b0:	f000 fb44 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    63b4:	f386 8811 	msr	BASEPRI, r6
    63b8:	f3bf 8f6f 	isb	sy
		}
	}
}
    63bc:	bd70      	pop	{r4, r5, r6, pc}
    63be:	bf00      	nop
    63c0:	20000b50 	.word	0x20000b50
    63c4:	000078b0 	.word	0x000078b0
    63c8:	00007902 	.word	0x00007902
    63cc:	0000779d 	.word	0x0000779d
    63d0:	00007917 	.word	0x00007917
    63d4:	000078d6 	.word	0x000078d6
    63d8:	000078ed 	.word	0x000078ed

000063dc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    63dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63e0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    63e2:	f7fe fcf3 	bl	4dcc <z_time_slice>
	__asm__ volatile(
    63e6:	f04f 0320 	mov.w	r3, #32
    63ea:	f3ef 8711 	mrs	r7, BASEPRI
    63ee:	f383 8812 	msr	BASEPRI_MAX, r3
    63f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63f6:	4855      	ldr	r0, [pc, #340]	; (654c <sys_clock_announce+0x170>)
    63f8:	f7ff fdc0 	bl	5f7c <z_spin_lock_valid>
    63fc:	b968      	cbnz	r0, 641a <sys_clock_announce+0x3e>
    63fe:	4a54      	ldr	r2, [pc, #336]	; (6550 <sys_clock_announce+0x174>)
    6400:	4954      	ldr	r1, [pc, #336]	; (6554 <sys_clock_announce+0x178>)
    6402:	4855      	ldr	r0, [pc, #340]	; (6558 <sys_clock_announce+0x17c>)
    6404:	2381      	movs	r3, #129	; 0x81
    6406:	f000 fbed 	bl	6be4 <printk>
    640a:	4950      	ldr	r1, [pc, #320]	; (654c <sys_clock_announce+0x170>)
    640c:	4853      	ldr	r0, [pc, #332]	; (655c <sys_clock_announce+0x180>)
    640e:	f000 fbe9 	bl	6be4 <printk>
    6412:	484f      	ldr	r0, [pc, #316]	; (6550 <sys_clock_announce+0x174>)
    6414:	2181      	movs	r1, #129	; 0x81
    6416:	f000 fb11 	bl	6a3c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    641a:	4d51      	ldr	r5, [pc, #324]	; (6560 <sys_clock_announce+0x184>)
    641c:	4e51      	ldr	r6, [pc, #324]	; (6564 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    641e:	484b      	ldr	r0, [pc, #300]	; (654c <sys_clock_announce+0x170>)
	return list->head == list;
    6420:	f8df a14c 	ldr.w	sl, [pc, #332]	; 6570 <sys_clock_announce+0x194>
    6424:	f7ff fdc8 	bl	5fb8 <z_spin_lock_set_owner>
    6428:	46b3      	mov	fp, r6
    642a:	602c      	str	r4, [r5, #0]
    642c:	e9d6 2300 	ldrd	r2, r3, [r6]
    6430:	f8d5 c000 	ldr.w	ip, [r5]
    6434:	f8da 4000 	ldr.w	r4, [sl]
    6438:	e9cd 2300 	strd	r2, r3, [sp]
    643c:	4662      	mov	r2, ip
    643e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6440:	4554      	cmp	r4, sl
    6442:	46e0      	mov	r8, ip
    6444:	4699      	mov	r9, r3
    6446:	d00c      	beq.n	6462 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6448:	b15c      	cbz	r4, 6462 <sys_clock_announce+0x86>
    644a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    644e:	458c      	cmp	ip, r1
    6450:	eb79 0302 	sbcs.w	r3, r9, r2
    6454:	da2e      	bge.n	64b4 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6456:	ebb1 000c 	subs.w	r0, r1, ip
    645a:	eb62 0109 	sbc.w	r1, r2, r9
    645e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    6462:	9a00      	ldr	r2, [sp, #0]
    6464:	9901      	ldr	r1, [sp, #4]
    6466:	eb18 0202 	adds.w	r2, r8, r2
    646a:	464b      	mov	r3, r9
    646c:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    6470:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6472:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    6476:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6478:	f7ff fdb0 	bl	5fdc <next_timeout>
    647c:	4621      	mov	r1, r4
    647e:	f7fc ff57 	bl	3330 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6482:	4832      	ldr	r0, [pc, #200]	; (654c <sys_clock_announce+0x170>)
    6484:	f7ff fd88 	bl	5f98 <z_spin_unlock_valid>
    6488:	b968      	cbnz	r0, 64a6 <sys_clock_announce+0xca>
    648a:	4a31      	ldr	r2, [pc, #196]	; (6550 <sys_clock_announce+0x174>)
    648c:	4936      	ldr	r1, [pc, #216]	; (6568 <sys_clock_announce+0x18c>)
    648e:	4832      	ldr	r0, [pc, #200]	; (6558 <sys_clock_announce+0x17c>)
    6490:	23ac      	movs	r3, #172	; 0xac
    6492:	f000 fba7 	bl	6be4 <printk>
    6496:	492d      	ldr	r1, [pc, #180]	; (654c <sys_clock_announce+0x170>)
    6498:	4834      	ldr	r0, [pc, #208]	; (656c <sys_clock_announce+0x190>)
    649a:	f000 fba3 	bl	6be4 <printk>
    649e:	482c      	ldr	r0, [pc, #176]	; (6550 <sys_clock_announce+0x174>)
    64a0:	21ac      	movs	r1, #172	; 0xac
    64a2:	f000 facb 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    64a6:	f387 8811 	msr	BASEPRI, r7
    64aa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    64ae:	b003      	add	sp, #12
    64b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    64b4:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    64b8:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    64bc:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    64c0:	f04f 0200 	mov.w	r2, #0
    64c4:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    64c8:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    64cc:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    64ce:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    64d2:	4620      	mov	r0, r4
		curr_tick += dt;
    64d4:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    64d8:	f7ff fdac 	bl	6034 <remove_timeout>
    64dc:	481b      	ldr	r0, [pc, #108]	; (654c <sys_clock_announce+0x170>)
    64de:	f7ff fd5b 	bl	5f98 <z_spin_unlock_valid>
    64e2:	b968      	cbnz	r0, 6500 <sys_clock_announce+0x124>
    64e4:	4a1a      	ldr	r2, [pc, #104]	; (6550 <sys_clock_announce+0x174>)
    64e6:	4920      	ldr	r1, [pc, #128]	; (6568 <sys_clock_announce+0x18c>)
    64e8:	481b      	ldr	r0, [pc, #108]	; (6558 <sys_clock_announce+0x17c>)
    64ea:	23ac      	movs	r3, #172	; 0xac
    64ec:	f000 fb7a 	bl	6be4 <printk>
    64f0:	4916      	ldr	r1, [pc, #88]	; (654c <sys_clock_announce+0x170>)
    64f2:	481e      	ldr	r0, [pc, #120]	; (656c <sys_clock_announce+0x190>)
    64f4:	f000 fb76 	bl	6be4 <printk>
    64f8:	4815      	ldr	r0, [pc, #84]	; (6550 <sys_clock_announce+0x174>)
    64fa:	21ac      	movs	r1, #172	; 0xac
    64fc:	f000 fa9e 	bl	6a3c <assert_post_action>
    6500:	f387 8811 	msr	BASEPRI, r7
    6504:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6508:	68a3      	ldr	r3, [r4, #8]
    650a:	4620      	mov	r0, r4
    650c:	4798      	blx	r3
	__asm__ volatile(
    650e:	f04f 0320 	mov.w	r3, #32
    6512:	f3ef 8711 	mrs	r7, BASEPRI
    6516:	f383 8812 	msr	BASEPRI_MAX, r3
    651a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    651e:	480b      	ldr	r0, [pc, #44]	; (654c <sys_clock_announce+0x170>)
    6520:	f7ff fd2c 	bl	5f7c <z_spin_lock_valid>
    6524:	b968      	cbnz	r0, 6542 <sys_clock_announce+0x166>
    6526:	4a0a      	ldr	r2, [pc, #40]	; (6550 <sys_clock_announce+0x174>)
    6528:	490a      	ldr	r1, [pc, #40]	; (6554 <sys_clock_announce+0x178>)
    652a:	480b      	ldr	r0, [pc, #44]	; (6558 <sys_clock_announce+0x17c>)
    652c:	2381      	movs	r3, #129	; 0x81
    652e:	f000 fb59 	bl	6be4 <printk>
    6532:	4906      	ldr	r1, [pc, #24]	; (654c <sys_clock_announce+0x170>)
    6534:	4809      	ldr	r0, [pc, #36]	; (655c <sys_clock_announce+0x180>)
    6536:	f000 fb55 	bl	6be4 <printk>
    653a:	4805      	ldr	r0, [pc, #20]	; (6550 <sys_clock_announce+0x174>)
    653c:	2181      	movs	r1, #129	; 0x81
    653e:	f000 fa7d 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    6542:	4802      	ldr	r0, [pc, #8]	; (654c <sys_clock_announce+0x170>)
    6544:	f7ff fd38 	bl	5fb8 <z_spin_lock_set_owner>
	return k;
    6548:	e770      	b.n	642c <sys_clock_announce+0x50>
    654a:	bf00      	nop
    654c:	20000b50 	.word	0x20000b50
    6550:	000078b0 	.word	0x000078b0
    6554:	00007902 	.word	0x00007902
    6558:	0000779d 	.word	0x0000779d
    655c:	00007917 	.word	0x00007917
    6560:	20000b4c 	.word	0x20000b4c
    6564:	20000448 	.word	0x20000448
    6568:	000078d6 	.word	0x000078d6
    656c:	000078ed 	.word	0x000078ed
    6570:	200000dc 	.word	0x200000dc

00006574 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6574:	b570      	push	{r4, r5, r6, lr}
    6576:	f04f 0320 	mov.w	r3, #32
    657a:	f3ef 8611 	mrs	r6, BASEPRI
    657e:	f383 8812 	msr	BASEPRI_MAX, r3
    6582:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6586:	481b      	ldr	r0, [pc, #108]	; (65f4 <sys_clock_tick_get+0x80>)
    6588:	f7ff fcf8 	bl	5f7c <z_spin_lock_valid>
    658c:	b968      	cbnz	r0, 65aa <sys_clock_tick_get+0x36>
    658e:	4a1a      	ldr	r2, [pc, #104]	; (65f8 <sys_clock_tick_get+0x84>)
    6590:	491a      	ldr	r1, [pc, #104]	; (65fc <sys_clock_tick_get+0x88>)
    6592:	481b      	ldr	r0, [pc, #108]	; (6600 <sys_clock_tick_get+0x8c>)
    6594:	2381      	movs	r3, #129	; 0x81
    6596:	f000 fb25 	bl	6be4 <printk>
    659a:	4916      	ldr	r1, [pc, #88]	; (65f4 <sys_clock_tick_get+0x80>)
    659c:	4819      	ldr	r0, [pc, #100]	; (6604 <sys_clock_tick_get+0x90>)
    659e:	f000 fb21 	bl	6be4 <printk>
    65a2:	4815      	ldr	r0, [pc, #84]	; (65f8 <sys_clock_tick_get+0x84>)
    65a4:	2181      	movs	r1, #129	; 0x81
    65a6:	f000 fa49 	bl	6a3c <assert_post_action>
	z_spin_lock_set_owner(l);
    65aa:	4812      	ldr	r0, [pc, #72]	; (65f4 <sys_clock_tick_get+0x80>)
    65ac:	f7ff fd04 	bl	5fb8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    65b0:	f7fc feee 	bl	3390 <sys_clock_elapsed>
    65b4:	4b14      	ldr	r3, [pc, #80]	; (6608 <sys_clock_tick_get+0x94>)
    65b6:	e9d3 4500 	ldrd	r4, r5, [r3]
    65ba:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65bc:	480d      	ldr	r0, [pc, #52]	; (65f4 <sys_clock_tick_get+0x80>)
    65be:	f145 0500 	adc.w	r5, r5, #0
    65c2:	f7ff fce9 	bl	5f98 <z_spin_unlock_valid>
    65c6:	b968      	cbnz	r0, 65e4 <sys_clock_tick_get+0x70>
    65c8:	4a0b      	ldr	r2, [pc, #44]	; (65f8 <sys_clock_tick_get+0x84>)
    65ca:	4910      	ldr	r1, [pc, #64]	; (660c <sys_clock_tick_get+0x98>)
    65cc:	480c      	ldr	r0, [pc, #48]	; (6600 <sys_clock_tick_get+0x8c>)
    65ce:	23ac      	movs	r3, #172	; 0xac
    65d0:	f000 fb08 	bl	6be4 <printk>
    65d4:	4907      	ldr	r1, [pc, #28]	; (65f4 <sys_clock_tick_get+0x80>)
    65d6:	480e      	ldr	r0, [pc, #56]	; (6610 <sys_clock_tick_get+0x9c>)
    65d8:	f000 fb04 	bl	6be4 <printk>
    65dc:	4806      	ldr	r0, [pc, #24]	; (65f8 <sys_clock_tick_get+0x84>)
    65de:	21ac      	movs	r1, #172	; 0xac
    65e0:	f000 fa2c 	bl	6a3c <assert_post_action>
	__asm__ volatile(
    65e4:	f386 8811 	msr	BASEPRI, r6
    65e8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    65ec:	4620      	mov	r0, r4
    65ee:	4629      	mov	r1, r5
    65f0:	bd70      	pop	{r4, r5, r6, pc}
    65f2:	bf00      	nop
    65f4:	20000b50 	.word	0x20000b50
    65f8:	000078b0 	.word	0x000078b0
    65fc:	00007902 	.word	0x00007902
    6600:	0000779d 	.word	0x0000779d
    6604:	00007917 	.word	0x00007917
    6608:	20000448 	.word	0x20000448
    660c:	000078d6 	.word	0x000078d6
    6610:	000078ed 	.word	0x000078ed

00006614 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6614:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6616:	4806      	ldr	r0, [pc, #24]	; (6630 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6618:	4a06      	ldr	r2, [pc, #24]	; (6634 <z_data_copy+0x20>)
    661a:	4907      	ldr	r1, [pc, #28]	; (6638 <z_data_copy+0x24>)
    661c:	1a12      	subs	r2, r2, r0
    661e:	f000 fb39 	bl	6c94 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6626:	4a05      	ldr	r2, [pc, #20]	; (663c <z_data_copy+0x28>)
    6628:	4905      	ldr	r1, [pc, #20]	; (6640 <z_data_copy+0x2c>)
    662a:	4806      	ldr	r0, [pc, #24]	; (6644 <z_data_copy+0x30>)
    662c:	f000 bb32 	b.w	6c94 <memcpy>
    6630:	20000000 	.word	0x20000000
    6634:	200001a8 	.word	0x200001a8
    6638:	00008450 	.word	0x00008450
    663c:	00000000 	.word	0x00000000
    6640:	00008450 	.word	0x00008450
    6644:	20000000 	.word	0x20000000

00006648 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6648:	4a02      	ldr	r2, [pc, #8]	; (6654 <boot_banner+0xc>)
    664a:	4903      	ldr	r1, [pc, #12]	; (6658 <boot_banner+0x10>)
    664c:	4803      	ldr	r0, [pc, #12]	; (665c <boot_banner+0x14>)
    664e:	f000 bac9 	b.w	6be4 <printk>
    6652:	bf00      	nop
    6654:	000080fa 	.word	0x000080fa
    6658:	00008417 	.word	0x00008417
    665c:	00008426 	.word	0x00008426

00006660 <nrf_cc3xx_platform_init_no_rng>:
    6660:	b510      	push	{r4, lr}
    6662:	4c0a      	ldr	r4, [pc, #40]	; (668c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6664:	6823      	ldr	r3, [r4, #0]
    6666:	b11b      	cbz	r3, 6670 <nrf_cc3xx_platform_init_no_rng+0x10>
    6668:	2301      	movs	r3, #1
    666a:	6023      	str	r3, [r4, #0]
    666c:	2000      	movs	r0, #0
    666e:	bd10      	pop	{r4, pc}
    6670:	f000 f8d6 	bl	6820 <CC_LibInitNoRng>
    6674:	2800      	cmp	r0, #0
    6676:	d0f7      	beq.n	6668 <nrf_cc3xx_platform_init_no_rng+0x8>
    6678:	3801      	subs	r0, #1
    667a:	2806      	cmp	r0, #6
    667c:	d803      	bhi.n	6686 <nrf_cc3xx_platform_init_no_rng+0x26>
    667e:	4b04      	ldr	r3, [pc, #16]	; (6690 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6680:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6684:	bd10      	pop	{r4, pc}
    6686:	4803      	ldr	r0, [pc, #12]	; (6694 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6688:	bd10      	pop	{r4, pc}
    668a:	bf00      	nop
    668c:	20000b54 	.word	0x20000b54
    6690:	000074d4 	.word	0x000074d4
    6694:	ffff8ffe 	.word	0xffff8ffe

00006698 <nrf_cc3xx_platform_abort>:
    6698:	f3bf 8f4f 	dsb	sy
    669c:	4905      	ldr	r1, [pc, #20]	; (66b4 <nrf_cc3xx_platform_abort+0x1c>)
    669e:	4b06      	ldr	r3, [pc, #24]	; (66b8 <nrf_cc3xx_platform_abort+0x20>)
    66a0:	68ca      	ldr	r2, [r1, #12]
    66a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    66a6:	4313      	orrs	r3, r2
    66a8:	60cb      	str	r3, [r1, #12]
    66aa:	f3bf 8f4f 	dsb	sy
    66ae:	bf00      	nop
    66b0:	e7fd      	b.n	66ae <nrf_cc3xx_platform_abort+0x16>
    66b2:	bf00      	nop
    66b4:	e000ed00 	.word	0xe000ed00
    66b8:	05fa0004 	.word	0x05fa0004

000066bc <CC_PalAbort>:
    66bc:	b4f0      	push	{r4, r5, r6, r7}
    66be:	4f09      	ldr	r7, [pc, #36]	; (66e4 <CC_PalAbort+0x28>)
    66c0:	4e09      	ldr	r6, [pc, #36]	; (66e8 <CC_PalAbort+0x2c>)
    66c2:	4c0a      	ldr	r4, [pc, #40]	; (66ec <CC_PalAbort+0x30>)
    66c4:	4a0a      	ldr	r2, [pc, #40]	; (66f0 <CC_PalAbort+0x34>)
    66c6:	4d0b      	ldr	r5, [pc, #44]	; (66f4 <CC_PalAbort+0x38>)
    66c8:	490b      	ldr	r1, [pc, #44]	; (66f8 <CC_PalAbort+0x3c>)
    66ca:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    66ce:	603b      	str	r3, [r7, #0]
    66d0:	6852      	ldr	r2, [r2, #4]
    66d2:	6033      	str	r3, [r6, #0]
    66d4:	6023      	str	r3, [r4, #0]
    66d6:	2400      	movs	r4, #0
    66d8:	602b      	str	r3, [r5, #0]
    66da:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    66de:	bcf0      	pop	{r4, r5, r6, r7}
    66e0:	4710      	bx	r2
    66e2:	bf00      	nop
    66e4:	5002b400 	.word	0x5002b400
    66e8:	5002b404 	.word	0x5002b404
    66ec:	5002b408 	.word	0x5002b408
    66f0:	200000e4 	.word	0x200000e4
    66f4:	5002b40c 	.word	0x5002b40c
    66f8:	5002a000 	.word	0x5002a000

000066fc <nrf_cc3xx_platform_set_abort>:
    66fc:	e9d0 1200 	ldrd	r1, r2, [r0]
    6700:	4b01      	ldr	r3, [pc, #4]	; (6708 <nrf_cc3xx_platform_set_abort+0xc>)
    6702:	e9c3 1200 	strd	r1, r2, [r3]
    6706:	4770      	bx	lr
    6708:	200000e4 	.word	0x200000e4

0000670c <mutex_free>:
    670c:	b510      	push	{r4, lr}
    670e:	4604      	mov	r4, r0
    6710:	b130      	cbz	r0, 6720 <mutex_free+0x14>
    6712:	6863      	ldr	r3, [r4, #4]
    6714:	06db      	lsls	r3, r3, #27
    6716:	d502      	bpl.n	671e <mutex_free+0x12>
    6718:	2300      	movs	r3, #0
    671a:	6023      	str	r3, [r4, #0]
    671c:	6063      	str	r3, [r4, #4]
    671e:	bd10      	pop	{r4, pc}
    6720:	4b02      	ldr	r3, [pc, #8]	; (672c <mutex_free+0x20>)
    6722:	4803      	ldr	r0, [pc, #12]	; (6730 <mutex_free+0x24>)
    6724:	685b      	ldr	r3, [r3, #4]
    6726:	4798      	blx	r3
    6728:	e7f3      	b.n	6712 <mutex_free+0x6>
    672a:	bf00      	nop
    672c:	200000e4 	.word	0x200000e4
    6730:	000074f0 	.word	0x000074f0

00006734 <mutex_unlock>:
    6734:	b168      	cbz	r0, 6752 <mutex_unlock+0x1e>
    6736:	6843      	ldr	r3, [r0, #4]
    6738:	b13b      	cbz	r3, 674a <mutex_unlock+0x16>
    673a:	06db      	lsls	r3, r3, #27
    673c:	d507      	bpl.n	674e <mutex_unlock+0x1a>
    673e:	f3bf 8f5f 	dmb	sy
    6742:	2300      	movs	r3, #0
    6744:	6003      	str	r3, [r0, #0]
    6746:	4618      	mov	r0, r3
    6748:	4770      	bx	lr
    674a:	4803      	ldr	r0, [pc, #12]	; (6758 <mutex_unlock+0x24>)
    674c:	4770      	bx	lr
    674e:	4803      	ldr	r0, [pc, #12]	; (675c <mutex_unlock+0x28>)
    6750:	4770      	bx	lr
    6752:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6756:	4770      	bx	lr
    6758:	ffff8fea 	.word	0xffff8fea
    675c:	ffff8fe9 	.word	0xffff8fe9

00006760 <mutex_init>:
    6760:	b510      	push	{r4, lr}
    6762:	4604      	mov	r4, r0
    6764:	b120      	cbz	r0, 6770 <mutex_init+0x10>
    6766:	2200      	movs	r2, #0
    6768:	2311      	movs	r3, #17
    676a:	6022      	str	r2, [r4, #0]
    676c:	6063      	str	r3, [r4, #4]
    676e:	bd10      	pop	{r4, pc}
    6770:	4801      	ldr	r0, [pc, #4]	; (6778 <mutex_init+0x18>)
    6772:	f7ff ffa3 	bl	66bc <CC_PalAbort>
    6776:	e7f6      	b.n	6766 <mutex_init+0x6>
    6778:	00007518 	.word	0x00007518

0000677c <mutex_lock>:
    677c:	b1c0      	cbz	r0, 67b0 <mutex_lock+0x34>
    677e:	6843      	ldr	r3, [r0, #4]
    6780:	b1a3      	cbz	r3, 67ac <mutex_lock+0x30>
    6782:	06db      	lsls	r3, r3, #27
    6784:	d510      	bpl.n	67a8 <mutex_lock+0x2c>
    6786:	2201      	movs	r2, #1
    6788:	f3bf 8f5b 	dmb	ish
    678c:	e850 3f00 	ldrex	r3, [r0]
    6790:	e840 2100 	strex	r1, r2, [r0]
    6794:	2900      	cmp	r1, #0
    6796:	d1f9      	bne.n	678c <mutex_lock+0x10>
    6798:	f3bf 8f5b 	dmb	ish
    679c:	2b01      	cmp	r3, #1
    679e:	d0f3      	beq.n	6788 <mutex_lock+0xc>
    67a0:	f3bf 8f5f 	dmb	sy
    67a4:	2000      	movs	r0, #0
    67a6:	4770      	bx	lr
    67a8:	4803      	ldr	r0, [pc, #12]	; (67b8 <mutex_lock+0x3c>)
    67aa:	4770      	bx	lr
    67ac:	4803      	ldr	r0, [pc, #12]	; (67bc <mutex_lock+0x40>)
    67ae:	4770      	bx	lr
    67b0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    67b4:	4770      	bx	lr
    67b6:	bf00      	nop
    67b8:	ffff8fe9 	.word	0xffff8fe9
    67bc:	ffff8fea 	.word	0xffff8fea

000067c0 <nrf_cc3xx_platform_set_mutexes>:
    67c0:	b570      	push	{r4, r5, r6, lr}
    67c2:	e9d0 2300 	ldrd	r2, r3, [r0]
    67c6:	4c13      	ldr	r4, [pc, #76]	; (6814 <nrf_cc3xx_platform_set_mutexes+0x54>)
    67c8:	4d13      	ldr	r5, [pc, #76]	; (6818 <nrf_cc3xx_platform_set_mutexes+0x58>)
    67ca:	e9c4 2300 	strd	r2, r3, [r4]
    67ce:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    67d2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    67d6:	4b11      	ldr	r3, [pc, #68]	; (681c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    67d8:	6808      	ldr	r0, [r1, #0]
    67da:	6018      	str	r0, [r3, #0]
    67dc:	6848      	ldr	r0, [r1, #4]
    67de:	6058      	str	r0, [r3, #4]
    67e0:	6888      	ldr	r0, [r1, #8]
    67e2:	6098      	str	r0, [r3, #8]
    67e4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    67e8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    67ec:	60de      	str	r6, [r3, #12]
    67ee:	6118      	str	r0, [r3, #16]
    67f0:	06cb      	lsls	r3, r1, #27
    67f2:	d50d      	bpl.n	6810 <nrf_cc3xx_platform_set_mutexes+0x50>
    67f4:	2300      	movs	r3, #0
    67f6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    67fa:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    67fe:	f505 7088 	add.w	r0, r5, #272	; 0x110
    6802:	4790      	blx	r2
    6804:	6823      	ldr	r3, [r4, #0]
    6806:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    680a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    680e:	4718      	bx	r3
    6810:	bd70      	pop	{r4, r5, r6, pc}
    6812:	bf00      	nop
    6814:	200000f4 	.word	0x200000f4
    6818:	20000f80 	.word	0x20000f80
    681c:	20000104 	.word	0x20000104

00006820 <CC_LibInitNoRng>:
    6820:	b510      	push	{r4, lr}
    6822:	f000 f833 	bl	688c <CC_HalInit>
    6826:	b120      	cbz	r0, 6832 <CC_LibInitNoRng+0x12>
    6828:	2403      	movs	r4, #3
    682a:	f000 f867 	bl	68fc <CC_PalTerminate>
    682e:	4620      	mov	r0, r4
    6830:	bd10      	pop	{r4, pc}
    6832:	f000 f835 	bl	68a0 <CC_PalInit>
    6836:	b990      	cbnz	r0, 685e <CC_LibInitNoRng+0x3e>
    6838:	f000 f8b0 	bl	699c <CC_PalPowerSaveModeSelect>
    683c:	b990      	cbnz	r0, 6864 <CC_LibInitNoRng+0x44>
    683e:	4b0f      	ldr	r3, [pc, #60]	; (687c <CC_LibInitNoRng+0x5c>)
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	0e1b      	lsrs	r3, r3, #24
    6844:	2bf0      	cmp	r3, #240	; 0xf0
    6846:	d108      	bne.n	685a <CC_LibInitNoRng+0x3a>
    6848:	4a0d      	ldr	r2, [pc, #52]	; (6880 <CC_LibInitNoRng+0x60>)
    684a:	4b0e      	ldr	r3, [pc, #56]	; (6884 <CC_LibInitNoRng+0x64>)
    684c:	6812      	ldr	r2, [r2, #0]
    684e:	429a      	cmp	r2, r3
    6850:	d00a      	beq.n	6868 <CC_LibInitNoRng+0x48>
    6852:	2407      	movs	r4, #7
    6854:	f000 f81c 	bl	6890 <CC_HalTerminate>
    6858:	e7e7      	b.n	682a <CC_LibInitNoRng+0xa>
    685a:	2406      	movs	r4, #6
    685c:	e7fa      	b.n	6854 <CC_LibInitNoRng+0x34>
    685e:	2404      	movs	r4, #4
    6860:	4620      	mov	r0, r4
    6862:	bd10      	pop	{r4, pc}
    6864:	2400      	movs	r4, #0
    6866:	e7f5      	b.n	6854 <CC_LibInitNoRng+0x34>
    6868:	2001      	movs	r0, #1
    686a:	f000 f897 	bl	699c <CC_PalPowerSaveModeSelect>
    686e:	4604      	mov	r4, r0
    6870:	2800      	cmp	r0, #0
    6872:	d1f7      	bne.n	6864 <CC_LibInitNoRng+0x44>
    6874:	4b04      	ldr	r3, [pc, #16]	; (6888 <CC_LibInitNoRng+0x68>)
    6876:	6018      	str	r0, [r3, #0]
    6878:	e7d9      	b.n	682e <CC_LibInitNoRng+0xe>
    687a:	bf00      	nop
    687c:	5002b928 	.word	0x5002b928
    6880:	5002ba24 	.word	0x5002ba24
    6884:	20e00000 	.word	0x20e00000
    6888:	5002ba0c 	.word	0x5002ba0c

0000688c <CC_HalInit>:
    688c:	2000      	movs	r0, #0
    688e:	4770      	bx	lr

00006890 <CC_HalTerminate>:
    6890:	2000      	movs	r0, #0
    6892:	4770      	bx	lr

00006894 <CC_HalMaskInterrupt>:
    6894:	4b01      	ldr	r3, [pc, #4]	; (689c <CC_HalMaskInterrupt+0x8>)
    6896:	6018      	str	r0, [r3, #0]
    6898:	4770      	bx	lr
    689a:	bf00      	nop
    689c:	5002ba04 	.word	0x5002ba04

000068a0 <CC_PalInit>:
    68a0:	b510      	push	{r4, lr}
    68a2:	4811      	ldr	r0, [pc, #68]	; (68e8 <CC_PalInit+0x48>)
    68a4:	f000 f848 	bl	6938 <CC_PalMutexCreate>
    68a8:	b100      	cbz	r0, 68ac <CC_PalInit+0xc>
    68aa:	bd10      	pop	{r4, pc}
    68ac:	480f      	ldr	r0, [pc, #60]	; (68ec <CC_PalInit+0x4c>)
    68ae:	f000 f843 	bl	6938 <CC_PalMutexCreate>
    68b2:	2800      	cmp	r0, #0
    68b4:	d1f9      	bne.n	68aa <CC_PalInit+0xa>
    68b6:	4c0e      	ldr	r4, [pc, #56]	; (68f0 <CC_PalInit+0x50>)
    68b8:	4620      	mov	r0, r4
    68ba:	f000 f83d 	bl	6938 <CC_PalMutexCreate>
    68be:	2800      	cmp	r0, #0
    68c0:	d1f3      	bne.n	68aa <CC_PalInit+0xa>
    68c2:	4b0c      	ldr	r3, [pc, #48]	; (68f4 <CC_PalInit+0x54>)
    68c4:	480c      	ldr	r0, [pc, #48]	; (68f8 <CC_PalInit+0x58>)
    68c6:	601c      	str	r4, [r3, #0]
    68c8:	f000 f836 	bl	6938 <CC_PalMutexCreate>
    68cc:	4601      	mov	r1, r0
    68ce:	2800      	cmp	r0, #0
    68d0:	d1eb      	bne.n	68aa <CC_PalInit+0xa>
    68d2:	f000 f82d 	bl	6930 <CC_PalDmaInit>
    68d6:	4604      	mov	r4, r0
    68d8:	b108      	cbz	r0, 68de <CC_PalInit+0x3e>
    68da:	4620      	mov	r0, r4
    68dc:	bd10      	pop	{r4, pc}
    68de:	f000 f83f 	bl	6960 <CC_PalPowerSaveModeInit>
    68e2:	4620      	mov	r0, r4
    68e4:	e7fa      	b.n	68dc <CC_PalInit+0x3c>
    68e6:	bf00      	nop
    68e8:	2000013c 	.word	0x2000013c
    68ec:	20000130 	.word	0x20000130
    68f0:	20000138 	.word	0x20000138
    68f4:	20000140 	.word	0x20000140
    68f8:	20000134 	.word	0x20000134

000068fc <CC_PalTerminate>:
    68fc:	b508      	push	{r3, lr}
    68fe:	4808      	ldr	r0, [pc, #32]	; (6920 <CC_PalTerminate+0x24>)
    6900:	f000 f824 	bl	694c <CC_PalMutexDestroy>
    6904:	4807      	ldr	r0, [pc, #28]	; (6924 <CC_PalTerminate+0x28>)
    6906:	f000 f821 	bl	694c <CC_PalMutexDestroy>
    690a:	4807      	ldr	r0, [pc, #28]	; (6928 <CC_PalTerminate+0x2c>)
    690c:	f000 f81e 	bl	694c <CC_PalMutexDestroy>
    6910:	4806      	ldr	r0, [pc, #24]	; (692c <CC_PalTerminate+0x30>)
    6912:	f000 f81b 	bl	694c <CC_PalMutexDestroy>
    6916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    691a:	f000 b80b 	b.w	6934 <CC_PalDmaTerminate>
    691e:	bf00      	nop
    6920:	2000013c 	.word	0x2000013c
    6924:	20000130 	.word	0x20000130
    6928:	20000138 	.word	0x20000138
    692c:	20000134 	.word	0x20000134

00006930 <CC_PalDmaInit>:
    6930:	2000      	movs	r0, #0
    6932:	4770      	bx	lr

00006934 <CC_PalDmaTerminate>:
    6934:	4770      	bx	lr
    6936:	bf00      	nop

00006938 <CC_PalMutexCreate>:
    6938:	b508      	push	{r3, lr}
    693a:	4b03      	ldr	r3, [pc, #12]	; (6948 <CC_PalMutexCreate+0x10>)
    693c:	6802      	ldr	r2, [r0, #0]
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	6810      	ldr	r0, [r2, #0]
    6942:	4798      	blx	r3
    6944:	2000      	movs	r0, #0
    6946:	bd08      	pop	{r3, pc}
    6948:	200000f4 	.word	0x200000f4

0000694c <CC_PalMutexDestroy>:
    694c:	b508      	push	{r3, lr}
    694e:	4b03      	ldr	r3, [pc, #12]	; (695c <CC_PalMutexDestroy+0x10>)
    6950:	6802      	ldr	r2, [r0, #0]
    6952:	685b      	ldr	r3, [r3, #4]
    6954:	6810      	ldr	r0, [r2, #0]
    6956:	4798      	blx	r3
    6958:	2000      	movs	r0, #0
    695a:	bd08      	pop	{r3, pc}
    695c:	200000f4 	.word	0x200000f4

00006960 <CC_PalPowerSaveModeInit>:
    6960:	b570      	push	{r4, r5, r6, lr}
    6962:	4c09      	ldr	r4, [pc, #36]	; (6988 <CC_PalPowerSaveModeInit+0x28>)
    6964:	4d09      	ldr	r5, [pc, #36]	; (698c <CC_PalPowerSaveModeInit+0x2c>)
    6966:	6920      	ldr	r0, [r4, #16]
    6968:	68ab      	ldr	r3, [r5, #8]
    696a:	4798      	blx	r3
    696c:	b118      	cbz	r0, 6976 <CC_PalPowerSaveModeInit+0x16>
    696e:	4b08      	ldr	r3, [pc, #32]	; (6990 <CC_PalPowerSaveModeInit+0x30>)
    6970:	4808      	ldr	r0, [pc, #32]	; (6994 <CC_PalPowerSaveModeInit+0x34>)
    6972:	685b      	ldr	r3, [r3, #4]
    6974:	4798      	blx	r3
    6976:	4a08      	ldr	r2, [pc, #32]	; (6998 <CC_PalPowerSaveModeInit+0x38>)
    6978:	68eb      	ldr	r3, [r5, #12]
    697a:	6920      	ldr	r0, [r4, #16]
    697c:	2100      	movs	r1, #0
    697e:	6011      	str	r1, [r2, #0]
    6980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6984:	4718      	bx	r3
    6986:	bf00      	nop
    6988:	20000104 	.word	0x20000104
    698c:	200000f4 	.word	0x200000f4
    6990:	200000e4 	.word	0x200000e4
    6994:	0000753c 	.word	0x0000753c
    6998:	20000b68 	.word	0x20000b68

0000699c <CC_PalPowerSaveModeSelect>:
    699c:	b570      	push	{r4, r5, r6, lr}
    699e:	4d1a      	ldr	r5, [pc, #104]	; (6a08 <CC_PalPowerSaveModeSelect+0x6c>)
    69a0:	4e1a      	ldr	r6, [pc, #104]	; (6a0c <CC_PalPowerSaveModeSelect+0x70>)
    69a2:	4604      	mov	r4, r0
    69a4:	68b2      	ldr	r2, [r6, #8]
    69a6:	6928      	ldr	r0, [r5, #16]
    69a8:	4790      	blx	r2
    69aa:	b9f0      	cbnz	r0, 69ea <CC_PalPowerSaveModeSelect+0x4e>
    69ac:	b15c      	cbz	r4, 69c6 <CC_PalPowerSaveModeSelect+0x2a>
    69ae:	4c18      	ldr	r4, [pc, #96]	; (6a10 <CC_PalPowerSaveModeSelect+0x74>)
    69b0:	6823      	ldr	r3, [r4, #0]
    69b2:	b1ab      	cbz	r3, 69e0 <CC_PalPowerSaveModeSelect+0x44>
    69b4:	2b01      	cmp	r3, #1
    69b6:	d01a      	beq.n	69ee <CC_PalPowerSaveModeSelect+0x52>
    69b8:	3b01      	subs	r3, #1
    69ba:	6023      	str	r3, [r4, #0]
    69bc:	6928      	ldr	r0, [r5, #16]
    69be:	68f3      	ldr	r3, [r6, #12]
    69c0:	4798      	blx	r3
    69c2:	2000      	movs	r0, #0
    69c4:	bd70      	pop	{r4, r5, r6, pc}
    69c6:	4c12      	ldr	r4, [pc, #72]	; (6a10 <CC_PalPowerSaveModeSelect+0x74>)
    69c8:	6821      	ldr	r1, [r4, #0]
    69ca:	b939      	cbnz	r1, 69dc <CC_PalPowerSaveModeSelect+0x40>
    69cc:	4b11      	ldr	r3, [pc, #68]	; (6a14 <CC_PalPowerSaveModeSelect+0x78>)
    69ce:	4a12      	ldr	r2, [pc, #72]	; (6a18 <CC_PalPowerSaveModeSelect+0x7c>)
    69d0:	2001      	movs	r0, #1
    69d2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    69d6:	6813      	ldr	r3, [r2, #0]
    69d8:	2b00      	cmp	r3, #0
    69da:	d1fc      	bne.n	69d6 <CC_PalPowerSaveModeSelect+0x3a>
    69dc:	3101      	adds	r1, #1
    69de:	6021      	str	r1, [r4, #0]
    69e0:	68f3      	ldr	r3, [r6, #12]
    69e2:	6928      	ldr	r0, [r5, #16]
    69e4:	4798      	blx	r3
    69e6:	2000      	movs	r0, #0
    69e8:	bd70      	pop	{r4, r5, r6, pc}
    69ea:	480c      	ldr	r0, [pc, #48]	; (6a1c <CC_PalPowerSaveModeSelect+0x80>)
    69ec:	bd70      	pop	{r4, r5, r6, pc}
    69ee:	4a0a      	ldr	r2, [pc, #40]	; (6a18 <CC_PalPowerSaveModeSelect+0x7c>)
    69f0:	6813      	ldr	r3, [r2, #0]
    69f2:	2b00      	cmp	r3, #0
    69f4:	d1fc      	bne.n	69f0 <CC_PalPowerSaveModeSelect+0x54>
    69f6:	4a07      	ldr	r2, [pc, #28]	; (6a14 <CC_PalPowerSaveModeSelect+0x78>)
    69f8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    69fc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6a00:	f7ff ff48 	bl	6894 <CC_HalMaskInterrupt>
    6a04:	6823      	ldr	r3, [r4, #0]
    6a06:	e7d7      	b.n	69b8 <CC_PalPowerSaveModeSelect+0x1c>
    6a08:	20000104 	.word	0x20000104
    6a0c:	200000f4 	.word	0x200000f4
    6a10:	20000b68 	.word	0x20000b68
    6a14:	5002a000 	.word	0x5002a000
    6a18:	5002b910 	.word	0x5002b910
    6a1c:	ffff8fe9 	.word	0xffff8fe9

00006a20 <k_uptime_get>:
{
    6a20:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    6a22:	f000 fb6c 	bl	70fe <z_impl_k_uptime_ticks>
    6a26:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    6a2a:	fba0 2304 	umull	r2, r3, r0, r4
    6a2e:	fb04 3301 	mla	r3, r4, r1, r3
    6a32:	0bd0      	lsrs	r0, r2, #15
}
    6a34:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    6a38:	0bd9      	lsrs	r1, r3, #15
    6a3a:	bd10      	pop	{r4, pc}

00006a3c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6a3c:	4040      	eors	r0, r0
    6a3e:	f380 8811 	msr	BASEPRI, r0
    6a42:	f04f 0004 	mov.w	r0, #4
    6a46:	df02      	svc	2
}
    6a48:	4770      	bx	lr

00006a4a <encode_uint>:
{
    6a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a4e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    6a50:	78d3      	ldrb	r3, [r2, #3]
{
    6a52:	4614      	mov	r4, r2
	switch (specifier) {
    6a54:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6a56:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    6a5a:	4606      	mov	r6, r0
    6a5c:	460f      	mov	r7, r1
    6a5e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    6a60:	d02d      	beq.n	6abe <encode_uint+0x74>
    6a62:	d828      	bhi.n	6ab6 <encode_uint+0x6c>
		return 16;
    6a64:	2b58      	cmp	r3, #88	; 0x58
    6a66:	bf14      	ite	ne
    6a68:	250a      	movne	r5, #10
    6a6a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    6a6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    6a70:	46aa      	mov	sl, r5
    6a72:	f04f 0b00 	mov.w	fp, #0
    6a76:	4652      	mov	r2, sl
    6a78:	465b      	mov	r3, fp
    6a7a:	4630      	mov	r0, r6
    6a7c:	4639      	mov	r1, r7
    6a7e:	f7f9 fb3f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6a82:	2a09      	cmp	r2, #9
    6a84:	b2d3      	uxtb	r3, r2
    6a86:	d81f      	bhi.n	6ac8 <encode_uint+0x7e>
    6a88:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6a8a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6a8c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    6a8e:	bf08      	it	eq
    6a90:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6a92:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    6a96:	d301      	bcc.n	6a9c <encode_uint+0x52>
    6a98:	45c8      	cmp	r8, r9
    6a9a:	d812      	bhi.n	6ac2 <encode_uint+0x78>
	if (conv->flag_hash) {
    6a9c:	7823      	ldrb	r3, [r4, #0]
    6a9e:	069b      	lsls	r3, r3, #26
    6aa0:	d505      	bpl.n	6aae <encode_uint+0x64>
		if (radix == 8) {
    6aa2:	2d08      	cmp	r5, #8
    6aa4:	d116      	bne.n	6ad4 <encode_uint+0x8a>
			conv->altform_0 = true;
    6aa6:	78a3      	ldrb	r3, [r4, #2]
    6aa8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6aac:	70a3      	strb	r3, [r4, #2]
}
    6aae:	4640      	mov	r0, r8
    6ab0:	b003      	add	sp, #12
    6ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6ab6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6aba:	2b70      	cmp	r3, #112	; 0x70
    6abc:	e7d3      	b.n	6a66 <encode_uint+0x1c>
	switch (specifier) {
    6abe:	2508      	movs	r5, #8
    6ac0:	e7d4      	b.n	6a6c <encode_uint+0x22>
		value /= radix;
    6ac2:	4606      	mov	r6, r0
    6ac4:	460f      	mov	r7, r1
    6ac6:	e7d6      	b.n	6a76 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6ac8:	9a01      	ldr	r2, [sp, #4]
    6aca:	2a19      	cmp	r2, #25
    6acc:	bf94      	ite	ls
    6ace:	3337      	addls	r3, #55	; 0x37
    6ad0:	3357      	addhi	r3, #87	; 0x57
    6ad2:	e7da      	b.n	6a8a <encode_uint+0x40>
		} else if (radix == 16) {
    6ad4:	2d10      	cmp	r5, #16
    6ad6:	d1ea      	bne.n	6aae <encode_uint+0x64>
			conv->altform_0c = true;
    6ad8:	78a3      	ldrb	r3, [r4, #2]
    6ada:	f043 0310 	orr.w	r3, r3, #16
    6ade:	e7e5      	b.n	6aac <encode_uint+0x62>

00006ae0 <outs>:
{
    6ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ae4:	4607      	mov	r7, r0
    6ae6:	4688      	mov	r8, r1
    6ae8:	4615      	mov	r5, r2
    6aea:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6aec:	4614      	mov	r4, r2
    6aee:	42b4      	cmp	r4, r6
    6af0:	eba4 0005 	sub.w	r0, r4, r5
    6af4:	d302      	bcc.n	6afc <outs+0x1c>
    6af6:	b93e      	cbnz	r6, 6b08 <outs+0x28>
    6af8:	7823      	ldrb	r3, [r4, #0]
    6afa:	b12b      	cbz	r3, 6b08 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6afc:	f814 0b01 	ldrb.w	r0, [r4], #1
    6b00:	4641      	mov	r1, r8
    6b02:	47b8      	blx	r7
		if (rc < 0) {
    6b04:	2800      	cmp	r0, #0
    6b06:	daf2      	bge.n	6aee <outs+0xe>
}
    6b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b0c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6b0c:	4770      	bx	lr

00006b0e <sys_notify_validate>:
	if (notify == NULL) {
    6b0e:	4603      	mov	r3, r0
    6b10:	b158      	cbz	r0, 6b2a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6b12:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6b14:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6b18:	2a01      	cmp	r2, #1
    6b1a:	d003      	beq.n	6b24 <sys_notify_validate+0x16>
    6b1c:	2a03      	cmp	r2, #3
    6b1e:	d104      	bne.n	6b2a <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6b20:	6802      	ldr	r2, [r0, #0]
    6b22:	b112      	cbz	r2, 6b2a <sys_notify_validate+0x1c>
		notify->result = 0;
    6b24:	2000      	movs	r0, #0
    6b26:	6098      	str	r0, [r3, #8]
    6b28:	4770      	bx	lr
		return -EINVAL;
    6b2a:	f06f 0015 	mvn.w	r0, #21
}
    6b2e:	4770      	bx	lr

00006b30 <abort_function>:
{
    6b30:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6b32:	2000      	movs	r0, #0
    6b34:	f7fa fe86 	bl	1844 <sys_reboot>

00006b38 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6b38:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6b3a:	f013 0307 	ands.w	r3, r3, #7
    6b3e:	d105      	bne.n	6b4c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6b40:	6803      	ldr	r3, [r0, #0]
    6b42:	2b00      	cmp	r3, #0
		evt = EVT_START;
    6b44:	bf0c      	ite	eq
    6b46:	2000      	moveq	r0, #0
    6b48:	2003      	movne	r0, #3
    6b4a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6b4c:	2b02      	cmp	r3, #2
    6b4e:	d105      	bne.n	6b5c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6b50:	8bc3      	ldrh	r3, [r0, #30]
    6b52:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    6b54:	bf14      	ite	ne
    6b56:	2000      	movne	r0, #0
    6b58:	2004      	moveq	r0, #4
    6b5a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6b5c:	2b01      	cmp	r3, #1
    6b5e:	d105      	bne.n	6b6c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6b60:	6803      	ldr	r3, [r0, #0]
    6b62:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    6b64:	bf0c      	ite	eq
    6b66:	2000      	moveq	r0, #0
    6b68:	2005      	movne	r0, #5
    6b6a:	4770      	bx	lr
	int evt = EVT_NOP;
    6b6c:	2000      	movs	r0, #0
}
    6b6e:	4770      	bx	lr

00006b70 <notify_one>:
{
    6b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b74:	460d      	mov	r5, r1
    6b76:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6b78:	4619      	mov	r1, r3
    6b7a:	1d28      	adds	r0, r5, #4
{
    6b7c:	4690      	mov	r8, r2
    6b7e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6b80:	f7fa f950 	bl	e24 <sys_notify_finalize>
	if (cb) {
    6b84:	4604      	mov	r4, r0
    6b86:	b138      	cbz	r0, 6b98 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6b88:	4633      	mov	r3, r6
    6b8a:	4642      	mov	r2, r8
    6b8c:	4629      	mov	r1, r5
    6b8e:	4638      	mov	r0, r7
    6b90:	46a4      	mov	ip, r4
}
    6b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6b96:	4760      	bx	ip
}
    6b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b9c <validate_args>:
{
    6b9c:	b510      	push	{r4, lr}
    6b9e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6ba0:	b140      	cbz	r0, 6bb4 <validate_args+0x18>
    6ba2:	b139      	cbz	r1, 6bb4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6ba4:	1d08      	adds	r0, r1, #4
    6ba6:	f7ff ffb2 	bl	6b0e <sys_notify_validate>
	if ((rv == 0)
    6baa:	b928      	cbnz	r0, 6bb8 <validate_args+0x1c>
	    && ((cli->notify.flags
    6bac:	68a3      	ldr	r3, [r4, #8]
    6bae:	f033 0303 	bics.w	r3, r3, #3
    6bb2:	d001      	beq.n	6bb8 <validate_args+0x1c>
		rv = -EINVAL;
    6bb4:	f06f 0015 	mvn.w	r0, #21
}
    6bb8:	bd10      	pop	{r4, pc}

00006bba <onoff_manager_init>:
{
    6bba:	b538      	push	{r3, r4, r5, lr}
    6bbc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6bbe:	4605      	mov	r5, r0
    6bc0:	b158      	cbz	r0, 6bda <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6bc2:	b151      	cbz	r1, 6bda <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6bc4:	680b      	ldr	r3, [r1, #0]
    6bc6:	b143      	cbz	r3, 6bda <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6bc8:	684b      	ldr	r3, [r1, #4]
    6bca:	b133      	cbz	r3, 6bda <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6bcc:	2220      	movs	r2, #32
    6bce:	2100      	movs	r1, #0
    6bd0:	f000 f86b 	bl	6caa <memset>
    6bd4:	612c      	str	r4, [r5, #16]
	return 0;
    6bd6:	2000      	movs	r0, #0
}
    6bd8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6bda:	f06f 0015 	mvn.w	r0, #21
    6bde:	e7fb      	b.n	6bd8 <onoff_manager_init+0x1e>

00006be0 <arch_printk_char_out>:
}
    6be0:	2000      	movs	r0, #0
    6be2:	4770      	bx	lr

00006be4 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6be4:	b40f      	push	{r0, r1, r2, r3}
    6be6:	b507      	push	{r0, r1, r2, lr}
    6be8:	a904      	add	r1, sp, #16
    6bea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6bee:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6bf0:	f7fa fe1a 	bl	1828 <vprintk>
	}
	va_end(ap);
}
    6bf4:	b003      	add	sp, #12
    6bf6:	f85d eb04 	ldr.w	lr, [sp], #4
    6bfa:	b004      	add	sp, #16
    6bfc:	4770      	bx	lr

00006bfe <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6bfe:	2200      	movs	r2, #0
    6c00:	e9c0 2200 	strd	r2, r2, [r0]
    6c04:	6082      	str	r2, [r0, #8]
}
    6c06:	4770      	bx	lr

00006c08 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6c08:	4604      	mov	r4, r0
    6c0a:	b508      	push	{r3, lr}
    6c0c:	4608      	mov	r0, r1
    6c0e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6c10:	461a      	mov	r2, r3
    6c12:	47a0      	blx	r4
	return z_impl_z_current_get();
    6c14:	f7fe feee 	bl	59f4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6c18:	f7fb f950 	bl	1ebc <z_impl_k_thread_abort>

00006c1c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6c1c:	f7fd badc 	b.w	41d8 <z_fatal_error>

00006c20 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6c20:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6c22:	6800      	ldr	r0, [r0, #0]
    6c24:	f7fd bad8 	b.w	41d8 <z_fatal_error>

00006c28 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6c28:	2100      	movs	r1, #0
    6c2a:	2001      	movs	r0, #1
    6c2c:	f7ff bff6 	b.w	6c1c <z_arm_fatal_error>

00006c30 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6c30:	b508      	push	{r3, lr}
	handler();
    6c32:	f7fa fe59 	bl	18e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6c3a:	f7fa bf67 	b.w	1b0c <z_arm_exc_exit>

00006c3e <_stdout_hook_default>:
}
    6c3e:	f04f 30ff 	mov.w	r0, #4294967295
    6c42:	4770      	bx	lr

00006c44 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    6c44:	f7fb ba8a 	b.w	215c <z_impl_zephyr_fputc>

00006c48 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6c48:	3901      	subs	r1, #1
    6c4a:	4603      	mov	r3, r0
    6c4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6c50:	b90a      	cbnz	r2, 6c56 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6c52:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6c54:	4770      	bx	lr
		*d = *s;
    6c56:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6c5a:	e7f7      	b.n	6c4c <strcpy+0x4>

00006c5c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6c5c:	4603      	mov	r3, r0
	size_t n = 0;
    6c5e:	2000      	movs	r0, #0

	while (*s != '\0') {
    6c60:	5c1a      	ldrb	r2, [r3, r0]
    6c62:	b902      	cbnz	r2, 6c66 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6c64:	4770      	bx	lr
		n++;
    6c66:	3001      	adds	r0, #1
    6c68:	e7fa      	b.n	6c60 <strlen+0x4>

00006c6a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6c6a:	4603      	mov	r3, r0
	size_t n = 0;
    6c6c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6c6e:	5c1a      	ldrb	r2, [r3, r0]
    6c70:	b10a      	cbz	r2, 6c76 <strnlen+0xc>
    6c72:	4288      	cmp	r0, r1
    6c74:	d100      	bne.n	6c78 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6c76:	4770      	bx	lr
		n++;
    6c78:	3001      	adds	r0, #1
    6c7a:	e7f8      	b.n	6c6e <strnlen+0x4>

00006c7c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6c7c:	1e43      	subs	r3, r0, #1
    6c7e:	3901      	subs	r1, #1
    6c80:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6c84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6c88:	4282      	cmp	r2, r0
    6c8a:	d101      	bne.n	6c90 <strcmp+0x14>
    6c8c:	2a00      	cmp	r2, #0
    6c8e:	d1f7      	bne.n	6c80 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6c90:	1a10      	subs	r0, r2, r0
    6c92:	4770      	bx	lr

00006c94 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6c94:	b510      	push	{r4, lr}
    6c96:	1e43      	subs	r3, r0, #1
    6c98:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6c9a:	4291      	cmp	r1, r2
    6c9c:	d100      	bne.n	6ca0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6c9e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
    6ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6ca8:	e7f7      	b.n	6c9a <memcpy+0x6>

00006caa <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6caa:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6cac:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6cae:	4603      	mov	r3, r0
	while (n > 0) {
    6cb0:	4293      	cmp	r3, r2
    6cb2:	d100      	bne.n	6cb6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6cb4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6cb6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6cba:	e7f9      	b.n	6cb0 <memset+0x6>

00006cbc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    6cbc:	b084      	sub	sp, #16
    6cbe:	ab04      	add	r3, sp, #16
    6cc0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    6cc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6cc8:	2b06      	cmp	r3, #6
    6cca:	d108      	bne.n	6cde <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cd0:	2201      	movs	r2, #1
    6cd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6cd6:	f3bf 8f4f 	dsb	sy
        __WFE();
    6cda:	bf20      	wfe
    while (true)
    6cdc:	e7fd      	b.n	6cda <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    6cde:	b004      	add	sp, #16
    6ce0:	4770      	bx	lr

00006ce2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    6ce2:	b084      	sub	sp, #16
    6ce4:	ab04      	add	r3, sp, #16
    6ce6:	e903 0007 	stmdb	r3, {r0, r1, r2}
    6cea:	2300      	movs	r3, #0
    6cec:	f383 8811 	msr	BASEPRI, r3
    6cf0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6cf4:	b004      	add	sp, #16
    6cf6:	4770      	bx	lr

00006cf8 <set_starting_state>:
{
    6cf8:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cfa:	f04f 0320 	mov.w	r3, #32
    6cfe:	f3ef 8211 	mrs	r2, BASEPRI
    6d02:	f383 8812 	msr	BASEPRI_MAX, r3
    6d06:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6d0a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6d0c:	f003 0407 	and.w	r4, r3, #7
    6d10:	2c01      	cmp	r4, #1
    6d12:	d106      	bne.n	6d22 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6d14:	6001      	str	r1, [r0, #0]
	int err = 0;
    6d16:	2000      	movs	r0, #0
	__asm__ volatile(
    6d18:	f382 8811 	msr	BASEPRI, r2
    6d1c:	f3bf 8f6f 	isb	sy
}
    6d20:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6d22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6d26:	428b      	cmp	r3, r1
		err = -EALREADY;
    6d28:	bf14      	ite	ne
    6d2a:	f04f 30ff 	movne.w	r0, #4294967295
    6d2e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    6d32:	e7f1      	b.n	6d18 <set_starting_state+0x20>

00006d34 <set_on_state>:
	__asm__ volatile(
    6d34:	f04f 0320 	mov.w	r3, #32
    6d38:	f3ef 8211 	mrs	r2, BASEPRI
    6d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d40:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6d44:	6803      	ldr	r3, [r0, #0]
    6d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6d4a:	f043 0302 	orr.w	r3, r3, #2
    6d4e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6d50:	f382 8811 	msr	BASEPRI, r2
    6d54:	f3bf 8f6f 	isb	sy
}
    6d58:	4770      	bx	lr

00006d5a <onoff_started_callback>:
	return &data->mgr[type];
    6d5a:	6900      	ldr	r0, [r0, #16]
    6d5c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6d5e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    6d62:	2100      	movs	r1, #0
    6d64:	4710      	bx	r2

00006d66 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6d66:	2000      	movs	r0, #0
    6d68:	f7fc bb94 	b.w	3494 <nrfx_clock_start>

00006d6c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6d6c:	2000      	movs	r0, #0
    6d6e:	f7fc bbe5 	b.w	353c <nrfx_clock_stop>

00006d72 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6d72:	2280      	movs	r2, #128	; 0x80
    6d74:	f7fb ba98 	b.w	22a8 <stop>

00006d78 <blocking_start_callback>:
{
    6d78:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6d7a:	f7fe bef5 	b.w	5b68 <z_impl_k_sem_give>

00006d7e <api_start>:
{
    6d7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d82:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    6d84:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6d86:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    6d88:	436f      	muls	r7, r5
{
    6d8a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    6d8c:	f107 0048 	add.w	r0, r7, #72	; 0x48
    6d90:	2180      	movs	r1, #128	; 0x80
    6d92:	4420      	add	r0, r4
{
    6d94:	4690      	mov	r8, r2
    6d96:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    6d98:	f7ff ffae 	bl	6cf8 <set_starting_state>
	if (err < 0) {
    6d9c:	2800      	cmp	r0, #0
    6d9e:	db07      	blt.n	6db0 <api_start+0x32>
	subdata->cb = cb;
    6da0:	443c      	add	r4, r7
	subdata->user_data = user_data;
    6da2:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    6da6:	6873      	ldr	r3, [r6, #4]
    6da8:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    6dac:	4798      	blx	r3
	return 0;
    6dae:	2000      	movs	r0, #0
}
    6db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006db4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6db4:	6843      	ldr	r3, [r0, #4]
    6db6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6db8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6dbc:	600b      	str	r3, [r1, #0]
}
    6dbe:	2000      	movs	r0, #0
    6dc0:	4770      	bx	lr

00006dc2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6dc2:	6843      	ldr	r3, [r0, #4]
    6dc4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6dc6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6dca:	4042      	eors	r2, r0
    6dcc:	400a      	ands	r2, r1
    6dce:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6dd0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6dd4:	2000      	movs	r0, #0
    6dd6:	4770      	bx	lr

00006dd8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6dd8:	6843      	ldr	r3, [r0, #4]
    6dda:	685b      	ldr	r3, [r3, #4]
}
    6ddc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6dde:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6de2:	4770      	bx	lr

00006de4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6de4:	6843      	ldr	r3, [r0, #4]
    6de6:	685b      	ldr	r3, [r3, #4]
}
    6de8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6dea:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6dee:	4770      	bx	lr

00006df0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6df0:	6843      	ldr	r3, [r0, #4]
    6df2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6df4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6df8:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6dfa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6dfe:	2000      	movs	r0, #0
    6e00:	4770      	bx	lr

00006e02 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6e02:	6843      	ldr	r3, [r0, #4]
    6e04:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6e06:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6e0a:	05d1      	lsls	r1, r2, #23
    6e0c:	d518      	bpl.n	6e40 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e0e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6e12:	b1aa      	cbz	r2, 6e40 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6e14:	f04f 0120 	mov.w	r1, #32
    6e18:	f3ef 8211 	mrs	r2, BASEPRI
    6e1c:	f381 8812 	msr	BASEPRI_MAX, r1
    6e20:	f3bf 8f6f 	isb	sy
    6e24:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6e28:	b131      	cbz	r1, 6e38 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e2a:	2100      	movs	r1, #0
    6e2c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6e30:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e34:	2101      	movs	r1, #1
    6e36:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6e38:	f382 8811 	msr	BASEPRI, r2
    6e3c:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6e40:	6842      	ldr	r2, [r0, #4]
    6e42:	6852      	ldr	r2, [r2, #4]
    6e44:	06d2      	lsls	r2, r2, #27
    6e46:	d515      	bpl.n	6e74 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    6e48:	f04f 0120 	mov.w	r1, #32
    6e4c:	f3ef 8211 	mrs	r2, BASEPRI
    6e50:	f381 8812 	msr	BASEPRI_MAX, r1
    6e54:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e58:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6e5c:	b111      	cbz	r1, 6e64 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6e5e:	2100      	movs	r1, #0
    6e60:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6e64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6e68:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6e6c:	f382 8811 	msr	BASEPRI, r2
    6e70:	f3bf 8f6f 	isb	sy
}
    6e74:	4770      	bx	lr

00006e76 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6e76:	6902      	ldr	r2, [r0, #16]
{
    6e78:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6e7a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6e7e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6e82:	2000      	movs	r0, #0
    6e84:	4770      	bx	lr

00006e86 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6e86:	6843      	ldr	r3, [r0, #4]
    6e88:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6e8a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6e8e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6e92:	4770      	bx	lr

00006e94 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6e94:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6e96:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e98:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e9c:	b940      	cbnz	r0, 6eb0 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6e9e:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6ea0:	0792      	lsls	r2, r2, #30
    6ea2:	d406      	bmi.n	6eb2 <is_tx_ready+0x1e>
    6ea4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6ea8:	3800      	subs	r0, #0
    6eaa:	bf18      	it	ne
    6eac:	2001      	movne	r0, #1
    6eae:	4770      	bx	lr
    6eb0:	2001      	movs	r0, #1
}
    6eb2:	4770      	bx	lr

00006eb4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6eb4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6eb6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6eb8:	681b      	ldr	r3, [r3, #0]
    6eba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6ebe:	b148      	cbz	r0, 6ed4 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    6ec0:	7c52      	ldrb	r2, [r2, #17]
    6ec2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ec4:	2000      	movs	r0, #0
    6ec6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6eca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ece:	2201      	movs	r2, #1
    6ed0:	601a      	str	r2, [r3, #0]
	return 0;
    6ed2:	4770      	bx	lr
		return -1;
    6ed4:	f04f 30ff 	mov.w	r0, #4294967295
}
    6ed8:	4770      	bx	lr

00006eda <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6eda:	b510      	push	{r4, lr}
    6edc:	2200      	movs	r2, #0
    6ede:	4604      	mov	r4, r0
    6ee0:	2101      	movs	r1, #1
    6ee2:	2002      	movs	r0, #2
    6ee4:	f7fa fd5c 	bl	19a0 <z_arm_irq_priority_set>
    6ee8:	2002      	movs	r0, #2
    6eea:	f7fa fd3b 	bl	1964 <arch_irq_enable>
    6eee:	4620      	mov	r0, r4
    6ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ef4:	f7fb bf38 	b.w	2d68 <uarte_instance_init.isra.0>

00006ef8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6ef8:	b510      	push	{r4, lr}
    6efa:	2200      	movs	r2, #0
    6efc:	4604      	mov	r4, r0
    6efe:	2101      	movs	r1, #1
    6f00:	2028      	movs	r0, #40	; 0x28
    6f02:	f7fa fd4d 	bl	19a0 <z_arm_irq_priority_set>
    6f06:	2028      	movs	r0, #40	; 0x28
    6f08:	f7fa fd2c 	bl	1964 <arch_irq_enable>
    6f0c:	4620      	mov	r0, r4
    6f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f12:	f7fb bf29 	b.w	2d68 <uarte_instance_init.isra.0>

00006f16 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6f16:	4770      	bx	lr

00006f18 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6f18:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6f1a:	2000      	movs	r0, #0
    6f1c:	f7fb f95c 	bl	21d8 <sys_arch_reboot>

00006f20 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6f20:	f7ff bb9e 	b.w	6660 <nrf_cc3xx_platform_init_no_rng>

00006f24 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6f24:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6f26:	f7f9 ff9d 	bl	e64 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6f2a:	f7fa f84f 	bl	fcc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    6f32:	f7ff bb95 	b.w	6660 <nrf_cc3xx_platform_init_no_rng>

00006f36 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6f36:	4700      	bx	r0

00006f38 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6f38:	f000 b8e3 	b.w	7102 <z_impl_k_busy_wait>

00006f3c <nrf_gpio_pin_present_check>:
    switch (port)
    6f3c:	0943      	lsrs	r3, r0, #5
    6f3e:	d00b      	beq.n	6f58 <nrf_gpio_pin_present_check+0x1c>
    6f40:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    6f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f46:	bf18      	it	ne
    6f48:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    6f4a:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6f4e:	fa23 f000 	lsr.w	r0, r3, r0
}
    6f52:	f000 0001 	and.w	r0, r0, #1
    6f56:	4770      	bx	lr
    switch (port)
    6f58:	f04f 33ff 	mov.w	r3, #4294967295
    6f5c:	e7f5      	b.n	6f4a <nrf_gpio_pin_present_check+0xe>

00006f5e <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6f5e:	0080      	lsls	r0, r0, #2
}
    6f60:	f500 7080 	add.w	r0, r0, #256	; 0x100
    6f64:	4770      	bx	lr

00006f66 <nrf_gpio_reconfigure>:
{
    6f66:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6f6a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f6c:	a801      	add	r0, sp, #4
{
    6f6e:	460e      	mov	r6, r1
    6f70:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    6f74:	4690      	mov	r8, r2
    6f76:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f78:	f7fc fc4e 	bl	3818 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6f7c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6f7e:	f1b8 0f00 	cmp.w	r8, #0
    6f82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6f86:	bf14      	ite	ne
    6f88:	2302      	movne	r3, #2
    6f8a:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6f8c:	2e00      	cmp	r6, #0
    6f8e:	bf18      	it	ne
    6f90:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6f94:	2d00      	cmp	r5, #0
    6f96:	bf14      	ite	ne
    6f98:	210c      	movne	r1, #12
    6f9a:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6f9c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6f9e:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6fa2:	bf14      	ite	ne
    6fa4:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    6fa8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6faa:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6fac:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6fb0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    6fb4:	bf14      	ite	ne
    6fb6:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    6fba:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    6fbc:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    6fbe:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6fc2:	b106      	cbz	r6, 6fc6 <nrf_gpio_reconfigure+0x60>
    6fc4:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6fc6:	f1b8 0f00 	cmp.w	r8, #0
    6fca:	d003      	beq.n	6fd4 <nrf_gpio_reconfigure+0x6e>
    6fcc:	f898 8000 	ldrb.w	r8, [r8]
    6fd0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    6fd4:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6fd6:	b10d      	cbz	r5, 6fdc <nrf_gpio_reconfigure+0x76>
    6fd8:	782d      	ldrb	r5, [r5, #0]
    6fda:	00ad      	lsls	r5, r5, #2
    6fdc:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6fe0:	b10c      	cbz	r4, 6fe6 <nrf_gpio_reconfigure+0x80>
    6fe2:	7822      	ldrb	r2, [r4, #0]
    6fe4:	0214      	lsls	r4, r2, #8
    6fe6:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    6fe8:	b10f      	cbz	r7, 6fee <nrf_gpio_reconfigure+0x88>
    6fea:	783f      	ldrb	r7, [r7, #0]
    6fec:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6fee:	432c      	orrs	r4, r5
    6ff0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    6ff2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    6ff6:	b002      	add	sp, #8
    6ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006ffc <nrf_gpio_cfg_sense_set>:
{
    6ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6ffe:	f10d 030f 	add.w	r3, sp, #15
    7002:	9301      	str	r3, [sp, #4]
    7004:	2300      	movs	r3, #0
{
    7006:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    700a:	9300      	str	r3, [sp, #0]
    700c:	461a      	mov	r2, r3
    700e:	4619      	mov	r1, r3
    7010:	f7ff ffa9 	bl	6f66 <nrf_gpio_reconfigure>
}
    7014:	b005      	add	sp, #20
    7016:	f85d fb04 	ldr.w	pc, [sp], #4

0000701a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    701a:	f7fd b85b 	b.w	40d4 <_DoInit>

0000701e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    701e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7020:	f7ff fffb 	bl	701a <SEGGER_RTT_Init>

	return 0;
}
    7024:	2000      	movs	r0, #0
    7026:	bd08      	pop	{r3, pc}

00007028 <z_device_state_init>:
}
    7028:	4770      	bx	lr

0000702a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    702a:	b138      	cbz	r0, 703c <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    702c:	68c3      	ldr	r3, [r0, #12]
    702e:	8818      	ldrh	r0, [r3, #0]
    7030:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7034:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7038:	4258      	negs	r0, r3
    703a:	4158      	adcs	r0, r3
}
    703c:	4770      	bx	lr

0000703e <z_pm_save_idle_exit>:
{
    703e:	b508      	push	{r3, lr}
	pm_system_resume();
    7040:	f7fa fb20 	bl	1684 <pm_system_resume>
}
    7044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7048:	f7ff bf65 	b.w	6f16 <sys_clock_idle_exit>

0000704c <k_mem_slab_init>:
{
    704c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    704e:	2400      	movs	r4, #0
    7050:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7052:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7054:	ea41 0402 	orr.w	r4, r1, r2
    7058:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    705c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    7060:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7062:	d10c      	bne.n	707e <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7064:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7066:	42a3      	cmp	r3, r4
    7068:	d103      	bne.n	7072 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    706a:	e9c0 0000 	strd	r0, r0, [r0]
}
    706e:	2000      	movs	r0, #0
}
    7070:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7072:	6985      	ldr	r5, [r0, #24]
    7074:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7076:	3401      	adds	r4, #1
		slab->free_list = p;
    7078:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    707a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    707c:	e7f3      	b.n	7066 <k_mem_slab_init+0x1a>
		return -EINVAL;
    707e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7082:	e7f5      	b.n	7070 <k_mem_slab_init+0x24>

00007084 <z_impl_k_mutex_init>:
{
    7084:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7086:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7088:	e9c3 0002 	strd	r0, r0, [r3, #8]
    708c:	e9c3 3300 	strd	r3, r3, [r3]
}
    7090:	4770      	bx	lr

00007092 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7092:	4603      	mov	r3, r0
    7094:	b920      	cbnz	r0, 70a0 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7096:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    709a:	b90a      	cbnz	r2, 70a0 <z_reschedule_irqlock+0xe>
    709c:	f7fa bcd0 	b.w	1a40 <arch_swap>
    70a0:	f383 8811 	msr	BASEPRI, r3
    70a4:	f3bf 8f6f 	isb	sy
}
    70a8:	4770      	bx	lr

000070aa <z_reschedule_unlocked>:
	__asm__ volatile(
    70aa:	f04f 0320 	mov.w	r3, #32
    70ae:	f3ef 8011 	mrs	r0, BASEPRI
    70b2:	f383 8812 	msr	BASEPRI_MAX, r3
    70b6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    70ba:	f7ff bfea 	b.w	7092 <z_reschedule_irqlock>

000070be <z_priq_dumb_best>:
{
    70be:	4603      	mov	r3, r0
	return list->head == list;
    70c0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70c2:	4283      	cmp	r3, r0
    70c4:	d003      	beq.n	70ce <z_priq_dumb_best+0x10>
	if (n != NULL) {
    70c6:	2800      	cmp	r0, #0
    70c8:	bf38      	it	cc
    70ca:	2000      	movcc	r0, #0
    70cc:	4770      	bx	lr
	struct k_thread *thread = NULL;
    70ce:	2000      	movs	r0, #0
}
    70d0:	4770      	bx	lr

000070d2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    70d2:	b13a      	cbz	r2, 70e4 <z_impl_k_sem_init+0x12>
    70d4:	428a      	cmp	r2, r1
    70d6:	d305      	bcc.n	70e4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    70d8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    70dc:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    70e0:	2000      	movs	r0, #0
    70e2:	4770      	bx	lr
		return -EINVAL;
    70e4:	f06f 0015 	mvn.w	r0, #21
}
    70e8:	4770      	bx	lr

000070ea <k_is_in_isr>:
    70ea:	f3ef 8005 	mrs	r0, IPSR
}
    70ee:	3800      	subs	r0, #0
    70f0:	bf18      	it	ne
    70f2:	2001      	movne	r0, #1
    70f4:	4770      	bx	lr

000070f6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    70f6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    70f8:	f7ff fa3c 	bl	6574 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    70fc:	bd08      	pop	{r3, pc}

000070fe <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    70fe:	f7ff ba39 	b.w	6574 <sys_clock_tick_get>

00007102 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7102:	b108      	cbz	r0, 7108 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7104:	f7fb b87e 	b.w	2204 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7108:	4770      	bx	lr

0000710a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    710a:	4770      	bx	lr

0000710c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    710c:	f7fc befa 	b.w	3f04 <SystemInit>
