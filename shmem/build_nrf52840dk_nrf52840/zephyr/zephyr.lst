
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200021c0 	.word	0x200021c0
}
   4:	00002439 	.word	0x00002439
   8:	0000752d 	.word	0x0000752d
   c:	00002425 	.word	0x00002425
  10:	00002425 	.word	0x00002425
  14:	00002425 	.word	0x00002425
  18:	00002425 	.word	0x00002425
	...
  2c:	00002241 	.word	0x00002241
  30:	00002425 	.word	0x00002425
  34:	00000000 	.word	0x00000000
  38:	000021ed 	.word	0x000021ed
  3c:	00002425 	.word	0x00002425

00000040 <_irq_vector_table>:
  40:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  50:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  60:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  70:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  80:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  90:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  a0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  b0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  c0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  d0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  e0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..
  f0:	000021a5 000021a5 000021a5 000021a5     .!...!...!...!..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_IDLE_STACK_SIZE+0x1ba>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_IDLE_STACK_SIZE+0x1a6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_IDLE_STACK_SIZE+0xf0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_IDLE_STACK_SIZE+0x20c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_IDLE_STACK_SIZE+0xd8>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_IDLE_STACK_SIZE+0x13a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_IDLE_STACK_SIZE+0x136>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_IDLE_STACK_SIZE+0x150>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_IDLE_STACK_SIZE+0x19e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_IDLE_STACK_SIZE+0x186>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_IDLE_STACK_SIZE+0x21a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_IDLE_STACK_SIZE+0x1de>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_IDLE_STACK_SIZE+0x1fc>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_IDLE_STACK_SIZE+0x104>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_uldivmod>:
     8ec:	b953      	cbnz	r3, 904 <__aeabi_uldivmod+0x18>
     8ee:	b94a      	cbnz	r2, 904 <__aeabi_uldivmod+0x18>
     8f0:	2900      	cmp	r1, #0
     8f2:	bf08      	it	eq
     8f4:	2800      	cmpeq	r0, #0
     8f6:	bf1c      	itt	ne
     8f8:	f04f 31ff 	movne.w	r1, #4294967295
     8fc:	f04f 30ff 	movne.w	r0, #4294967295
     900:	f000 b96c 	b.w	bdc <__aeabi_idiv0>
     904:	f1ad 0c08 	sub.w	ip, sp, #8
     908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     90c:	f000 f806 	bl	91c <__udivmoddi4>
     910:	f8dd e004 	ldr.w	lr, [sp, #4]
     914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     918:	b004      	add	sp, #16
     91a:	4770      	bx	lr

0000091c <__udivmoddi4>:
     91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     920:	9e08      	ldr	r6, [sp, #32]
     922:	460d      	mov	r5, r1
     924:	4604      	mov	r4, r0
     926:	468e      	mov	lr, r1
     928:	2b00      	cmp	r3, #0
     92a:	f040 8082 	bne.w	a32 <__udivmoddi4+0x116>
     92e:	428a      	cmp	r2, r1
     930:	4617      	mov	r7, r2
     932:	d946      	bls.n	9c2 <__udivmoddi4+0xa6>
     934:	fab2 f282 	clz	r2, r2
     938:	b14a      	cbz	r2, 94e <__udivmoddi4+0x32>
     93a:	f1c2 0120 	rsb	r1, r2, #32
     93e:	fa05 f302 	lsl.w	r3, r5, r2
     942:	fa20 f101 	lsr.w	r1, r0, r1
     946:	4097      	lsls	r7, r2
     948:	ea41 0e03 	orr.w	lr, r1, r3
     94c:	4094      	lsls	r4, r2
     94e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     952:	0c23      	lsrs	r3, r4, #16
     954:	fbbe fcf8 	udiv	ip, lr, r8
     958:	b2b9      	uxth	r1, r7
     95a:	fb08 ee1c 	mls	lr, r8, ip, lr
     95e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     962:	fb0c f001 	mul.w	r0, ip, r1
     966:	4298      	cmp	r0, r3
     968:	d90a      	bls.n	980 <__udivmoddi4+0x64>
     96a:	18fb      	adds	r3, r7, r3
     96c:	f10c 35ff 	add.w	r5, ip, #4294967295
     970:	f080 8116 	bcs.w	ba0 <__udivmoddi4+0x284>
     974:	4298      	cmp	r0, r3
     976:	f240 8113 	bls.w	ba0 <__udivmoddi4+0x284>
     97a:	f1ac 0c02 	sub.w	ip, ip, #2
     97e:	443b      	add	r3, r7
     980:	1a1b      	subs	r3, r3, r0
     982:	b2a4      	uxth	r4, r4
     984:	fbb3 f0f8 	udiv	r0, r3, r8
     988:	fb08 3310 	mls	r3, r8, r0, r3
     98c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     990:	fb00 f101 	mul.w	r1, r0, r1
     994:	42a1      	cmp	r1, r4
     996:	d909      	bls.n	9ac <__udivmoddi4+0x90>
     998:	193c      	adds	r4, r7, r4
     99a:	f100 33ff 	add.w	r3, r0, #4294967295
     99e:	f080 8101 	bcs.w	ba4 <__udivmoddi4+0x288>
     9a2:	42a1      	cmp	r1, r4
     9a4:	f240 80fe 	bls.w	ba4 <__udivmoddi4+0x288>
     9a8:	3802      	subs	r0, #2
     9aa:	443c      	add	r4, r7
     9ac:	1a64      	subs	r4, r4, r1
     9ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     9b2:	2100      	movs	r1, #0
     9b4:	b11e      	cbz	r6, 9be <__udivmoddi4+0xa2>
     9b6:	40d4      	lsrs	r4, r2
     9b8:	2300      	movs	r3, #0
     9ba:	e9c6 4300 	strd	r4, r3, [r6]
     9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c2:	b902      	cbnz	r2, 9c6 <__udivmoddi4+0xaa>
     9c4:	deff      	udf	#255	; 0xff
     9c6:	fab2 f282 	clz	r2, r2
     9ca:	2a00      	cmp	r2, #0
     9cc:	d14f      	bne.n	a6e <__udivmoddi4+0x152>
     9ce:	1bcb      	subs	r3, r1, r7
     9d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     9d4:	fa1f f887 	uxth.w	r8, r7
     9d8:	2101      	movs	r1, #1
     9da:	fbb3 fcfe 	udiv	ip, r3, lr
     9de:	0c25      	lsrs	r5, r4, #16
     9e0:	fb0e 331c 	mls	r3, lr, ip, r3
     9e4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     9e8:	fb08 f30c 	mul.w	r3, r8, ip
     9ec:	42ab      	cmp	r3, r5
     9ee:	d907      	bls.n	a00 <__udivmoddi4+0xe4>
     9f0:	197d      	adds	r5, r7, r5
     9f2:	f10c 30ff 	add.w	r0, ip, #4294967295
     9f6:	d202      	bcs.n	9fe <__udivmoddi4+0xe2>
     9f8:	42ab      	cmp	r3, r5
     9fa:	f200 80e7 	bhi.w	bcc <__udivmoddi4+0x2b0>
     9fe:	4684      	mov	ip, r0
     a00:	1aed      	subs	r5, r5, r3
     a02:	b2a3      	uxth	r3, r4
     a04:	fbb5 f0fe 	udiv	r0, r5, lr
     a08:	fb0e 5510 	mls	r5, lr, r0, r5
     a0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a10:	fb08 f800 	mul.w	r8, r8, r0
     a14:	45a0      	cmp	r8, r4
     a16:	d907      	bls.n	a28 <__udivmoddi4+0x10c>
     a18:	193c      	adds	r4, r7, r4
     a1a:	f100 33ff 	add.w	r3, r0, #4294967295
     a1e:	d202      	bcs.n	a26 <__udivmoddi4+0x10a>
     a20:	45a0      	cmp	r8, r4
     a22:	f200 80d7 	bhi.w	bd4 <__udivmoddi4+0x2b8>
     a26:	4618      	mov	r0, r3
     a28:	eba4 0408 	sub.w	r4, r4, r8
     a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a30:	e7c0      	b.n	9b4 <__udivmoddi4+0x98>
     a32:	428b      	cmp	r3, r1
     a34:	d908      	bls.n	a48 <__udivmoddi4+0x12c>
     a36:	2e00      	cmp	r6, #0
     a38:	f000 80af 	beq.w	b9a <__udivmoddi4+0x27e>
     a3c:	2100      	movs	r1, #0
     a3e:	e9c6 0500 	strd	r0, r5, [r6]
     a42:	4608      	mov	r0, r1
     a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a48:	fab3 f183 	clz	r1, r3
     a4c:	2900      	cmp	r1, #0
     a4e:	d14b      	bne.n	ae8 <__udivmoddi4+0x1cc>
     a50:	42ab      	cmp	r3, r5
     a52:	d302      	bcc.n	a5a <__udivmoddi4+0x13e>
     a54:	4282      	cmp	r2, r0
     a56:	f200 80b7 	bhi.w	bc8 <__udivmoddi4+0x2ac>
     a5a:	1a84      	subs	r4, r0, r2
     a5c:	eb65 0303 	sbc.w	r3, r5, r3
     a60:	2001      	movs	r0, #1
     a62:	469e      	mov	lr, r3
     a64:	2e00      	cmp	r6, #0
     a66:	d0aa      	beq.n	9be <__udivmoddi4+0xa2>
     a68:	e9c6 4e00 	strd	r4, lr, [r6]
     a6c:	e7a7      	b.n	9be <__udivmoddi4+0xa2>
     a6e:	f1c2 0c20 	rsb	ip, r2, #32
     a72:	fa01 f302 	lsl.w	r3, r1, r2
     a76:	4097      	lsls	r7, r2
     a78:	fa20 f00c 	lsr.w	r0, r0, ip
     a7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a80:	fa21 fc0c 	lsr.w	ip, r1, ip
     a84:	4318      	orrs	r0, r3
     a86:	fbbc f1fe 	udiv	r1, ip, lr
     a8a:	0c05      	lsrs	r5, r0, #16
     a8c:	fb0e cc11 	mls	ip, lr, r1, ip
     a90:	fa1f f887 	uxth.w	r8, r7
     a94:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     a98:	fb01 f308 	mul.w	r3, r1, r8
     a9c:	42ab      	cmp	r3, r5
     a9e:	fa04 f402 	lsl.w	r4, r4, r2
     aa2:	d909      	bls.n	ab8 <__udivmoddi4+0x19c>
     aa4:	197d      	adds	r5, r7, r5
     aa6:	f101 3cff 	add.w	ip, r1, #4294967295
     aaa:	f080 808b 	bcs.w	bc4 <__udivmoddi4+0x2a8>
     aae:	42ab      	cmp	r3, r5
     ab0:	f240 8088 	bls.w	bc4 <__udivmoddi4+0x2a8>
     ab4:	3902      	subs	r1, #2
     ab6:	443d      	add	r5, r7
     ab8:	1aeb      	subs	r3, r5, r3
     aba:	b285      	uxth	r5, r0
     abc:	fbb3 f0fe 	udiv	r0, r3, lr
     ac0:	fb0e 3310 	mls	r3, lr, r0, r3
     ac4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     ac8:	fb00 f308 	mul.w	r3, r0, r8
     acc:	42ab      	cmp	r3, r5
     ace:	d907      	bls.n	ae0 <__udivmoddi4+0x1c4>
     ad0:	197d      	adds	r5, r7, r5
     ad2:	f100 3cff 	add.w	ip, r0, #4294967295
     ad6:	d271      	bcs.n	bbc <__udivmoddi4+0x2a0>
     ad8:	42ab      	cmp	r3, r5
     ada:	d96f      	bls.n	bbc <__udivmoddi4+0x2a0>
     adc:	3802      	subs	r0, #2
     ade:	443d      	add	r5, r7
     ae0:	1aeb      	subs	r3, r5, r3
     ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     ae6:	e778      	b.n	9da <__udivmoddi4+0xbe>
     ae8:	f1c1 0c20 	rsb	ip, r1, #32
     aec:	408b      	lsls	r3, r1
     aee:	fa22 f70c 	lsr.w	r7, r2, ip
     af2:	431f      	orrs	r7, r3
     af4:	fa20 f40c 	lsr.w	r4, r0, ip
     af8:	fa05 f301 	lsl.w	r3, r5, r1
     afc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b00:	fa25 f50c 	lsr.w	r5, r5, ip
     b04:	431c      	orrs	r4, r3
     b06:	0c23      	lsrs	r3, r4, #16
     b08:	fbb5 f9fe 	udiv	r9, r5, lr
     b0c:	fa1f f887 	uxth.w	r8, r7
     b10:	fb0e 5519 	mls	r5, lr, r9, r5
     b14:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b18:	fb09 fa08 	mul.w	sl, r9, r8
     b1c:	45aa      	cmp	sl, r5
     b1e:	fa02 f201 	lsl.w	r2, r2, r1
     b22:	fa00 f301 	lsl.w	r3, r0, r1
     b26:	d908      	bls.n	b3a <__udivmoddi4+0x21e>
     b28:	197d      	adds	r5, r7, r5
     b2a:	f109 30ff 	add.w	r0, r9, #4294967295
     b2e:	d247      	bcs.n	bc0 <__udivmoddi4+0x2a4>
     b30:	45aa      	cmp	sl, r5
     b32:	d945      	bls.n	bc0 <__udivmoddi4+0x2a4>
     b34:	f1a9 0902 	sub.w	r9, r9, #2
     b38:	443d      	add	r5, r7
     b3a:	eba5 050a 	sub.w	r5, r5, sl
     b3e:	b2a4      	uxth	r4, r4
     b40:	fbb5 f0fe 	udiv	r0, r5, lr
     b44:	fb0e 5510 	mls	r5, lr, r0, r5
     b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b4c:	fb00 f808 	mul.w	r8, r0, r8
     b50:	45a0      	cmp	r8, r4
     b52:	d907      	bls.n	b64 <__udivmoddi4+0x248>
     b54:	193c      	adds	r4, r7, r4
     b56:	f100 35ff 	add.w	r5, r0, #4294967295
     b5a:	d22d      	bcs.n	bb8 <__udivmoddi4+0x29c>
     b5c:	45a0      	cmp	r8, r4
     b5e:	d92b      	bls.n	bb8 <__udivmoddi4+0x29c>
     b60:	3802      	subs	r0, #2
     b62:	443c      	add	r4, r7
     b64:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     b68:	eba4 0408 	sub.w	r4, r4, r8
     b6c:	fba0 8902 	umull	r8, r9, r0, r2
     b70:	454c      	cmp	r4, r9
     b72:	46c6      	mov	lr, r8
     b74:	464d      	mov	r5, r9
     b76:	d319      	bcc.n	bac <__udivmoddi4+0x290>
     b78:	d016      	beq.n	ba8 <__udivmoddi4+0x28c>
     b7a:	b15e      	cbz	r6, b94 <__udivmoddi4+0x278>
     b7c:	ebb3 020e 	subs.w	r2, r3, lr
     b80:	eb64 0405 	sbc.w	r4, r4, r5
     b84:	fa04 fc0c 	lsl.w	ip, r4, ip
     b88:	40ca      	lsrs	r2, r1
     b8a:	ea4c 0202 	orr.w	r2, ip, r2
     b8e:	40cc      	lsrs	r4, r1
     b90:	e9c6 2400 	strd	r2, r4, [r6]
     b94:	2100      	movs	r1, #0
     b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b9a:	4631      	mov	r1, r6
     b9c:	4630      	mov	r0, r6
     b9e:	e70e      	b.n	9be <__udivmoddi4+0xa2>
     ba0:	46ac      	mov	ip, r5
     ba2:	e6ed      	b.n	980 <__udivmoddi4+0x64>
     ba4:	4618      	mov	r0, r3
     ba6:	e701      	b.n	9ac <__udivmoddi4+0x90>
     ba8:	4543      	cmp	r3, r8
     baa:	d2e6      	bcs.n	b7a <__udivmoddi4+0x25e>
     bac:	ebb8 0e02 	subs.w	lr, r8, r2
     bb0:	eb69 0507 	sbc.w	r5, r9, r7
     bb4:	3801      	subs	r0, #1
     bb6:	e7e0      	b.n	b7a <__udivmoddi4+0x25e>
     bb8:	4628      	mov	r0, r5
     bba:	e7d3      	b.n	b64 <__udivmoddi4+0x248>
     bbc:	4660      	mov	r0, ip
     bbe:	e78f      	b.n	ae0 <__udivmoddi4+0x1c4>
     bc0:	4681      	mov	r9, r0
     bc2:	e7ba      	b.n	b3a <__udivmoddi4+0x21e>
     bc4:	4661      	mov	r1, ip
     bc6:	e777      	b.n	ab8 <__udivmoddi4+0x19c>
     bc8:	4608      	mov	r0, r1
     bca:	e74b      	b.n	a64 <__udivmoddi4+0x148>
     bcc:	f1ac 0c02 	sub.w	ip, ip, #2
     bd0:	443d      	add	r5, r7
     bd2:	e715      	b.n	a00 <__udivmoddi4+0xe4>
     bd4:	3802      	subs	r0, #2
     bd6:	443c      	add	r4, r7
     bd8:	e726      	b.n	a28 <__udivmoddi4+0x10c>
     bda:	bf00      	nop

00000bdc <__aeabi_idiv0>:
     bdc:	4770      	bx	lr
     bde:	bf00      	nop

00000be0 <thread_B_code>:
        }
    }
}

void thread_B_code(void *argA , void *argB, void *argC)
{
     be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be4:	b085      	sub	sp, #20
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     be6:	4840      	ldr	r0, [pc, #256]	; (ce8 <thread_B_code+0x108>)
     be8:	f003 ff48 	bl	4a7c <z_impl_device_get_binding>
    const struct device *pwm0_dev;          /* Pointer to PWM device structure */
    int pwm0_channel  = 13;                 /* Ouput pin associated to pwm channel. See DTS for pwm channel - output pin association */ 
    unsigned int pwmPeriod_us = 1000;       /* PWM period in us */

    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
        if (pwm0_dev == NULL) {
     bec:	4604      	mov	r4, r0
     bee:	b908      	cbnz	r0, bf4 <thread_B_code+0x14>
          printk("Error: PWM device %s is not ready\n", pwm0_dev->name);
     bf0:	6803      	ldr	r3, [r0, #0]
     bf2:	deff      	udf	#255	; 0xff
        }
        else  {
          printk("PWM device %s is ready\n", pwm0_dev->name);            
        }

        ret = pwm_pin_set_usec(pwm0_dev, pwm0_channel, pwmPeriod_us,(unsigned int)((pwmPeriod_us*DadosBC)/100), PWM_POLARITY_NORMAL);
     bf4:	4d3d      	ldr	r5, [pc, #244]	; (cec <thread_B_code+0x10c>)
          printk("PWM device %s is ready\n", pwm0_dev->name);            
     bf6:	6801      	ldr	r1, [r0, #0]
     bf8:	483d      	ldr	r0, [pc, #244]	; (cf0 <thread_B_code+0x110>)
     bfa:	f006 fc71 	bl	74e0 <printk>
        ret = pwm_pin_set_usec(pwm0_dev, pwm0_channel, pwmPeriod_us,(unsigned int)((pwmPeriod_us*DadosBC)/100), PWM_POLARITY_NORMAL);
     bfe:	6829      	ldr	r1, [r5, #0]
     c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     c04:	434b      	muls	r3, r1
     c06:	4620      	mov	r0, r4
     c08:	2164      	movs	r1, #100	; 0x64
     c0a:	fbb3 f1f1 	udiv	r1, r3, r1
     c0e:	f000 f87f 	bl	d10 <pwm_pin_set_usec.constprop.0>
        if (ret) {
     c12:	4604      	mov	r4, r0
     c14:	b130      	cbz	r0, c24 <thread_B_code+0x44>
          printk("Error %d: failed to set pulse width\n", ret);
     c16:	4601      	mov	r1, r0
     c18:	4836      	ldr	r0, [pc, #216]	; (cf4 <thread_B_code+0x114>)
        DadosBC = DadosBC/cnt;
        
        printk("Thread B set BC value to: %d \n", DadosBC);
        k_sem_give(&sem_bc);
    }
}
     c1a:	b005      	add	sp, #20
     c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          printk("Error %d: failed to set pulse width\n", ret);
     c20:	f006 bc5e 	b.w	74e0 <printk>
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     c24:	4834      	ldr	r0, [pc, #208]	; (cf8 <thread_B_code+0x118>)
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     c26:	f8df b0e0 	ldr.w	fp, [pc, #224]	; d08 <thread_B_code+0x128>
     c2a:	f006 fc59 	bl	74e0 <printk>
    int avg = 0;
     c2e:	46a1      	mov	r9, r4
    long int nact = 0;
     c30:	46a0      	mov	r8, r4
     c32:	f04f 32ff 	mov.w	r2, #4294967295
     c36:	f04f 33ff 	mov.w	r3, #4294967295
     c3a:	4658      	mov	r0, fp
     c3c:	f005 fc50 	bl	64e0 <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());
     c40:	f006 fb6c 	bl	731c <k_uptime_get>
     c44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; d0c <thread_B_code+0x12c>
     c48:	f108 0801 	add.w	r8, r8, #1
     c4c:	4602      	mov	r2, r0
     c4e:	460b      	mov	r3, r1
     c50:	482a      	ldr	r0, [pc, #168]	; (cfc <thread_B_code+0x11c>)
     c52:	4641      	mov	r1, r8
     c54:	f006 fc44 	bl	74e0 <printk>
     c58:	4652      	mov	r2, sl
        for(int i = 0; i < 10; i++){
     c5a:	2300      	movs	r3, #0
          avg += DadosAB[i];
     c5c:	f852 1b04 	ldr.w	r1, [r2], #4
        for(int i = 0; i < 10; i++){
     c60:	3301      	adds	r3, #1
     c62:	2b0a      	cmp	r3, #10
          avg += DadosAB[i];
     c64:	4489      	add	r9, r1
        for(int i = 0; i < 10; i++){
     c66:	d1f9      	bne.n	c5c <thread_B_code+0x7c>
        avgmax = avg + avg*0.1;
     c68:	4648      	mov	r0, r9
     c6a:	f7ff fb9b 	bl	3a4 <__aeabi_i2d>
     c6e:	4602      	mov	r2, r0
     c70:	460b      	mov	r3, r1
     c72:	e9cd 2300 	strd	r2, r3, [sp]
     c76:	a31a      	add	r3, pc, #104	; (adr r3, ce0 <thread_B_code+0x100>)
     c78:	e9d3 2300 	ldrd	r2, r3, [r3]
     c7c:	f7ff fbfc 	bl	478 <__aeabi_dmul>
     c80:	4602      	mov	r2, r0
     c82:	460b      	mov	r3, r1
     c84:	4606      	mov	r6, r0
     c86:	460f      	mov	r7, r1
     c88:	e9dd 0100 	ldrd	r0, r1, [sp]
     c8c:	f7ff fa3e 	bl	10c <__adddf3>
     c90:	f7ff fe04 	bl	89c <__aeabi_d2iz>
        avgmin = avg - avg*0.1;
     c94:	4632      	mov	r2, r6
     c96:	463b      	mov	r3, r7
        avgmax = avg + avg*0.1;
     c98:	9003      	str	r0, [sp, #12]
        avgmin = avg - avg*0.1;
     c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
     c9e:	f7ff fa33 	bl	108 <__aeabi_dsub>
     ca2:	f7ff fdfb 	bl	89c <__aeabi_d2iz>
        for(int i = 0; i < 10; i++){
     ca6:	2300      	movs	r3, #0
     ca8:	682a      	ldr	r2, [r5, #0]
        avgmin = avg - avg*0.1;
     caa:	461e      	mov	r6, r3
          if(DadosAB[i] < avgmax || DadosAB[i] > avgmin) {
     cac:	f85a 1b04 	ldr.w	r1, [sl], #4
     cb0:	9f03      	ldr	r7, [sp, #12]
     cb2:	428f      	cmp	r7, r1
     cb4:	dc01      	bgt.n	cba <thread_B_code+0xda>
     cb6:	4288      	cmp	r0, r1
     cb8:	da02      	bge.n	cc0 <thread_B_code+0xe0>
            DadosBC += DadosAB[i];
     cba:	440a      	add	r2, r1
            cnt++;
     cbc:	3401      	adds	r4, #1
     cbe:	2601      	movs	r6, #1
        for(int i = 0; i < 10; i++){
     cc0:	3301      	adds	r3, #1
     cc2:	2b0a      	cmp	r3, #10
     cc4:	d1f2      	bne.n	cac <thread_B_code+0xcc>
     cc6:	b106      	cbz	r6, cca <thread_B_code+0xea>
     cc8:	602a      	str	r2, [r5, #0]
        DadosBC = DadosBC/cnt;
     cca:	6829      	ldr	r1, [r5, #0]
        printk("Thread B set BC value to: %d \n", DadosBC);
     ccc:	480c      	ldr	r0, [pc, #48]	; (d00 <thread_B_code+0x120>)
        DadosBC = DadosBC/cnt;
     cce:	fb91 f1f4 	sdiv	r1, r1, r4
     cd2:	6029      	str	r1, [r5, #0]
        printk("Thread B set BC value to: %d \n", DadosBC);
     cd4:	f006 fc04 	bl	74e0 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     cd8:	480a      	ldr	r0, [pc, #40]	; (d04 <thread_B_code+0x124>)
     cda:	f005 fbc3 	bl	6464 <z_impl_k_sem_give>
    while(1) {
     cde:	e7a8      	b.n	c32 <thread_B_code+0x52>
     ce0:	9999999a 	.word	0x9999999a
     ce4:	3fb99999 	.word	0x3fb99999
     ce8:	00007ead 	.word	0x00007ead
     cec:	20000470 	.word	0x20000470
     cf0:	00007eb3 	.word	0x00007eb3
     cf4:	00007ecb 	.word	0x00007ecb
     cf8:	00007ef0 	.word	0x00007ef0
     cfc:	00007f2a 	.word	0x00007f2a
     d00:	00007f5f 	.word	0x00007f5f
     d04:	20000484 	.word	0x20000484
     d08:	20000474 	.word	0x20000474
     d0c:	20000448 	.word	0x20000448

00000d10 <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
     d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d14:	4606      	mov	r6, r0
     d16:	b087      	sub	sp, #28
     d18:	460f      	mov	r7, r1
	return api->get_cycles_per_sec(dev, pwm, cycles);
     d1a:	6883      	ldr	r3, [r0, #8]
     d1c:	aa04      	add	r2, sp, #16
     d1e:	685b      	ldr	r3, [r3, #4]
     d20:	210d      	movs	r1, #13
     d22:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     d24:	9003      	str	r0, [sp, #12]
     d26:	bb90      	cbnz	r0, d8e <pwm_pin_set_usec.constprop.0+0x7e>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     d28:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
     d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     d30:	fba4 8903 	umull	r8, r9, r4, r3
     d34:	fb03 990b 	mla	r9, r3, fp, r9
     d38:	4a18      	ldr	r2, [pc, #96]	; (d9c <pwm_pin_set_usec.constprop.0+0x8c>)
     d3a:	2300      	movs	r3, #0
     d3c:	4640      	mov	r0, r8
     d3e:	4649      	mov	r1, r9
     d40:	f7ff fdd4 	bl	8ec <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     d44:	4b16      	ldr	r3, [pc, #88]	; (da0 <pwm_pin_set_usec.constprop.0+0x90>)
     d46:	f04f 32ff 	mov.w	r2, #4294967295
     d4a:	454b      	cmp	r3, r9
     d4c:	bf08      	it	eq
     d4e:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     d50:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     d52:	d31f      	bcc.n	d94 <pwm_pin_set_usec.constprop.0+0x84>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     d54:	fba7 4504 	umull	r4, r5, r7, r4
     d58:	fb07 550b 	mla	r5, r7, fp, r5
     d5c:	4a0f      	ldr	r2, [pc, #60]	; (d9c <pwm_pin_set_usec.constprop.0+0x8c>)
     d5e:	2300      	movs	r3, #0
     d60:	4620      	mov	r0, r4
     d62:	4629      	mov	r1, r5
     d64:	f7ff fdc2 	bl	8ec <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     d68:	4a0d      	ldr	r2, [pc, #52]	; (da0 <pwm_pin_set_usec.constprop.0+0x90>)
     d6a:	f04f 31ff 	mov.w	r1, #4294967295
     d6e:	42aa      	cmp	r2, r5
     d70:	bf08      	it	eq
     d72:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     d74:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     d76:	d30d      	bcc.n	d94 <pwm_pin_set_usec.constprop.0+0x84>
	return api->pin_set(dev, pwm, period, pulse, flags);
     d78:	68b2      	ldr	r2, [r6, #8]
     d7a:	9903      	ldr	r1, [sp, #12]
     d7c:	9100      	str	r1, [sp, #0]
     d7e:	6814      	ldr	r4, [r2, #0]
     d80:	210d      	movs	r1, #13
     d82:	4652      	mov	r2, sl
     d84:	4630      	mov	r0, r6
     d86:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
     d88:	b007      	add	sp, #28
     d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     d8e:	f06f 0004 	mvn.w	r0, #4
     d92:	e7f9      	b.n	d88 <pwm_pin_set_usec.constprop.0+0x78>
		return -ENOTSUP;
     d94:	f06f 0085 	mvn.w	r0, #133	; 0x85
     d98:	e7f6      	b.n	d88 <pwm_pin_set_usec.constprop.0+0x78>
     d9a:	bf00      	nop
     d9c:	000f4240 	.word	0x000f4240
     da0:	000f423f 	.word	0x000f423f

00000da4 <thread_A_code>:
{
     da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("Thread A init (periodic)\n");
     da8:	4820      	ldr	r0, [pc, #128]	; (e2c <thread_A_code+0x88>)
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());  
     daa:	4f21      	ldr	r7, [pc, #132]	; (e30 <thread_A_code+0x8c>)
     dac:	f8df a084 	ldr.w	sl, [pc, #132]	; e34 <thread_A_code+0x90>
    printk("Thread A init (periodic)\n");
     db0:	f006 fb96 	bl	74e0 <printk>
    release_time = k_uptime_get() + thread_A_period;
     db4:	f006 fab2 	bl	731c <k_uptime_get>
     db8:	f640 33b8 	movw	r3, #3000	; 0xbb8
     dbc:	18c4      	adds	r4, r0, r3
     dbe:	f04f 0300 	mov.w	r3, #0
     dc2:	eb41 0503 	adc.w	r5, r1, r3
    long int nact = 0;
     dc6:	461e      	mov	r6, r3
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     dc8:	f240 38e7 	movw	r8, #999	; 0x3e7
     dcc:	f04f 0900 	mov.w	r9, #0
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n", ++nact, k_uptime_get());  
     dd0:	f006 faa4 	bl	731c <k_uptime_get>
     dd4:	3601      	adds	r6, #1
     dd6:	4602      	mov	r2, r0
     dd8:	460b      	mov	r3, r1
     dda:	4638      	mov	r0, r7
     ddc:	4631      	mov	r1, r6
     dde:	f006 fb7f 	bl	74e0 <printk>
     de2:	4650      	mov	r0, sl
     de4:	f005 fb3e 	bl	6464 <z_impl_k_sem_give>
        fin_time = k_uptime_get();
     de8:	f006 fa98 	bl	731c <k_uptime_get>
     dec:	460b      	mov	r3, r1
        if( fin_time < release_time) {
     dee:	42a0      	cmp	r0, r4
     df0:	eb73 0105 	sbcs.w	r1, r3, r5
        fin_time = k_uptime_get();
     df4:	4602      	mov	r2, r0
        if( fin_time < release_time) {
     df6:	daeb      	bge.n	dd0 <thread_A_code+0x2c>
            k_msleep(release_time - fin_time);
     df8:	1aa1      	subs	r1, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     dfa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
     dfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e02:	46c3      	mov	fp, r8
     e04:	46cc      	mov	ip, r9
     e06:	fbc0 bc01 	smlal	fp, ip, r0, r1
     e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e0e:	2300      	movs	r3, #0
     e10:	4658      	mov	r0, fp
     e12:	4661      	mov	r1, ip
     e14:	f7ff fd6a 	bl	8ec <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     e18:	f005 fa32 	bl	6280 <z_impl_k_sleep>
            release_time += thread_A_period;
     e1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
     e20:	18e4      	adds	r4, r4, r3
     e22:	f04f 0300 	mov.w	r3, #0
     e26:	eb43 0505 	adc.w	r5, r3, r5
     e2a:	e7d1      	b.n	dd0 <thread_A_code+0x2c>
     e2c:	00007e5c 	.word	0x00007e5c
     e30:	00007e76 	.word	0x00007e76
     e34:	20000474 	.word	0x20000474

00000e38 <thread_C_code>:

void thread_C_code(void *argA , void *argB, void *argC)
{
     e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    const struct device *pwm0_dev;          /* Pointer to PWM device structure */
    int pwm0_channel  = 13;                 /* Ouput pin associated to pwm channel. See DTS for pwm channel - output pin association */ 
    unsigned int pwmPeriod_us = 1000;       /* PWM period in us */

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     e3c:	481d      	ldr	r0, [pc, #116]	; (eb4 <thread_C_code+0x7c>)
	return z_impl_k_sem_take(sem, timeout);
     e3e:	4f1e      	ldr	r7, [pc, #120]	; (eb8 <thread_C_code+0x80>)
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());          
     e40:	f8df 808c 	ldr.w	r8, [pc, #140]	; ed0 <thread_C_code+0x98>
        printk("Task C read BC value: %d\n", DadosBC); 
     e44:	4d1d      	ldr	r5, [pc, #116]	; (ebc <thread_C_code+0x84>)
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     e46:	f006 fb4b 	bl	74e0 <printk>
    long int nact = 0;
     e4a:	2600      	movs	r6, #0
     e4c:	f04f 32ff 	mov.w	r2, #4294967295
     e50:	f04f 33ff 	mov.w	r3, #4294967295
     e54:	4638      	mov	r0, r7
     e56:	f005 fb43 	bl	64e0 <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n", ++nact, k_uptime_get());          
     e5a:	f006 fa5f 	bl	731c <k_uptime_get>
     e5e:	3601      	adds	r6, #1
     e60:	4602      	mov	r2, r0
     e62:	460b      	mov	r3, r1
     e64:	4640      	mov	r0, r8
     e66:	4631      	mov	r1, r6
     e68:	f006 fb3a 	bl	74e0 <printk>
        

        DadosBC = 100;
     e6c:	f04f 0964 	mov.w	r9, #100	; 0x64
        printk("Task C read BC value: %d\n", DadosBC); 
     e70:	6829      	ldr	r1, [r5, #0]
     e72:	4813      	ldr	r0, [pc, #76]	; (ec0 <thread_C_code+0x88>)
     e74:	f006 fb34 	bl	74e0 <printk>
        DadosBC = 100;
     e78:	f8c5 9000 	str.w	r9, [r5]
     e7c:	4811      	ldr	r0, [pc, #68]	; (ec4 <thread_C_code+0x8c>)
     e7e:	f003 fdfd 	bl	4a7c <z_impl_device_get_binding>

        pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
        if (pwm0_dev == NULL) {
     e82:	4604      	mov	r4, r0
     e84:	b908      	cbnz	r0, e8a <thread_C_code+0x52>
          printk("Error: PWM device %s is not ready\n", pwm0_dev->name);
     e86:	6803      	ldr	r3, [r0, #0]
     e88:	deff      	udf	#255	; 0xff
          return;
        }
        else  {
          printk("PWM device %s is ready\n", pwm0_dev->name);            
     e8a:	6801      	ldr	r1, [r0, #0]
     e8c:	480e      	ldr	r0, [pc, #56]	; (ec8 <thread_C_code+0x90>)
     e8e:	f006 fb27 	bl	74e0 <printk>
        }

        ret = pwm_pin_set_usec(pwm0_dev, pwm0_channel, pwmPeriod_us,(unsigned int)((pwmPeriod_us*DadosBC)/100), PWM_POLARITY_NORMAL);
     e92:	682b      	ldr	r3, [r5, #0]
     e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     e98:	4359      	muls	r1, r3
     e9a:	4620      	mov	r0, r4
     e9c:	fbb1 f1f9 	udiv	r1, r1, r9
     ea0:	f7ff ff36 	bl	d10 <pwm_pin_set_usec.constprop.0>
        if (ret) {
     ea4:	4601      	mov	r1, r0
     ea6:	2800      	cmp	r0, #0
     ea8:	d0d0      	beq.n	e4c <thread_C_code+0x14>
          printk("Error %d: failed to set pulse width\n", ret);
          return;
        }      
    }
}
     eaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
          printk("Error %d: failed to set pulse width\n", ret);
     eae:	4807      	ldr	r0, [pc, #28]	; (ecc <thread_C_code+0x94>)
     eb0:	f006 bb16 	b.w	74e0 <printk>
     eb4:	00007f7e 	.word	0x00007f7e
     eb8:	20000484 	.word	0x20000484
     ebc:	20000470 	.word	0x20000470
     ec0:	00007fee 	.word	0x00007fee
     ec4:	00007ead 	.word	0x00007ead
     ec8:	00007eb3 	.word	0x00007eb3
     ecc:	00007ecb 	.word	0x00007ecb
     ed0:	00007fb8 	.word	0x00007fb8

00000ed4 <main>:
void main(void) {
     ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     ed8:	4823      	ldr	r0, [pc, #140]	; (f68 <main+0x94>)
void main(void) {
     eda:	b088      	sub	sp, #32
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     edc:	f001 fda4 	bl	2a28 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     ee0:	2201      	movs	r2, #1
     ee2:	2100      	movs	r1, #0
     ee4:	4821      	ldr	r0, [pc, #132]	; (f6c <main+0x98>)
     ee6:	f006 fd72 	bl	79ce <z_impl_k_sem_init>
     eea:	2201      	movs	r2, #1
     eec:	2100      	movs	r1, #0
     eee:	4820      	ldr	r0, [pc, #128]	; (f70 <main+0x9c>)
     ef0:	f006 fd6d 	bl	79ce <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     ef4:	2600      	movs	r6, #0
     ef6:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     ef8:	2400      	movs	r4, #0
     efa:	2501      	movs	r5, #1
     efc:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f00:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f04:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f08:	4b1a      	ldr	r3, [pc, #104]	; (f74 <main+0xa0>)
     f0a:	491b      	ldr	r1, [pc, #108]	; (f78 <main+0xa4>)
     f0c:	9400      	str	r4, [sp, #0]
     f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f12:	481a      	ldr	r0, [pc, #104]	; (f7c <main+0xa8>)
     f14:	f005 fbd2 	bl	66bc <z_impl_k_thread_create>
     f18:	4b19      	ldr	r3, [pc, #100]	; (f80 <main+0xac>)
     f1a:	6018      	str	r0, [r3, #0]
     f1c:	4b19      	ldr	r3, [pc, #100]	; (f84 <main+0xb0>)
     f1e:	491a      	ldr	r1, [pc, #104]	; (f88 <main+0xb4>)
     f20:	9400      	str	r4, [sp, #0]
     f22:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f26:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f32:	4816      	ldr	r0, [pc, #88]	; (f8c <main+0xb8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     f34:	f8df 8064 	ldr.w	r8, [pc, #100]	; f9c <main+0xc8>
     f38:	f005 fbc0 	bl	66bc <z_impl_k_thread_create>
     f3c:	f8c8 0000 	str.w	r0, [r8]
     f40:	4b13      	ldr	r3, [pc, #76]	; (f90 <main+0xbc>)
     f42:	4914      	ldr	r1, [pc, #80]	; (f94 <main+0xc0>)
     f44:	9400      	str	r4, [sp, #0]
     f46:	e9cd 6706 	strd	r6, r7, [sp, #24]
     f4a:	e9cd 5403 	strd	r5, r4, [sp, #12]
     f4e:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f56:	4810      	ldr	r0, [pc, #64]	; (f98 <main+0xc4>)
     f58:	f005 fbb0 	bl	66bc <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     f5c:	f8c8 0000 	str.w	r0, [r8]
} 
     f60:	b008      	add	sp, #32
     f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f66:	bf00      	nop
     f68:	00008008 	.word	0x00008008
     f6c:	20000474 	.word	0x20000474
     f70:	20000484 	.word	0x20000484
     f74:	00000da5 	.word	0x00000da5
     f78:	20001160 	.word	0x20001160
     f7c:	200001a0 	.word	0x200001a0
     f80:	20000494 	.word	0x20000494
     f84:	00000be1 	.word	0x00000be1
     f88:	20001580 	.word	0x20001580
     f8c:	20000220 	.word	0x20000220
     f90:	00000e39 	.word	0x00000e39
     f94:	200019a0 	.word	0x200019a0
     f98:	200002a0 	.word	0x200002a0
     f9c:	20000498 	.word	0x20000498

00000fa0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fa4:	b091      	sub	sp, #68	; 0x44
     fa6:	468b      	mov	fp, r1
     fa8:	9002      	str	r0, [sp, #8]
     faa:	4692      	mov	sl, r2
     fac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     fae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     fb0:	f89a 0000 	ldrb.w	r0, [sl]
     fb4:	b908      	cbnz	r0, fba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     fb6:	4628      	mov	r0, r5
     fb8:	e35e      	b.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
		if (*fp != '%') {
     fba:	2825      	cmp	r0, #37	; 0x25
     fbc:	f10a 0701 	add.w	r7, sl, #1
     fc0:	d007      	beq.n	fd2 <cbvprintf+0x32>
			OUTC('%');
     fc2:	9b02      	ldr	r3, [sp, #8]
     fc4:	4659      	mov	r1, fp
     fc6:	4798      	blx	r3
     fc8:	2800      	cmp	r0, #0
     fca:	f2c0 8355 	blt.w	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
     fce:	3501      	adds	r5, #1
			break;
     fd0:	e210      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
		} state = {
     fd2:	2218      	movs	r2, #24
     fd4:	2100      	movs	r1, #0
     fd6:	a80a      	add	r0, sp, #40	; 0x28
     fd8:	f006 fae5 	bl	75a6 <memset>
	if (*sp == '%') {
     fdc:	f89a 3001 	ldrb.w	r3, [sl, #1]
     fe0:	2b25      	cmp	r3, #37	; 0x25
     fe2:	d078      	beq.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
     fe4:	2200      	movs	r2, #0
     fe6:	4694      	mov	ip, r2
     fe8:	4616      	mov	r6, r2
     fea:	4696      	mov	lr, r2
     fec:	4610      	mov	r0, r2
     fee:	4639      	mov	r1, r7
		switch (*sp) {
     ff0:	f817 3b01 	ldrb.w	r3, [r7], #1
     ff4:	2b2b      	cmp	r3, #43	; 0x2b
     ff6:	f000 809d 	beq.w	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
     ffa:	f200 8094 	bhi.w	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
     ffe:	2b20      	cmp	r3, #32
    1000:	f000 809b 	beq.w	113a <CONFIG_FPROTECT_BLOCK_SIZE+0x13a>
    1004:	2b23      	cmp	r3, #35	; 0x23
    1006:	f000 809a 	beq.w	113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
    100a:	b128      	cbz	r0, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    100c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1010:	f040 0004 	orr.w	r0, r0, #4
    1014:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1018:	f1be 0f00 	cmp.w	lr, #0
    101c:	d005      	beq.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
    101e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1022:	f040 0008 	orr.w	r0, r0, #8
    1026:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    102a:	b12e      	cbz	r6, 1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    102c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1030:	f040 0010 	orr.w	r0, r0, #16
    1034:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1038:	f1bc 0f00 	cmp.w	ip, #0
    103c:	d005      	beq.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    103e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1042:	f040 0020 	orr.w	r0, r0, #32
    1046:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    104a:	b12a      	cbz	r2, 1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    104c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1054:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1058:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    105c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1060:	2844      	cmp	r0, #68	; 0x44
    1062:	d103      	bne.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		conv->flag_zero = false;
    1064:	f36f 1286 	bfc	r2, #6, #1
    1068:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    106c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1070:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1076:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    107a:	d17b      	bne.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
		conv->width_star = true;
    107c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1080:	f042 0201 	orr.w	r2, r2, #1
    1084:	1c4b      	adds	r3, r1, #1
    1086:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    108a:	781a      	ldrb	r2, [r3, #0]
    108c:	2a2e      	cmp	r2, #46	; 0x2e
    108e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1092:	bf0c      	ite	eq
    1094:	2101      	moveq	r1, #1
    1096:	2100      	movne	r1, #0
    1098:	f361 0241 	bfi	r2, r1, #1, #1
    109c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    10a0:	d174      	bne.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
	if (*sp == '*') {
    10a2:	785a      	ldrb	r2, [r3, #1]
    10a4:	2a2a      	cmp	r2, #42	; 0x2a
    10a6:	d06a      	beq.n	117e <CONFIG_FPROTECT_BLOCK_SIZE+0x17e>
    10a8:	3301      	adds	r3, #1
	size_t val = 0;
    10aa:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    10ac:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    10ae:	4618      	mov	r0, r3
    10b0:	f810 2b01 	ldrb.w	r2, [r0], #1
    10b4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    10b8:	2f09      	cmp	r7, #9
    10ba:	f240 808e 	bls.w	11da <CONFIG_FPROTECT_BLOCK_SIZE+0x1da>
	conv->unsupported |= ((conv->prec_value < 0)
    10be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    10c2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    10c4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    10c8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    10cc:	f361 0241 	bfi	r2, r1, #1, #1
    10d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    10d4:	e05a      	b.n	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
		conv->specifier = *sp++;
    10d6:	f10a 0702 	add.w	r7, sl, #2
    10da:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    10de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10e2:	07d9      	lsls	r1, r3, #31
    10e4:	f140 8149 	bpl.w	137a <CONFIG_FPROTECT_BLOCK_SIZE+0x37a>
			width = va_arg(ap, int);
    10e8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    10ec:	f1b9 0f00 	cmp.w	r9, #0
    10f0:	da07      	bge.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
				conv->flag_dash = true;
    10f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10f6:	f042 0204 	orr.w	r2, r2, #4
    10fa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    10fe:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1102:	075a      	lsls	r2, r3, #29
    1104:	f140 8142 	bpl.w	138c <CONFIG_FPROTECT_BLOCK_SIZE+0x38c>
			int arg = va_arg(ap, int);
    1108:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    110c:	f1b8 0f00 	cmp.w	r8, #0
    1110:	f280 8141 	bge.w	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
				conv->prec_present = false;
    1114:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1118:	f36f 0341 	bfc	r3, #1, #1
    111c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1120:	f04f 38ff 	mov.w	r8, #4294967295
    1124:	e137      	b.n	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
		switch (*sp) {
    1126:	2b2d      	cmp	r3, #45	; 0x2d
    1128:	d00c      	beq.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    112a:	2b30      	cmp	r3, #48	; 0x30
    112c:	f47f af6d 	bne.w	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
			conv->flag_zero = true;
    1130:	2201      	movs	r2, #1
	} while (loop);
    1132:	e75c      	b.n	fee <cbvprintf+0x4e>
			conv->flag_plus = true;
    1134:	f04f 0e01 	mov.w	lr, #1
    1138:	e759      	b.n	fee <cbvprintf+0x4e>
			conv->flag_space = true;
    113a:	2601      	movs	r6, #1
    113c:	e757      	b.n	fee <cbvprintf+0x4e>
			conv->flag_hash = true;
    113e:	f04f 0c01 	mov.w	ip, #1
    1142:	e754      	b.n	fee <cbvprintf+0x4e>
		switch (*sp) {
    1144:	2001      	movs	r0, #1
    1146:	e752      	b.n	fee <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1148:	fb0c 0202 	mla	r2, ip, r2, r0
    114c:	3a30      	subs	r2, #48	; 0x30
    114e:	4633      	mov	r3, r6
    1150:	461e      	mov	r6, r3
    1152:	f816 0b01 	ldrb.w	r0, [r6], #1
    1156:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    115a:	2f09      	cmp	r7, #9
    115c:	d9f4      	bls.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
	if (sp != wp) {
    115e:	4299      	cmp	r1, r3
    1160:	d093      	beq.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
		conv->unsupported |= ((conv->width_value < 0)
    1162:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1166:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1168:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    116a:	f362 0141 	bfi	r1, r2, #1, #1
    116e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1172:	e78a      	b.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
    1174:	460b      	mov	r3, r1
	size_t val = 0;
    1176:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1178:	f04f 0c0a 	mov.w	ip, #10
    117c:	e7e8      	b.n	1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>
		conv->prec_star = true;
    117e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1182:	f042 0204 	orr.w	r2, r2, #4
    1186:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    118a:	3302      	adds	r3, #2
	switch (*sp) {
    118c:	461f      	mov	r7, r3
    118e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1192:	2a6c      	cmp	r2, #108	; 0x6c
    1194:	d041      	beq.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
    1196:	d825      	bhi.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    1198:	2a68      	cmp	r2, #104	; 0x68
    119a:	d02b      	beq.n	11f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f4>
    119c:	2a6a      	cmp	r2, #106	; 0x6a
    119e:	d046      	beq.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
    11a0:	2a4c      	cmp	r2, #76	; 0x4c
    11a2:	d04c      	beq.n	123e <CONFIG_FPROTECT_BLOCK_SIZE+0x23e>
    11a4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    11a6:	f817 2b01 	ldrb.w	r2, [r7], #1
    11aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11ae:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    11b2:	2a78      	cmp	r2, #120	; 0x78
    11b4:	f200 80d9 	bhi.w	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
    11b8:	2a57      	cmp	r2, #87	; 0x57
    11ba:	d84d      	bhi.n	1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>
    11bc:	2a41      	cmp	r2, #65	; 0x41
    11be:	d003      	beq.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
    11c0:	3a45      	subs	r2, #69	; 0x45
    11c2:	2a02      	cmp	r2, #2
    11c4:	f200 80d1 	bhi.w	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
		conv->specifier_cat = SPECIFIER_FP;
    11c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11cc:	2204      	movs	r2, #4
    11ce:	f362 0302 	bfi	r3, r2, #0, #3
    11d2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    11d6:	2301      	movs	r3, #1
			break;
    11d8:	e09e      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		val = 10U * val + *sp++ - '0';
    11da:	fb06 2101 	mla	r1, r6, r1, r2
    11de:	3930      	subs	r1, #48	; 0x30
    11e0:	4603      	mov	r3, r0
    11e2:	e764      	b.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
	switch (*sp) {
    11e4:	2a74      	cmp	r2, #116	; 0x74
    11e6:	d026      	beq.n	1236 <CONFIG_FPROTECT_BLOCK_SIZE+0x236>
    11e8:	2a7a      	cmp	r2, #122	; 0x7a
    11ea:	d1db      	bne.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
		conv->length_mod = LENGTH_Z;
    11ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11f0:	2206      	movs	r2, #6
    11f2:	e00d      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
		if (*++sp == 'h') {
    11f4:	785a      	ldrb	r2, [r3, #1]
    11f6:	2a68      	cmp	r2, #104	; 0x68
    11f8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11fc:	d106      	bne.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
			conv->length_mod = LENGTH_HH;
    11fe:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1200:	f361 02c6 	bfi	r2, r1, #3, #4
    1204:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1208:	1c9f      	adds	r7, r3, #2
    120a:	e7cc      	b.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
			conv->length_mod = LENGTH_H;
    120c:	4613      	mov	r3, r2
    120e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1210:	f362 03c6 	bfi	r3, r2, #3, #4
    1214:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1218:	e7c5      	b.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
		if (*++sp == 'l') {
    121a:	785a      	ldrb	r2, [r3, #1]
    121c:	2a6c      	cmp	r2, #108	; 0x6c
    121e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1222:	d101      	bne.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
			conv->length_mod = LENGTH_LL;
    1224:	2104      	movs	r1, #4
    1226:	e7eb      	b.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
			conv->length_mod = LENGTH_L;
    1228:	4613      	mov	r3, r2
    122a:	2203      	movs	r2, #3
    122c:	e7f0      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
		conv->length_mod = LENGTH_J;
    122e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1232:	2205      	movs	r2, #5
    1234:	e7ec      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
		conv->length_mod = LENGTH_T;
    1236:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    123a:	2207      	movs	r2, #7
    123c:	e7e8      	b.n	1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>
		conv->unsupported = true;
    123e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1242:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1246:	f023 0302 	bic.w	r3, r3, #2
    124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    124e:	f043 0302 	orr.w	r3, r3, #2
    1252:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1256:	e7a6      	b.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
    1258:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    125c:	2920      	cmp	r1, #32
    125e:	f200 8084 	bhi.w	136a <CONFIG_FPROTECT_BLOCK_SIZE+0x36a>
    1262:	a001      	add	r0, pc, #4	; (adr r0, 1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    1264:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1268:	0000132d 	.word	0x0000132d
    126c:	0000136b 	.word	0x0000136b
    1270:	0000136b 	.word	0x0000136b
    1274:	0000136b 	.word	0x0000136b
    1278:	0000136b 	.word	0x0000136b
    127c:	0000136b 	.word	0x0000136b
    1280:	0000136b 	.word	0x0000136b
    1284:	0000136b 	.word	0x0000136b
    1288:	0000136b 	.word	0x0000136b
    128c:	000011c9 	.word	0x000011c9
    1290:	0000136b 	.word	0x0000136b
    1294:	0000132d 	.word	0x0000132d
    1298:	000012ed 	.word	0x000012ed
    129c:	000011c9 	.word	0x000011c9
    12a0:	000011c9 	.word	0x000011c9
    12a4:	000011c9 	.word	0x000011c9
    12a8:	0000136b 	.word	0x0000136b
    12ac:	000012ed 	.word	0x000012ed
    12b0:	0000136b 	.word	0x0000136b
    12b4:	0000136b 	.word	0x0000136b
    12b8:	0000136b 	.word	0x0000136b
    12bc:	0000136b 	.word	0x0000136b
    12c0:	00001335 	.word	0x00001335
    12c4:	0000132d 	.word	0x0000132d
    12c8:	00001351 	.word	0x00001351
    12cc:	0000136b 	.word	0x0000136b
    12d0:	0000136b 	.word	0x0000136b
    12d4:	00001351 	.word	0x00001351
    12d8:	0000136b 	.word	0x0000136b
    12dc:	0000132d 	.word	0x0000132d
    12e0:	0000136b 	.word	0x0000136b
    12e4:	0000136b 	.word	0x0000136b
    12e8:	0000132d 	.word	0x0000132d
		conv->specifier_cat = SPECIFIER_SINT;
    12ec:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    12f0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    12f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    12f6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12fa:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    12fc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1300:	bf02      	ittt	eq
    1302:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1306:	f041 0101 	orreq.w	r1, r1, #1
    130a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    130e:	2a63      	cmp	r2, #99	; 0x63
    1310:	d131      	bne.n	1376 <CONFIG_FPROTECT_BLOCK_SIZE+0x376>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1312:	3b00      	subs	r3, #0
    1314:	bf18      	it	ne
    1316:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1318:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    131c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1320:	430b      	orrs	r3, r1
    1322:	f363 0241 	bfi	r2, r3, #1, #1
    1326:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    132a:	e6d8      	b.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
		conv->specifier_cat = SPECIFIER_UINT;
    132c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1330:	2002      	movs	r0, #2
    1332:	e7de      	b.n	12f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f2>
		conv->specifier_cat = SPECIFIER_PTR;
    1334:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1338:	f003 0378 	and.w	r3, r3, #120	; 0x78
    133c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1340:	2103      	movs	r1, #3
    1342:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1346:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1348:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    134c:	4143      	adcs	r3, r0
    134e:	e7e3      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		conv->specifier_cat = SPECIFIER_PTR;
    1350:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1354:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1356:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    135a:	f361 0202 	bfi	r2, r1, #0, #3
    135e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1362:	bf14      	ite	ne
    1364:	2301      	movne	r3, #1
    1366:	2300      	moveq	r3, #0
    1368:	e7d6      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		conv->invalid = true;
    136a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    136e:	f043 0301 	orr.w	r3, r3, #1
    1372:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1376:	2300      	movs	r3, #0
    1378:	e7ce      	b.n	1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>
		} else if (conv->width_present) {
    137a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    137e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1380:	bfb4      	ite	lt
    1382:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1386:	f04f 39ff 	movge.w	r9, #4294967295
    138a:	e6ba      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
		} else if (conv->prec_present) {
    138c:	079b      	lsls	r3, r3, #30
    138e:	f57f aec7 	bpl.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
			precision = conv->prec_value;
    1392:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1396:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    139a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    139c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    13a0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    13a4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    13a8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    13aa:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    13ae:	d136      	bne.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
			switch (length_mod) {
    13b0:	1ed3      	subs	r3, r2, #3
    13b2:	2b04      	cmp	r3, #4
    13b4:	d820      	bhi.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
    13b6:	e8df f003 	tbb	[pc, r3]
    13ba:	0703      	.short	0x0703
    13bc:	1f07      	.short	0x1f07
    13be:	1f          	.byte	0x1f
    13bf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    13c0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    13c4:	17c1      	asrs	r1, r0, #31
    13c6:	e004      	b.n	13d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d2>
					(sint_value_type)va_arg(ap, intmax_t);
    13c8:	3407      	adds	r4, #7
    13ca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    13ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    13d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    13d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    13da:	f013 0603 	ands.w	r6, r3, #3
    13de:	d054      	beq.n	148a <CONFIG_FPROTECT_BLOCK_SIZE+0x48a>
			OUTS(sp, fp);
    13e0:	9802      	ldr	r0, [sp, #8]
    13e2:	463b      	mov	r3, r7
    13e4:	4652      	mov	r2, sl
    13e6:	4659      	mov	r1, fp
    13e8:	f005 fff8 	bl	73dc <outs>
    13ec:	2800      	cmp	r0, #0
    13ee:	f2c0 8143 	blt.w	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    13f2:	4405      	add	r5, r0
			continue;
    13f4:	46ba      	mov	sl, r7
    13f6:	e5db      	b.n	fb0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13f8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    13fc:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    13fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1402:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1406:	d105      	bne.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
				value->uint = (unsigned char)value->uint;
    1408:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    140c:	930a      	str	r3, [sp, #40]	; 0x28
    140e:	2300      	movs	r3, #0
    1410:	930b      	str	r3, [sp, #44]	; 0x2c
    1412:	e7e0      	b.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
			} else if (length_mod == LENGTH_H) {
    1414:	2a02      	cmp	r2, #2
    1416:	d1de      	bne.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
				value->sint = (short)value->sint;
    1418:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    141c:	e7d2      	b.n	13c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    141e:	2b02      	cmp	r3, #2
    1420:	d123      	bne.n	146a <CONFIG_FPROTECT_BLOCK_SIZE+0x46a>
			switch (length_mod) {
    1422:	1ed3      	subs	r3, r2, #3
    1424:	2b04      	cmp	r3, #4
    1426:	d813      	bhi.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
    1428:	e8df f003 	tbb	[pc, r3]
    142c:	120a0a03 	.word	0x120a0a03
    1430:	12          	.byte	0x12
    1431:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1432:	6820      	ldr	r0, [r4, #0]
    1434:	900a      	str	r0, [sp, #40]	; 0x28
    1436:	2100      	movs	r1, #0
    1438:	1d23      	adds	r3, r4, #4
    143a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    143c:	461c      	mov	r4, r3
    143e:	e7ca      	b.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
					(uint_value_type)va_arg(ap,
    1440:	3407      	adds	r4, #7
    1442:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1446:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    144a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    144e:	e7f5      	b.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
					(uint_value_type)va_arg(ap, size_t);
    1450:	f854 3b04 	ldr.w	r3, [r4], #4
    1454:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1456:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1458:	f04f 0300 	mov.w	r3, #0
    145c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    145e:	d0d3      	beq.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
			} else if (length_mod == LENGTH_H) {
    1460:	2a02      	cmp	r2, #2
    1462:	d1b8      	bne.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
				value->uint = (unsigned short)value->uint;
    1464:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1468:	e7d0      	b.n	140c <CONFIG_FPROTECT_BLOCK_SIZE+0x40c>
		} else if (specifier_cat == SPECIFIER_FP) {
    146a:	2b04      	cmp	r3, #4
    146c:	d107      	bne.n	147e <CONFIG_FPROTECT_BLOCK_SIZE+0x47e>
			if (length_mod == LENGTH_UPPER_L) {
    146e:	3407      	adds	r4, #7
    1470:	f024 0407 	bic.w	r4, r4, #7
    1474:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1478:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    147c:	e7ab      	b.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    147e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1480:	bf04      	itt	eq
    1482:	f854 3b04 	ldreq.w	r3, [r4], #4
    1486:	930a      	streq	r3, [sp, #40]	; 0x28
    1488:	e7a5      	b.n	13d6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d6>
		switch (conv->specifier) {
    148a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    148e:	2878      	cmp	r0, #120	; 0x78
    1490:	d8b0      	bhi.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    1492:	2862      	cmp	r0, #98	; 0x62
    1494:	d822      	bhi.n	14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
    1496:	2825      	cmp	r0, #37	; 0x25
    1498:	f43f ad93 	beq.w	fc2 <cbvprintf+0x22>
    149c:	2858      	cmp	r0, #88	; 0x58
    149e:	d1a9      	bne.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
			bps = encode_uint(value->uint, conv, buf, bpe);
    14a0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    14a4:	9300      	str	r3, [sp, #0]
    14a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    14aa:	ab04      	add	r3, sp, #16
    14ac:	aa0c      	add	r2, sp, #48	; 0x30
    14ae:	f005 ff4a 	bl	7346 <encode_uint>
    14b2:	4682      	mov	sl, r0
			if (precision >= 0) {
    14b4:	f1b8 0f00 	cmp.w	r8, #0
    14b8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    14bc:	db0c      	blt.n	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
				conv->flag_zero = false;
    14be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    14c2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    14c6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    14ca:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    14cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    14d0:	d902      	bls.n	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
					conv->pad0_value = precision - (int)len;
    14d2:	eba8 0303 	sub.w	r3, r8, r3
    14d6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    14d8:	4680      	mov	r8, r0
    14da:	e03d      	b.n	1558 <CONFIG_FPROTECT_BLOCK_SIZE+0x558>
    14dc:	3863      	subs	r0, #99	; 0x63
    14de:	2815      	cmp	r0, #21
    14e0:	d888      	bhi.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    14e2:	a101      	add	r1, pc, #4	; (adr r1, 14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>)
    14e4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    14e8:	00001569 	.word	0x00001569
    14ec:	000015cd 	.word	0x000015cd
    14f0:	000013f5 	.word	0x000013f5
    14f4:	000013f5 	.word	0x000013f5
    14f8:	000013f5 	.word	0x000013f5
    14fc:	000013f5 	.word	0x000013f5
    1500:	000015cd 	.word	0x000015cd
    1504:	000013f5 	.word	0x000013f5
    1508:	000013f5 	.word	0x000013f5
    150c:	000013f5 	.word	0x000013f5
    1510:	000013f5 	.word	0x000013f5
    1514:	0000162b 	.word	0x0000162b
    1518:	000015f9 	.word	0x000015f9
    151c:	000015fd 	.word	0x000015fd
    1520:	000013f5 	.word	0x000013f5
    1524:	000013f5 	.word	0x000013f5
    1528:	00001541 	.word	0x00001541
    152c:	000013f5 	.word	0x000013f5
    1530:	000015f9 	.word	0x000015f9
    1534:	000013f5 	.word	0x000013f5
    1538:	000013f5 	.word	0x000013f5
    153c:	000015f9 	.word	0x000015f9
			if (precision >= 0) {
    1540:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1544:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1548:	db0a      	blt.n	1560 <CONFIG_FPROTECT_BLOCK_SIZE+0x560>
				len = strnlen(bps, precision);
    154a:	4641      	mov	r1, r8
    154c:	4650      	mov	r0, sl
    154e:	f006 f80a 	bl	7566 <strnlen>
			bpe = bps + len;
    1552:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1556:	2600      	movs	r6, #0
		if (bps == NULL) {
    1558:	f1ba 0f00 	cmp.w	sl, #0
    155c:	d10c      	bne.n	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
    155e:	e749      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
				len = strlen(bps);
    1560:	4650      	mov	r0, sl
    1562:	f005 fff9 	bl	7558 <strlen>
    1566:	e7f4      	b.n	1552 <CONFIG_FPROTECT_BLOCK_SIZE+0x552>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    156a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    156e:	2600      	movs	r6, #0
			bpe = buf + 1;
    1570:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1574:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1578:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    157c:	b106      	cbz	r6, 1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
			nj_len += 1U;
    157e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1580:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1584:	06d0      	lsls	r0, r2, #27
    1586:	d56b      	bpl.n	1660 <CONFIG_FPROTECT_BLOCK_SIZE+0x660>
			nj_len += 2U;
    1588:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    158a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    158c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    158e:	bf48      	it	mi
    1590:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1592:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1594:	bf48      	it	mi
    1596:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1598:	f1b9 0f00 	cmp.w	r9, #0
    159c:	dd79      	ble.n	1692 <CONFIG_FPROTECT_BLOCK_SIZE+0x692>
			if (!conv->flag_dash) {
    159e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    15a2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    15a6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    15aa:	9303      	str	r3, [sp, #12]
    15ac:	0753      	lsls	r3, r2, #29
    15ae:	d470      	bmi.n	1692 <CONFIG_FPROTECT_BLOCK_SIZE+0x692>
				if (conv->flag_zero) {
    15b0:	0650      	lsls	r0, r2, #25
    15b2:	d564      	bpl.n	167e <CONFIG_FPROTECT_BLOCK_SIZE+0x67e>
					if (sign != 0) {
    15b4:	b146      	cbz	r6, 15c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c8>
						OUTC(sign);
    15b6:	9b02      	ldr	r3, [sp, #8]
    15b8:	4659      	mov	r1, fp
    15ba:	4630      	mov	r0, r6
    15bc:	4798      	blx	r3
    15be:	2800      	cmp	r0, #0
    15c0:	db5a      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
						sign = 0;
    15c2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    15c4:	3501      	adds	r5, #1
						sign = 0;
    15c6:	461e      	mov	r6, r3
					pad = '0';
    15c8:	2330      	movs	r3, #48	; 0x30
    15ca:	e059      	b.n	1680 <CONFIG_FPROTECT_BLOCK_SIZE+0x680>
			if (conv->flag_plus) {
    15cc:	071e      	lsls	r6, r3, #28
    15ce:	d411      	bmi.n	15f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5f4>
				sign = ' ';
    15d0:	f013 0610 	ands.w	r6, r3, #16
    15d4:	bf18      	it	ne
    15d6:	2620      	movne	r6, #32
			sint = value->sint;
    15d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    15dc:	2a00      	cmp	r2, #0
    15de:	f173 0100 	sbcs.w	r1, r3, #0
    15e2:	f6bf af5d 	bge.w	14a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a0>
				value->uint = (uint_value_type)-sint;
    15e6:	4252      	negs	r2, r2
    15e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    15ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    15f0:	262d      	movs	r6, #45	; 0x2d
    15f2:	e755      	b.n	14a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a0>
				sign = '+';
    15f4:	262b      	movs	r6, #43	; 0x2b
    15f6:	e7ef      	b.n	15d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x5d8>
		switch (conv->specifier) {
    15f8:	2600      	movs	r6, #0
    15fa:	e751      	b.n	14a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a0>
			if (value->ptr != NULL) {
    15fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    15fe:	b348      	cbz	r0, 1654 <CONFIG_FPROTECT_BLOCK_SIZE+0x654>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1600:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1604:	9300      	str	r3, [sp, #0]
    1606:	aa0c      	add	r2, sp, #48	; 0x30
    1608:	ab04      	add	r3, sp, #16
    160a:	2100      	movs	r1, #0
    160c:	f005 fe9b 	bl	7346 <encode_uint>
				conv->altform_0c = true;
    1610:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1614:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1618:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    161c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1620:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1622:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1626:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1628:	e744      	b.n	14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>
				store_count(conv, value->ptr, count);
    162a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    162c:	2a07      	cmp	r2, #7
    162e:	f63f aee1 	bhi.w	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    1632:	e8df f002 	tbb	[pc, r2]
    1636:	040d      	.short	0x040d
    1638:	08080d06 	.word	0x08080d06
    163c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    163e:	701d      	strb	r5, [r3, #0]
		break;
    1640:	e6d8      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
		*(short *)dp = (short)count;
    1642:	801d      	strh	r5, [r3, #0]
		break;
    1644:	e6d6      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
		*(intmax_t *)dp = (intmax_t)count;
    1646:	4628      	mov	r0, r5
    1648:	17e9      	asrs	r1, r5, #31
    164a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    164e:	e6d1      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1650:	601d      	str	r5, [r3, #0]
		break;
    1652:	e6cf      	b.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
			bpe = bps + 5;
    1654:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 171c <CONFIG_FPROTECT_BLOCK_SIZE+0x71c>
    1658:	4606      	mov	r6, r0
			bps = "(nil)";
    165a:	f1a8 0a05 	sub.w	sl, r8, #5
    165e:	e78b      	b.n	1578 <CONFIG_FPROTECT_BLOCK_SIZE+0x578>
		} else if (conv->altform_0) {
    1660:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1662:	bf48      	it	mi
    1664:	3301      	addmi	r3, #1
    1666:	e790      	b.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
					OUTC(pad);
    1668:	4618      	mov	r0, r3
    166a:	9303      	str	r3, [sp, #12]
    166c:	4659      	mov	r1, fp
    166e:	9b02      	ldr	r3, [sp, #8]
    1670:	4798      	blx	r3
    1672:	2800      	cmp	r0, #0
    1674:	9b03      	ldr	r3, [sp, #12]
    1676:	da04      	bge.n	1682 <CONFIG_FPROTECT_BLOCK_SIZE+0x682>
#undef OUTS
#undef OUTC
}
    1678:	b011      	add	sp, #68	; 0x44
    167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    167e:	2320      	movs	r3, #32
    1680:	444d      	add	r5, r9
    1682:	464a      	mov	r2, r9
				while (width-- > 0) {
    1684:	2a00      	cmp	r2, #0
    1686:	eba5 0109 	sub.w	r1, r5, r9
    168a:	f109 39ff 	add.w	r9, r9, #4294967295
    168e:	dceb      	bgt.n	1668 <CONFIG_FPROTECT_BLOCK_SIZE+0x668>
    1690:	460d      	mov	r5, r1
		if (sign != 0) {
    1692:	b136      	cbz	r6, 16a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6a2>
			OUTC(sign);
    1694:	9b02      	ldr	r3, [sp, #8]
    1696:	4659      	mov	r1, fp
    1698:	4630      	mov	r0, r6
    169a:	4798      	blx	r3
    169c:	2800      	cmp	r0, #0
    169e:	dbeb      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    16a0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    16a2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    16a6:	06d9      	lsls	r1, r3, #27
    16a8:	d401      	bmi.n	16ae <CONFIG_FPROTECT_BLOCK_SIZE+0x6ae>
    16aa:	071a      	lsls	r2, r3, #28
    16ac:	d506      	bpl.n	16bc <CONFIG_FPROTECT_BLOCK_SIZE+0x6bc>
				OUTC('0');
    16ae:	9b02      	ldr	r3, [sp, #8]
    16b0:	4659      	mov	r1, fp
    16b2:	2030      	movs	r0, #48	; 0x30
    16b4:	4798      	blx	r3
    16b6:	2800      	cmp	r0, #0
    16b8:	dbde      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    16ba:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    16bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    16c0:	06db      	lsls	r3, r3, #27
    16c2:	d507      	bpl.n	16d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d4>
				OUTC(conv->specifier);
    16c4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    16c8:	9b02      	ldr	r3, [sp, #8]
    16ca:	4659      	mov	r1, fp
    16cc:	4798      	blx	r3
    16ce:	2800      	cmp	r0, #0
    16d0:	dbd2      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    16d2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    16d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    16d6:	442e      	add	r6, r5
    16d8:	1b73      	subs	r3, r6, r5
    16da:	2b00      	cmp	r3, #0
    16dc:	dc16      	bgt.n	170c <CONFIG_FPROTECT_BLOCK_SIZE+0x70c>
			OUTS(bps, bpe);
    16de:	9802      	ldr	r0, [sp, #8]
    16e0:	4643      	mov	r3, r8
    16e2:	4652      	mov	r2, sl
    16e4:	4659      	mov	r1, fp
    16e6:	f005 fe79 	bl	73dc <outs>
    16ea:	2800      	cmp	r0, #0
    16ec:	dbc4      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    16ee:	4405      	add	r5, r0
		while (width > 0) {
    16f0:	44a9      	add	r9, r5
    16f2:	eba9 0305 	sub.w	r3, r9, r5
    16f6:	2b00      	cmp	r3, #0
    16f8:	f77f ae7c 	ble.w	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
			OUTC(' ');
    16fc:	9b02      	ldr	r3, [sp, #8]
    16fe:	4659      	mov	r1, fp
    1700:	2020      	movs	r0, #32
    1702:	4798      	blx	r3
    1704:	2800      	cmp	r0, #0
    1706:	dbb7      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    1708:	3501      	adds	r5, #1
			--width;
    170a:	e7f2      	b.n	16f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x6f2>
				OUTC('0');
    170c:	9b02      	ldr	r3, [sp, #8]
    170e:	4659      	mov	r1, fp
    1710:	2030      	movs	r0, #48	; 0x30
    1712:	4798      	blx	r3
    1714:	2800      	cmp	r0, #0
    1716:	dbaf      	blt.n	1678 <CONFIG_FPROTECT_BLOCK_SIZE+0x678>
    1718:	3501      	adds	r5, #1
    171a:	e7dd      	b.n	16d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6d8>
    171c:	00008040 	.word	0x00008040

00001720 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1720:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1722:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1724:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    1726:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    172a:	2c03      	cmp	r4, #3
{
    172c:	4605      	mov	r5, r0
	switch (method) {
    172e:	d002      	beq.n	1736 <sys_notify_finalize+0x16>
    1730:	b12c      	cbz	r4, 173e <sys_notify_finalize+0x1e>
    1732:	2000      	movs	r0, #0
    1734:	e000      	b.n	1738 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1736:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1738:	2300      	movs	r3, #0
    173a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    173c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    173e:	4a05      	ldr	r2, [pc, #20]	; (1754 <sys_notify_finalize+0x34>)
    1740:	4905      	ldr	r1, [pc, #20]	; (1758 <sys_notify_finalize+0x38>)
    1742:	4806      	ldr	r0, [pc, #24]	; (175c <sys_notify_finalize+0x3c>)
    1744:	2345      	movs	r3, #69	; 0x45
    1746:	f005 fecb 	bl	74e0 <printk>
    174a:	4802      	ldr	r0, [pc, #8]	; (1754 <sys_notify_finalize+0x34>)
    174c:	2145      	movs	r1, #69	; 0x45
    174e:	f005 fdf3 	bl	7338 <assert_post_action>
    1752:	e7ee      	b.n	1732 <sys_notify_finalize+0x12>
    1754:	00008041 	.word	0x00008041
    1758:	0000815f 	.word	0x0000815f
    175c:	00008064 	.word	0x00008064

00001760 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1760:	4801      	ldr	r0, [pc, #4]	; (1768 <nrf_cc3xx_platform_abort_init+0x8>)
    1762:	f005 bc49 	b.w	6ff8 <nrf_cc3xx_platform_set_abort>
    1766:	bf00      	nop
    1768:	00007c98 	.word	0x00007c98

0000176c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    176c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    176e:	b1d0      	cbz	r0, 17a6 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1770:	6843      	ldr	r3, [r0, #4]
    1772:	2b04      	cmp	r3, #4
    1774:	d111      	bne.n	179a <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1776:	2200      	movs	r2, #0
    1778:	6803      	ldr	r3, [r0, #0]
    177a:	f3bf 8f5b 	dmb	ish
    177e:	e853 1f00 	ldrex	r1, [r3]
    1782:	2901      	cmp	r1, #1
    1784:	d103      	bne.n	178e <mutex_unlock_platform+0x22>
    1786:	e843 2000 	strex	r0, r2, [r3]
    178a:	2800      	cmp	r0, #0
    178c:	d1f7      	bne.n	177e <mutex_unlock_platform+0x12>
    178e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1792:	4807      	ldr	r0, [pc, #28]	; (17b0 <mutex_unlock_platform+0x44>)
    1794:	bf08      	it	eq
    1796:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1798:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    179a:	b13b      	cbz	r3, 17ac <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    179c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    179e:	f003 fcc5 	bl	512c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    17a2:	2000      	movs	r0, #0
    17a4:	e7f8      	b.n	1798 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    17a6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    17aa:	e7f5      	b.n	1798 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    17ac:	4801      	ldr	r0, [pc, #4]	; (17b4 <mutex_unlock_platform+0x48>)
    17ae:	e7f3      	b.n	1798 <mutex_unlock_platform+0x2c>
    17b0:	ffff8fe9 	.word	0xffff8fe9
    17b4:	ffff8fea 	.word	0xffff8fea

000017b8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17b8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    17ba:	4604      	mov	r4, r0
    17bc:	b918      	cbnz	r0, 17c6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    17be:	4b0d      	ldr	r3, [pc, #52]	; (17f4 <mutex_free_platform+0x3c>)
    17c0:	480d      	ldr	r0, [pc, #52]	; (17f8 <mutex_free_platform+0x40>)
    17c2:	685b      	ldr	r3, [r3, #4]
    17c4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17c6:	6861      	ldr	r1, [r4, #4]
    17c8:	2908      	cmp	r1, #8
    17ca:	d00d      	beq.n	17e8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17cc:	f031 0304 	bics.w	r3, r1, #4
    17d0:	d00a      	beq.n	17e8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    17d2:	f011 0102 	ands.w	r1, r1, #2
    17d6:	d008      	beq.n	17ea <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    17d8:	4808      	ldr	r0, [pc, #32]	; (17fc <mutex_free_platform+0x44>)
    17da:	4621      	mov	r1, r4
    17dc:	f003 fb42 	bl	4e64 <k_mem_slab_free>
        mutex->mutex = NULL;
    17e0:	2300      	movs	r3, #0
    17e2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    17e4:	2300      	movs	r3, #0
    17e6:	6063      	str	r3, [r4, #4]
}
    17e8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    17ea:	6820      	ldr	r0, [r4, #0]
    17ec:	2214      	movs	r2, #20
    17ee:	f005 feda 	bl	75a6 <memset>
    17f2:	e7f7      	b.n	17e4 <mutex_free_platform+0x2c>
    17f4:	200000dc 	.word	0x200000dc
    17f8:	00008081 	.word	0x00008081
    17fc:	2000049c 	.word	0x2000049c

00001800 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1800:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1802:	4604      	mov	r4, r0
    1804:	b918      	cbnz	r0, 180e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1806:	4b16      	ldr	r3, [pc, #88]	; (1860 <mutex_init_platform+0x60>)
    1808:	4816      	ldr	r0, [pc, #88]	; (1864 <mutex_init_platform+0x64>)
    180a:	685b      	ldr	r3, [r3, #4]
    180c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    180e:	6863      	ldr	r3, [r4, #4]
    1810:	2b04      	cmp	r3, #4
    1812:	d023      	beq.n	185c <mutex_init_platform+0x5c>
    1814:	2b08      	cmp	r3, #8
    1816:	d021      	beq.n	185c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1818:	b9cb      	cbnz	r3, 184e <mutex_init_platform+0x4e>
    181a:	6823      	ldr	r3, [r4, #0]
    181c:	b9bb      	cbnz	r3, 184e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    181e:	4812      	ldr	r0, [pc, #72]	; (1868 <mutex_init_platform+0x68>)
    1820:	f04f 32ff 	mov.w	r2, #4294967295
    1824:	f04f 33ff 	mov.w	r3, #4294967295
    1828:	4621      	mov	r1, r4
    182a:	f003 faaf 	bl	4d8c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    182e:	b908      	cbnz	r0, 1834 <mutex_init_platform+0x34>
    1830:	6823      	ldr	r3, [r4, #0]
    1832:	b91b      	cbnz	r3, 183c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1834:	4b0a      	ldr	r3, [pc, #40]	; (1860 <mutex_init_platform+0x60>)
    1836:	480d      	ldr	r0, [pc, #52]	; (186c <mutex_init_platform+0x6c>)
    1838:	685b      	ldr	r3, [r3, #4]
    183a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    183c:	6820      	ldr	r0, [r4, #0]
    183e:	2214      	movs	r2, #20
    1840:	2100      	movs	r1, #0
    1842:	f005 feb0 	bl	75a6 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1846:	6863      	ldr	r3, [r4, #4]
    1848:	f043 0302 	orr.w	r3, r3, #2
    184c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    184e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1850:	f006 f896 	bl	7980 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1854:	6863      	ldr	r3, [r4, #4]
    1856:	f043 0301 	orr.w	r3, r3, #1
    185a:	6063      	str	r3, [r4, #4]
}
    185c:	bd10      	pop	{r4, pc}
    185e:	bf00      	nop
    1860:	200000dc 	.word	0x200000dc
    1864:	00008081 	.word	0x00008081
    1868:	2000049c 	.word	0x2000049c
    186c:	000080a7 	.word	0x000080a7

00001870 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1870:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1872:	b308      	cbz	r0, 18b8 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1874:	6843      	ldr	r3, [r0, #4]
    1876:	2b04      	cmp	r3, #4
    1878:	d110      	bne.n	189c <mutex_lock_platform+0x2c>
    187a:	2201      	movs	r2, #1
    187c:	6803      	ldr	r3, [r0, #0]
    187e:	f3bf 8f5b 	dmb	ish
    1882:	e853 1f00 	ldrex	r1, [r3]
    1886:	2900      	cmp	r1, #0
    1888:	d103      	bne.n	1892 <mutex_lock_platform+0x22>
    188a:	e843 2000 	strex	r0, r2, [r3]
    188e:	2800      	cmp	r0, #0
    1890:	d1f7      	bne.n	1882 <mutex_lock_platform+0x12>
    1892:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1896:	d10b      	bne.n	18b0 <mutex_lock_platform+0x40>
    1898:	2000      	movs	r0, #0
}
    189a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    189c:	b153      	cbz	r3, 18b4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    189e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    18a0:	f04f 32ff 	mov.w	r2, #4294967295
    18a4:	f04f 33ff 	mov.w	r3, #4294967295
    18a8:	f003 fb40 	bl	4f2c <z_impl_k_mutex_lock>
        if (ret == 0) {
    18ac:	2800      	cmp	r0, #0
    18ae:	d0f3      	beq.n	1898 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    18b0:	4803      	ldr	r0, [pc, #12]	; (18c0 <mutex_lock_platform+0x50>)
    18b2:	e7f2      	b.n	189a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    18b4:	4803      	ldr	r0, [pc, #12]	; (18c4 <mutex_lock_platform+0x54>)
    18b6:	e7f0      	b.n	189a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    18b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    18bc:	e7ed      	b.n	189a <mutex_lock_platform+0x2a>
    18be:	bf00      	nop
    18c0:	ffff8fe9 	.word	0xffff8fe9
    18c4:	ffff8fea 	.word	0xffff8fea

000018c8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    18c8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    18ca:	4906      	ldr	r1, [pc, #24]	; (18e4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    18cc:	4806      	ldr	r0, [pc, #24]	; (18e8 <nrf_cc3xx_platform_mutex_init+0x20>)
    18ce:	2340      	movs	r3, #64	; 0x40
    18d0:	2214      	movs	r2, #20
    18d2:	f006 f839 	bl	7948 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    18d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    18da:	4904      	ldr	r1, [pc, #16]	; (18ec <nrf_cc3xx_platform_mutex_init+0x24>)
    18dc:	4804      	ldr	r0, [pc, #16]	; (18f0 <nrf_cc3xx_platform_mutex_init+0x28>)
    18de:	f005 bbed 	b.w	70bc <nrf_cc3xx_platform_set_mutexes>
    18e2:	bf00      	nop
    18e4:	200004bc 	.word	0x200004bc
    18e8:	2000049c 	.word	0x2000049c
    18ec:	00007cb0 	.word	0x00007cb0
    18f0:	00007ca0 	.word	0x00007ca0

000018f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    18f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    18f8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    18fc:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    18fe:	f019 0f08 	tst.w	r9, #8
{
    1902:	4604      	mov	r4, r0
    1904:	9203      	str	r2, [sp, #12]
	if (processing) {
    1906:	d022      	beq.n	194e <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1908:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    190a:	bf0c      	ite	eq
    190c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1910:	f049 0920 	orrne.w	r9, r9, #32
    1914:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1918:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    191a:	4620      	mov	r0, r4
    191c:	f004 ffba 	bl	6894 <z_spin_unlock_valid>
    1920:	b968      	cbnz	r0, 193e <process_event+0x4a>
    1922:	4a9f      	ldr	r2, [pc, #636]	; (1ba0 <process_event+0x2ac>)
    1924:	499f      	ldr	r1, [pc, #636]	; (1ba4 <process_event+0x2b0>)
    1926:	48a0      	ldr	r0, [pc, #640]	; (1ba8 <process_event+0x2b4>)
    1928:	23ac      	movs	r3, #172	; 0xac
    192a:	f005 fdd9 	bl	74e0 <printk>
    192e:	489f      	ldr	r0, [pc, #636]	; (1bac <process_event+0x2b8>)
    1930:	4621      	mov	r1, r4
    1932:	f005 fdd5 	bl	74e0 <printk>
    1936:	489a      	ldr	r0, [pc, #616]	; (1ba0 <process_event+0x2ac>)
    1938:	21ac      	movs	r1, #172	; 0xac
    193a:	f005 fcfd 	bl	7338 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    193e:	9b03      	ldr	r3, [sp, #12]
    1940:	f383 8811 	msr	BASEPRI, r3
    1944:	f3bf 8f6f 	isb	sy
}
    1948:	b005      	add	sp, #20
    194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    194e:	4f98      	ldr	r7, [pc, #608]	; (1bb0 <process_event+0x2bc>)
    1950:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1ba8 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1954:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1958:	2902      	cmp	r1, #2
    195a:	d106      	bne.n	196a <process_event+0x76>
			evt = process_recheck(mgr);
    195c:	4620      	mov	r0, r4
    195e:	f005 fd69 	bl	7434 <process_recheck>
		if (evt == EVT_NOP) {
    1962:	2800      	cmp	r0, #0
    1964:	d0d8      	beq.n	1918 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1966:	2801      	cmp	r0, #1
    1968:	d168      	bne.n	1a3c <process_event+0x148>
			res = mgr->last_res;
    196a:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    196e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1970:	f1bb 0f00 	cmp.w	fp, #0
    1974:	da0a      	bge.n	198c <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1976:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1978:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    197a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    197e:	e9c4 6600 	strd	r6, r6, [r4]
    1982:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1986:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1988:	9601      	str	r6, [sp, #4]
    198a:	e027      	b.n	19dc <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    198c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1990:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1992:	2901      	cmp	r1, #1
    1994:	d834      	bhi.n	1a00 <process_event+0x10c>
	list->head = NULL;
    1996:	2100      	movs	r1, #0
    1998:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    199c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    199e:	6825      	ldr	r5, [r4, #0]
    19a0:	b29b      	uxth	r3, r3
	list->tail = NULL;
    19a2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    19a6:	d10c      	bne.n	19c2 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    19a8:	428d      	cmp	r5, r1
    19aa:	462a      	mov	r2, r5
    19ac:	bf38      	it	cc
    19ae:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    19b0:	b12a      	cbz	r2, 19be <process_event+0xca>
				mgr->refs += 1U;
    19b2:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    19b4:	6812      	ldr	r2, [r2, #0]
    19b6:	3101      	adds	r1, #1
    19b8:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    19ba:	2a00      	cmp	r2, #0
    19bc:	d1f8      	bne.n	19b0 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19be:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    19c2:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    19c4:	4620      	mov	r0, r4
    19c6:	f005 fd35 	bl	7434 <process_recheck>
    19ca:	4606      	mov	r6, r0
    19cc:	2800      	cmp	r0, #0
    19ce:	d0db      	beq.n	1988 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    19d0:	8ba3      	ldrh	r3, [r4, #28]
    19d2:	f043 0320 	orr.w	r3, r3, #32
    19d6:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    19d8:	2300      	movs	r3, #0
    19da:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19dc:	8ba3      	ldrh	r3, [r4, #28]
    19de:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    19e2:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19e4:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    19e6:	d003      	beq.n	19f0 <process_event+0xfc>
		if (do_monitors
    19e8:	68a2      	ldr	r2, [r4, #8]
    19ea:	2a00      	cmp	r2, #0
    19ec:	f040 80f0 	bne.w	1bd0 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    19f0:	b91d      	cbnz	r5, 19fa <process_event+0x106>
		    || (transit != NULL)) {
    19f2:	9a01      	ldr	r2, [sp, #4]
    19f4:	2a00      	cmp	r2, #0
    19f6:	f000 8136 	beq.w	1c66 <process_event+0x372>
    19fa:	f04f 0900 	mov.w	r9, #0
    19fe:	e0e9      	b.n	1bd4 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1a00:	2a04      	cmp	r2, #4
    1a02:	d10e      	bne.n	1a22 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a04:	f023 0307 	bic.w	r3, r3, #7
    1a08:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a0a:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1a0c:	4620      	mov	r0, r4
    1a0e:	f005 fd11 	bl	7434 <process_recheck>
    1a12:	4605      	mov	r5, r0
    1a14:	b118      	cbz	r0, 1a1e <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a16:	f042 0220 	orr.w	r2, r2, #32
    1a1a:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1a1c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1a1e:	9501      	str	r5, [sp, #4]
    1a20:	e7dc      	b.n	19dc <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    1a22:	4640      	mov	r0, r8
    1a24:	4963      	ldr	r1, [pc, #396]	; (1bb4 <process_event+0x2c0>)
    1a26:	f240 131b 	movw	r3, #283	; 0x11b
    1a2a:	463a      	mov	r2, r7
    1a2c:	f005 fd58 	bl	74e0 <printk>
    1a30:	f240 111b 	movw	r1, #283	; 0x11b
    1a34:	4638      	mov	r0, r7
    1a36:	f005 fc7f 	bl	7338 <assert_post_action>
    1a3a:	e7ef      	b.n	1a1c <process_event+0x128>
		} else if (evt == EVT_START) {
    1a3c:	2803      	cmp	r0, #3
    1a3e:	d135      	bne.n	1aac <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1a40:	f1b9 0f00 	cmp.w	r9, #0
    1a44:	d00b      	beq.n	1a5e <process_event+0x16a>
    1a46:	495c      	ldr	r1, [pc, #368]	; (1bb8 <process_event+0x2c4>)
    1a48:	4640      	mov	r0, r8
    1a4a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1a4e:	463a      	mov	r2, r7
    1a50:	f005 fd46 	bl	74e0 <printk>
    1a54:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1a58:	4638      	mov	r0, r7
    1a5a:	f005 fc6d 	bl	7338 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	b95b      	cbnz	r3, 1a7a <process_event+0x186>
    1a62:	4956      	ldr	r1, [pc, #344]	; (1bbc <process_event+0x2c8>)
    1a64:	4640      	mov	r0, r8
    1a66:	f240 1357 	movw	r3, #343	; 0x157
    1a6a:	463a      	mov	r2, r7
    1a6c:	f005 fd38 	bl	74e0 <printk>
    1a70:	f240 1157 	movw	r1, #343	; 0x157
    1a74:	4638      	mov	r0, r7
    1a76:	f005 fc5f 	bl	7338 <assert_post_action>
			transit = mgr->transitions->start;
    1a7a:	6923      	ldr	r3, [r4, #16]
    1a7c:	681b      	ldr	r3, [r3, #0]
    1a7e:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1a80:	b95b      	cbnz	r3, 1a9a <process_event+0x1a6>
    1a82:	494f      	ldr	r1, [pc, #316]	; (1bc0 <process_event+0x2cc>)
    1a84:	4640      	mov	r0, r8
    1a86:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1a8a:	463a      	mov	r2, r7
    1a8c:	f005 fd28 	bl	74e0 <printk>
    1a90:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1a94:	4638      	mov	r0, r7
    1a96:	f005 fc4f 	bl	7338 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a9a:	8ba3      	ldrh	r3, [r4, #28]
    1a9c:	f023 0307 	bic.w	r3, r3, #7
    1aa0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1aa4:	83a3      	strh	r3, [r4, #28]
}
    1aa6:	2500      	movs	r5, #0
		res = 0;
    1aa8:	46ab      	mov	fp, r5
}
    1aaa:	e797      	b.n	19dc <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1aac:	2804      	cmp	r0, #4
    1aae:	d132      	bne.n	1b16 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1ab0:	f1b9 0f02 	cmp.w	r9, #2
    1ab4:	d00b      	beq.n	1ace <process_event+0x1da>
    1ab6:	4943      	ldr	r1, [pc, #268]	; (1bc4 <process_event+0x2d0>)
    1ab8:	4640      	mov	r0, r8
    1aba:	f240 135d 	movw	r3, #349	; 0x15d
    1abe:	463a      	mov	r2, r7
    1ac0:	f005 fd0e 	bl	74e0 <printk>
    1ac4:	f240 115d 	movw	r1, #349	; 0x15d
    1ac8:	4638      	mov	r0, r7
    1aca:	f005 fc35 	bl	7338 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1ace:	8be3      	ldrh	r3, [r4, #30]
    1ad0:	b15b      	cbz	r3, 1aea <process_event+0x1f6>
    1ad2:	493d      	ldr	r1, [pc, #244]	; (1bc8 <process_event+0x2d4>)
    1ad4:	4640      	mov	r0, r8
    1ad6:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1ada:	463a      	mov	r2, r7
    1adc:	f005 fd00 	bl	74e0 <printk>
    1ae0:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1ae4:	4638      	mov	r0, r7
    1ae6:	f005 fc27 	bl	7338 <assert_post_action>
			transit = mgr->transitions->stop;
    1aea:	6923      	ldr	r3, [r4, #16]
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1af0:	b95b      	cbnz	r3, 1b0a <process_event+0x216>
    1af2:	4933      	ldr	r1, [pc, #204]	; (1bc0 <process_event+0x2cc>)
    1af4:	4640      	mov	r0, r8
    1af6:	f240 1361 	movw	r3, #353	; 0x161
    1afa:	463a      	mov	r2, r7
    1afc:	f005 fcf0 	bl	74e0 <printk>
    1b00:	f240 1161 	movw	r1, #353	; 0x161
    1b04:	4638      	mov	r0, r7
    1b06:	f005 fc17 	bl	7338 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b0a:	8ba3      	ldrh	r3, [r4, #28]
    1b0c:	f023 0307 	bic.w	r3, r3, #7
    1b10:	f043 0304 	orr.w	r3, r3, #4
    1b14:	e7c6      	b.n	1aa4 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    1b16:	2805      	cmp	r0, #5
    1b18:	d132      	bne.n	1b80 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1b1a:	f1b9 0f01 	cmp.w	r9, #1
    1b1e:	d00b      	beq.n	1b38 <process_event+0x244>
    1b20:	492a      	ldr	r1, [pc, #168]	; (1bcc <process_event+0x2d8>)
    1b22:	4640      	mov	r0, r8
    1b24:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1b28:	463a      	mov	r2, r7
    1b2a:	f005 fcd9 	bl	74e0 <printk>
    1b2e:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1b32:	4638      	mov	r0, r7
    1b34:	f005 fc00 	bl	7338 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1b38:	6823      	ldr	r3, [r4, #0]
    1b3a:	b95b      	cbnz	r3, 1b54 <process_event+0x260>
    1b3c:	491f      	ldr	r1, [pc, #124]	; (1bbc <process_event+0x2c8>)
    1b3e:	4640      	mov	r0, r8
    1b40:	f240 1365 	movw	r3, #357	; 0x165
    1b44:	463a      	mov	r2, r7
    1b46:	f005 fccb 	bl	74e0 <printk>
    1b4a:	f240 1165 	movw	r1, #357	; 0x165
    1b4e:	4638      	mov	r0, r7
    1b50:	f005 fbf2 	bl	7338 <assert_post_action>
			transit = mgr->transitions->reset;
    1b54:	6923      	ldr	r3, [r4, #16]
    1b56:	689b      	ldr	r3, [r3, #8]
    1b58:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1b5a:	b95b      	cbnz	r3, 1b74 <process_event+0x280>
    1b5c:	4918      	ldr	r1, [pc, #96]	; (1bc0 <process_event+0x2cc>)
    1b5e:	4640      	mov	r0, r8
    1b60:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1b64:	463a      	mov	r2, r7
    1b66:	f005 fcbb 	bl	74e0 <printk>
    1b6a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1b6e:	4638      	mov	r0, r7
    1b70:	f005 fbe2 	bl	7338 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b74:	8ba3      	ldrh	r3, [r4, #28]
    1b76:	f023 0307 	bic.w	r3, r3, #7
    1b7a:	f043 0305 	orr.w	r3, r3, #5
    1b7e:	e791      	b.n	1aa4 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    1b80:	490c      	ldr	r1, [pc, #48]	; (1bb4 <process_event+0x2c0>)
    1b82:	f240 136b 	movw	r3, #363	; 0x16b
    1b86:	463a      	mov	r2, r7
    1b88:	4640      	mov	r0, r8
    1b8a:	f005 fca9 	bl	74e0 <printk>
    1b8e:	2500      	movs	r5, #0
    1b90:	f240 116b 	movw	r1, #363	; 0x16b
    1b94:	4638      	mov	r0, r7
    1b96:	f005 fbcf 	bl	7338 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1b9a:	9501      	str	r5, [sp, #4]
    1b9c:	e784      	b.n	1aa8 <process_event+0x1b4>
    1b9e:	bf00      	nop
    1ba0:	00008177 	.word	0x00008177
    1ba4:	0000819d 	.word	0x0000819d
    1ba8:	00008064 	.word	0x00008064
    1bac:	000081b4 	.word	0x000081b4
    1bb0:	000080d4 	.word	0x000080d4
    1bb4:	0000815f 	.word	0x0000815f
    1bb8:	000080f6 	.word	0x000080f6
    1bbc:	00008102 	.word	0x00008102
    1bc0:	00008125 	.word	0x00008125
    1bc4:	0000813c 	.word	0x0000813c
    1bc8:	00008152 	.word	0x00008152
    1bcc:	00008161 	.word	0x00008161
				   && !sys_slist_is_empty(&mgr->monitors);
    1bd0:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1bd4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1bd8:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1bdc:	83a3      	strh	r3, [r4, #28]
    1bde:	4650      	mov	r0, sl
    1be0:	f004 fe58 	bl	6894 <z_spin_unlock_valid>
    1be4:	b968      	cbnz	r0, 1c02 <process_event+0x30e>
    1be6:	4a3a      	ldr	r2, [pc, #232]	; (1cd0 <process_event+0x3dc>)
    1be8:	493a      	ldr	r1, [pc, #232]	; (1cd4 <process_event+0x3e0>)
    1bea:	23ac      	movs	r3, #172	; 0xac
    1bec:	4640      	mov	r0, r8
    1bee:	f005 fc77 	bl	74e0 <printk>
    1bf2:	4839      	ldr	r0, [pc, #228]	; (1cd8 <process_event+0x3e4>)
    1bf4:	4651      	mov	r1, sl
    1bf6:	f005 fc73 	bl	74e0 <printk>
    1bfa:	4835      	ldr	r0, [pc, #212]	; (1cd0 <process_event+0x3dc>)
    1bfc:	21ac      	movs	r1, #172	; 0xac
    1bfe:	f005 fb9b 	bl	7338 <assert_post_action>
    1c02:	9b03      	ldr	r3, [sp, #12]
    1c04:	f383 8811 	msr	BASEPRI, r3
    1c08:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1c0c:	f1b9 0f00 	cmp.w	r9, #0
    1c10:	d138      	bne.n	1c84 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    1c12:	2d00      	cmp	r5, #0
    1c14:	d14b      	bne.n	1cae <process_event+0x3ba>
			if (transit != NULL) {
    1c16:	9b01      	ldr	r3, [sp, #4]
    1c18:	b113      	cbz	r3, 1c20 <process_event+0x32c>
				transit(mgr, transition_complete);
    1c1a:	4930      	ldr	r1, [pc, #192]	; (1cdc <process_event+0x3e8>)
    1c1c:	4620      	mov	r0, r4
    1c1e:	4798      	blx	r3
	__asm__ volatile(
    1c20:	f04f 0320 	mov.w	r3, #32
    1c24:	f3ef 8b11 	mrs	fp, BASEPRI
    1c28:	f383 8812 	msr	BASEPRI_MAX, r3
    1c2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c30:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    1c32:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c36:	f004 fe1f 	bl	6878 <z_spin_lock_valid>
    1c3a:	b968      	cbnz	r0, 1c58 <process_event+0x364>
    1c3c:	4a24      	ldr	r2, [pc, #144]	; (1cd0 <process_event+0x3dc>)
    1c3e:	4928      	ldr	r1, [pc, #160]	; (1ce0 <process_event+0x3ec>)
    1c40:	2381      	movs	r3, #129	; 0x81
    1c42:	4640      	mov	r0, r8
    1c44:	f005 fc4c 	bl	74e0 <printk>
    1c48:	4826      	ldr	r0, [pc, #152]	; (1ce4 <process_event+0x3f0>)
    1c4a:	4651      	mov	r1, sl
    1c4c:	f005 fc48 	bl	74e0 <printk>
    1c50:	481f      	ldr	r0, [pc, #124]	; (1cd0 <process_event+0x3dc>)
    1c52:	2181      	movs	r1, #129	; 0x81
    1c54:	f005 fb70 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    1c58:	4650      	mov	r0, sl
    1c5a:	f004 fe2b 	bl	68b4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1c5e:	8ba3      	ldrh	r3, [r4, #28]
    1c60:	f023 0308 	bic.w	r3, r3, #8
    1c64:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1c66:	8ba3      	ldrh	r3, [r4, #28]
    1c68:	06da      	lsls	r2, r3, #27
    1c6a:	d528      	bpl.n	1cbe <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1c6c:	f023 0310 	bic.w	r3, r3, #16
    1c70:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1c72:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1c74:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1c78:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1c7c:	2900      	cmp	r1, #0
    1c7e:	f47f ae6b 	bne.w	1958 <process_event+0x64>
out:
    1c82:	e649      	b.n	1918 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1c84:	68a1      	ldr	r1, [r4, #8]
    1c86:	2900      	cmp	r1, #0
    1c88:	d0c3      	beq.n	1c12 <process_event+0x31e>
	return node->next;
    1c8a:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1c8c:	9a02      	ldr	r2, [sp, #8]
    1c8e:	2b00      	cmp	r3, #0
    1c90:	bf38      	it	cc
    1c92:	2300      	movcc	r3, #0
    1c94:	4699      	mov	r9, r3
    1c96:	684b      	ldr	r3, [r1, #4]
    1c98:	4620      	mov	r0, r4
    1c9a:	461e      	mov	r6, r3
    1c9c:	465b      	mov	r3, fp
    1c9e:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ca0:	f1b9 0f00 	cmp.w	r9, #0
    1ca4:	d0b5      	beq.n	1c12 <process_event+0x31e>
    1ca6:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1caa:	4649      	mov	r1, r9
    1cac:	e7ee      	b.n	1c8c <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1cae:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1cb0:	9a02      	ldr	r2, [sp, #8]
    1cb2:	682d      	ldr	r5, [r5, #0]
    1cb4:	465b      	mov	r3, fp
    1cb6:	4620      	mov	r0, r4
    1cb8:	f005 fbd8 	bl	746c <notify_one>
    1cbc:	e7a9      	b.n	1c12 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1cbe:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1cc2:	bf1e      	ittt	ne
    1cc4:	f023 0320 	bicne.w	r3, r3, #32
    1cc8:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1cca:	2102      	movne	r1, #2
    1ccc:	e7d2      	b.n	1c74 <process_event+0x380>
    1cce:	bf00      	nop
    1cd0:	00008177 	.word	0x00008177
    1cd4:	0000819d 	.word	0x0000819d
    1cd8:	000081b4 	.word	0x000081b4
    1cdc:	00001ce9 	.word	0x00001ce9
    1ce0:	000081c9 	.word	0x000081c9
    1ce4:	000081de 	.word	0x000081de

00001ce8 <transition_complete>:
{
    1ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cea:	4604      	mov	r4, r0
    1cec:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1cee:	f100 0614 	add.w	r6, r0, #20
    1cf2:	f04f 0320 	mov.w	r3, #32
    1cf6:	f3ef 8711 	mrs	r7, BASEPRI
    1cfa:	f383 8812 	msr	BASEPRI_MAX, r3
    1cfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d02:	4630      	mov	r0, r6
    1d04:	f004 fdb8 	bl	6878 <z_spin_lock_valid>
    1d08:	b968      	cbnz	r0, 1d26 <transition_complete+0x3e>
    1d0a:	4a0c      	ldr	r2, [pc, #48]	; (1d3c <transition_complete+0x54>)
    1d0c:	490c      	ldr	r1, [pc, #48]	; (1d40 <transition_complete+0x58>)
    1d0e:	480d      	ldr	r0, [pc, #52]	; (1d44 <transition_complete+0x5c>)
    1d10:	2381      	movs	r3, #129	; 0x81
    1d12:	f005 fbe5 	bl	74e0 <printk>
    1d16:	480c      	ldr	r0, [pc, #48]	; (1d48 <transition_complete+0x60>)
    1d18:	4631      	mov	r1, r6
    1d1a:	f005 fbe1 	bl	74e0 <printk>
    1d1e:	4807      	ldr	r0, [pc, #28]	; (1d3c <transition_complete+0x54>)
    1d20:	2181      	movs	r1, #129	; 0x81
    1d22:	f005 fb09 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    1d26:	4630      	mov	r0, r6
    1d28:	f004 fdc4 	bl	68b4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1d2c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1d2e:	463a      	mov	r2, r7
    1d30:	4620      	mov	r0, r4
    1d32:	2101      	movs	r1, #1
}
    1d34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1d38:	f7ff bddc 	b.w	18f4 <process_event>
    1d3c:	00008177 	.word	0x00008177
    1d40:	000081c9 	.word	0x000081c9
    1d44:	00008064 	.word	0x00008064
    1d48:	000081de 	.word	0x000081de

00001d4c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d50:	4604      	mov	r4, r0
    1d52:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1d54:	f005 fba0 	bl	7498 <validate_args>

	if (rv < 0) {
    1d58:	1e05      	subs	r5, r0, #0
    1d5a:	db5e      	blt.n	1e1a <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1d5c:	f104 0914 	add.w	r9, r4, #20
    1d60:	f04f 0320 	mov.w	r3, #32
    1d64:	f3ef 8a11 	mrs	sl, BASEPRI
    1d68:	f383 8812 	msr	BASEPRI_MAX, r3
    1d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1d70:	4648      	mov	r0, r9
    1d72:	f004 fd81 	bl	6878 <z_spin_lock_valid>
    1d76:	b968      	cbnz	r0, 1d94 <onoff_request+0x48>
    1d78:	4a38      	ldr	r2, [pc, #224]	; (1e5c <onoff_request+0x110>)
    1d7a:	4939      	ldr	r1, [pc, #228]	; (1e60 <onoff_request+0x114>)
    1d7c:	4839      	ldr	r0, [pc, #228]	; (1e64 <onoff_request+0x118>)
    1d7e:	2381      	movs	r3, #129	; 0x81
    1d80:	f005 fbae 	bl	74e0 <printk>
    1d84:	4838      	ldr	r0, [pc, #224]	; (1e68 <onoff_request+0x11c>)
    1d86:	4649      	mov	r1, r9
    1d88:	f005 fbaa 	bl	74e0 <printk>
    1d8c:	4833      	ldr	r0, [pc, #204]	; (1e5c <onoff_request+0x110>)
    1d8e:	2181      	movs	r1, #129	; 0x81
    1d90:	f005 fad2 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    1d94:	4648      	mov	r0, r9
    1d96:	f004 fd8d 	bl	68b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1d9a:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1d9c:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    1d9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1da2:	428b      	cmp	r3, r1
    1da4:	f002 0607 	and.w	r6, r2, #7
    1da8:	d050      	beq.n	1e4c <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1daa:	2e02      	cmp	r6, #2
    1dac:	d124      	bne.n	1df8 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1dae:	3301      	adds	r3, #1
    1db0:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1db2:	4635      	mov	r5, r6
		notify = true;
    1db4:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1db8:	4648      	mov	r0, r9
    1dba:	f004 fd6b 	bl	6894 <z_spin_unlock_valid>
    1dbe:	b968      	cbnz	r0, 1ddc <onoff_request+0x90>
    1dc0:	4a26      	ldr	r2, [pc, #152]	; (1e5c <onoff_request+0x110>)
    1dc2:	492a      	ldr	r1, [pc, #168]	; (1e6c <onoff_request+0x120>)
    1dc4:	4827      	ldr	r0, [pc, #156]	; (1e64 <onoff_request+0x118>)
    1dc6:	23ac      	movs	r3, #172	; 0xac
    1dc8:	f005 fb8a 	bl	74e0 <printk>
    1dcc:	4828      	ldr	r0, [pc, #160]	; (1e70 <onoff_request+0x124>)
    1dce:	4649      	mov	r1, r9
    1dd0:	f005 fb86 	bl	74e0 <printk>
    1dd4:	4821      	ldr	r0, [pc, #132]	; (1e5c <onoff_request+0x110>)
    1dd6:	21ac      	movs	r1, #172	; 0xac
    1dd8:	f005 faae 	bl	7338 <assert_post_action>
	__asm__ volatile(
    1ddc:	f38a 8811 	msr	BASEPRI, sl
    1de0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1de4:	f1b8 0f00 	cmp.w	r8, #0
    1de8:	d017      	beq.n	1e1a <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1dea:	2300      	movs	r3, #0
    1dec:	4632      	mov	r2, r6
    1dee:	4639      	mov	r1, r7
    1df0:	4620      	mov	r0, r4
    1df2:	f005 fb3b 	bl	746c <notify_one>
    1df6:	e010      	b.n	1e1a <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1df8:	0793      	lsls	r3, r2, #30
    1dfa:	d001      	beq.n	1e00 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1dfc:	2e06      	cmp	r6, #6
    1dfe:	d10f      	bne.n	1e20 <onoff_request+0xd4>
	parent->next = child;
    1e00:	2300      	movs	r3, #0
    1e02:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    1e04:	6863      	ldr	r3, [r4, #4]
    1e06:	b9f3      	cbnz	r3, 1e46 <onoff_request+0xfa>
	list->head = node;
    1e08:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1e0c:	4635      	mov	r5, r6
    1e0e:	b9fe      	cbnz	r6, 1e50 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1e10:	4652      	mov	r2, sl
    1e12:	2102      	movs	r1, #2
    1e14:	4620      	mov	r0, r4
    1e16:	f7ff fd6d 	bl	18f4 <process_event>
		}
	}

	return rv;
}
    1e1a:	4628      	mov	r0, r5
    1e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1e20:	2e05      	cmp	r6, #5
    1e22:	d018      	beq.n	1e56 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1e24:	2e01      	cmp	r6, #1
    1e26:	d00b      	beq.n	1e40 <onoff_request+0xf4>
    1e28:	4912      	ldr	r1, [pc, #72]	; (1e74 <onoff_request+0x128>)
    1e2a:	480e      	ldr	r0, [pc, #56]	; (1e64 <onoff_request+0x118>)
    1e2c:	4a12      	ldr	r2, [pc, #72]	; (1e78 <onoff_request+0x12c>)
    1e2e:	f240 13c9 	movw	r3, #457	; 0x1c9
    1e32:	f005 fb55 	bl	74e0 <printk>
    1e36:	4810      	ldr	r0, [pc, #64]	; (1e78 <onoff_request+0x12c>)
    1e38:	f240 11c9 	movw	r1, #457	; 0x1c9
    1e3c:	f005 fa7c 	bl	7338 <assert_post_action>
		rv = -EIO;
    1e40:	f06f 0504 	mvn.w	r5, #4
    1e44:	e004      	b.n	1e50 <onoff_request+0x104>
	parent->next = child;
    1e46:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1e48:	6067      	str	r7, [r4, #4]
}
    1e4a:	e7df      	b.n	1e0c <onoff_request+0xc0>
		rv = -EAGAIN;
    1e4c:	f06f 050a 	mvn.w	r5, #10
    1e50:	f04f 0800 	mov.w	r8, #0
    1e54:	e7b0      	b.n	1db8 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1e56:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1e5a:	e7f9      	b.n	1e50 <onoff_request+0x104>
    1e5c:	00008177 	.word	0x00008177
    1e60:	000081c9 	.word	0x000081c9
    1e64:	00008064 	.word	0x00008064
    1e68:	000081de 	.word	0x000081de
    1e6c:	0000819d 	.word	0x0000819d
    1e70:	000081b4 	.word	0x000081b4
    1e74:	00008161 	.word	0x00008161
    1e78:	000080d4 	.word	0x000080d4

00001e7c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e80:	4605      	mov	r5, r0
	__asm__ volatile(
    1e82:	f04f 0320 	mov.w	r3, #32
    1e86:	f3ef 8611 	mrs	r6, BASEPRI
    1e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    1e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1e92:	4823      	ldr	r0, [pc, #140]	; (1f20 <pm_state_notify+0xa4>)
    1e94:	f004 fcf0 	bl	6878 <z_spin_lock_valid>
    1e98:	b968      	cbnz	r0, 1eb6 <pm_state_notify+0x3a>
    1e9a:	4a22      	ldr	r2, [pc, #136]	; (1f24 <pm_state_notify+0xa8>)
    1e9c:	4922      	ldr	r1, [pc, #136]	; (1f28 <pm_state_notify+0xac>)
    1e9e:	4823      	ldr	r0, [pc, #140]	; (1f2c <pm_state_notify+0xb0>)
    1ea0:	2381      	movs	r3, #129	; 0x81
    1ea2:	f005 fb1d 	bl	74e0 <printk>
    1ea6:	491e      	ldr	r1, [pc, #120]	; (1f20 <pm_state_notify+0xa4>)
    1ea8:	4821      	ldr	r0, [pc, #132]	; (1f30 <pm_state_notify+0xb4>)
    1eaa:	f005 fb19 	bl	74e0 <printk>
    1eae:	481d      	ldr	r0, [pc, #116]	; (1f24 <pm_state_notify+0xa8>)
    1eb0:	2181      	movs	r1, #129	; 0x81
    1eb2:	f005 fa41 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    1eb6:	481a      	ldr	r0, [pc, #104]	; (1f20 <pm_state_notify+0xa4>)
    1eb8:	f004 fcfc 	bl	68b4 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1ebc:	4b1d      	ldr	r3, [pc, #116]	; (1f34 <pm_state_notify+0xb8>)
    1ebe:	681c      	ldr	r4, [r3, #0]
    1ec0:	2c00      	cmp	r4, #0
    1ec2:	bf38      	it	cc
    1ec4:	2400      	movcc	r4, #0
    1ec6:	b19c      	cbz	r4, 1ef0 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    1ec8:	4f1b      	ldr	r7, [pc, #108]	; (1f38 <pm_state_notify+0xbc>)
    1eca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1f44 <pm_state_notify+0xc8>
    1ece:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1ed2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1ed6:	2d00      	cmp	r5, #0
    1ed8:	bf08      	it	eq
    1eda:	4613      	moveq	r3, r2
		if (callback) {
    1edc:	b12b      	cbz	r3, 1eea <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    1ede:	f898 2014 	ldrb.w	r2, [r8, #20]
    1ee2:	fb09 f202 	mul.w	r2, r9, r2
    1ee6:	5cb8      	ldrb	r0, [r7, r2]
    1ee8:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1eea:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1eec:	2c00      	cmp	r4, #0
    1eee:	d1f0      	bne.n	1ed2 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ef0:	480b      	ldr	r0, [pc, #44]	; (1f20 <pm_state_notify+0xa4>)
    1ef2:	f004 fccf 	bl	6894 <z_spin_unlock_valid>
    1ef6:	b968      	cbnz	r0, 1f14 <pm_state_notify+0x98>
    1ef8:	4a0a      	ldr	r2, [pc, #40]	; (1f24 <pm_state_notify+0xa8>)
    1efa:	4910      	ldr	r1, [pc, #64]	; (1f3c <pm_state_notify+0xc0>)
    1efc:	480b      	ldr	r0, [pc, #44]	; (1f2c <pm_state_notify+0xb0>)
    1efe:	23ac      	movs	r3, #172	; 0xac
    1f00:	f005 faee 	bl	74e0 <printk>
    1f04:	4906      	ldr	r1, [pc, #24]	; (1f20 <pm_state_notify+0xa4>)
    1f06:	480e      	ldr	r0, [pc, #56]	; (1f40 <pm_state_notify+0xc4>)
    1f08:	f005 faea 	bl	74e0 <printk>
    1f0c:	4805      	ldr	r0, [pc, #20]	; (1f24 <pm_state_notify+0xa8>)
    1f0e:	21ac      	movs	r1, #172	; 0xac
    1f10:	f005 fa12 	bl	7338 <assert_post_action>
	__asm__ volatile(
    1f14:	f386 8811 	msr	BASEPRI, r6
    1f18:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f20:	200009bc 	.word	0x200009bc
    1f24:	00008177 	.word	0x00008177
    1f28:	000081c9 	.word	0x000081c9
    1f2c:	00008064 	.word	0x00008064
    1f30:	000081de 	.word	0x000081de
    1f34:	200009c0 	.word	0x200009c0
    1f38:	200009cc 	.word	0x200009cc
    1f3c:	0000819d 	.word	0x0000819d
    1f40:	000081b4 	.word	0x000081b4
    1f44:	20000b30 	.word	0x20000b30

00001f48 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f48:	f000 031f 	and.w	r3, r0, #31
    1f4c:	2201      	movs	r2, #1
    1f4e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f50:	4b0a      	ldr	r3, [pc, #40]	; (1f7c <atomic_test_and_set_bit.constprop.0+0x34>)
    1f52:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f56:	0940      	lsrs	r0, r0, #5
    1f58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f5c:	e850 3f00 	ldrex	r3, [r0]
    1f60:	ea43 0102 	orr.w	r1, r3, r2
    1f64:	e840 1c00 	strex	ip, r1, [r0]
    1f68:	f1bc 0f00 	cmp.w	ip, #0
    1f6c:	d1f6      	bne.n	1f5c <atomic_test_and_set_bit.constprop.0+0x14>
    1f6e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1f72:	421a      	tst	r2, r3
}
    1f74:	bf14      	ite	ne
    1f76:	2001      	movne	r0, #1
    1f78:	2000      	moveq	r0, #0
    1f7a:	4770      	bx	lr
    1f7c:	200009d8 	.word	0x200009d8

00001f80 <pm_system_resume>:

void pm_system_resume(void)
{
    1f80:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1f82:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <pm_system_resume+0x78>)
    1f84:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f86:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f8a:	f005 031f 	and.w	r3, r5, #31
    1f8e:	2201      	movs	r2, #1
    1f90:	409a      	lsls	r2, r3
    1f92:	4b1a      	ldr	r3, [pc, #104]	; (1ffc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f94:	0969      	lsrs	r1, r5, #5
{
    1f96:	b085      	sub	sp, #20
    1f98:	43d0      	mvns	r0, r2
    1f9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1f9e:	e853 1f00 	ldrex	r1, [r3]
    1fa2:	ea01 0400 	and.w	r4, r1, r0
    1fa6:	e843 4c00 	strex	ip, r4, [r3]
    1faa:	f1bc 0f00 	cmp.w	ip, #0
    1fae:	d1f6      	bne.n	1f9e <pm_system_resume+0x1e>
    1fb0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1fb4:	4211      	tst	r1, r2
    1fb6:	d017      	beq.n	1fe8 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    1fb8:	4c11      	ldr	r4, [pc, #68]	; (2000 <pm_system_resume+0x80>)
    1fba:	220c      	movs	r2, #12
    1fbc:	fb02 4205 	mla	r2, r2, r5, r4
    1fc0:	ca07      	ldmia	r2, {r0, r1, r2}
    1fc2:	ab01      	add	r3, sp, #4
    1fc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1fc8:	4a0e      	ldr	r2, [pc, #56]	; (2004 <pm_system_resume+0x84>)
    1fca:	b17a      	cbz	r2, 1fec <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1fcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1fd0:	f005 fb05 	bl	75de <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1fd4:	2000      	movs	r0, #0
    1fd6:	f7ff ff51 	bl	1e7c <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1fda:	230c      	movs	r3, #12
    1fdc:	436b      	muls	r3, r5
    1fde:	2200      	movs	r2, #0
    1fe0:	18e1      	adds	r1, r4, r3
    1fe2:	50e2      	str	r2, [r4, r3]
    1fe4:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    1fe8:	b005      	add	sp, #20
    1fea:	bd30      	pop	{r4, r5, pc}
    1fec:	f382 8811 	msr	BASEPRI, r2
    1ff0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1ff4:	e7ee      	b.n	1fd4 <pm_system_resume+0x54>
    1ff6:	bf00      	nop
    1ff8:	20000b30 	.word	0x20000b30
    1ffc:	200009c8 	.word	0x200009c8
    2000:	200009cc 	.word	0x200009cc
    2004:	000075df 	.word	0x000075df

00002008 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    200c:	4b37      	ldr	r3, [pc, #220]	; (20ec <pm_system_suspend+0xe4>)
    200e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2104 <pm_system_suspend+0xfc>
    2012:	7d1c      	ldrb	r4, [r3, #20]
{
    2014:	b088      	sub	sp, #32
    2016:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    2018:	4620      	mov	r0, r4
    201a:	f7ff ff95 	bl	1f48 <atomic_test_and_set_bit.constprop.0>
    201e:	b960      	cbnz	r0, 203a <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2020:	466e      	mov	r6, sp
    2022:	463a      	mov	r2, r7
    2024:	4621      	mov	r1, r4
    2026:	4630      	mov	r0, r6
    2028:	f005 fa67 	bl	74fa <pm_policy_next_state>
    202c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2030:	250c      	movs	r5, #12
    2032:	fb05 8504 	mla	r5, r5, r4, r8
    2036:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    203a:	230c      	movs	r3, #12
    203c:	4363      	muls	r3, r4
    203e:	eb08 0203 	add.w	r2, r8, r3
    2042:	f818 0003 	ldrb.w	r0, [r8, r3]
    2046:	0965      	lsrs	r5, r4, #5
    2048:	f004 061f 	and.w	r6, r4, #31
    204c:	b3c8      	cbz	r0, 20c2 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    204e:	1c7b      	adds	r3, r7, #1
    2050:	d00f      	beq.n	2072 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2052:	f8d2 e008 	ldr.w	lr, [r2, #8]
    2056:	4826      	ldr	r0, [pc, #152]	; (20f0 <pm_system_suspend+0xe8>)
    2058:	4a26      	ldr	r2, [pc, #152]	; (20f4 <pm_system_suspend+0xec>)
    205a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    205e:	2100      	movs	r1, #0
    2060:	2300      	movs	r3, #0
    2062:	fbec 010e 	umlal	r0, r1, ip, lr
    2066:	f7fe fc41 	bl	8ec <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    206a:	2101      	movs	r1, #1
    206c:	1a38      	subs	r0, r7, r0
    206e:	f004 fde3 	bl	6c38 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2072:	f003 f9e3 	bl	543c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2076:	2001      	movs	r0, #1
    2078:	f7ff ff00 	bl	1e7c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    207c:	f3bf 8f5b 	dmb	ish
    2080:	4b1d      	ldr	r3, [pc, #116]	; (20f8 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2082:	2201      	movs	r2, #1
    2084:	40b2      	lsls	r2, r6
    2086:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    208a:	e853 1f00 	ldrex	r1, [r3]
    208e:	4311      	orrs	r1, r2
    2090:	e843 1000 	strex	r0, r1, [r3]
    2094:	2800      	cmp	r0, #0
    2096:	d1f8      	bne.n	208a <pm_system_suspend+0x82>
    2098:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    209c:	230c      	movs	r3, #12
    209e:	fb03 8404 	mla	r4, r3, r4, r8
    20a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    20a6:	ab05      	add	r3, sp, #20
    20a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    20ac:	4a13      	ldr	r2, [pc, #76]	; (20fc <pm_system_suspend+0xf4>)
    20ae:	b11a      	cbz	r2, 20b8 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    20b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    20b4:	f005 fa80 	bl	75b8 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    20b8:	f7ff ff62 	bl	1f80 <pm_system_resume>
	k_sched_unlock();
    20bc:	f003 feb6 	bl	5e2c <k_sched_unlock>
	bool ret = true;
    20c0:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20c2:	4a0f      	ldr	r2, [pc, #60]	; (2100 <pm_system_suspend+0xf8>)
    20c4:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    20c8:	2301      	movs	r3, #1
    20ca:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20cc:	43db      	mvns	r3, r3
    20ce:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    20d2:	e855 2f00 	ldrex	r2, [r5]
    20d6:	401a      	ands	r2, r3
    20d8:	e845 2100 	strex	r1, r2, [r5]
    20dc:	2900      	cmp	r1, #0
    20de:	d1f8      	bne.n	20d2 <pm_system_suspend+0xca>
    20e0:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    20e4:	b008      	add	sp, #32
    20e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20ea:	bf00      	nop
    20ec:	20000b30 	.word	0x20000b30
    20f0:	000f423f 	.word	0x000f423f
    20f4:	000f4240 	.word	0x000f4240
    20f8:	200009c8 	.word	0x200009c8
    20fc:	000075b9 	.word	0x000075b9
    2100:	200009d8 	.word	0x200009d8
    2104:	200009cc 	.word	0x200009cc

00002108 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2108:	680b      	ldr	r3, [r1, #0]
    210a:	3301      	adds	r3, #1
    210c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    210e:	4b01      	ldr	r3, [pc, #4]	; (2114 <char_out+0xc>)
    2110:	681b      	ldr	r3, [r3, #0]
    2112:	4718      	bx	r3
    2114:	20000020 	.word	0x20000020

00002118 <__printk_hook_install>:
	_char_out = fn;
    2118:	4b01      	ldr	r3, [pc, #4]	; (2120 <__printk_hook_install+0x8>)
    211a:	6018      	str	r0, [r3, #0]
}
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	20000020 	.word	0x20000020

00002124 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2124:	b507      	push	{r0, r1, r2, lr}
    2126:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    2128:	2100      	movs	r1, #0
{
    212a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    212c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    212e:	4803      	ldr	r0, [pc, #12]	; (213c <vprintk+0x18>)
    2130:	a901      	add	r1, sp, #4
    2132:	f7fe ff35 	bl	fa0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2136:	b003      	add	sp, #12
    2138:	f85d fb04 	ldr.w	pc, [sp], #4
    213c:	00002109 	.word	0x00002109

00002140 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2140:	b508      	push	{r3, lr}
	__asm__ volatile(
    2142:	f04f 0220 	mov.w	r2, #32
    2146:	f3ef 8311 	mrs	r3, BASEPRI
    214a:	f382 8812 	msr	BASEPRI_MAX, r2
    214e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2152:	f000 fcbf 	bl	2ad4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2156:	4803      	ldr	r0, [pc, #12]	; (2164 <sys_reboot+0x24>)
    2158:	f005 f9c2 	bl	74e0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    215c:	f000 f80a 	bl	2174 <arch_cpu_idle>
    2160:	e7fc      	b.n	215c <sys_reboot+0x1c>
    2162:	bf00      	nop
    2164:	000081f6 	.word	0x000081f6

00002168 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2168:	4901      	ldr	r1, [pc, #4]	; (2170 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    216a:	2210      	movs	r2, #16
	str	r2, [r1]
    216c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    216e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2170:	e000ed10 	.word	0xe000ed10

00002174 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2174:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2176:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2178:	f380 8811 	msr	BASEPRI, r0
	isb
    217c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2180:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2184:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2186:	b662      	cpsie	i
	isb
    2188:	f3bf 8f6f 	isb	sy

	bx	lr
    218c:	4770      	bx	lr
    218e:	bf00      	nop

00002190 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2190:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2192:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2194:	f381 8811 	msr	BASEPRI, r1

	wfe
    2198:	bf20      	wfe

	msr	BASEPRI, r0
    219a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    219e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop

000021a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    21a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    21a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    21a8:	4a0b      	ldr	r2, [pc, #44]	; (21d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    21aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    21ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    21ae:	bf1e      	ittt	ne
	movne	r1, #0
    21b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    21b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    21b4:	f005 fbc1 	blne	793a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    21b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    21ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    21be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    21c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    21c6:	4905      	ldr	r1, [pc, #20]	; (21dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    21c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    21ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    21cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    21ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    21d2:	4903      	ldr	r1, [pc, #12]	; (21e0 <_isr_wrapper+0x3c>)
	bx r1
    21d4:	4708      	bx	r1
    21d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    21d8:	20000b30 	.word	0x20000b30
	ldr r1, =_sw_isr_table
    21dc:	00007aec 	.word	0x00007aec
	ldr r1, =z_arm_int_exit
    21e0:	00002409 	.word	0x00002409

000021e4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    21e4:	bf30      	wfi
    b z_SysNmiOnReset
    21e6:	f7ff bffd 	b.w	21e4 <z_SysNmiOnReset>
    21ea:	bf00      	nop

000021ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21ec:	4912      	ldr	r1, [pc, #72]	; (2238 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    21f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21fe:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2200:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2204:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2208:	4f0c      	ldr	r7, [pc, #48]	; (223c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    220a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    220e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2210:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2212:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2214:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2216:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2218:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    221a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    221e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2220:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2222:	f000 fae7 	bl	27f4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2226:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    222a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    222e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2232:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2236:	4770      	bx	lr
    ldr r1, =_kernel
    2238:	20000b30 	.word	0x20000b30
    ldr v4, =_SCS_ICSR
    223c:	e000ed04 	.word	0xe000ed04

00002240 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2240:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2244:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2246:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    224a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    224e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2250:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2254:	2902      	cmp	r1, #2
    beq _oops
    2256:	d0ff      	beq.n	2258 <_oops>

00002258 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2258:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    225a:	f005 f95f 	bl	751c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    225e:	bd01      	pop	{r0, pc}

00002260 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2260:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2262:	2b00      	cmp	r3, #0
    2264:	db08      	blt.n	2278 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2266:	2201      	movs	r2, #1
    2268:	f000 001f 	and.w	r0, r0, #31
    226c:	fa02 f000 	lsl.w	r0, r2, r0
    2270:	095b      	lsrs	r3, r3, #5
    2272:	4a02      	ldr	r2, [pc, #8]	; (227c <arch_irq_enable+0x1c>)
    2274:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2278:	4770      	bx	lr
    227a:	bf00      	nop
    227c:	e000e100 	.word	0xe000e100

00002280 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2280:	4b05      	ldr	r3, [pc, #20]	; (2298 <arch_irq_is_enabled+0x18>)
    2282:	0942      	lsrs	r2, r0, #5
    2284:	f000 001f 	and.w	r0, r0, #31
    2288:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    228c:	2301      	movs	r3, #1
    228e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2292:	4010      	ands	r0, r2
    2294:	4770      	bx	lr
    2296:	bf00      	nop
    2298:	e000e100 	.word	0xe000e100

0000229c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    229c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    229e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22a0:	2c07      	cmp	r4, #7
{
    22a2:	4605      	mov	r5, r0
    22a4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    22a6:	d90f      	bls.n	22c8 <z_arm_irq_priority_set+0x2c>
    22a8:	4a11      	ldr	r2, [pc, #68]	; (22f0 <z_arm_irq_priority_set+0x54>)
    22aa:	4912      	ldr	r1, [pc, #72]	; (22f4 <z_arm_irq_priority_set+0x58>)
    22ac:	4812      	ldr	r0, [pc, #72]	; (22f8 <z_arm_irq_priority_set+0x5c>)
    22ae:	2359      	movs	r3, #89	; 0x59
    22b0:	f005 f916 	bl	74e0 <printk>
    22b4:	4811      	ldr	r0, [pc, #68]	; (22fc <z_arm_irq_priority_set+0x60>)
    22b6:	4631      	mov	r1, r6
    22b8:	2307      	movs	r3, #7
    22ba:	462a      	mov	r2, r5
    22bc:	f005 f910 	bl	74e0 <printk>
    22c0:	480b      	ldr	r0, [pc, #44]	; (22f0 <z_arm_irq_priority_set+0x54>)
    22c2:	2159      	movs	r1, #89	; 0x59
    22c4:	f005 f838 	bl	7338 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22c8:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22ca:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22cc:	bfac      	ite	ge
    22ce:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22d2:	4b0b      	ldrlt	r3, [pc, #44]	; (2300 <z_arm_irq_priority_set+0x64>)
    22d4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    22d8:	bfb8      	it	lt
    22da:	f005 050f 	andlt.w	r5, r5, #15
    22de:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e0:	bfaa      	itet	ge
    22e2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e6:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    22ec:	bd70      	pop	{r4, r5, r6, pc}
    22ee:	bf00      	nop
    22f0:	0000821f 	.word	0x0000821f
    22f4:	00008255 	.word	0x00008255
    22f8:	00008064 	.word	0x00008064
    22fc:	00008270 	.word	0x00008270
    2300:	e000ed14 	.word	0xe000ed14

00002304 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2304:	4a0b      	ldr	r2, [pc, #44]	; (2334 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2306:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2308:	4b0b      	ldr	r3, [pc, #44]	; (2338 <z_arm_prep_c+0x34>)
    230a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    230e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2310:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2314:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    231c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2324:	f002 fc7a 	bl	4c1c <z_bss_zero>
	z_data_copy();
    2328:	f004 fdf2 	bl	6f10 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    232c:	f000 f9f6 	bl	271c <z_arm_interrupt_init>
	z_cstart();
    2330:	f002 fc7e 	bl	4c30 <z_cstart>
    2334:	00000000 	.word	0x00000000
    2338:	e000ed00 	.word	0xe000ed00

0000233c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    233c:	4a09      	ldr	r2, [pc, #36]	; (2364 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    233e:	490a      	ldr	r1, [pc, #40]	; (2368 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2340:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2342:	6809      	ldr	r1, [r1, #0]
    2344:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2346:	4909      	ldr	r1, [pc, #36]	; (236c <arch_swap+0x30>)
	_current->arch.basepri = key;
    2348:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    234a:	684b      	ldr	r3, [r1, #4]
    234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2350:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2352:	2300      	movs	r3, #0
    2354:	f383 8811 	msr	BASEPRI, r3
    2358:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    235c:	6893      	ldr	r3, [r2, #8]
}
    235e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2360:	4770      	bx	lr
    2362:	bf00      	nop
    2364:	20000b30 	.word	0x20000b30
    2368:	00007dd0 	.word	0x00007dd0
    236c:	e000ed00 	.word	0xe000ed00

00002370 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2370:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2374:	9b00      	ldr	r3, [sp, #0]
    2376:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    237a:	490a      	ldr	r1, [pc, #40]	; (23a4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    237c:	9b01      	ldr	r3, [sp, #4]
    237e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2382:	9b02      	ldr	r3, [sp, #8]
    2384:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2388:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    238c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2390:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2394:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2398:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    239a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    239c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    239e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop
    23a4:	00007505 	.word	0x00007505

000023a8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    23a8:	4a0b      	ldr	r2, [pc, #44]	; (23d8 <z_check_thread_stack_fail+0x30>)
{
    23aa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    23ac:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    23ae:	b190      	cbz	r0, 23d6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    23b0:	f113 0f16 	cmn.w	r3, #22
    23b4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    23b6:	d005      	beq.n	23c4 <z_check_thread_stack_fail+0x1c>
    23b8:	f1a0 0220 	sub.w	r2, r0, #32
    23bc:	429a      	cmp	r2, r3
    23be:	d806      	bhi.n	23ce <z_check_thread_stack_fail+0x26>
    23c0:	4283      	cmp	r3, r0
    23c2:	d204      	bcs.n	23ce <z_check_thread_stack_fail+0x26>
    23c4:	4281      	cmp	r1, r0
    23c6:	bf2c      	ite	cs
    23c8:	2100      	movcs	r1, #0
    23ca:	2101      	movcc	r1, #1
    23cc:	e000      	b.n	23d0 <z_check_thread_stack_fail+0x28>
    23ce:	2100      	movs	r1, #0
    23d0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    23d2:	bf08      	it	eq
    23d4:	2000      	moveq	r0, #0
}
    23d6:	4770      	bx	lr
    23d8:	20000b30 	.word	0x20000b30

000023dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    23dc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    23de:	4b09      	ldr	r3, [pc, #36]	; (2404 <arch_switch_to_main_thread+0x28>)
    23e0:	6098      	str	r0, [r3, #8]
{
    23e2:	460d      	mov	r5, r1
    23e4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    23e6:	f000 fa05 	bl	27f4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    23ea:	4620      	mov	r0, r4
    23ec:	f385 8809 	msr	PSP, r5
    23f0:	2100      	movs	r1, #0
    23f2:	b663      	cpsie	if
    23f4:	f381 8811 	msr	BASEPRI, r1
    23f8:	f3bf 8f6f 	isb	sy
    23fc:	2200      	movs	r2, #0
    23fe:	2300      	movs	r3, #0
    2400:	f005 f880 	bl	7504 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2404:	20000b30 	.word	0x20000b30

00002408 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2408:	4b04      	ldr	r3, [pc, #16]	; (241c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    240a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    240c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    240e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2410:	d003      	beq.n	241a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2412:	4903      	ldr	r1, [pc, #12]	; (2420 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2418:	600a      	str	r2, [r1, #0]

0000241a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    241a:	4770      	bx	lr
	ldr r3, =_kernel
    241c:	20000b30 	.word	0x20000b30
	ldr r1, =_SCS_ICSR
    2420:	e000ed04 	.word	0xe000ed04

00002424 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2424:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2428:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    242c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    242e:	4672      	mov	r2, lr
	bl z_arm_fault
    2430:	f000 f8ae 	bl	2590 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2434:	bd01      	pop	{r0, pc}
    2436:	bf00      	nop

00002438 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2438:	2000      	movs	r0, #0
    msr CONTROL, r0
    243a:	f380 8814 	msr	CONTROL, r0
    isb
    243e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2442:	f005 fae1 	bl	7a08 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2446:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2448:	490d      	ldr	r1, [pc, #52]	; (2480 <__start+0x48>)
    str r0, [r1]
    244a:	6008      	str	r0, [r1, #0]
    dsb
    244c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2450:	480c      	ldr	r0, [pc, #48]	; (2484 <__start+0x4c>)
    msr msp, r0
    2452:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2456:	f000 f97d 	bl	2754 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    245a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    245c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2460:	4809      	ldr	r0, [pc, #36]	; (2488 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2462:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2466:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2468:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    246c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2470:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2472:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2474:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2478:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    247c:	f7ff ff42 	bl	2304 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2480:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2484:	200021c0 	.word	0x200021c0
    ldr r0, =z_interrupt_stacks
    2488:	20002340 	.word	0x20002340

0000248c <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    248c:	4b23      	ldr	r3, [pc, #140]	; (251c <mem_manage_fault+0x90>)
{
    248e:	b570      	push	{r4, r5, r6, lr}
    2490:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2498:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    249a:	0790      	lsls	r0, r2, #30
    249c:	d51a      	bpl.n	24d4 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    249e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    24a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24a2:	0612      	lsls	r2, r2, #24
    24a4:	d516      	bpl.n	24d4 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    24a6:	b119      	cbz	r1, 24b0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    24a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    24ae:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    24b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    24b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24b6:	06d6      	lsls	r6, r2, #27
    24b8:	d40f      	bmi.n	24da <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24bc:	0799      	lsls	r1, r3, #30
    24be:	d40c      	bmi.n	24da <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    24c0:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24c2:	4a16      	ldr	r2, [pc, #88]	; (251c <mem_manage_fault+0x90>)
    24c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24c6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    24ca:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    24cc:	2300      	movs	r3, #0
    24ce:	702b      	strb	r3, [r5, #0]

	return reason;
}
    24d0:	4620      	mov	r0, r4
    24d2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    24d4:	f06f 0015 	mvn.w	r0, #21
    24d8:	e7ea      	b.n	24b0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    24da:	4e10      	ldr	r6, [pc, #64]	; (251c <mem_manage_fault+0x90>)
    24dc:	6873      	ldr	r3, [r6, #4]
    24de:	051a      	lsls	r2, r3, #20
    24e0:	d5ee      	bpl.n	24c0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    24e2:	4621      	mov	r1, r4
    24e4:	f7ff ff60 	bl	23a8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    24e8:	4604      	mov	r4, r0
    24ea:	b118      	cbz	r0, 24f4 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    24ec:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    24f0:	2402      	movs	r4, #2
    24f2:	e7e6      	b.n	24c2 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    24f4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    24f6:	06db      	lsls	r3, r3, #27
    24f8:	d5e2      	bpl.n	24c0 <mem_manage_fault+0x34>
    24fa:	4a09      	ldr	r2, [pc, #36]	; (2520 <mem_manage_fault+0x94>)
    24fc:	4909      	ldr	r1, [pc, #36]	; (2524 <mem_manage_fault+0x98>)
    24fe:	480a      	ldr	r0, [pc, #40]	; (2528 <mem_manage_fault+0x9c>)
    2500:	f240 1349 	movw	r3, #329	; 0x149
    2504:	f004 ffec 	bl	74e0 <printk>
    2508:	4808      	ldr	r0, [pc, #32]	; (252c <mem_manage_fault+0xa0>)
    250a:	f004 ffe9 	bl	74e0 <printk>
    250e:	4804      	ldr	r0, [pc, #16]	; (2520 <mem_manage_fault+0x94>)
    2510:	f240 1149 	movw	r1, #329	; 0x149
    2514:	f004 ff10 	bl	7338 <assert_post_action>
    2518:	e7d3      	b.n	24c2 <mem_manage_fault+0x36>
    251a:	bf00      	nop
    251c:	e000ed00 	.word	0xe000ed00
    2520:	000082b0 	.word	0x000082b0
    2524:	000082ea 	.word	0x000082ea
    2528:	00008064 	.word	0x00008064
    252c:	00008334 	.word	0x00008334

00002530 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2530:	4b0d      	ldr	r3, [pc, #52]	; (2568 <bus_fault.isra.0+0x38>)
    2532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2538:	0592      	lsls	r2, r2, #22
    253a:	d508      	bpl.n	254e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    253e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2540:	0412      	lsls	r2, r2, #16
    2542:	d504      	bpl.n	254e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2544:	b118      	cbz	r0, 254e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    254c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    254e:	4b06      	ldr	r3, [pc, #24]	; (2568 <bus_fault.isra.0+0x38>)
    2550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2554:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2556:	bf58      	it	pl
    2558:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    255a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    255c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    255e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2562:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2564:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2566:	4770      	bx	lr
    2568:	e000ed00 	.word	0xe000ed00

0000256c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    256c:	4b07      	ldr	r3, [pc, #28]	; (258c <usage_fault.isra.0+0x20>)
    256e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    257a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    257c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2580:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2584:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2586:	2000      	movs	r0, #0
    2588:	4770      	bx	lr
    258a:	bf00      	nop
    258c:	e000ed00 	.word	0xe000ed00

00002590 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2590:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2592:	4b54      	ldr	r3, [pc, #336]	; (26e4 <z_arm_fault+0x154>)
    2594:	685c      	ldr	r4, [r3, #4]
{
    2596:	b08a      	sub	sp, #40	; 0x28
    2598:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    259a:	f3c4 0408 	ubfx	r4, r4, #0, #9
    259e:	2600      	movs	r6, #0
    25a0:	f386 8811 	msr	BASEPRI, r6
    25a4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    25a8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    25ac:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    25b0:	d108      	bne.n	25c4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    25b2:	f002 030c 	and.w	r3, r2, #12
    25b6:	2b08      	cmp	r3, #8
    25b8:	d004      	beq.n	25c4 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    25ba:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    25bc:	bf5c      	itt	pl
    25be:	4605      	movpl	r5, r0
			*nested_exc = true;
    25c0:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    25c2:	b97d      	cbnz	r5, 25e4 <z_arm_fault+0x54>
    25c4:	4a48      	ldr	r2, [pc, #288]	; (26e8 <z_arm_fault+0x158>)
    25c6:	4949      	ldr	r1, [pc, #292]	; (26ec <z_arm_fault+0x15c>)
    25c8:	4849      	ldr	r0, [pc, #292]	; (26f0 <z_arm_fault+0x160>)
    25ca:	f240 33f2 	movw	r3, #1010	; 0x3f2
    25ce:	f004 ff87 	bl	74e0 <printk>
    25d2:	4848      	ldr	r0, [pc, #288]	; (26f4 <z_arm_fault+0x164>)
    25d4:	f004 ff84 	bl	74e0 <printk>
    25d8:	4843      	ldr	r0, [pc, #268]	; (26e8 <z_arm_fault+0x158>)
    25da:	f240 31f2 	movw	r1, #1010	; 0x3f2
    25de:	f004 feab 	bl	7338 <assert_post_action>
    25e2:	2500      	movs	r5, #0
	*recoverable = false;
    25e4:	2300      	movs	r3, #0
    25e6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    25ea:	1ee3      	subs	r3, r4, #3
    25ec:	2b03      	cmp	r3, #3
    25ee:	d872      	bhi.n	26d6 <z_arm_fault+0x146>
    25f0:	e8df f003 	tbb	[pc, r3]
    25f4:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    25f8:	4b3a      	ldr	r3, [pc, #232]	; (26e4 <z_arm_fault+0x154>)
    25fa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    25fc:	f014 0402 	ands.w	r4, r4, #2
    2600:	d169      	bne.n	26d6 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2604:	2a00      	cmp	r2, #0
    2606:	db18      	blt.n	263a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    260a:	005b      	lsls	r3, r3, #1
    260c:	d54e      	bpl.n	26ac <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    260e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2610:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2614:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2618:	429a      	cmp	r2, r3
    261a:	d00d      	beq.n	2638 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    261c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2620:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	b30b      	cbz	r3, 266c <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2628:	f10d 0207 	add.w	r2, sp, #7
    262c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    262e:	4628      	mov	r0, r5
    2630:	f7ff ff2c 	bl	248c <mem_manage_fault>
		reason = usage_fault(esf);
    2634:	4604      	mov	r4, r0
		break;
    2636:	e000      	b.n	263a <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2638:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    263a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    263e:	b99b      	cbnz	r3, 2668 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2640:	2220      	movs	r2, #32
    2642:	4629      	mov	r1, r5
    2644:	a802      	add	r0, sp, #8
    2646:	f004 ffa3 	bl	7590 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    264c:	2e00      	cmp	r6, #0
    264e:	d044      	beq.n	26da <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2650:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2654:	b922      	cbnz	r2, 2660 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2656:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    265a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    265e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2660:	a902      	add	r1, sp, #8
    2662:	4620      	mov	r0, r4
    2664:	f004 ff58 	bl	7518 <z_arm_fatal_error>
}
    2668:	b00a      	add	sp, #40	; 0x28
    266a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    266c:	4b22      	ldr	r3, [pc, #136]	; (26f8 <z_arm_fault+0x168>)
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	b12b      	cbz	r3, 267e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2672:	f10d 0107 	add.w	r1, sp, #7
    2676:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2678:	f7ff ff5a 	bl	2530 <bus_fault.isra.0>
    267c:	e7da      	b.n	2634 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    267e:	4b1f      	ldr	r3, [pc, #124]	; (26fc <z_arm_fault+0x16c>)
    2680:	881b      	ldrh	r3, [r3, #0]
    2682:	b29b      	uxth	r3, r3
    2684:	b113      	cbz	r3, 268c <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    2686:	f7ff ff71 	bl	256c <usage_fault.isra.0>
    268a:	e7d3      	b.n	2634 <z_arm_fault+0xa4>
			__ASSERT(0,
    268c:	491c      	ldr	r1, [pc, #112]	; (2700 <z_arm_fault+0x170>)
    268e:	4a16      	ldr	r2, [pc, #88]	; (26e8 <z_arm_fault+0x158>)
    2690:	4817      	ldr	r0, [pc, #92]	; (26f0 <z_arm_fault+0x160>)
    2692:	f240 23c3 	movw	r3, #707	; 0x2c3
    2696:	f004 ff23 	bl	74e0 <printk>
    269a:	481a      	ldr	r0, [pc, #104]	; (2704 <z_arm_fault+0x174>)
    269c:	f004 ff20 	bl	74e0 <printk>
    26a0:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    26a4:	4810      	ldr	r0, [pc, #64]	; (26e8 <z_arm_fault+0x158>)
    26a6:	f004 fe47 	bl	7338 <assert_post_action>
    26aa:	e7c6      	b.n	263a <z_arm_fault+0xaa>
    26ac:	4914      	ldr	r1, [pc, #80]	; (2700 <z_arm_fault+0x170>)
    26ae:	4a0e      	ldr	r2, [pc, #56]	; (26e8 <z_arm_fault+0x158>)
    26b0:	480f      	ldr	r0, [pc, #60]	; (26f0 <z_arm_fault+0x160>)
    26b2:	f240 23c7 	movw	r3, #711	; 0x2c7
    26b6:	f004 ff13 	bl	74e0 <printk>
    26ba:	4813      	ldr	r0, [pc, #76]	; (2708 <z_arm_fault+0x178>)
    26bc:	f004 ff10 	bl	74e0 <printk>
    26c0:	f240 21c7 	movw	r1, #711	; 0x2c7
    26c4:	e7ee      	b.n	26a4 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    26c6:	f10d 0207 	add.w	r2, sp, #7
    26ca:	2100      	movs	r1, #0
    26cc:	e7af      	b.n	262e <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    26ce:	f10d 0107 	add.w	r1, sp, #7
    26d2:	2000      	movs	r0, #0
    26d4:	e7d0      	b.n	2678 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    26d6:	2400      	movs	r4, #0
    26d8:	e7af      	b.n	263a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    26de:	f023 0301 	bic.w	r3, r3, #1
    26e2:	e7bc      	b.n	265e <z_arm_fault+0xce>
    26e4:	e000ed00 	.word	0xe000ed00
    26e8:	000082b0 	.word	0x000082b0
    26ec:	00008357 	.word	0x00008357
    26f0:	00008064 	.word	0x00008064
    26f4:	0000836a 	.word	0x0000836a
    26f8:	e000ed29 	.word	0xe000ed29
    26fc:	e000ed2a 	.word	0xe000ed2a
    2700:	0000815f 	.word	0x0000815f
    2704:	000083a8 	.word	0x000083a8
    2708:	000083cc 	.word	0x000083cc

0000270c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    270c:	4a02      	ldr	r2, [pc, #8]	; (2718 <z_arm_fault_init+0xc>)
    270e:	6953      	ldr	r3, [r2, #20]
    2710:	f043 0310 	orr.w	r3, r3, #16
    2714:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2716:	4770      	bx	lr
    2718:	e000ed00 	.word	0xe000ed00

0000271c <z_arm_interrupt_init>:
    271c:	4804      	ldr	r0, [pc, #16]	; (2730 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    271e:	2300      	movs	r3, #0
    2720:	2120      	movs	r1, #32
    2722:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2724:	3301      	adds	r3, #1
    2726:	2b30      	cmp	r3, #48	; 0x30
    2728:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    272c:	d1f9      	bne.n	2722 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    272e:	4770      	bx	lr
    2730:	e000e100 	.word	0xe000e100

00002734 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2734:	4a06      	ldr	r2, [pc, #24]	; (2750 <z_arm_clear_arm_mpu_config+0x1c>)
    2736:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2738:	2300      	movs	r3, #0
	int num_regions =
    273a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    273e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2740:	428b      	cmp	r3, r1
    2742:	d100      	bne.n	2746 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2744:	4770      	bx	lr
  MPU->RNR = rnr;
    2746:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2748:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    274a:	3301      	adds	r3, #1
    274c:	e7f8      	b.n	2740 <z_arm_clear_arm_mpu_config+0xc>
    274e:	bf00      	nop
    2750:	e000ed90 	.word	0xe000ed90

00002754 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2754:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2756:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2758:	2300      	movs	r3, #0
    275a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    275e:	f7ff ffe9 	bl	2734 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2762:	4b14      	ldr	r3, [pc, #80]	; (27b4 <z_arm_init_arch_hw_at_boot+0x60>)
    2764:	f04f 32ff 	mov.w	r2, #4294967295
    2768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    276c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    277c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2780:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2788:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    278c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2790:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2794:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2798:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    279c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    27a0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    27a4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    27a8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    27aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27ae:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    27b2:	bd08      	pop	{r3, pc}
    27b4:	e000e100 	.word	0xe000e100

000027b8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    27b8:	4b06      	ldr	r3, [pc, #24]	; (27d4 <z_impl_k_thread_abort+0x1c>)
    27ba:	689b      	ldr	r3, [r3, #8]
    27bc:	4283      	cmp	r3, r0
    27be:	d107      	bne.n	27d0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    27c0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    27c4:	b123      	cbz	r3, 27d0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    27c6:	4a04      	ldr	r2, [pc, #16]	; (27d8 <z_impl_k_thread_abort+0x20>)
    27c8:	6853      	ldr	r3, [r2, #4]
    27ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    27ce:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    27d0:	f003 bd94 	b.w	62fc <z_thread_abort>
    27d4:	20000b30 	.word	0x20000b30
    27d8:	e000ed00 	.word	0xe000ed00

000027dc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    27dc:	4b02      	ldr	r3, [pc, #8]	; (27e8 <z_arm_configure_static_mpu_regions+0xc>)
    27de:	4a03      	ldr	r2, [pc, #12]	; (27ec <z_arm_configure_static_mpu_regions+0x10>)
    27e0:	4803      	ldr	r0, [pc, #12]	; (27f0 <z_arm_configure_static_mpu_regions+0x14>)
    27e2:	2101      	movs	r1, #1
    27e4:	f000 b868 	b.w	28b8 <arm_core_mpu_configure_static_mpu_regions>
    27e8:	20040000 	.word	0x20040000
    27ec:	20000000 	.word	0x20000000
    27f0:	00007cc4 	.word	0x00007cc4

000027f4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    27f4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    27f6:	4b05      	ldr	r3, [pc, #20]	; (280c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    27f8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    27fa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    27fc:	4a04      	ldr	r2, [pc, #16]	; (2810 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    27fe:	2120      	movs	r1, #32
    2800:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2804:	4618      	mov	r0, r3
    2806:	2101      	movs	r1, #1
    2808:	f000 b87e 	b.w	2908 <arm_core_mpu_configure_dynamic_mpu_regions>
    280c:	200009dc 	.word	0x200009dc
    2810:	150b0000 	.word	0x150b0000

00002814 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2816:	4f1e      	ldr	r7, [pc, #120]	; (2890 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2818:	2600      	movs	r6, #0
    281a:	428e      	cmp	r6, r1
    281c:	db01      	blt.n	2822 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    281e:	4610      	mov	r0, r2
    2820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2822:	6844      	ldr	r4, [r0, #4]
    2824:	b384      	cbz	r4, 2888 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2826:	b153      	cbz	r3, 283e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2828:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    282c:	ea14 0f0c 	tst.w	r4, ip
    2830:	d118      	bne.n	2864 <mpu_configure_regions+0x50>
		&&
    2832:	2c1f      	cmp	r4, #31
    2834:	d916      	bls.n	2864 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2836:	6805      	ldr	r5, [r0, #0]
		&&
    2838:	ea1c 0f05 	tst.w	ip, r5
    283c:	d112      	bne.n	2864 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    283e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2840:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2842:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2846:	b2d2      	uxtb	r2, r2
    2848:	d90f      	bls.n	286a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    284a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    284e:	d80e      	bhi.n	286e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2850:	3c01      	subs	r4, #1
    2852:	fab4 f484 	clz	r4, r4
    2856:	f1c4 041f 	rsb	r4, r4, #31
    285a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    285c:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    285e:	ea4c 0404 	orr.w	r4, ip, r4
    2862:	d906      	bls.n	2872 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2864:	f06f 0215 	mvn.w	r2, #21
    2868:	e7d9      	b.n	281e <mpu_configure_regions+0xa>
		return REGION_32B;
    286a:	2408      	movs	r4, #8
    286c:	e7f6      	b.n	285c <mpu_configure_regions+0x48>
		return REGION_4G;
    286e:	243e      	movs	r4, #62	; 0x3e
    2870:	e7f4      	b.n	285c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2872:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2876:	4315      	orrs	r5, r2
    2878:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    287c:	f044 0401 	orr.w	r4, r4, #1
    2880:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2882:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2884:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2886:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2888:	3601      	adds	r6, #1
    288a:	300c      	adds	r0, #12
    288c:	e7c5      	b.n	281a <mpu_configure_regions+0x6>
    288e:	bf00      	nop
    2890:	e000ed90 	.word	0xe000ed90

00002894 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2894:	4b03      	ldr	r3, [pc, #12]	; (28a4 <arm_core_mpu_enable+0x10>)
    2896:	2205      	movs	r2, #5
    2898:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    289a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    289e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    28a2:	4770      	bx	lr
    28a4:	e000ed90 	.word	0xe000ed90

000028a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    28a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    28ac:	4b01      	ldr	r3, [pc, #4]	; (28b4 <arm_core_mpu_disable+0xc>)
    28ae:	2200      	movs	r2, #0
    28b0:	605a      	str	r2, [r3, #4]
}
    28b2:	4770      	bx	lr
    28b4:	e000ed90 	.word	0xe000ed90

000028b8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    28b8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    28ba:	4d0e      	ldr	r5, [pc, #56]	; (28f4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    28bc:	2301      	movs	r3, #1
    28be:	782a      	ldrb	r2, [r5, #0]
    28c0:	460c      	mov	r4, r1
    28c2:	f7ff ffa7 	bl	2814 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    28c6:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    28c8:	3016      	adds	r0, #22
    28ca:	d111      	bne.n	28f0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    28cc:	f240 1311 	movw	r3, #273	; 0x111
    28d0:	4a09      	ldr	r2, [pc, #36]	; (28f8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    28d2:	490a      	ldr	r1, [pc, #40]	; (28fc <arm_core_mpu_configure_static_mpu_regions+0x44>)
    28d4:	480a      	ldr	r0, [pc, #40]	; (2900 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    28d6:	f004 fe03 	bl	74e0 <printk>
    28da:	4621      	mov	r1, r4
    28dc:	4809      	ldr	r0, [pc, #36]	; (2904 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    28de:	f004 fdff 	bl	74e0 <printk>
			regions_num);
	}
}
    28e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    28e6:	4804      	ldr	r0, [pc, #16]	; (28f8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    28e8:	f240 1111 	movw	r1, #273	; 0x111
    28ec:	f004 bd24 	b.w	7338 <assert_post_action>
}
    28f0:	bd38      	pop	{r3, r4, r5, pc}
    28f2:	bf00      	nop
    28f4:	20000b90 	.word	0x20000b90
    28f8:	000083fc 	.word	0x000083fc
    28fc:	0000815f 	.word	0x0000815f
    2900:	00008064 	.word	0x00008064
    2904:	00008433 	.word	0x00008433

00002908 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2908:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    290a:	4a12      	ldr	r2, [pc, #72]	; (2954 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    290c:	2300      	movs	r3, #0
    290e:	7812      	ldrb	r2, [r2, #0]
    2910:	460c      	mov	r4, r1
    2912:	f7ff ff7f 	bl	2814 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2916:	f110 0f16 	cmn.w	r0, #22
    291a:	d008      	beq.n	292e <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    291c:	4b0e      	ldr	r3, [pc, #56]	; (2958 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    291e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2920:	2807      	cmp	r0, #7
    2922:	dd00      	ble.n	2926 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2924:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2926:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2928:	611a      	str	r2, [r3, #16]
    292a:	3001      	adds	r0, #1
    292c:	e7f8      	b.n	2920 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    292e:	4a0b      	ldr	r2, [pc, #44]	; (295c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2930:	490b      	ldr	r1, [pc, #44]	; (2960 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2932:	480c      	ldr	r0, [pc, #48]	; (2964 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2934:	f44f 7398 	mov.w	r3, #304	; 0x130
    2938:	f004 fdd2 	bl	74e0 <printk>
    293c:	4621      	mov	r1, r4
    293e:	480a      	ldr	r0, [pc, #40]	; (2968 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2940:	f004 fdce 	bl	74e0 <printk>
}
    2944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2948:	4804      	ldr	r0, [pc, #16]	; (295c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    294a:	f44f 7198 	mov.w	r1, #304	; 0x130
    294e:	f004 bcf3 	b.w	7338 <assert_post_action>
    2952:	bf00      	nop
    2954:	20000b90 	.word	0x20000b90
    2958:	e000ed90 	.word	0xe000ed90
    295c:	000083fc 	.word	0x000083fc
    2960:	0000815f 	.word	0x0000815f
    2964:	00008064 	.word	0x00008064
    2968:	0000845f 	.word	0x0000845f

0000296c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    296c:	4925      	ldr	r1, [pc, #148]	; (2a04 <z_arm_mpu_init+0x98>)
{
    296e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2970:	680c      	ldr	r4, [r1, #0]
    2972:	2c08      	cmp	r4, #8
    2974:	d913      	bls.n	299e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2976:	f44f 73a4 	mov.w	r3, #328	; 0x148
    297a:	4a23      	ldr	r2, [pc, #140]	; (2a08 <z_arm_mpu_init+0x9c>)
    297c:	4923      	ldr	r1, [pc, #140]	; (2a0c <z_arm_mpu_init+0xa0>)
    297e:	4824      	ldr	r0, [pc, #144]	; (2a10 <z_arm_mpu_init+0xa4>)
    2980:	f004 fdae 	bl	74e0 <printk>
    2984:	4823      	ldr	r0, [pc, #140]	; (2a14 <z_arm_mpu_init+0xa8>)
    2986:	2208      	movs	r2, #8
    2988:	4621      	mov	r1, r4
    298a:	f004 fda9 	bl	74e0 <printk>
    298e:	481e      	ldr	r0, [pc, #120]	; (2a08 <z_arm_mpu_init+0x9c>)
    2990:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2994:	f004 fcd0 	bl	7338 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2998:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    299c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    299e:	f7ff ff83 	bl	28a8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    29a2:	6848      	ldr	r0, [r1, #4]
    29a4:	491c      	ldr	r1, [pc, #112]	; (2a18 <z_arm_mpu_init+0xac>)
    29a6:	2200      	movs	r2, #0
    29a8:	4294      	cmp	r4, r2
    29aa:	f100 000c 	add.w	r0, r0, #12
    29ae:	d119      	bne.n	29e4 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    29b0:	4b1a      	ldr	r3, [pc, #104]	; (2a1c <z_arm_mpu_init+0xb0>)
    29b2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    29b4:	f7ff ff6e 	bl	2894 <arm_core_mpu_enable>
	__ASSERT(
    29b8:	680b      	ldr	r3, [r1, #0]
    29ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
    29be:	2b08      	cmp	r3, #8
    29c0:	d00e      	beq.n	29e0 <z_arm_mpu_init+0x74>
    29c2:	4917      	ldr	r1, [pc, #92]	; (2a20 <z_arm_mpu_init+0xb4>)
    29c4:	4a10      	ldr	r2, [pc, #64]	; (2a08 <z_arm_mpu_init+0x9c>)
    29c6:	4812      	ldr	r0, [pc, #72]	; (2a10 <z_arm_mpu_init+0xa4>)
    29c8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    29cc:	f004 fd88 	bl	74e0 <printk>
    29d0:	4814      	ldr	r0, [pc, #80]	; (2a24 <z_arm_mpu_init+0xb8>)
    29d2:	f004 fd85 	bl	74e0 <printk>
    29d6:	480c      	ldr	r0, [pc, #48]	; (2a08 <z_arm_mpu_init+0x9c>)
    29d8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    29dc:	f004 fcac 	bl	7338 <assert_post_action>
	return 0;
    29e0:	2000      	movs	r0, #0
    29e2:	e7db      	b.n	299c <z_arm_mpu_init+0x30>
    29e4:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    29e6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    29ea:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    29ee:	4313      	orrs	r3, r2
    29f0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    29f4:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    29f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    29fa:	f043 0301 	orr.w	r3, r3, #1
    29fe:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2a00:	3201      	adds	r2, #1
    2a02:	e7d1      	b.n	29a8 <z_arm_mpu_init+0x3c>
    2a04:	00007cd0 	.word	0x00007cd0
    2a08:	000083fc 	.word	0x000083fc
    2a0c:	0000815f 	.word	0x0000815f
    2a10:	00008064 	.word	0x00008064
    2a14:	0000848c 	.word	0x0000848c
    2a18:	e000ed90 	.word	0xe000ed90
    2a1c:	20000b90 	.word	0x20000b90
    2a20:	000084c0 	.word	0x000084c0
    2a24:	00008510 	.word	0x00008510

00002a28 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    2a28:	b40f      	push	{r0, r1, r2, r3}
    2a2a:	b507      	push	{r0, r1, r2, lr}
    2a2c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2a2e:	2102      	movs	r1, #2
{
    2a30:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2a34:	4804      	ldr	r0, [pc, #16]	; (2a48 <printf+0x20>)
	va_start(vargs, format);
    2a36:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2a38:	f7fe fab2 	bl	fa0 <cbvprintf>
	va_end(vargs);

	return r;
}
    2a3c:	b003      	add	sp, #12
    2a3e:	f85d eb04 	ldr.w	lr, [sp], #4
    2a42:	b004      	add	sp, #16
    2a44:	4770      	bx	lr
    2a46:	bf00      	nop
    2a48:	00007541 	.word	0x00007541

00002a4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2a4c:	4b01      	ldr	r3, [pc, #4]	; (2a54 <__stdout_hook_install+0x8>)
    2a4e:	6018      	str	r0, [r3, #0]
}
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop
    2a54:	20000024 	.word	0x20000024

00002a58 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2a58:	3902      	subs	r1, #2
    2a5a:	2901      	cmp	r1, #1
    2a5c:	d802      	bhi.n	2a64 <z_impl_zephyr_fputc+0xc>
    2a5e:	4b03      	ldr	r3, [pc, #12]	; (2a6c <z_impl_zephyr_fputc+0x14>)
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	4718      	bx	r3
}
    2a64:	f04f 30ff 	mov.w	r0, #4294967295
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	20000024 	.word	0x20000024

00002a70 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2a70:	f04f 0320 	mov.w	r3, #32
    2a74:	f3ef 8111 	mrs	r1, BASEPRI
    2a78:	f383 8812 	msr	BASEPRI_MAX, r3
    2a7c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2a80:	4a0f      	ldr	r2, [pc, #60]	; (2ac0 <nordicsemi_nrf52_init+0x50>)
    2a82:	2301      	movs	r3, #1
    2a84:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a8c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2a90:	4a0c      	ldr	r2, [pc, #48]	; (2ac4 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2a92:	6812      	ldr	r2, [r2, #0]
    2a94:	2a08      	cmp	r2, #8
    2a96:	d108      	bne.n	2aaa <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2a98:	4a0b      	ldr	r2, [pc, #44]	; (2ac8 <nordicsemi_nrf52_init+0x58>)
    2a9a:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2a9c:	2a05      	cmp	r2, #5
    2a9e:	d804      	bhi.n	2aaa <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2aa0:	480a      	ldr	r0, [pc, #40]	; (2acc <nordicsemi_nrf52_init+0x5c>)
    2aa2:	5c82      	ldrb	r2, [r0, r2]
    2aa4:	b10a      	cbz	r2, 2aaa <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2aa6:	4a0a      	ldr	r2, [pc, #40]	; (2ad0 <nordicsemi_nrf52_init+0x60>)
    2aa8:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aae:	2201      	movs	r2, #1
    2ab0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2ab4:	f381 8811 	msr	BASEPRI, r1
    2ab8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2abc:	2000      	movs	r0, #0
    2abe:	4770      	bx	lr
    2ac0:	4001e000 	.word	0x4001e000
    2ac4:	10000130 	.word	0x10000130
    2ac8:	10000134 	.word	0x10000134
    2acc:	00008540 	.word	0x00008540
    2ad0:	40000638 	.word	0x40000638

00002ad4 <sys_arch_reboot>:
    *p_gpregret = val;
    2ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ad8:	b2c0      	uxtb	r0, r0
    2ada:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2ade:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2ae2:	4905      	ldr	r1, [pc, #20]	; (2af8 <sys_arch_reboot+0x24>)
    2ae4:	4b05      	ldr	r3, [pc, #20]	; (2afc <sys_arch_reboot+0x28>)
    2ae6:	68ca      	ldr	r2, [r1, #12]
    2ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2aec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2aee:	60cb      	str	r3, [r1, #12]
    2af0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2af4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2af6:	e7fd      	b.n	2af4 <sys_arch_reboot+0x20>
    2af8:	e000ed00 	.word	0xe000ed00
    2afc:	05fa0004 	.word	0x05fa0004

00002b00 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2b00:	b120      	cbz	r0, 2b0c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2b02:	4b03      	ldr	r3, [pc, #12]	; (2b10 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2b04:	0180      	lsls	r0, r0, #6
    2b06:	f043 0301 	orr.w	r3, r3, #1
    2b0a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	00007c90 	.word	0x00007c90

00002b14 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2b18:	4c10      	ldr	r4, [pc, #64]	; (2b5c <onoff_start+0x48>)
    2b1a:	1b07      	subs	r7, r0, r4
    2b1c:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2b20:	f04f 080c 	mov.w	r8, #12
    2b24:	fb08 f807 	mul.w	r8, r8, r7
{
    2b28:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    2b2a:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    2b2e:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    2b30:	4420      	add	r0, r4
    2b32:	2140      	movs	r1, #64	; 0x40
    2b34:	f004 fd5e 	bl	75f4 <set_starting_state>
	if (err < 0) {
    2b38:	1e01      	subs	r1, r0, #0
    2b3a:	db09      	blt.n	2b50 <onoff_start+0x3c>
	subdata->cb = cb;
    2b3c:	4b08      	ldr	r3, [pc, #32]	; (2b60 <onoff_start+0x4c>)
    2b3e:	4444      	add	r4, r8
	subdata->user_data = user_data;
    2b40:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2b44:	4b07      	ldr	r3, [pc, #28]	; (2b64 <onoff_start+0x50>)
    2b46:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2b4e:	4718      	bx	r3
		notify(mgr, err);
    2b50:	4630      	mov	r0, r6
    2b52:	462b      	mov	r3, r5
}
    2b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2b58:	4718      	bx	r3
    2b5a:	bf00      	nop
    2b5c:	200009f8 	.word	0x200009f8
    2b60:	00007657 	.word	0x00007657
    2b64:	00007d08 	.word	0x00007d08

00002b68 <get_status>:
{
    2b68:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b6a:	b2cc      	uxtb	r4, r1
    2b6c:	2c01      	cmp	r4, #1
{
    2b6e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2b70:	d909      	bls.n	2b86 <get_status+0x1e>
    2b72:	4909      	ldr	r1, [pc, #36]	; (2b98 <get_status+0x30>)
    2b74:	4809      	ldr	r0, [pc, #36]	; (2b9c <get_status+0x34>)
    2b76:	4a0a      	ldr	r2, [pc, #40]	; (2ba0 <get_status+0x38>)
    2b78:	2379      	movs	r3, #121	; 0x79
    2b7a:	f004 fcb1 	bl	74e0 <printk>
    2b7e:	4808      	ldr	r0, [pc, #32]	; (2ba0 <get_status+0x38>)
    2b80:	2179      	movs	r1, #121	; 0x79
    2b82:	f004 fbd9 	bl	7338 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2b86:	692b      	ldr	r3, [r5, #16]
    2b88:	210c      	movs	r1, #12
    2b8a:	fb04 3401 	mla	r4, r4, r1, r3
    2b8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2b90:	f000 0007 	and.w	r0, r0, #7
    2b94:	bd38      	pop	{r3, r4, r5, pc}
    2b96:	bf00      	nop
    2b98:	00008583 	.word	0x00008583
    2b9c:	00008064 	.word	0x00008064
    2ba0:	00008546 	.word	0x00008546

00002ba4 <stop>:
{
    2ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ba6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2ba8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2baa:	6907      	ldr	r7, [r0, #16]
{
    2bac:	4605      	mov	r5, r0
    2bae:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2bb0:	d90b      	bls.n	2bca <stop+0x26>
    2bb2:	4918      	ldr	r1, [pc, #96]	; (2c14 <stop+0x70>)
    2bb4:	4818      	ldr	r0, [pc, #96]	; (2c18 <stop+0x74>)
    2bb6:	4a19      	ldr	r2, [pc, #100]	; (2c1c <stop+0x78>)
    2bb8:	f240 134d 	movw	r3, #333	; 0x14d
    2bbc:	f004 fc90 	bl	74e0 <printk>
    2bc0:	4816      	ldr	r0, [pc, #88]	; (2c1c <stop+0x78>)
    2bc2:	f240 114d 	movw	r1, #333	; 0x14d
    2bc6:	f004 fbb7 	bl	7338 <assert_post_action>
	__asm__ volatile(
    2bca:	f04f 0320 	mov.w	r3, #32
    2bce:	f3ef 8211 	mrs	r2, BASEPRI
    2bd2:	f383 8812 	msr	BASEPRI_MAX, r3
    2bd6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2bda:	230c      	movs	r3, #12
    2bdc:	fb03 7104 	mla	r1, r3, r4, r7
    2be0:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    2be2:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    2be6:	d001      	beq.n	2bec <stop+0x48>
    2be8:	428e      	cmp	r6, r1
    2bea:	d110      	bne.n	2c0e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2bec:	fb03 7304 	mla	r3, r3, r4, r7
    2bf0:	2101      	movs	r1, #1
    2bf2:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    2bf4:	2000      	movs	r0, #0
	__asm__ volatile(
    2bf6:	f382 8811 	msr	BASEPRI, r2
    2bfa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2bfe:	b928      	cbnz	r0, 2c0c <stop+0x68>
	get_sub_config(dev, type)->stop();
    2c00:	6869      	ldr	r1, [r5, #4]
    2c02:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    2c06:	6863      	ldr	r3, [r4, #4]
    2c08:	4798      	blx	r3
	return 0;
    2c0a:	2000      	movs	r0, #0
}
    2c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2c0e:	f04f 30ff 	mov.w	r0, #4294967295
    2c12:	e7f0      	b.n	2bf6 <stop+0x52>
    2c14:	00008583 	.word	0x00008583
    2c18:	00008064 	.word	0x00008064
    2c1c:	00008546 	.word	0x00008546

00002c20 <onoff_stop>:
{
    2c20:	b570      	push	{r4, r5, r6, lr}
    2c22:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2c24:	4906      	ldr	r1, [pc, #24]	; (2c40 <onoff_stop+0x20>)
    2c26:	1a41      	subs	r1, r0, r1
{
    2c28:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2c2a:	1149      	asrs	r1, r1, #5
    2c2c:	4805      	ldr	r0, [pc, #20]	; (2c44 <onoff_stop+0x24>)
    2c2e:	2240      	movs	r2, #64	; 0x40
    2c30:	f7ff ffb8 	bl	2ba4 <stop>
	notify(mgr, res);
    2c34:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2c36:	4601      	mov	r1, r0
	notify(mgr, res);
    2c38:	4620      	mov	r0, r4
}
    2c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2c3e:	4718      	bx	r3
    2c40:	200009f8 	.word	0x200009f8
    2c44:	00007a74 	.word	0x00007a74

00002c48 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c48:	2200      	movs	r2, #0
{
    2c4a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c4c:	2101      	movs	r1, #1
{
    2c4e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2c50:	4610      	mov	r0, r2
    2c52:	f7ff fb23 	bl	229c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2c56:	2000      	movs	r0, #0
    2c58:	f7ff fb02 	bl	2260 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2c5c:	480f      	ldr	r0, [pc, #60]	; (2c9c <clk_init+0x54>)
    2c5e:	f001 f853 	bl	3d08 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2c62:	4b0f      	ldr	r3, [pc, #60]	; (2ca0 <clk_init+0x58>)
    2c64:	4298      	cmp	r0, r3
    2c66:	d115      	bne.n	2c94 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2c68:	f001 f872 	bl	3d50 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2c6c:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c6e:	490d      	ldr	r1, [pc, #52]	; (2ca4 <clk_init+0x5c>)
    2c70:	4630      	mov	r0, r6
    2c72:	f004 fc20 	bl	74b6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2c76:	2800      	cmp	r0, #0
    2c78:	db0b      	blt.n	2c92 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c7a:	2501      	movs	r5, #1
    2c7c:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2c7e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2c80:	4908      	ldr	r1, [pc, #32]	; (2ca4 <clk_init+0x5c>)
    2c82:	f104 0020 	add.w	r0, r4, #32
    2c86:	f004 fc16 	bl	74b6 <onoff_manager_init>
		if (err < 0) {
    2c8a:	2800      	cmp	r0, #0
    2c8c:	db01      	blt.n	2c92 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2c8e:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2c90:	2000      	movs	r0, #0
}
    2c92:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2c94:	f06f 0004 	mvn.w	r0, #4
    2c98:	e7fb      	b.n	2c92 <clk_init+0x4a>
    2c9a:	bf00      	nop
    2c9c:	00002cdd 	.word	0x00002cdd
    2ca0:	0bad0000 	.word	0x0bad0000
    2ca4:	00007d18 	.word	0x00007d18

00002ca8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2ca8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2caa:	230c      	movs	r3, #12
    2cac:	4809      	ldr	r0, [pc, #36]	; (2cd4 <clkstarted_handle.constprop.0+0x2c>)
    2cae:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2cb0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2cb2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2cb4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2cb8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2cba:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2cbc:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2cbe:	4418      	add	r0, r3
    2cc0:	f004 fcb6 	bl	7630 <set_on_state>
	if (callback) {
    2cc4:	b12d      	cbz	r5, 2cd2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2cc6:	4632      	mov	r2, r6
    2cc8:	462b      	mov	r3, r5
    2cca:	4803      	ldr	r0, [pc, #12]	; (2cd8 <clkstarted_handle.constprop.0+0x30>)
}
    2ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2cd0:	4718      	bx	r3
}
    2cd2:	bd70      	pop	{r4, r5, r6, pc}
    2cd4:	200009f8 	.word	0x200009f8
    2cd8:	00007a74 	.word	0x00007a74

00002cdc <clock_event_handler>:
	switch (event) {
    2cdc:	2801      	cmp	r0, #1
{
    2cde:	b508      	push	{r3, lr}
	switch (event) {
    2ce0:	d006      	beq.n	2cf0 <clock_event_handler+0x14>
    2ce2:	2803      	cmp	r0, #3
    2ce4:	d008      	beq.n	2cf8 <clock_event_handler+0x1c>
    2ce6:	b9a8      	cbnz	r0, 2d14 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2ce8:	4b10      	ldr	r3, [pc, #64]	; (2d2c <clock_event_handler+0x50>)
    2cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2cec:	075b      	lsls	r3, r3, #29
    2cee:	d11b      	bne.n	2d28 <clock_event_handler+0x4c>
}
    2cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2cf4:	f7ff bfd8 	b.w	2ca8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2cf8:	490d      	ldr	r1, [pc, #52]	; (2d30 <clock_event_handler+0x54>)
    2cfa:	4a0e      	ldr	r2, [pc, #56]	; (2d34 <clock_event_handler+0x58>)
    2cfc:	480e      	ldr	r0, [pc, #56]	; (2d38 <clock_event_handler+0x5c>)
    2cfe:	f240 235e 	movw	r3, #606	; 0x25e
    2d02:	f004 fbed 	bl	74e0 <printk>
    2d06:	f240 215e 	movw	r1, #606	; 0x25e
}
    2d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2d0e:	4809      	ldr	r0, [pc, #36]	; (2d34 <clock_event_handler+0x58>)
    2d10:	f004 bb12 	b.w	7338 <assert_post_action>
    2d14:	4906      	ldr	r1, [pc, #24]	; (2d30 <clock_event_handler+0x54>)
    2d16:	4a07      	ldr	r2, [pc, #28]	; (2d34 <clock_event_handler+0x58>)
    2d18:	4807      	ldr	r0, [pc, #28]	; (2d38 <clock_event_handler+0x5c>)
    2d1a:	f240 2362 	movw	r3, #610	; 0x262
    2d1e:	f004 fbdf 	bl	74e0 <printk>
    2d22:	f240 2162 	movw	r1, #610	; 0x262
    2d26:	e7f0      	b.n	2d0a <clock_event_handler+0x2e>
}
    2d28:	bd08      	pop	{r3, pc}
    2d2a:	bf00      	nop
    2d2c:	200009f8 	.word	0x200009f8
    2d30:	0000815f 	.word	0x0000815f
    2d34:	00008546 	.word	0x00008546
    2d38:	00008064 	.word	0x00008064

00002d3c <generic_hfclk_start>:
{
    2d3c:	b508      	push	{r3, lr}
	__asm__ volatile(
    2d3e:	f04f 0320 	mov.w	r3, #32
    2d42:	f3ef 8111 	mrs	r1, BASEPRI
    2d46:	f383 8812 	msr	BASEPRI_MAX, r3
    2d4a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2d4e:	4a12      	ldr	r2, [pc, #72]	; (2d98 <generic_hfclk_start+0x5c>)
    2d50:	6813      	ldr	r3, [r2, #0]
    2d52:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2d56:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2d5a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2d5c:	d00c      	beq.n	2d78 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d62:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d66:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2d6a:	f013 0301 	ands.w	r3, r3, #1
    2d6e:	d003      	beq.n	2d78 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2d70:	480a      	ldr	r0, [pc, #40]	; (2d9c <generic_hfclk_start+0x60>)
    2d72:	f004 fc5d 	bl	7630 <set_on_state>
			already_started = true;
    2d76:	2301      	movs	r3, #1
	__asm__ volatile(
    2d78:	f381 8811 	msr	BASEPRI, r1
    2d7c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2d80:	b123      	cbz	r3, 2d8c <generic_hfclk_start+0x50>
}
    2d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2d86:	2000      	movs	r0, #0
    2d88:	f7ff bf8e 	b.w	2ca8 <clkstarted_handle.constprop.0>
}
    2d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2d90:	2001      	movs	r0, #1
    2d92:	f000 bffd 	b.w	3d90 <nrfx_clock_start>
    2d96:	bf00      	nop
    2d98:	20000a50 	.word	0x20000a50
    2d9c:	20000a40 	.word	0x20000a40

00002da0 <generic_hfclk_stop>:
    2da0:	4b09      	ldr	r3, [pc, #36]	; (2dc8 <generic_hfclk_stop+0x28>)
    2da2:	f3bf 8f5b 	dmb	ish
    2da6:	e853 2f00 	ldrex	r2, [r3]
    2daa:	f022 0102 	bic.w	r1, r2, #2
    2dae:	e843 1000 	strex	r0, r1, [r3]
    2db2:	2800      	cmp	r0, #0
    2db4:	d1f7      	bne.n	2da6 <generic_hfclk_stop+0x6>
    2db6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2dba:	07d3      	lsls	r3, r2, #31
    2dbc:	d402      	bmi.n	2dc4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2dbe:	2001      	movs	r0, #1
    2dc0:	f001 b83a 	b.w	3e38 <nrfx_clock_stop>
}
    2dc4:	4770      	bx	lr
    2dc6:	bf00      	nop
    2dc8:	20000a50 	.word	0x20000a50

00002dcc <api_blocking_start>:
{
    2dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2dce:	2200      	movs	r2, #0
    2dd0:	2301      	movs	r3, #1
    2dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2dd6:	4a09      	ldr	r2, [pc, #36]	; (2dfc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2dd8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2ddc:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2dde:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2de2:	f004 fc4a 	bl	767a <api_start>
	if (err < 0) {
    2de6:	2800      	cmp	r0, #0
    2de8:	db05      	blt.n	2df6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2dee:	2300      	movs	r3, #0
    2df0:	4668      	mov	r0, sp
    2df2:	f003 fb75 	bl	64e0 <z_impl_k_sem_take>
}
    2df6:	b005      	add	sp, #20
    2df8:	f85d fb04 	ldr.w	pc, [sp], #4
    2dfc:	00007675 	.word	0x00007675

00002e00 <z_nrf_clock_control_lf_on>:
{
    2e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2e04:	4949      	ldr	r1, [pc, #292]	; (2f2c <z_nrf_clock_control_lf_on+0x12c>)
    2e06:	f3bf 8f5b 	dmb	ish
    2e0a:	4605      	mov	r5, r0
    2e0c:	2201      	movs	r2, #1
    2e0e:	e851 3f00 	ldrex	r3, [r1]
    2e12:	e841 2000 	strex	r0, r2, [r1]
    2e16:	2800      	cmp	r0, #0
    2e18:	d1f9      	bne.n	2e0e <z_nrf_clock_control_lf_on+0xe>
    2e1a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2e1e:	b9a3      	cbnz	r3, 2e4a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2e20:	4943      	ldr	r1, [pc, #268]	; (2f30 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    2e22:	4844      	ldr	r0, [pc, #272]	; (2f34 <z_nrf_clock_control_lf_on+0x134>)
    2e24:	604b      	str	r3, [r1, #4]
    2e26:	60cb      	str	r3, [r1, #12]
    2e28:	608a      	str	r2, [r1, #8]
    2e2a:	f7fe ff8f 	bl	1d4c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    2e2e:	2800      	cmp	r0, #0
    2e30:	da0b      	bge.n	2e4a <z_nrf_clock_control_lf_on+0x4a>
    2e32:	4941      	ldr	r1, [pc, #260]	; (2f38 <z_nrf_clock_control_lf_on+0x138>)
    2e34:	4841      	ldr	r0, [pc, #260]	; (2f3c <z_nrf_clock_control_lf_on+0x13c>)
    2e36:	4a42      	ldr	r2, [pc, #264]	; (2f40 <z_nrf_clock_control_lf_on+0x140>)
    2e38:	f44f 7308 	mov.w	r3, #544	; 0x220
    2e3c:	f004 fb50 	bl	74e0 <printk>
    2e40:	483f      	ldr	r0, [pc, #252]	; (2f40 <z_nrf_clock_control_lf_on+0x140>)
    2e42:	f44f 7108 	mov.w	r1, #544	; 0x220
    2e46:	f004 fa77 	bl	7338 <assert_post_action>
	switch (start_mode) {
    2e4a:	b3ad      	cbz	r5, 2eb8 <z_nrf_clock_control_lf_on+0xb8>
    2e4c:	1e6b      	subs	r3, r5, #1
    2e4e:	2b01      	cmp	r3, #1
    2e50:	d856      	bhi.n	2f00 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2e52:	2d01      	cmp	r5, #1
    2e54:	d107      	bne.n	2e66 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e5a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2e5e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2e62:	2b01      	cmp	r3, #1
    2e64:	d028      	beq.n	2eb8 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e66:	f004 fdbe 	bl	79e6 <k_is_in_isr>
    2e6a:	4604      	mov	r4, r0
    2e6c:	b918      	cbnz	r0, 2e76 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    2e6e:	4b35      	ldr	r3, [pc, #212]	; (2f44 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    2e70:	781b      	ldrb	r3, [r3, #0]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d152      	bne.n	2f1c <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    2e76:	f04f 0320 	mov.w	r3, #32
    2e7a:	f3ef 8611 	mrs	r6, BASEPRI
    2e7e:	f383 8812 	msr	BASEPRI_MAX, r3
    2e82:	f3bf 8f6f 	isb	sy
    2e86:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e88:	4f2f      	ldr	r7, [pc, #188]	; (2f48 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e8a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2f50 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e8e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 2f54 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e96:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e9a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2e9e:	03d2      	lsls	r2, r2, #15
    2ea0:	d50c      	bpl.n	2ebc <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2ea2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2ea6:	2b01      	cmp	r3, #1
    2ea8:	d001      	beq.n	2eae <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2eaa:	2d01      	cmp	r5, #1
    2eac:	d106      	bne.n	2ebc <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2eae:	b30c      	cbz	r4, 2ef4 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2eb0:	f386 8811 	msr	BASEPRI, r6
    2eb4:	f3bf 8f6f 	isb	sy
}
    2eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2ebc:	b1ac      	cbz	r4, 2eea <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2ebe:	4630      	mov	r0, r6
    2ec0:	f7ff f966 	bl	2190 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ec8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2ecc:	2b00      	cmp	r3, #0
    2ece:	d1e0      	bne.n	2e92 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ed0:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2ed2:	2900      	cmp	r1, #0
    2ed4:	d0dd      	beq.n	2e92 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ed6:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2ed8:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2eda:	2301      	movs	r3, #1
    2edc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2ee0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ee4:	f8c9 3000 	str.w	r3, [r9]
}
    2ee8:	e7d3      	b.n	2e92 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    2eea:	2100      	movs	r1, #0
    2eec:	2021      	movs	r0, #33	; 0x21
    2eee:	f003 f9c7 	bl	6280 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2ef2:	e7e7      	b.n	2ec4 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    2ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ef8:	2202      	movs	r2, #2
    2efa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2efe:	e7db      	b.n	2eb8 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2f00:	4912      	ldr	r1, [pc, #72]	; (2f4c <z_nrf_clock_control_lf_on+0x14c>)
    2f02:	480e      	ldr	r0, [pc, #56]	; (2f3c <z_nrf_clock_control_lf_on+0x13c>)
    2f04:	4a0e      	ldr	r2, [pc, #56]	; (2f40 <z_nrf_clock_control_lf_on+0x140>)
    2f06:	f240 2332 	movw	r3, #562	; 0x232
    2f0a:	f004 fae9 	bl	74e0 <printk>
}
    2f0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    2f12:	480b      	ldr	r0, [pc, #44]	; (2f40 <z_nrf_clock_control_lf_on+0x140>)
    2f14:	f240 2132 	movw	r1, #562	; 0x232
    2f18:	f004 ba0e 	b.w	7338 <assert_post_action>
    p_reg->INTENCLR = mask;
    2f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f20:	2202      	movs	r2, #2
    2f22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2f26:	4606      	mov	r6, r0
}
    2f28:	e7ae      	b.n	2e88 <z_nrf_clock_control_lf_on+0x88>
    2f2a:	bf00      	nop
    2f2c:	20000a54 	.word	0x20000a54
    2f30:	200009e8 	.word	0x200009e8
    2f34:	20000a18 	.word	0x20000a18
    2f38:	000085a7 	.word	0x000085a7
    2f3c:	00008064 	.word	0x00008064
    2f40:	00008546 	.word	0x00008546
    2f44:	20000fa1 	.word	0x20000fa1
    2f48:	40000104 	.word	0x40000104
    2f4c:	0000815f 	.word	0x0000815f
    2f50:	e000e100 	.word	0xe000e100
    2f54:	40000008 	.word	0x40000008

00002f58 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2f58:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2f5a:	4b08      	ldr	r3, [pc, #32]	; (2f7c <uart_console_init+0x24>)
    2f5c:	4808      	ldr	r0, [pc, #32]	; (2f80 <uart_console_init+0x28>)
    2f5e:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2f60:	f004 fce1 	bl	7926 <z_device_ready>
    2f64:	b138      	cbz	r0, 2f76 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2f66:	4807      	ldr	r0, [pc, #28]	; (2f84 <uart_console_init+0x2c>)
    2f68:	f7ff fd70 	bl	2a4c <__stdout_hook_install>
	__printk_hook_install(console_out);
    2f6c:	4805      	ldr	r0, [pc, #20]	; (2f84 <uart_console_init+0x2c>)
    2f6e:	f7ff f8d3 	bl	2118 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2f72:	2000      	movs	r0, #0
}
    2f74:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2f76:	f06f 0012 	mvn.w	r0, #18
    2f7a:	e7fb      	b.n	2f74 <uart_console_init+0x1c>
    2f7c:	20000a58 	.word	0x20000a58
    2f80:	00007ad4 	.word	0x00007ad4
    2f84:	00002f89 	.word	0x00002f89

00002f88 <console_out>:
	if ('\n' == c) {
    2f88:	280a      	cmp	r0, #10
{
    2f8a:	b538      	push	{r3, r4, r5, lr}
    2f8c:	4d07      	ldr	r5, [pc, #28]	; (2fac <console_out+0x24>)
    2f8e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2f90:	d104      	bne.n	2f9c <console_out+0x14>
    2f92:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2f94:	6883      	ldr	r3, [r0, #8]
    2f96:	210d      	movs	r1, #13
    2f98:	685b      	ldr	r3, [r3, #4]
    2f9a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2f9c:	6828      	ldr	r0, [r5, #0]
    2f9e:	6883      	ldr	r3, [r0, #8]
    2fa0:	b2e1      	uxtb	r1, r4
    2fa2:	685b      	ldr	r3, [r3, #4]
    2fa4:	4798      	blx	r3
}
    2fa6:	4620      	mov	r0, r4
    2fa8:	bd38      	pop	{r3, r4, r5, pc}
    2faa:	bf00      	nop
    2fac:	20000a58 	.word	0x20000a58

00002fb0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2fb0:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2fb2:	6905      	ldr	r5, [r0, #16]
{
    2fb4:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2fb6:	460c      	mov	r4, r1
    2fb8:	b961      	cbnz	r1, 2fd4 <gpio_nrfx_manage_callback+0x24>
    2fba:	4922      	ldr	r1, [pc, #136]	; (3044 <gpio_nrfx_manage_callback+0x94>)
    2fbc:	4a22      	ldr	r2, [pc, #136]	; (3048 <gpio_nrfx_manage_callback+0x98>)
    2fbe:	4823      	ldr	r0, [pc, #140]	; (304c <gpio_nrfx_manage_callback+0x9c>)
    2fc0:	2324      	movs	r3, #36	; 0x24
    2fc2:	f004 fa8d 	bl	74e0 <printk>
    2fc6:	4822      	ldr	r0, [pc, #136]	; (3050 <gpio_nrfx_manage_callback+0xa0>)
    2fc8:	f004 fa8a 	bl	74e0 <printk>
    2fcc:	481e      	ldr	r0, [pc, #120]	; (3048 <gpio_nrfx_manage_callback+0x98>)
    2fce:	2124      	movs	r1, #36	; 0x24
    2fd0:	f004 f9b2 	bl	7338 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2fd4:	6863      	ldr	r3, [r4, #4]
    2fd6:	b963      	cbnz	r3, 2ff2 <gpio_nrfx_manage_callback+0x42>
    2fd8:	491e      	ldr	r1, [pc, #120]	; (3054 <gpio_nrfx_manage_callback+0xa4>)
    2fda:	4a1b      	ldr	r2, [pc, #108]	; (3048 <gpio_nrfx_manage_callback+0x98>)
    2fdc:	481b      	ldr	r0, [pc, #108]	; (304c <gpio_nrfx_manage_callback+0x9c>)
    2fde:	2325      	movs	r3, #37	; 0x25
    2fe0:	f004 fa7e 	bl	74e0 <printk>
    2fe4:	481c      	ldr	r0, [pc, #112]	; (3058 <gpio_nrfx_manage_callback+0xa8>)
    2fe6:	f004 fa7b 	bl	74e0 <printk>
    2fea:	4817      	ldr	r0, [pc, #92]	; (3048 <gpio_nrfx_manage_callback+0x98>)
    2fec:	2125      	movs	r1, #37	; 0x25
    2fee:	f004 f9a3 	bl	7338 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2ff2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2ff4:	b15b      	cbz	r3, 300e <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    2ff6:	2200      	movs	r2, #0
    2ff8:	429c      	cmp	r4, r3
    2ffa:	d113      	bne.n	3024 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2ffc:	6823      	ldr	r3, [r4, #0]
    2ffe:	b95a      	cbnz	r2, 3018 <gpio_nrfx_manage_callback+0x68>
    3000:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    3002:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3004:	4294      	cmp	r4, r2
    3006:	d100      	bne.n	300a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    3008:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    300a:	2300      	movs	r3, #0
    300c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    300e:	b976      	cbnz	r6, 302e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3010:	2000      	movs	r0, #0
				     callback, set);
}
    3012:	bd70      	pop	{r4, r5, r6, pc}
    3014:	460b      	mov	r3, r1
    3016:	e7ef      	b.n	2ff8 <gpio_nrfx_manage_callback+0x48>
    3018:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    301a:	68ab      	ldr	r3, [r5, #8]
    301c:	429c      	cmp	r4, r3
	list->tail = node;
    301e:	bf08      	it	eq
    3020:	60aa      	streq	r2, [r5, #8]
}
    3022:	e7f2      	b.n	300a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3024:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3026:	461a      	mov	r2, r3
    3028:	2900      	cmp	r1, #0
    302a:	d1f3      	bne.n	3014 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    302c:	b13e      	cbz	r6, 303e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    302e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    3030:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    3032:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    3034:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3036:	2800      	cmp	r0, #0
    3038:	d1ea      	bne.n	3010 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    303a:	60ac      	str	r4, [r5, #8]
}
    303c:	e7e9      	b.n	3012 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    303e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3042:	e7e6      	b.n	3012 <gpio_nrfx_manage_callback+0x62>
    3044:	000085e3 	.word	0x000085e3
    3048:	000085b6 	.word	0x000085b6
    304c:	00008064 	.word	0x00008064
    3050:	000085ec 	.word	0x000085ec
    3054:	000085fb 	.word	0x000085fb
    3058:	0000860d 	.word	0x0000860d

0000305c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    305c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    305e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3062:	d003      	beq.n	306c <nrfx_gpio_handler+0x10>
    3064:	2b01      	cmp	r3, #1
    3066:	d036      	beq.n	30d6 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    306c:	4f1b      	ldr	r7, [pc, #108]	; (30dc <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    306e:	693b      	ldr	r3, [r7, #16]
    3070:	685c      	ldr	r4, [r3, #4]
    3072:	2c00      	cmp	r4, #0
    3074:	d0f8      	beq.n	3068 <nrfx_gpio_handler+0xc>
    3076:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3078:	f8df 806c 	ldr.w	r8, [pc, #108]	; 30e8 <nrfx_gpio_handler+0x8c>
    307c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 30ec <nrfx_gpio_handler+0x90>
    3080:	f8df a06c 	ldr.w	sl, [pc, #108]	; 30f0 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3084:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3088:	2601      	movs	r6, #1
    308a:	2d00      	cmp	r5, #0
    308c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3090:	bf38      	it	cc
    3092:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3094:	68a3      	ldr	r3, [r4, #8]
    3096:	421e      	tst	r6, r3
    3098:	d014      	beq.n	30c4 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    309a:	6863      	ldr	r3, [r4, #4]
    309c:	b963      	cbnz	r3, 30b8 <nrfx_gpio_handler+0x5c>
    309e:	4649      	mov	r1, r9
    30a0:	2345      	movs	r3, #69	; 0x45
    30a2:	4642      	mov	r2, r8
    30a4:	4650      	mov	r0, sl
    30a6:	f004 fa1b 	bl	74e0 <printk>
    30aa:	480d      	ldr	r0, [pc, #52]	; (30e0 <nrfx_gpio_handler+0x84>)
    30ac:	f004 fa18 	bl	74e0 <printk>
    30b0:	2145      	movs	r1, #69	; 0x45
    30b2:	4640      	mov	r0, r8
    30b4:	f004 f940 	bl	7338 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    30b8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    30bc:	4621      	mov	r1, r4
    30be:	4032      	ands	r2, r6
    30c0:	4638      	mov	r0, r7
    30c2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    30c4:	2d00      	cmp	r5, #0
    30c6:	d0cf      	beq.n	3068 <nrfx_gpio_handler+0xc>
    30c8:	682b      	ldr	r3, [r5, #0]
    30ca:	2b00      	cmp	r3, #0
    30cc:	bf38      	it	cc
    30ce:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    30d0:	462c      	mov	r4, r5
    30d2:	461d      	mov	r5, r3
    30d4:	e7de      	b.n	3094 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    30d6:	4f03      	ldr	r7, [pc, #12]	; (30e4 <nrfx_gpio_handler+0x88>)
    30d8:	e7c9      	b.n	306e <nrfx_gpio_handler+0x12>
    30da:	bf00      	nop
    30dc:	00007a8c 	.word	0x00007a8c
    30e0:	0000860d 	.word	0x0000860d
    30e4:	00007aa4 	.word	0x00007aa4
    30e8:	000085b6 	.word	0x000085b6
    30ec:	00008624 	.word	0x00008624
    30f0:	00008064 	.word	0x00008064

000030f4 <gpio_nrfx_pin_interrupt_configure>:
{
    30f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    30f6:	6840      	ldr	r0, [r0, #4]
    30f8:	7b05      	ldrb	r5, [r0, #12]
    30fa:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    30fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3102:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3106:	f04f 0500 	mov.w	r5, #0
    310a:	d104      	bne.n	3116 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    310c:	4620      	mov	r0, r4
    310e:	f001 fa2b 	bl	4568 <nrfx_gpiote_trigger_disable>
	return 0;
    3112:	2000      	movs	r0, #0
    3114:	e054      	b.n	31c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3116:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    311a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    311e:	d151      	bne.n	31c4 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3124:	bf0c      	ite	eq
    3126:	2304      	moveq	r3, #4
    3128:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    312a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    312e:	6883      	ldr	r3, [r0, #8]
    3130:	fa23 f101 	lsr.w	r1, r3, r1
    3134:	f011 0101 	ands.w	r1, r1, #1
    3138:	d155      	bne.n	31e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    313a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    313e:	d152      	bne.n	31e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    3140:	0966      	lsrs	r6, r4, #5
    3142:	d04a      	beq.n	31da <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    3144:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3148:	2e01      	cmp	r6, #1
    314a:	bf08      	it	eq
    314c:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    314e:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3152:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3154:	07ca      	lsls	r2, r1, #31
    3156:	d40b      	bmi.n	3170 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3158:	492b      	ldr	r1, [pc, #172]	; (3208 <gpio_nrfx_pin_interrupt_configure+0x114>)
    315a:	482c      	ldr	r0, [pc, #176]	; (320c <gpio_nrfx_pin_interrupt_configure+0x118>)
    315c:	4a2c      	ldr	r2, [pc, #176]	; (3210 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    315e:	f240 2329 	movw	r3, #553	; 0x229
    3162:	f004 f9bd 	bl	74e0 <printk>
    3166:	482a      	ldr	r0, [pc, #168]	; (3210 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3168:	f240 2129 	movw	r1, #553	; 0x229
    316c:	f004 f8e4 	bl	7338 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3170:	b16e      	cbz	r6, 318e <gpio_nrfx_pin_interrupt_configure+0x9a>
    3172:	2e01      	cmp	r6, #1
    3174:	d034      	beq.n	31e0 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    3176:	4927      	ldr	r1, [pc, #156]	; (3214 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3178:	4824      	ldr	r0, [pc, #144]	; (320c <gpio_nrfx_pin_interrupt_configure+0x118>)
    317a:	4a25      	ldr	r2, [pc, #148]	; (3210 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    317c:	f240 232e 	movw	r3, #558	; 0x22e
    3180:	f004 f9ae 	bl	74e0 <printk>
    3184:	4822      	ldr	r0, [pc, #136]	; (3210 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3186:	f240 212e 	movw	r1, #558	; 0x22e
    318a:	f004 f8d5 	bl	7338 <assert_post_action>
        case 0: return NRF_P0;
    318e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3192:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3196:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    319a:	07db      	lsls	r3, r3, #31
    319c:	d423      	bmi.n	31e6 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    319e:	f10d 0507 	add.w	r5, sp, #7
    31a2:	4629      	mov	r1, r5
    31a4:	4620      	mov	r0, r4
    31a6:	f001 f909 	bl	43bc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    31aa:	4b1b      	ldr	r3, [pc, #108]	; (3218 <gpio_nrfx_pin_interrupt_configure+0x124>)
    31ac:	4298      	cmp	r0, r3
    31ae:	d119      	bne.n	31e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    31b0:	4628      	mov	r0, r5
    31b2:	f001 f963 	bl	447c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    31b6:	4b19      	ldr	r3, [pc, #100]	; (321c <gpio_nrfx_pin_interrupt_configure+0x128>)
    31b8:	4298      	cmp	r0, r3
    31ba:	d013      	beq.n	31e4 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    31bc:	f06f 000b 	mvn.w	r0, #11
}
    31c0:	b004      	add	sp, #16
    31c2:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    31c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    31c8:	d005      	beq.n	31d6 <gpio_nrfx_pin_interrupt_configure+0xe2>
    31ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    31ce:	bf0c      	ite	eq
    31d0:	2302      	moveq	r3, #2
    31d2:	2301      	movne	r3, #1
    31d4:	e7a9      	b.n	312a <gpio_nrfx_pin_interrupt_configure+0x36>
    31d6:	2303      	movs	r3, #3
    31d8:	e7a7      	b.n	312a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    31da:	f04f 31ff 	mov.w	r1, #4294967295
    31de:	e7b6      	b.n	314e <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31e0:	4b0f      	ldr	r3, [pc, #60]	; (3220 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    31e2:	e7d6      	b.n	3192 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    31e4:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    31e6:	2300      	movs	r3, #0
    31e8:	4619      	mov	r1, r3
    31ea:	aa02      	add	r2, sp, #8
    31ec:	4620      	mov	r0, r4
    31ee:	f000 ffc7 	bl	4180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    31f2:	4b0a      	ldr	r3, [pc, #40]	; (321c <gpio_nrfx_pin_interrupt_configure+0x128>)
    31f4:	4298      	cmp	r0, r3
    31f6:	d104      	bne.n	3202 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    31f8:	2101      	movs	r1, #1
    31fa:	4620      	mov	r0, r4
    31fc:	f001 f944 	bl	4488 <nrfx_gpiote_trigger_enable>
    3200:	e787      	b.n	3112 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3202:	f06f 0004 	mvn.w	r0, #4
    3206:	e7db      	b.n	31c0 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3208:	00008663 	.word	0x00008663
    320c:	00008064 	.word	0x00008064
    3210:	00008630 	.word	0x00008630
    3214:	0000815f 	.word	0x0000815f
    3218:	0bad0004 	.word	0x0bad0004
    321c:	0bad0000 	.word	0x0bad0000
    3220:	50000300 	.word	0x50000300

00003224 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3224:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3226:	f001 f919 	bl	445c <nrfx_gpiote_is_init>
    322a:	4604      	mov	r4, r0
    322c:	b968      	cbnz	r0, 324a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    322e:	f001 f8ed 	bl	440c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3232:	4b08      	ldr	r3, [pc, #32]	; (3254 <gpio_nrfx_init+0x30>)
    3234:	4298      	cmp	r0, r3
    3236:	d10a      	bne.n	324e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3238:	4807      	ldr	r0, [pc, #28]	; (3258 <gpio_nrfx_init+0x34>)
    323a:	4621      	mov	r1, r4
    323c:	f001 f8b8 	bl	43b0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3240:	4622      	mov	r2, r4
    3242:	2105      	movs	r1, #5
    3244:	2006      	movs	r0, #6
    3246:	f7ff f829 	bl	229c <z_arm_irq_priority_set>
		return 0;
    324a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    324c:	bd10      	pop	{r4, pc}
		return -EIO;
    324e:	f06f 0004 	mvn.w	r0, #4
    3252:	e7fb      	b.n	324c <gpio_nrfx_init+0x28>
    3254:	0bad0000 	.word	0x0bad0000
    3258:	0000305d 	.word	0x0000305d

0000325c <gpio_nrfx_pin_configure>:
{
    325c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3260:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3262:	7b3b      	ldrb	r3, [r7, #12]
    3264:	f001 051f 	and.w	r5, r1, #31
{
    3268:	b085      	sub	sp, #20
    326a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    326c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3270:	4614      	mov	r4, r2
    3272:	b9ca      	cbnz	r2, 32a8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3274:	a902      	add	r1, sp, #8
    3276:	4628      	mov	r0, r5
    3278:	f001 f8a0 	bl	43bc <nrfx_gpiote_channel_get>
    327c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    327e:	4628      	mov	r0, r5
    3280:	f001 f994 	bl	45ac <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3284:	4b48      	ldr	r3, [pc, #288]	; (33a8 <gpio_nrfx_pin_configure+0x14c>)
    3286:	4298      	cmp	r0, r3
    3288:	d004      	beq.n	3294 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    328a:	f06f 0004 	mvn.w	r0, #4
}
    328e:	b005      	add	sp, #20
    3290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3294:	4284      	cmp	r4, r0
    3296:	d105      	bne.n	32a4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3298:	f89d 0008 	ldrb.w	r0, [sp, #8]
    329c:	f001 f8e8 	bl	4470 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    32a0:	42a0      	cmp	r0, r4
    32a2:	d1f2      	bne.n	328a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    32a4:	2000      	movs	r0, #0
    32a6:	e7f2      	b.n	328e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    32a8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    32ac:	f10d 0103 	add.w	r1, sp, #3
    32b0:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    32b2:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    32b6:	f001 f881 	bl	43bc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    32ba:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    32bc:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    32be:	aa02      	add	r2, sp, #8
    32c0:	4649      	mov	r1, r9
    32c2:	4628      	mov	r0, r5
    32c4:	f000 ff5c 	bl	4180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    32c8:	4b37      	ldr	r3, [pc, #220]	; (33a8 <gpio_nrfx_pin_configure+0x14c>)
    32ca:	4298      	cmp	r0, r3
    32cc:	d002      	beq.n	32d4 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    32ce:	f06f 0015 	mvn.w	r0, #21
    32d2:	e7dc      	b.n	328e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    32d4:	4580      	cmp	r8, r0
    32d6:	d103      	bne.n	32e0 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    32d8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    32dc:	f001 f8c8 	bl	4470 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    32e0:	05a3      	lsls	r3, r4, #22
    32e2:	d54e      	bpl.n	3382 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    32e4:	4b31      	ldr	r3, [pc, #196]	; (33ac <gpio_nrfx_pin_configure+0x150>)
    32e6:	4a32      	ldr	r2, [pc, #200]	; (33b0 <gpio_nrfx_pin_configure+0x154>)
    32e8:	4023      	ands	r3, r4
    32ea:	4293      	cmp	r3, r2
    32ec:	d03a      	beq.n	3364 <gpio_nrfx_pin_configure+0x108>
    32ee:	d80c      	bhi.n	330a <gpio_nrfx_pin_configure+0xae>
    32f0:	2b06      	cmp	r3, #6
    32f2:	d014      	beq.n	331e <gpio_nrfx_pin_configure+0xc2>
    32f4:	d804      	bhi.n	3300 <gpio_nrfx_pin_configure+0xa4>
    32f6:	b193      	cbz	r3, 331e <gpio_nrfx_pin_configure+0xc2>
    32f8:	2b02      	cmp	r3, #2
    32fa:	d1e8      	bne.n	32ce <gpio_nrfx_pin_configure+0x72>
    32fc:	2304      	movs	r3, #4
    32fe:	e00e      	b.n	331e <gpio_nrfx_pin_configure+0xc2>
    3300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3304:	d1e3      	bne.n	32ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3306:	2301      	movs	r3, #1
    3308:	e009      	b.n	331e <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    330a:	4a2a      	ldr	r2, [pc, #168]	; (33b4 <gpio_nrfx_pin_configure+0x158>)
    330c:	4293      	cmp	r3, r2
    330e:	d02b      	beq.n	3368 <gpio_nrfx_pin_configure+0x10c>
    3310:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3314:	d02a      	beq.n	336c <gpio_nrfx_pin_configure+0x110>
    3316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    331a:	d1d8      	bne.n	32ce <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    331c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    331e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3322:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3326:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    332a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    332c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3330:	bf54      	ite	pl
    3332:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3336:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3338:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    333a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    333e:	d517      	bpl.n	3370 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	2101      	movs	r1, #1
    3344:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3348:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    334c:	2200      	movs	r2, #0
    334e:	a901      	add	r1, sp, #4
    3350:	4628      	mov	r0, r5
    3352:	f000 ffbd 	bl	42d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3356:	4b14      	ldr	r3, [pc, #80]	; (33a8 <gpio_nrfx_pin_configure+0x14c>)
    3358:	4298      	cmp	r0, r3
    335a:	bf14      	ite	ne
    335c:	f06f 0015 	mvnne.w	r0, #21
    3360:	2000      	moveq	r0, #0
    3362:	e794      	b.n	328e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3364:	2307      	movs	r3, #7
    3366:	e7da      	b.n	331e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3368:	2305      	movs	r3, #5
    336a:	e7d8      	b.n	331e <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    336c:	2303      	movs	r3, #3
    336e:	e7d6      	b.n	331e <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3370:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3372:	bf41      	itttt	mi
    3374:	687b      	ldrmi	r3, [r7, #4]
    3376:	2101      	movmi	r1, #1
    3378:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    337c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3380:	e7e4      	b.n	334c <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3382:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3384:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3388:	bf54      	ite	pl
    338a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    338e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3390:	461a      	mov	r2, r3
    3392:	a901      	add	r1, sp, #4
    3394:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3396:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    339a:	f000 fef1 	bl	4180 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    339e:	4b02      	ldr	r3, [pc, #8]	; (33a8 <gpio_nrfx_pin_configure+0x14c>)
    33a0:	4298      	cmp	r0, r3
    33a2:	f43f af7f 	beq.w	32a4 <gpio_nrfx_pin_configure+0x48>
    33a6:	e792      	b.n	32ce <gpio_nrfx_pin_configure+0x72>
    33a8:	0bad0000 	.word	0x0bad0000
    33ac:	00f00006 	.word	0x00f00006
    33b0:	00100006 	.word	0x00100006
    33b4:	00400002 	.word	0x00400002

000033b8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    33ba:	794b      	ldrb	r3, [r1, #5]
    33bc:	2b01      	cmp	r3, #1
    33be:	d026      	beq.n	340e <uarte_nrfx_configure+0x56>
    33c0:	2b03      	cmp	r3, #3
    33c2:	d121      	bne.n	3408 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    33c4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    33c6:	798b      	ldrb	r3, [r1, #6]
    33c8:	2b03      	cmp	r3, #3
    33ca:	d11d      	bne.n	3408 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    33cc:	79cc      	ldrb	r4, [r1, #7]
    33ce:	b10c      	cbz	r4, 33d4 <uarte_nrfx_configure+0x1c>
    33d0:	2c01      	cmp	r4, #1
    33d2:	d119      	bne.n	3408 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    33d4:	790a      	ldrb	r2, [r1, #4]
    33d6:	b112      	cbz	r2, 33de <uarte_nrfx_configure+0x26>
    33d8:	2a02      	cmp	r2, #2
    33da:	d115      	bne.n	3408 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    33dc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    33de:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    33e0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    33e2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    33e6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    33e8:	d065      	beq.n	34b6 <uarte_nrfx_configure+0xfe>
    33ea:	d82d      	bhi.n	3448 <uarte_nrfx_configure+0x90>
    33ec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    33f0:	d064      	beq.n	34bc <uarte_nrfx_configure+0x104>
    33f2:	d816      	bhi.n	3422 <uarte_nrfx_configure+0x6a>
    33f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    33f8:	d062      	beq.n	34c0 <uarte_nrfx_configure+0x108>
    33fa:	d80a      	bhi.n	3412 <uarte_nrfx_configure+0x5a>
    33fc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3400:	d061      	beq.n	34c6 <uarte_nrfx_configure+0x10e>
    3402:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3406:	d061      	beq.n	34cc <uarte_nrfx_configure+0x114>
    3408:	f06f 0085 	mvn.w	r0, #133	; 0x85
    340c:	e052      	b.n	34b4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    340e:	2600      	movs	r6, #0
    3410:	e7d9      	b.n	33c6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3412:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3416:	d05c      	beq.n	34d2 <uarte_nrfx_configure+0x11a>
    3418:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    341c:	d1f4      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    341e:	4b37      	ldr	r3, [pc, #220]	; (34fc <uarte_nrfx_configure+0x144>)
    3420:	e03c      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3422:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3426:	d057      	beq.n	34d8 <uarte_nrfx_configure+0x120>
    3428:	d807      	bhi.n	343a <uarte_nrfx_configure+0x82>
    342a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    342e:	d055      	beq.n	34dc <uarte_nrfx_configure+0x124>
    3430:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3434:	d1e8      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3436:	4b32      	ldr	r3, [pc, #200]	; (3500 <uarte_nrfx_configure+0x148>)
    3438:	e030      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    343a:	f647 2712 	movw	r7, #31250	; 0x7a12
    343e:	42bb      	cmp	r3, r7
    3440:	d1e2      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3442:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3446:	e029      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3448:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    344c:	d048      	beq.n	34e0 <uarte_nrfx_configure+0x128>
    344e:	d813      	bhi.n	3478 <uarte_nrfx_configure+0xc0>
    3450:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3454:	d047      	beq.n	34e6 <uarte_nrfx_configure+0x12e>
    3456:	d809      	bhi.n	346c <uarte_nrfx_configure+0xb4>
    3458:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    345c:	42bb      	cmp	r3, r7
    345e:	d044      	beq.n	34ea <uarte_nrfx_configure+0x132>
    3460:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3464:	d1d0      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3466:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    346a:	e017      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    346c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3470:	d1ca      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3472:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3476:	e011      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3478:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    347c:	d038      	beq.n	34f0 <uarte_nrfx_configure+0x138>
    347e:	d808      	bhi.n	3492 <uarte_nrfx_configure+0xda>
    3480:	4f20      	ldr	r7, [pc, #128]	; (3504 <uarte_nrfx_configure+0x14c>)
    3482:	42bb      	cmp	r3, r7
    3484:	d037      	beq.n	34f6 <uarte_nrfx_configure+0x13e>
    3486:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    348a:	d1bd      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    348c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3490:	e004      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3492:	4f1d      	ldr	r7, [pc, #116]	; (3508 <uarte_nrfx_configure+0x150>)
    3494:	42bb      	cmp	r3, r7
    3496:	d1b7      	bne.n	3408 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    349c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    34a0:	6903      	ldr	r3, [r0, #16]
    34a2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    34a4:	4334      	orrs	r4, r6
    34a6:	4322      	orrs	r2, r4
    34a8:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    34aa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    34ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    34b2:	2000      	movs	r0, #0
}
    34b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    34b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    34ba:	e7ef      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    34bc:	4b13      	ldr	r3, [pc, #76]	; (350c <uarte_nrfx_configure+0x154>)
    34be:	e7ed      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    34c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    34c4:	e7ea      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    34c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    34ca:	e7e7      	b.n	349c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    34cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    34d0:	e7e4      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    34d2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    34d6:	e7e1      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    34d8:	4b0d      	ldr	r3, [pc, #52]	; (3510 <uarte_nrfx_configure+0x158>)
    34da:	e7df      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    34dc:	4b0d      	ldr	r3, [pc, #52]	; (3514 <uarte_nrfx_configure+0x15c>)
    34de:	e7dd      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    34e0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    34e4:	e7da      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    34e6:	4b0c      	ldr	r3, [pc, #48]	; (3518 <uarte_nrfx_configure+0x160>)
    34e8:	e7d8      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    34ea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    34ee:	e7d5      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    34f0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    34f4:	e7d2      	b.n	349c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    34f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    34fa:	e7cf      	b.n	349c <uarte_nrfx_configure+0xe4>
    34fc:	0013b000 	.word	0x0013b000
    3500:	004ea000 	.word	0x004ea000
    3504:	0003d090 	.word	0x0003d090
    3508:	000f4240 	.word	0x000f4240
    350c:	00275000 	.word	0x00275000
    3510:	0075c000 	.word	0x0075c000
    3514:	003af000 	.word	0x003af000
    3518:	013a9000 	.word	0x013a9000

0000351c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    351c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    351e:	0953      	lsrs	r3, r2, #5
{
    3520:	b510      	push	{r4, lr}
    3522:	4604      	mov	r4, r0
    switch (port)
    3524:	d02c      	beq.n	3580 <nrf_gpio_pin_port_decode+0x64>
    3526:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3528:	f64f 73ff 	movw	r3, #65535	; 0xffff
    352c:	bf18      	it	ne
    352e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3530:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3534:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3536:	07db      	lsls	r3, r3, #31
    3538:	d40b      	bmi.n	3552 <nrf_gpio_pin_port_decode+0x36>
    353a:	4914      	ldr	r1, [pc, #80]	; (358c <nrf_gpio_pin_port_decode+0x70>)
    353c:	4814      	ldr	r0, [pc, #80]	; (3590 <nrf_gpio_pin_port_decode+0x74>)
    353e:	4a15      	ldr	r2, [pc, #84]	; (3594 <nrf_gpio_pin_port_decode+0x78>)
    3540:	f240 2329 	movw	r3, #553	; 0x229
    3544:	f003 ffcc 	bl	74e0 <printk>
    3548:	4812      	ldr	r0, [pc, #72]	; (3594 <nrf_gpio_pin_port_decode+0x78>)
    354a:	f240 2129 	movw	r1, #553	; 0x229
    354e:	f003 fef3 	bl	7338 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3552:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3554:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3558:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    355a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    355c:	d00d      	beq.n	357a <nrf_gpio_pin_port_decode+0x5e>
    355e:	2b01      	cmp	r3, #1
    3560:	d011      	beq.n	3586 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3562:	490d      	ldr	r1, [pc, #52]	; (3598 <nrf_gpio_pin_port_decode+0x7c>)
    3564:	480a      	ldr	r0, [pc, #40]	; (3590 <nrf_gpio_pin_port_decode+0x74>)
    3566:	4a0b      	ldr	r2, [pc, #44]	; (3594 <nrf_gpio_pin_port_decode+0x78>)
    3568:	f240 232e 	movw	r3, #558	; 0x22e
    356c:	f003 ffb8 	bl	74e0 <printk>
    3570:	4808      	ldr	r0, [pc, #32]	; (3594 <nrf_gpio_pin_port_decode+0x78>)
    3572:	f240 212e 	movw	r1, #558	; 0x22e
    3576:	f003 fedf 	bl	7338 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    357a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    357e:	bd10      	pop	{r4, pc}
    switch (port)
    3580:	f04f 33ff 	mov.w	r3, #4294967295
    3584:	e7d4      	b.n	3530 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3586:	4805      	ldr	r0, [pc, #20]	; (359c <nrf_gpio_pin_port_decode+0x80>)
    3588:	e7f9      	b.n	357e <nrf_gpio_pin_port_decode+0x62>
    358a:	bf00      	nop
    358c:	00008663 	.word	0x00008663
    3590:	00008064 	.word	0x00008064
    3594:	00008630 	.word	0x00008630
    3598:	0000815f 	.word	0x0000815f
    359c:	50000300 	.word	0x50000300

000035a0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    35a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    35a2:	6906      	ldr	r6, [r0, #16]
{
    35a4:	4605      	mov	r5, r0
    35a6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    35a8:	f004 fa1d 	bl	79e6 <k_is_in_isr>
    35ac:	b910      	cbnz	r0, 35b4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    35ae:	4b2c      	ldr	r3, [pc, #176]	; (3660 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	b983      	cbnz	r3, 35d6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    35b4:	f04f 0320 	mov.w	r3, #32
    35b8:	f3ef 8411 	mrs	r4, BASEPRI
    35bc:	f383 8812 	msr	BASEPRI_MAX, r3
    35c0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    35c4:	4628      	mov	r0, r5
    35c6:	f004 f8e3 	bl	7790 <is_tx_ready>
    35ca:	bb28      	cbnz	r0, 3618 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    35cc:	f384 8811 	msr	BASEPRI, r4
    35d0:	f3bf 8f6f 	isb	sy
}
    35d4:	e7ee      	b.n	35b4 <uarte_nrfx_poll_out+0x14>
{
    35d6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    35d8:	4628      	mov	r0, r5
    35da:	f004 f8d9 	bl	7790 <is_tx_ready>
    35de:	b970      	cbnz	r0, 35fe <uarte_nrfx_poll_out+0x5e>
    35e0:	2001      	movs	r0, #1
    35e2:	f004 f927 	bl	7834 <nrfx_busy_wait>
    35e6:	3c01      	subs	r4, #1
    35e8:	d1f6      	bne.n	35d8 <uarte_nrfx_poll_out+0x38>
    35ea:	2100      	movs	r1, #0
    35ec:	2021      	movs	r0, #33	; 0x21
    35ee:	f002 fe47 	bl	6280 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    35f2:	e7f0      	b.n	35d6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    35f4:	f384 8811 	msr	BASEPRI, r4
    35f8:	f3bf 8f6f 	isb	sy
}
    35fc:	e7f5      	b.n	35ea <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    35fe:	f04f 0320 	mov.w	r3, #32
    3602:	f3ef 8411 	mrs	r4, BASEPRI
    3606:	f383 8812 	msr	BASEPRI_MAX, r3
    360a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    360e:	4628      	mov	r0, r5
    3610:	f004 f8be 	bl	7790 <is_tx_ready>
    3614:	2800      	cmp	r0, #0
    3616:	d0ed      	beq.n	35f4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3618:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    361c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    361e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3620:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3622:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3626:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    362a:	2200      	movs	r2, #0
    362c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3630:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3634:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3638:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    363c:	684a      	ldr	r2, [r1, #4]
    363e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3640:	bf41      	itttt	mi
    3642:	2208      	movmi	r2, #8
    3644:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3648:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    364c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3650:	2201      	movs	r2, #1
    3652:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3654:	f384 8811 	msr	BASEPRI, r4
    3658:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    365e:	bf00      	nop
    3660:	20000fa1 	.word	0x20000fa1

00003664 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3668:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    366c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    366e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3672:	2300      	movs	r3, #0
    3674:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3678:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    367a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    367c:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    367e:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3680:	1c58      	adds	r0, r3, #1
    3682:	d013      	beq.n	36ac <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3684:	a801      	add	r0, sp, #4
    3686:	9301      	str	r3, [sp, #4]
    3688:	f7ff ff48 	bl	351c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    368c:	9a01      	ldr	r2, [sp, #4]
    368e:	2301      	movs	r3, #1
    3690:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3692:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3696:	68eb      	ldr	r3, [r5, #12]
    3698:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    369a:	a801      	add	r0, sp, #4
    369c:	f7ff ff3e 	bl	351c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36a6:	2203      	movs	r2, #3
    36a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36ac:	692b      	ldr	r3, [r5, #16]
    36ae:	1c59      	adds	r1, r3, #1
    36b0:	d011      	beq.n	36d6 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    36b2:	7f2a      	ldrb	r2, [r5, #28]
    36b4:	9301      	str	r3, [sp, #4]
    36b6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36b8:	a801      	add	r0, sp, #4
    36ba:	bf14      	ite	ne
    36bc:	f04f 0903 	movne.w	r9, #3
    36c0:	f04f 0900 	moveq.w	r9, #0
    36c4:	f7ff ff2a 	bl	351c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36c8:	9b01      	ldr	r3, [sp, #4]
    36ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    36ce:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    36d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    36d6:	696b      	ldr	r3, [r5, #20]
    36d8:	1c5a      	adds	r2, r3, #1
    36da:	d013      	beq.n	3704 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36dc:	a801      	add	r0, sp, #4
    36de:	9301      	str	r3, [sp, #4]
    36e0:	f7ff ff1c 	bl	351c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    36e4:	9a01      	ldr	r2, [sp, #4]
    36e6:	2301      	movs	r3, #1
    36e8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    36ea:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    36ee:	696b      	ldr	r3, [r5, #20]
    36f0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    36f2:	a801      	add	r0, sp, #4
    36f4:	f7ff ff12 	bl	351c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    36f8:	9b01      	ldr	r3, [sp, #4]
    36fa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    36fe:	2203      	movs	r2, #3
    3700:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3704:	69ab      	ldr	r3, [r5, #24]
    3706:	1c58      	adds	r0, r3, #1
    3708:	d011      	beq.n	372e <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    370a:	7f6a      	ldrb	r2, [r5, #29]
    370c:	9301      	str	r3, [sp, #4]
    370e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3710:	a801      	add	r0, sp, #4
    3712:	bf14      	ite	ne
    3714:	f04f 0903 	movne.w	r9, #3
    3718:	f04f 0900 	moveq.w	r9, #0
    371c:	f7ff fefe 	bl	351c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3720:	9b01      	ldr	r3, [sp, #4]
    3722:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3726:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    372a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    372e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3732:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3734:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3738:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    373c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3740:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3744:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3746:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    374a:	3104      	adds	r1, #4
    374c:	4630      	mov	r0, r6
    374e:	f7ff fe33 	bl	33b8 <uarte_nrfx_configure>
	if (err) {
    3752:	4605      	mov	r5, r0
    3754:	2800      	cmp	r0, #0
    3756:	d146      	bne.n	37e6 <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3758:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    375c:	0799      	lsls	r1, r3, #30
    375e:	d519      	bpl.n	3794 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3760:	f107 0012 	add.w	r0, r7, #18
    3764:	f001 f820 	bl	47a8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3768:	4b22      	ldr	r3, [pc, #136]	; (37f4 <uarte_instance_init.isra.0+0x190>)
    376a:	4298      	cmp	r0, r3
    376c:	d13f      	bne.n	37ee <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    376e:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3770:	00c3      	lsls	r3, r0, #3
    3772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3776:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    377a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    377e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3782:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3786:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    378a:	4a1b      	ldr	r2, [pc, #108]	; (37f8 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    378c:	2301      	movs	r3, #1
    378e:	4083      	lsls	r3, r0
    3790:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3794:	2308      	movs	r3, #8
    3796:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    379a:	f898 3008 	ldrb.w	r3, [r8, #8]
    379e:	b95b      	cbnz	r3, 37b8 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37a0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    37a4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    37a8:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    37ac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    37b0:	2301      	movs	r3, #1
    37b2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37b6:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    37b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    37bc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    37be:	bf5c      	itt	pl
    37c0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    37c4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    37c8:	06db      	lsls	r3, r3, #27
    37ca:	bf44      	itt	mi
    37cc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    37d0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    37d4:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    37d6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    37d8:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    37dc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37e0:	2301      	movs	r3, #1
    37e2:	60a3      	str	r3, [r4, #8]
    37e4:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    37e6:	4628      	mov	r0, r5
    37e8:	b003      	add	sp, #12
    37ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    37ee:	f06f 0504 	mvn.w	r5, #4
    37f2:	e7f8      	b.n	37e6 <uarte_instance_init.isra.0+0x182>
    37f4:	0bad0000 	.word	0x0bad0000
    37f8:	4001f000 	.word	0x4001f000

000037fc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    37fc:	4919      	ldr	r1, [pc, #100]	; (3864 <sys_clock_timeout_handler+0x68>)
{
    37fe:	b570      	push	{r4, r5, r6, lr}
    3800:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3802:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3806:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3808:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    380c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3810:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3816:	f04f 0500 	mov.w	r5, #0
    381a:	d20a      	bcs.n	3832 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    381c:	4b12      	ldr	r3, [pc, #72]	; (3868 <sys_clock_timeout_handler+0x6c>)
    381e:	6819      	ldr	r1, [r3, #0]
    3820:	060a      	lsls	r2, r1, #24
    3822:	0a0b      	lsrs	r3, r1, #8
    3824:	1992      	adds	r2, r2, r6
    3826:	4911      	ldr	r1, [pc, #68]	; (386c <sys_clock_timeout_handler+0x70>)
    3828:	f143 0300 	adc.w	r3, r3, #0
    382c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    3830:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3832:	f003 fa51 	bl	6cd8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    3836:	00a3      	lsls	r3, r4, #2
    3838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    383c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3840:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3844:	42b2      	cmp	r2, r6
    3846:	d10b      	bne.n	3860 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3848:	b91d      	cbnz	r5, 3852 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    384a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    384e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3852:	4b07      	ldr	r3, [pc, #28]	; (3870 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3854:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3858:	fa00 f404 	lsl.w	r4, r0, r4
    385c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3860:	bd70      	pop	{r4, r5, r6, pc}
    3862:	bf00      	nop
    3864:	20000338 	.word	0x20000338
    3868:	20000a7c 	.word	0x20000a7c
    386c:	20000320 	.word	0x20000320
    3870:	40011000 	.word	0x40011000

00003874 <compare_int_lock>:
{
    3874:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3876:	2301      	movs	r3, #1
    3878:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    387a:	4a11      	ldr	r2, [pc, #68]	; (38c0 <compare_int_lock+0x4c>)
    387c:	f3bf 8f5b 	dmb	ish
    3880:	43dc      	mvns	r4, r3
    3882:	e852 1f00 	ldrex	r1, [r2]
    3886:	ea01 0c04 	and.w	ip, r1, r4
    388a:	e842 ce00 	strex	lr, ip, [r2]
    388e:	f1be 0f00 	cmp.w	lr, #0
    3892:	d1f6      	bne.n	3882 <compare_int_lock+0xe>
    3894:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    389c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    38a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    38a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    38a8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    38ac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38b0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    38b4:	420b      	tst	r3, r1
}
    38b6:	bf14      	ite	ne
    38b8:	2001      	movne	r0, #1
    38ba:	2000      	moveq	r0, #0
    38bc:	bd10      	pop	{r4, pc}
    38be:	bf00      	nop
    38c0:	20000a78 	.word	0x20000a78

000038c4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    38c4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38c6:	4a12      	ldr	r2, [pc, #72]	; (3910 <compare_int_unlock.part.0+0x4c>)
    38c8:	f3bf 8f5b 	dmb	ish
    38cc:	4083      	lsls	r3, r0
    38ce:	e852 1f00 	ldrex	r1, [r2]
    38d2:	4319      	orrs	r1, r3
    38d4:	e842 1c00 	strex	ip, r1, [r2]
    38d8:	f1bc 0f00 	cmp.w	ip, #0
    38dc:	d1f7      	bne.n	38ce <compare_int_unlock.part.0+0xa>
    38de:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    38e2:	4a0c      	ldr	r2, [pc, #48]	; (3914 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    38e8:	4083      	lsls	r3, r0
    38ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    38ee:	4b0a      	ldr	r3, [pc, #40]	; (3918 <compare_int_unlock.part.0+0x54>)
    38f0:	f3bf 8f5b 	dmb	ish
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    38fa:	fa23 f000 	lsr.w	r0, r3, r0
    38fe:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3900:	bf42      	ittt	mi
    3902:	4b06      	ldrmi	r3, [pc, #24]	; (391c <compare_int_unlock.part.0+0x58>)
    3904:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3908:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    390c:	4770      	bx	lr
    390e:	bf00      	nop
    3910:	20000a78 	.word	0x20000a78
    3914:	40011000 	.word	0x40011000
    3918:	20000a74 	.word	0x20000a74
    391c:	e000e100 	.word	0xe000e100

00003920 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3920:	4b0d      	ldr	r3, [pc, #52]	; (3958 <z_nrf_rtc_timer_read+0x38>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	0a19      	lsrs	r1, r3, #8
    3926:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3928:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    392c:	4b0b      	ldr	r3, [pc, #44]	; (395c <z_nrf_rtc_timer_read+0x3c>)
    392e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3932:	18c0      	adds	r0, r0, r3
    3934:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    393c:	d20a      	bcs.n	3954 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    393e:	4b08      	ldr	r3, [pc, #32]	; (3960 <z_nrf_rtc_timer_read+0x40>)
    3940:	e9d3 2300 	ldrd	r2, r3, [r3]
    3944:	4299      	cmp	r1, r3
    3946:	bf08      	it	eq
    3948:	4290      	cmpeq	r0, r2
    394a:	d203      	bcs.n	3954 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    394c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3950:	f141 0100 	adc.w	r1, r1, #0
}
    3954:	4770      	bx	lr
    3956:	bf00      	nop
    3958:	20000a7c 	.word	0x20000a7c
    395c:	40011000 	.word	0x40011000
    3960:	20000320 	.word	0x20000320

00003964 <compare_set>:
{
    3964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3968:	b085      	sub	sp, #20
    396a:	4616      	mov	r6, r2
    396c:	461f      	mov	r7, r3
    396e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3970:	f7ff ff80 	bl	3874 <compare_int_lock>
    3974:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3976:	f7ff ffd3 	bl	3920 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    397a:	42b9      	cmp	r1, r7
    397c:	bf08      	it	eq
    397e:	42b0      	cmpeq	r0, r6
    3980:	d27f      	bcs.n	3a82 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    3982:	ebb6 0800 	subs.w	r8, r6, r0
    3986:	eb67 0901 	sbc.w	r9, r7, r1
    398a:	2300      	movs	r3, #0
    398c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3990:	454b      	cmp	r3, r9
    3992:	bf08      	it	eq
    3994:	4542      	cmpeq	r2, r8
    3996:	f0c0 8085 	bcc.w	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
		if (target_time != cc_data[chan].target_time) {
    399a:	4b44      	ldr	r3, [pc, #272]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    399c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    39a0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    39a4:	429f      	cmp	r7, r3
    39a6:	bf08      	it	eq
    39a8:	4296      	cmpeq	r6, r2
    39aa:	d054      	beq.n	3a56 <compare_set+0xf2>
    39ac:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39b0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    39b4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    39b8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39bc:	fa0b f205 	lsl.w	r2, fp, r5
    39c0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    39c4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39c8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    39cc:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    39ce:	4a38      	ldr	r2, [pc, #224]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    return p_reg->CC[ch];
    39d0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    39d4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    39d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    39dc:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    39e0:	461c      	mov	r4, r3
    39e2:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    39e4:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    39e8:	eba0 000a 	sub.w	r0, r0, sl
    39ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    39f0:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    39f4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    39f6:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    39fa:	d105      	bne.n	3a08 <compare_set+0xa4>
    39fc:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    39fe:	2013      	movs	r0, #19
    3a00:	f003 fffd 	bl	79fe <z_impl_k_busy_wait>
    3a04:	4a2a      	ldr	r2, [pc, #168]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a06:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    3a08:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3a0a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3a0e:	eba4 000c 	sub.w	r0, r4, ip
    3a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3a16:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a1a:	bf88      	it	hi
    3a1c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a1e:	2000      	movs	r0, #0
    3a20:	f8c8 0000 	str.w	r0, [r8]
    3a24:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    3a28:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3a2c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3a30:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3a34:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3a38:	4582      	cmp	sl, r0
    3a3a:	d006      	beq.n	3a4a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    3a3c:	1a20      	subs	r0, r4, r0
    3a3e:	3802      	subs	r0, #2
    3a40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3a44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3a48:	d819      	bhi.n	3a7e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    3a4a:	1ae4      	subs	r4, r4, r3
    3a4c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3a50:	1932      	adds	r2, r6, r4
    3a52:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    3a56:	4c15      	ldr	r4, [pc, #84]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a58:	0129      	lsls	r1, r5, #4
    3a5a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3a5e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    3a64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    3a66:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    3a68:	6043      	str	r3, [r0, #4]
	return ret;
    3a6a:	2400      	movs	r4, #0
	if (key) {
    3a6c:	9b01      	ldr	r3, [sp, #4]
    3a6e:	b113      	cbz	r3, 3a76 <compare_set+0x112>
    3a70:	4628      	mov	r0, r5
    3a72:	f7ff ff27 	bl	38c4 <compare_int_unlock.part.0>
}
    3a76:	4620      	mov	r0, r4
    3a78:	b005      	add	sp, #20
    3a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a7e:	4620      	mov	r0, r4
    3a80:	e7b0      	b.n	39e4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    3a82:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a84:	4a0b      	ldr	r2, [pc, #44]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a86:	f3bf 8f5b 	dmb	ish
    3a8a:	40ab      	lsls	r3, r5
    3a8c:	e852 1f00 	ldrex	r1, [r2]
    3a90:	4319      	orrs	r1, r3
    3a92:	e842 1000 	strex	r0, r1, [r2]
    3a96:	2800      	cmp	r0, #0
    3a98:	d1f8      	bne.n	3a8c <compare_set+0x128>
    3a9a:	f3bf 8f5b 	dmb	ish
    3a9e:	4632      	mov	r2, r6
    3aa0:	463b      	mov	r3, r7
    3aa2:	e7d8      	b.n	3a56 <compare_set+0xf2>
			return -EINVAL;
    3aa4:	f06f 0415 	mvn.w	r4, #21
    3aa8:	e7e0      	b.n	3a6c <compare_set+0x108>
    3aaa:	bf00      	nop
    3aac:	20000328 	.word	0x20000328
    3ab0:	40011000 	.word	0x40011000
    3ab4:	20000a74 	.word	0x20000a74

00003ab8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3aba:	4b19      	ldr	r3, [pc, #100]	; (3b20 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3abc:	4d19      	ldr	r5, [pc, #100]	; (3b24 <sys_clock_driver_init+0x6c>)
    3abe:	2400      	movs	r4, #0
    3ac0:	f04f 30ff 	mov.w	r0, #4294967295
    3ac4:	f04f 31ff 	mov.w	r1, #4294967295
    3ac8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3acc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ad4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ad8:	4b13      	ldr	r3, [pc, #76]	; (3b28 <sys_clock_driver_init+0x70>)
    3ada:	2602      	movs	r6, #2
    3adc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3ae0:	2101      	movs	r1, #1
    3ae2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3ae6:	2011      	movs	r0, #17
    3ae8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3aec:	4622      	mov	r2, r4
    3aee:	f7fe fbd5 	bl	229c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3af2:	2011      	movs	r0, #17
    3af4:	f7fe fbb4 	bl	2260 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3af8:	4a0c      	ldr	r2, [pc, #48]	; (3b2c <sys_clock_driver_init+0x74>)
    3afa:	2301      	movs	r3, #1
    3afc:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3afe:	4a0c      	ldr	r2, [pc, #48]	; (3b30 <sys_clock_driver_init+0x78>)
    3b00:	602b      	str	r3, [r5, #0]
    3b02:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3b04:	4b0b      	ldr	r3, [pc, #44]	; (3b34 <sys_clock_driver_init+0x7c>)
    3b06:	4a0c      	ldr	r2, [pc, #48]	; (3b38 <sys_clock_driver_init+0x80>)
    3b08:	9300      	str	r3, [sp, #0]
    3b0a:	9401      	str	r4, [sp, #4]
    3b0c:	2300      	movs	r3, #0
    3b0e:	4620      	mov	r0, r4
    3b10:	f7ff ff28 	bl	3964 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3b14:	4630      	mov	r0, r6
    3b16:	f7ff f973 	bl	2e00 <z_nrf_clock_control_lf_on>

	return 0;
}
    3b1a:	4620      	mov	r0, r4
    3b1c:	b002      	add	sp, #8
    3b1e:	bd70      	pop	{r4, r5, r6, pc}
    3b20:	20000328 	.word	0x20000328
    3b24:	40011000 	.word	0x40011000
    3b28:	e000e100 	.word	0xe000e100
    3b2c:	40011008 	.word	0x40011008
    3b30:	20000a78 	.word	0x20000a78
    3b34:	000037fd 	.word	0x000037fd
    3b38:	007fffff 	.word	0x007fffff

00003b3c <rtc_nrf_isr>:
{
    3b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3b40:	4c34      	ldr	r4, [pc, #208]	; (3c14 <rtc_nrf_isr+0xd8>)
    3b42:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3b46:	079a      	lsls	r2, r3, #30
    3b48:	d509      	bpl.n	3b5e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b4a:	4b33      	ldr	r3, [pc, #204]	; (3c18 <rtc_nrf_isr+0xdc>)
    3b4c:	681a      	ldr	r2, [r3, #0]
    3b4e:	b132      	cbz	r2, 3b5e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b50:	2200      	movs	r2, #0
    3b52:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3b54:	4a31      	ldr	r2, [pc, #196]	; (3c1c <rtc_nrf_isr+0xe0>)
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	6813      	ldr	r3, [r2, #0]
    3b5a:	3301      	adds	r3, #1
    3b5c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3b5e:	f04f 0320 	mov.w	r3, #32
    3b62:	f3ef 8211 	mrs	r2, BASEPRI
    3b66:	f383 8812 	msr	BASEPRI_MAX, r3
    3b6a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3b6e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3b72:	03db      	lsls	r3, r3, #15
    3b74:	d512      	bpl.n	3b9c <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b76:	f3bf 8f5b 	dmb	ish
    3b7a:	4b29      	ldr	r3, [pc, #164]	; (3c20 <rtc_nrf_isr+0xe4>)
    3b7c:	e853 1f00 	ldrex	r1, [r3]
    3b80:	f021 0001 	bic.w	r0, r1, #1
    3b84:	e843 0600 	strex	r6, r0, [r3]
    3b88:	2e00      	cmp	r6, #0
    3b8a:	d1f7      	bne.n	3b7c <rtc_nrf_isr+0x40>
    3b8c:	f3bf 8f5b 	dmb	ish
    3b90:	4b24      	ldr	r3, [pc, #144]	; (3c24 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3b92:	2900      	cmp	r1, #0
    3b94:	d136      	bne.n	3c04 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b96:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3b98:	2900      	cmp	r1, #0
    3b9a:	d133      	bne.n	3c04 <rtc_nrf_isr+0xc8>
{
    3b9c:	2300      	movs	r3, #0
	__asm__ volatile(
    3b9e:	f382 8811 	msr	BASEPRI, r2
    3ba2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3ba6:	b353      	cbz	r3, 3bfe <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3ba8:	f7ff feba 	bl	3920 <z_nrf_rtc_timer_read>
    3bac:	4606      	mov	r6, r0
	__asm__ volatile(
    3bae:	f04f 0320 	mov.w	r3, #32
    3bb2:	f3ef 8011 	mrs	r0, BASEPRI
    3bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    3bba:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3bbe:	4b1a      	ldr	r3, [pc, #104]	; (3c28 <rtc_nrf_isr+0xec>)
    3bc0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    3bc4:	4549      	cmp	r1, r9
    3bc6:	bf08      	it	eq
    3bc8:	4546      	cmpeq	r6, r8
    3bca:	f04f 0200 	mov.w	r2, #0
    3bce:	d31e      	bcc.n	3c0e <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3bd0:	f04f 36ff 	mov.w	r6, #4294967295
    3bd4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    3bd8:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3bdc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    3be0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3be6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3bea:	f380 8811 	msr	BASEPRI, r0
    3bee:	f3bf 8f6f 	isb	sy
		if (handler) {
    3bf2:	b121      	cbz	r1, 3bfe <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    3bf4:	9500      	str	r5, [sp, #0]
    3bf6:	4642      	mov	r2, r8
    3bf8:	464b      	mov	r3, r9
    3bfa:	2000      	movs	r0, #0
    3bfc:	4788      	blx	r1
}
    3bfe:	b003      	add	sp, #12
    3c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c04:	2100      	movs	r1, #0
    3c06:	6019      	str	r1, [r3, #0]
    3c08:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3c0a:	2301      	movs	r3, #1
}
    3c0c:	e7c7      	b.n	3b9e <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3c0e:	4611      	mov	r1, r2
    3c10:	e7eb      	b.n	3bea <rtc_nrf_isr+0xae>
    3c12:	bf00      	nop
    3c14:	40011000 	.word	0x40011000
    3c18:	40011104 	.word	0x40011104
    3c1c:	20000a7c 	.word	0x20000a7c
    3c20:	20000a74 	.word	0x20000a74
    3c24:	40011140 	.word	0x40011140
    3c28:	20000328 	.word	0x20000328

00003c2c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c2c:	4b14      	ldr	r3, [pc, #80]	; (3c80 <sys_clock_set_timeout+0x54>)
{
    3c2e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3c30:	f1b0 3fff 	cmp.w	r0, #4294967295
    3c34:	bf08      	it	eq
    3c36:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c38:	1e44      	subs	r4, r0, #1
    3c3a:	2c00      	cmp	r4, #0
    3c3c:	dd1e      	ble.n	3c7c <sys_clock_set_timeout+0x50>
    3c3e:	429c      	cmp	r4, r3
    3c40:	bfa8      	it	ge
    3c42:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c44:	f7ff fe6c 	bl	3920 <z_nrf_rtc_timer_read>
    3c48:	4b0e      	ldr	r3, [pc, #56]	; (3c84 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c4a:	490f      	ldr	r1, [pc, #60]	; (3c88 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c50:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3c52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c56:	bf28      	it	cs
    3c58:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3c5a:	3001      	adds	r0, #1
    3c5c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3c5e:	4808      	ldr	r0, [pc, #32]	; (3c80 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c60:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3c62:	4284      	cmp	r4, r0
    3c64:	bf28      	it	cs
    3c66:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3c68:	1912      	adds	r2, r2, r4
    3c6a:	f04f 0000 	mov.w	r0, #0
    3c6e:	9001      	str	r0, [sp, #4]
    3c70:	f143 0300 	adc.w	r3, r3, #0
    3c74:	f7ff fe76 	bl	3964 <compare_set>
}
    3c78:	b002      	add	sp, #8
    3c7a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3c7c:	2400      	movs	r4, #0
    3c7e:	e7e1      	b.n	3c44 <sys_clock_set_timeout+0x18>
    3c80:	007fffff 	.word	0x007fffff
    3c84:	20000338 	.word	0x20000338
    3c88:	000037fd 	.word	0x000037fd

00003c8c <sys_clock_elapsed>:
{
    3c8c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3c8e:	f7ff fe47 	bl	3920 <z_nrf_rtc_timer_read>
    3c92:	4b02      	ldr	r3, [pc, #8]	; (3c9c <sys_clock_elapsed+0x10>)
    3c94:	681b      	ldr	r3, [r3, #0]
}
    3c96:	1ac0      	subs	r0, r0, r3
    3c98:	bd08      	pop	{r3, pc}
    3c9a:	bf00      	nop
    3c9c:	20000338 	.word	0x20000338

00003ca0 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3ca0:	b508      	push	{r3, lr}
    switch (domain)
    3ca2:	b178      	cbz	r0, 3cc4 <nrf_clock_is_running.constprop.0+0x24>
    3ca4:	2801      	cmp	r0, #1
    3ca6:	d01c      	beq.n	3ce2 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    3ca8:	4a14      	ldr	r2, [pc, #80]	; (3cfc <nrf_clock_is_running.constprop.0+0x5c>)
    3caa:	4915      	ldr	r1, [pc, #84]	; (3d00 <nrf_clock_is_running.constprop.0+0x60>)
    3cac:	4815      	ldr	r0, [pc, #84]	; (3d04 <nrf_clock_is_running.constprop.0+0x64>)
    3cae:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3cb2:	f003 fc15 	bl	74e0 <printk>
    3cb6:	4811      	ldr	r0, [pc, #68]	; (3cfc <nrf_clock_is_running.constprop.0+0x5c>)
    3cb8:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3cbc:	f003 fb3c 	bl	7338 <assert_post_action>
            return false;
    3cc0:	2000      	movs	r0, #0
    3cc2:	e00d      	b.n	3ce0 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3cc4:	b131      	cbz	r1, 3cd4 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cca:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3cce:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3cd2:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cd8:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3cdc:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3ce0:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3ce2:	b131      	cbz	r1, 3cf2 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ce8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3cec:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3cf0:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3cf6:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    3cfa:	e7ef      	b.n	3cdc <nrf_clock_is_running.constprop.0+0x3c>
    3cfc:	000086a2 	.word	0x000086a2
    3d00:	0000815f 	.word	0x0000815f
    3d04:	00008064 	.word	0x00008064

00003d08 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3d08:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    3d0a:	4604      	mov	r4, r0
    3d0c:	b948      	cbnz	r0, 3d22 <nrfx_clock_init+0x1a>
    3d0e:	490a      	ldr	r1, [pc, #40]	; (3d38 <nrfx_clock_init+0x30>)
    3d10:	480a      	ldr	r0, [pc, #40]	; (3d3c <nrfx_clock_init+0x34>)
    3d12:	4a0b      	ldr	r2, [pc, #44]	; (3d40 <nrfx_clock_init+0x38>)
    3d14:	23bd      	movs	r3, #189	; 0xbd
    3d16:	f003 fbe3 	bl	74e0 <printk>
    3d1a:	4809      	ldr	r0, [pc, #36]	; (3d40 <nrfx_clock_init+0x38>)
    3d1c:	21bd      	movs	r1, #189	; 0xbd
    3d1e:	f003 fb0b 	bl	7338 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3d22:	4b08      	ldr	r3, [pc, #32]	; (3d44 <nrfx_clock_init+0x3c>)
    3d24:	791a      	ldrb	r2, [r3, #4]
    3d26:	b922      	cbnz	r2, 3d32 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3d28:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    3d2a:	4807      	ldr	r0, [pc, #28]	; (3d48 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    3d2c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    3d2e:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3d30:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3d32:	4806      	ldr	r0, [pc, #24]	; (3d4c <nrfx_clock_init+0x44>)
    return err_code;
    3d34:	e7fc      	b.n	3d30 <nrfx_clock_init+0x28>
    3d36:	bf00      	nop
    3d38:	00008713 	.word	0x00008713
    3d3c:	00008064 	.word	0x00008064
    3d40:	000086d6 	.word	0x000086d6
    3d44:	20000a80 	.word	0x20000a80
    3d48:	0bad0000 	.word	0x0bad0000
    3d4c:	0bad000c 	.word	0x0bad000c

00003d50 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    3d50:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d52:	4b0b      	ldr	r3, [pc, #44]	; (3d80 <nrfx_clock_enable+0x30>)
    3d54:	791b      	ldrb	r3, [r3, #4]
    3d56:	b94b      	cbnz	r3, 3d6c <nrfx_clock_enable+0x1c>
    3d58:	490a      	ldr	r1, [pc, #40]	; (3d84 <nrfx_clock_enable+0x34>)
    3d5a:	480b      	ldr	r0, [pc, #44]	; (3d88 <nrfx_clock_enable+0x38>)
    3d5c:	4a0b      	ldr	r2, [pc, #44]	; (3d8c <nrfx_clock_enable+0x3c>)
    3d5e:	23d6      	movs	r3, #214	; 0xd6
    3d60:	f003 fbbe 	bl	74e0 <printk>
    3d64:	4809      	ldr	r0, [pc, #36]	; (3d8c <nrfx_clock_enable+0x3c>)
    3d66:	21d6      	movs	r1, #214	; 0xd6
    3d68:	f003 fae6 	bl	7338 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3d6c:	2000      	movs	r0, #0
    3d6e:	f7fe fa87 	bl	2280 <arch_irq_is_enabled>
    3d72:	b918      	cbnz	r0, 3d7c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3d78:	f7fe ba72 	b.w	2260 <arch_irq_enable>
    3d7c:	bd08      	pop	{r3, pc}
    3d7e:	bf00      	nop
    3d80:	20000a80 	.word	0x20000a80
    3d84:	00008721 	.word	0x00008721
    3d88:	00008064 	.word	0x00008064
    3d8c:	000086d6 	.word	0x000086d6

00003d90 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d90:	4b22      	ldr	r3, [pc, #136]	; (3e1c <nrfx_clock_start+0x8c>)
    3d92:	791b      	ldrb	r3, [r3, #4]
{
    3d94:	b513      	push	{r0, r1, r4, lr}
    3d96:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3d98:	b95b      	cbnz	r3, 3db2 <nrfx_clock_start+0x22>
    3d9a:	4921      	ldr	r1, [pc, #132]	; (3e20 <nrfx_clock_start+0x90>)
    3d9c:	4821      	ldr	r0, [pc, #132]	; (3e24 <nrfx_clock_start+0x94>)
    3d9e:	4a22      	ldr	r2, [pc, #136]	; (3e28 <nrfx_clock_start+0x98>)
    3da0:	f44f 7389 	mov.w	r3, #274	; 0x112
    3da4:	f003 fb9c 	bl	74e0 <printk>
    3da8:	481f      	ldr	r0, [pc, #124]	; (3e28 <nrfx_clock_start+0x98>)
    3daa:	f44f 7189 	mov.w	r1, #274	; 0x112
    3dae:	f003 fac3 	bl	7338 <assert_post_action>
    switch (domain)
    3db2:	b174      	cbz	r4, 3dd2 <nrfx_clock_start+0x42>
    3db4:	2c01      	cmp	r4, #1
    3db6:	d027      	beq.n	3e08 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3db8:	4a1b      	ldr	r2, [pc, #108]	; (3e28 <nrfx_clock_start+0x98>)
    3dba:	491c      	ldr	r1, [pc, #112]	; (3e2c <nrfx_clock_start+0x9c>)
    3dbc:	4819      	ldr	r0, [pc, #100]	; (3e24 <nrfx_clock_start+0x94>)
    3dbe:	f44f 73a2 	mov.w	r3, #324	; 0x144
    3dc2:	f003 fb8d 	bl	74e0 <printk>
    3dc6:	4818      	ldr	r0, [pc, #96]	; (3e28 <nrfx_clock_start+0x98>)
    3dc8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3dcc:	f003 fab4 	bl	7338 <assert_post_action>
            break;
    }
}
    3dd0:	e016      	b.n	3e00 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3dd2:	a901      	add	r1, sp, #4
    3dd4:	4620      	mov	r0, r4
    3dd6:	f7ff ff63 	bl	3ca0 <nrf_clock_is_running.constprop.0>
    3dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dde:	b188      	cbz	r0, 3e04 <nrfx_clock_start+0x74>
    3de0:	9a01      	ldr	r2, [sp, #4]
    3de2:	2a01      	cmp	r2, #1
    3de4:	d10e      	bne.n	3e04 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3de6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dea:	4b11      	ldr	r3, [pc, #68]	; (3e30 <nrfx_clock_start+0xa0>)
    3dec:	2200      	movs	r2, #0
    3dee:	601a      	str	r2, [r3, #0]
    3df0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3df6:	2202      	movs	r2, #2
    3df8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dfc:	2201      	movs	r2, #1
    3dfe:	609a      	str	r2, [r3, #8]
}
    3e00:	b002      	add	sp, #8
    3e02:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3e04:	2200      	movs	r2, #0
    3e06:	e7ee      	b.n	3de6 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e08:	4b0a      	ldr	r3, [pc, #40]	; (3e34 <nrfx_clock_start+0xa4>)
    3e0a:	2200      	movs	r2, #0
    3e0c:	601a      	str	r2, [r3, #0]
    3e0e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e14:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e18:	601c      	str	r4, [r3, #0]
}
    3e1a:	e7f1      	b.n	3e00 <nrfx_clock_start+0x70>
    3e1c:	20000a80 	.word	0x20000a80
    3e20:	00008721 	.word	0x00008721
    3e24:	00008064 	.word	0x00008064
    3e28:	000086d6 	.word	0x000086d6
    3e2c:	0000815f 	.word	0x0000815f
    3e30:	40000104 	.word	0x40000104
    3e34:	40000100 	.word	0x40000100

00003e38 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e3a:	4d2f      	ldr	r5, [pc, #188]	; (3ef8 <nrfx_clock_stop+0xc0>)
    3e3c:	792a      	ldrb	r2, [r5, #4]
{
    3e3e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3e40:	b95a      	cbnz	r2, 3e5a <nrfx_clock_stop+0x22>
    3e42:	492e      	ldr	r1, [pc, #184]	; (3efc <nrfx_clock_stop+0xc4>)
    3e44:	482e      	ldr	r0, [pc, #184]	; (3f00 <nrfx_clock_stop+0xc8>)
    3e46:	4a2f      	ldr	r2, [pc, #188]	; (3f04 <nrfx_clock_stop+0xcc>)
    3e48:	f240 134b 	movw	r3, #331	; 0x14b
    3e4c:	f003 fb48 	bl	74e0 <printk>
    3e50:	482c      	ldr	r0, [pc, #176]	; (3f04 <nrfx_clock_stop+0xcc>)
    3e52:	f240 114b 	movw	r1, #331	; 0x14b
    3e56:	f003 fa6f 	bl	7338 <assert_post_action>
    switch (domain)
    3e5a:	b17c      	cbz	r4, 3e7c <nrfx_clock_stop+0x44>
    3e5c:	2c01      	cmp	r4, #1
    3e5e:	d028      	beq.n	3eb2 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3e60:	4929      	ldr	r1, [pc, #164]	; (3f08 <nrfx_clock_stop+0xd0>)
    3e62:	4827      	ldr	r0, [pc, #156]	; (3f00 <nrfx_clock_stop+0xc8>)
    3e64:	4a27      	ldr	r2, [pc, #156]	; (3f04 <nrfx_clock_stop+0xcc>)
    3e66:	f240 1367 	movw	r3, #359	; 0x167
    3e6a:	f003 fb39 	bl	74e0 <printk>
    3e6e:	4825      	ldr	r0, [pc, #148]	; (3f04 <nrfx_clock_stop+0xcc>)
    3e70:	f240 1167 	movw	r1, #359	; 0x167
    3e74:	f003 fa60 	bl	7338 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3e78:	b003      	add	sp, #12
    3e7a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    3e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e80:	2202      	movs	r2, #2
    3e82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e86:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    3e8a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e8e:	2201      	movs	r2, #1
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	4b1e      	ldr	r3, [pc, #120]	; (3f0c <nrfx_clock_stop+0xd4>)
    3e94:	f242 7410 	movw	r4, #10000	; 0x2710
    3e98:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3e9a:	2100      	movs	r1, #0
    3e9c:	4608      	mov	r0, r1
    3e9e:	f7ff feff 	bl	3ca0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3ea2:	2800      	cmp	r0, #0
    3ea4:	d0e8      	beq.n	3e78 <nrfx_clock_stop+0x40>
    3ea6:	2001      	movs	r0, #1
    3ea8:	f003 fcc4 	bl	7834 <nrfx_busy_wait>
    3eac:	3c01      	subs	r4, #1
    3eae:	d1f4      	bne.n	3e9a <nrfx_clock_stop+0x62>
    3eb0:	e7e2      	b.n	3e78 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3eb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3eb6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3eb8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ebc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3ec0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3ec4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ec6:	4b12      	ldr	r3, [pc, #72]	; (3f10 <nrfx_clock_stop+0xd8>)
    3ec8:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3eca:	f88d 4007 	strb.w	r4, [sp, #7]
    3ece:	f242 7410 	movw	r4, #10000	; 0x2710
    3ed2:	f10d 0107 	add.w	r1, sp, #7
    3ed6:	2001      	movs	r0, #1
    3ed8:	f7ff fee2 	bl	3ca0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3edc:	b910      	cbnz	r0, 3ee4 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    3ede:	2300      	movs	r3, #0
    3ee0:	716b      	strb	r3, [r5, #5]
    3ee2:	e7c9      	b.n	3e78 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3ee4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3ee8:	2801      	cmp	r0, #1
    3eea:	d1f8      	bne.n	3ede <nrfx_clock_stop+0xa6>
    3eec:	f003 fca2 	bl	7834 <nrfx_busy_wait>
    3ef0:	3c01      	subs	r4, #1
    3ef2:	d1ee      	bne.n	3ed2 <nrfx_clock_stop+0x9a>
    3ef4:	e7f3      	b.n	3ede <nrfx_clock_stop+0xa6>
    3ef6:	bf00      	nop
    3ef8:	20000a80 	.word	0x20000a80
    3efc:	00008721 	.word	0x00008721
    3f00:	00008064 	.word	0x00008064
    3f04:	000086d6 	.word	0x000086d6
    3f08:	0000815f 	.word	0x0000815f
    3f0c:	4000000c 	.word	0x4000000c
    3f10:	40000004 	.word	0x40000004

00003f14 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f14:	4b16      	ldr	r3, [pc, #88]	; (3f70 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3f16:	b507      	push	{r0, r1, r2, lr}
    3f18:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3f1a:	b16a      	cbz	r2, 3f38 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f1c:	2200      	movs	r2, #0
    3f1e:	601a      	str	r2, [r3, #0]
    3f20:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f26:	2201      	movs	r2, #1
    3f28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3f2c:	4b11      	ldr	r3, [pc, #68]	; (3f74 <nrfx_power_clock_irq_handler+0x60>)
    3f2e:	7958      	ldrb	r0, [r3, #5]
    3f30:	b910      	cbnz	r0, 3f38 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3f32:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3f34:	681b      	ldr	r3, [r3, #0]
    3f36:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f38:	4b0f      	ldr	r3, [pc, #60]	; (3f78 <nrfx_power_clock_irq_handler+0x64>)
    3f3a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3f3c:	b16a      	cbz	r2, 3f5a <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f3e:	2000      	movs	r0, #0
    3f40:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    3f42:	a901      	add	r1, sp, #4
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	f7ff feab 	bl	3ca0 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3f4a:	9a01      	ldr	r2, [sp, #4]
    3f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f50:	b932      	cbnz	r2, 3f60 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f52:	2201      	movs	r2, #1
    3f54:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f58:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3f5a:	b003      	add	sp, #12
    3f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3f60:	2202      	movs	r2, #2
    3f62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3f66:	4b03      	ldr	r3, [pc, #12]	; (3f74 <nrfx_power_clock_irq_handler+0x60>)
    3f68:	2001      	movs	r0, #1
    3f6a:	681b      	ldr	r3, [r3, #0]
    3f6c:	4798      	blx	r3
}
    3f6e:	e7f4      	b.n	3f5a <nrfx_power_clock_irq_handler+0x46>
    3f70:	40000100 	.word	0x40000100
    3f74:	20000a80 	.word	0x20000a80
    3f78:	40000104 	.word	0x40000104

00003f7c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3f7c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3f7e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    3f80:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3f82:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3f86:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3f88:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3f8c:	d014      	beq.n	3fb8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3f8e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    3f92:	fa05 f204 	lsl.w	r2, r5, r4
    3f96:	ea23 0202 	bic.w	r2, r3, r2
    3f9a:	e850 6f00 	ldrex	r6, [r0]
    3f9e:	429e      	cmp	r6, r3
    3fa0:	d104      	bne.n	3fac <nrfx_flag32_alloc+0x30>
    3fa2:	e840 2c00 	strex	ip, r2, [r0]
    3fa6:	f1bc 0f00 	cmp.w	ip, #0
    3faa:	d1f6      	bne.n	3f9a <nrfx_flag32_alloc+0x1e>
    3fac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3fb0:	d1e6      	bne.n	3f80 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3fb2:	4802      	ldr	r0, [pc, #8]	; (3fbc <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    3fb4:	700c      	strb	r4, [r1, #0]
}
    3fb6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3fb8:	4801      	ldr	r0, [pc, #4]	; (3fc0 <nrfx_flag32_alloc+0x44>)
    3fba:	e7fc      	b.n	3fb6 <nrfx_flag32_alloc+0x3a>
    3fbc:	0bad0000 	.word	0x0bad0000
    3fc0:	0bad0002 	.word	0x0bad0002

00003fc4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3fc4:	6803      	ldr	r3, [r0, #0]
    3fc6:	40cb      	lsrs	r3, r1
    3fc8:	07db      	lsls	r3, r3, #31
{
    3fca:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3fcc:	d415      	bmi.n	3ffa <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3fce:	2301      	movs	r3, #1
    3fd0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3fd4:	6803      	ldr	r3, [r0, #0]
    3fd6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    3fda:	ea41 0203 	orr.w	r2, r1, r3
    3fde:	e850 4f00 	ldrex	r4, [r0]
    3fe2:	429c      	cmp	r4, r3
    3fe4:	d104      	bne.n	3ff0 <nrfx_flag32_free+0x2c>
    3fe6:	e840 2c00 	strex	ip, r2, [r0]
    3fea:	f1bc 0f00 	cmp.w	ip, #0
    3fee:	d1f6      	bne.n	3fde <nrfx_flag32_free+0x1a>
    3ff0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3ff4:	d1ee      	bne.n	3fd4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3ff6:	4802      	ldr	r0, [pc, #8]	; (4000 <nrfx_flag32_free+0x3c>)
}
    3ff8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3ffa:	4802      	ldr	r0, [pc, #8]	; (4004 <nrfx_flag32_free+0x40>)
    3ffc:	e7fc      	b.n	3ff8 <nrfx_flag32_free+0x34>
    3ffe:	bf00      	nop
    4000:	0bad0000 	.word	0x0bad0000
    4004:	0bad0004 	.word	0x0bad0004

00004008 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4008:	4b05      	ldr	r3, [pc, #20]	; (4020 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    400a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    400c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4010:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    4014:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4018:	4258      	negs	r0, r3
    401a:	4158      	adcs	r0, r3
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	20000050 	.word	0x20000050

00004024 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4024:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4026:	f100 0308 	add.w	r3, r0, #8
    402a:	4c0c      	ldr	r4, [pc, #48]	; (405c <call_handler+0x38>)
    402c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4030:	05da      	lsls	r2, r3, #23
{
    4032:	4605      	mov	r5, r0
    4034:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4036:	d507      	bpl.n	4048 <call_handler+0x24>
    4038:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    403c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4040:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4044:	6852      	ldr	r2, [r2, #4]
    4046:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4048:	68a3      	ldr	r3, [r4, #8]
    404a:	b12b      	cbz	r3, 4058 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    404c:	68e2      	ldr	r2, [r4, #12]
    404e:	4631      	mov	r1, r6
    4050:	4628      	mov	r0, r5
    }
}
    4052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4056:	4718      	bx	r3
}
    4058:	bd70      	pop	{r4, r5, r6, pc}
    405a:	bf00      	nop
    405c:	20000050 	.word	0x20000050

00004060 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4060:	4b19      	ldr	r3, [pc, #100]	; (40c8 <release_handler+0x68>)
    4062:	3008      	adds	r0, #8
{
    4064:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4066:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    406a:	05d1      	lsls	r1, r2, #23
    406c:	d51d      	bpl.n	40aa <release_handler+0x4a>
    406e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4072:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    4076:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    407a:	f103 0410 	add.w	r4, r3, #16
    407e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4080:	f834 2b02 	ldrh.w	r2, [r4], #2
    4084:	f412 7f80 	tst.w	r2, #256	; 0x100
    4088:	d003      	beq.n	4092 <release_handler+0x32>
    408a:	f3c2 2243 	ubfx	r2, r2, #9, #4
    408e:	4291      	cmp	r1, r2
    4090:	d00b      	beq.n	40aa <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4092:	3001      	adds	r0, #1
    4094:	2830      	cmp	r0, #48	; 0x30
    4096:	d1f3      	bne.n	4080 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4098:	2200      	movs	r2, #0
    409a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    409e:	480b      	ldr	r0, [pc, #44]	; (40cc <release_handler+0x6c>)
    40a0:	f7ff ff90 	bl	3fc4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    40a4:	4b0a      	ldr	r3, [pc, #40]	; (40d0 <release_handler+0x70>)
    40a6:	4298      	cmp	r0, r3
    40a8:	d100      	bne.n	40ac <release_handler+0x4c>
}
    40aa:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    40ac:	4909      	ldr	r1, [pc, #36]	; (40d4 <release_handler+0x74>)
    40ae:	480a      	ldr	r0, [pc, #40]	; (40d8 <release_handler+0x78>)
    40b0:	4a0a      	ldr	r2, [pc, #40]	; (40dc <release_handler+0x7c>)
    40b2:	f44f 7399 	mov.w	r3, #306	; 0x132
    40b6:	f003 fa13 	bl	74e0 <printk>
}
    40ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    40be:	4807      	ldr	r0, [pc, #28]	; (40dc <release_handler+0x7c>)
    40c0:	f44f 7199 	mov.w	r1, #306	; 0x132
    40c4:	f003 b938 	b.w	7338 <assert_post_action>
    40c8:	20000050 	.word	0x20000050
    40cc:	200000c4 	.word	0x200000c4
    40d0:	0bad0000 	.word	0x0bad0000
    40d4:	000087a3 	.word	0x000087a3
    40d8:	00008064 	.word	0x00008064
    40dc:	0000873f 	.word	0x0000873f

000040e0 <pin_handler_trigger_uninit>:
{
    40e0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    40e2:	4c0a      	ldr	r4, [pc, #40]	; (410c <pin_handler_trigger_uninit+0x2c>)
    40e4:	f100 0508 	add.w	r5, r0, #8
    40e8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    40ec:	069a      	lsls	r2, r3, #26
    40ee:	d506      	bpl.n	40fe <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    40f0:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    40f2:	4a07      	ldr	r2, [pc, #28]	; (4110 <pin_handler_trigger_uninit+0x30>)
    40f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    40f8:	2100      	movs	r1, #0
    40fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    40fe:	f7ff ffaf 	bl	4060 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4102:	2300      	movs	r3, #0
    4104:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4108:	bd38      	pop	{r3, r4, r5, pc}
    410a:	bf00      	nop
    410c:	20000050 	.word	0x20000050
    4110:	40006000 	.word	0x40006000

00004114 <nrf_gpio_pin_port_decode>:
{
    4114:	b510      	push	{r4, lr}
    4116:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4118:	6800      	ldr	r0, [r0, #0]
    411a:	f003 fb8d 	bl	7838 <nrf_gpio_pin_present_check>
    411e:	b958      	cbnz	r0, 4138 <nrf_gpio_pin_port_decode+0x24>
    4120:	4912      	ldr	r1, [pc, #72]	; (416c <nrf_gpio_pin_port_decode+0x58>)
    4122:	4813      	ldr	r0, [pc, #76]	; (4170 <nrf_gpio_pin_port_decode+0x5c>)
    4124:	4a13      	ldr	r2, [pc, #76]	; (4174 <nrf_gpio_pin_port_decode+0x60>)
    4126:	f240 2329 	movw	r3, #553	; 0x229
    412a:	f003 f9d9 	bl	74e0 <printk>
    412e:	4811      	ldr	r0, [pc, #68]	; (4174 <nrf_gpio_pin_port_decode+0x60>)
    4130:	f240 2129 	movw	r1, #553	; 0x229
    4134:	f003 f900 	bl	7338 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4138:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    413a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    413e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4140:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4142:	d00d      	beq.n	4160 <nrf_gpio_pin_port_decode+0x4c>
    4144:	2b01      	cmp	r3, #1
    4146:	d00e      	beq.n	4166 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4148:	490b      	ldr	r1, [pc, #44]	; (4178 <nrf_gpio_pin_port_decode+0x64>)
    414a:	4809      	ldr	r0, [pc, #36]	; (4170 <nrf_gpio_pin_port_decode+0x5c>)
    414c:	4a09      	ldr	r2, [pc, #36]	; (4174 <nrf_gpio_pin_port_decode+0x60>)
    414e:	f240 232e 	movw	r3, #558	; 0x22e
    4152:	f003 f9c5 	bl	74e0 <printk>
    4156:	4807      	ldr	r0, [pc, #28]	; (4174 <nrf_gpio_pin_port_decode+0x60>)
    4158:	f240 212e 	movw	r1, #558	; 0x22e
    415c:	f003 f8ec 	bl	7338 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4160:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4164:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    4166:	4805      	ldr	r0, [pc, #20]	; (417c <nrf_gpio_pin_port_decode+0x68>)
    4168:	e7fc      	b.n	4164 <nrf_gpio_pin_port_decode+0x50>
    416a:	bf00      	nop
    416c:	00008663 	.word	0x00008663
    4170:	00008064 	.word	0x00008064
    4174:	00008630 	.word	0x00008630
    4178:	0000815f 	.word	0x0000815f
    417c:	50000300 	.word	0x50000300

00004180 <nrfx_gpiote_input_configure>:
{
    4180:	b5f0      	push	{r4, r5, r6, r7, lr}
    4182:	4604      	mov	r4, r0
    4184:	b085      	sub	sp, #20
    4186:	4617      	mov	r7, r2
    4188:	461d      	mov	r5, r3
    if (p_input_config)
    418a:	b1f1      	cbz	r1, 41ca <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    418c:	f7ff ff3c 	bl	4008 <pin_is_task_output>
    4190:	b110      	cbz	r0, 4198 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    4192:	484a      	ldr	r0, [pc, #296]	; (42bc <nrfx_gpiote_input_configure+0x13c>)
}
    4194:	b005      	add	sp, #20
    4196:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4198:	460b      	mov	r3, r1
    419a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    419e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    41a2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    41a6:	f10d 020f 	add.w	r2, sp, #15
    41aa:	f10d 010e 	add.w	r1, sp, #14
    41ae:	4620      	mov	r0, r4
    41b0:	f003 fb57 	bl	7862 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    41b4:	4a42      	ldr	r2, [pc, #264]	; (42c0 <nrfx_gpiote_input_configure+0x140>)
    41b6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    41ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    41be:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    41c2:	f043 0301 	orr.w	r3, r3, #1
    41c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    41ca:	b197      	cbz	r7, 41f2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41cc:	4b3c      	ldr	r3, [pc, #240]	; (42c0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    41ce:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    41d0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    41d2:	f104 0008 	add.w	r0, r4, #8
    41d6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    41da:	078f      	lsls	r7, r1, #30
    41dc:	d50c      	bpl.n	41f8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    41de:	2a00      	cmp	r2, #0
    41e0:	d1d7      	bne.n	4192 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    41e2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    41e6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    41ea:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    41ee:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    41f2:	bbcd      	cbnz	r5, 4268 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    41f4:	4833      	ldr	r0, [pc, #204]	; (42c4 <nrfx_gpiote_input_configure+0x144>)
    41f6:	e7cd      	b.n	4194 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    41f8:	f021 0120 	bic.w	r1, r1, #32
    41fc:	04c9      	lsls	r1, r1, #19
    41fe:	0cc9      	lsrs	r1, r1, #19
    4200:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4204:	2a00      	cmp	r2, #0
    4206:	d0ec      	beq.n	41e2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4208:	2e03      	cmp	r6, #3
    420a:	d8c2      	bhi.n	4192 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    420c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    420e:	b92e      	cbnz	r6, 421c <nrfx_gpiote_input_configure+0x9c>
    4210:	4a2d      	ldr	r2, [pc, #180]	; (42c8 <nrfx_gpiote_input_configure+0x148>)
    4212:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4216:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    421a:	e7e2      	b.n	41e2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    421c:	00ba      	lsls	r2, r7, #2
    421e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4222:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4226:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    422a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    422e:	f02c 0c03 	bic.w	ip, ip, #3
    4232:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4236:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    423a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    423e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4242:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4246:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    424a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    424e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4252:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4256:	ea4c 0c0e 	orr.w	ip, ip, lr
    425a:	f041 0120 	orr.w	r1, r1, #32
    425e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4262:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4266:	e7bc      	b.n	41e2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4268:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    426c:	4620      	mov	r0, r4
    426e:	f7ff fef7 	bl	4060 <release_handler>
    if (!handler)
    4272:	2e00      	cmp	r6, #0
    4274:	d0be      	beq.n	41f4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4276:	4d12      	ldr	r5, [pc, #72]	; (42c0 <nrfx_gpiote_input_configure+0x140>)
    4278:	682b      	ldr	r3, [r5, #0]
    427a:	429e      	cmp	r6, r3
    427c:	d104      	bne.n	4288 <nrfx_gpiote_input_configure+0x108>
    427e:	686b      	ldr	r3, [r5, #4]
    4280:	429f      	cmp	r7, r3
    4282:	d101      	bne.n	4288 <nrfx_gpiote_input_configure+0x108>
    4284:	2200      	movs	r2, #0
    4286:	e00a      	b.n	429e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4288:	4810      	ldr	r0, [pc, #64]	; (42cc <nrfx_gpiote_input_configure+0x14c>)
    428a:	f10d 010f 	add.w	r1, sp, #15
    428e:	f7ff fe75 	bl	3f7c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4292:	4b0c      	ldr	r3, [pc, #48]	; (42c4 <nrfx_gpiote_input_configure+0x144>)
    4294:	4298      	cmp	r0, r3
    4296:	f47f af7d 	bne.w	4194 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    429a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    429e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    42a2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42a6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    42a8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    42aa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    42ae:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    42b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    42b6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    42ba:	e79b      	b.n	41f4 <nrfx_gpiote_input_configure+0x74>
    42bc:	0bad0004 	.word	0x0bad0004
    42c0:	20000050 	.word	0x20000050
    42c4:	0bad0000 	.word	0x0bad0000
    42c8:	40006000 	.word	0x40006000
    42cc:	200000c4 	.word	0x200000c4

000042d0 <nrfx_gpiote_output_configure>:
{
    42d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d2:	4604      	mov	r4, r0
    42d4:	b085      	sub	sp, #20
    42d6:	4615      	mov	r5, r2
    if (p_config)
    42d8:	b309      	cbz	r1, 431e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    42da:	f100 0708 	add.w	r7, r0, #8
    42de:	4e31      	ldr	r6, [pc, #196]	; (43a4 <nrfx_gpiote_output_configure+0xd4>)
    42e0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    42e4:	0798      	lsls	r0, r3, #30
    42e6:	d401      	bmi.n	42ec <nrfx_gpiote_output_configure+0x1c>
    42e8:	069a      	lsls	r2, r3, #26
    42ea:	d458      	bmi.n	439e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    42ec:	f013 0f1c 	tst.w	r3, #28
    42f0:	d002      	beq.n	42f8 <nrfx_gpiote_output_configure+0x28>
    42f2:	784b      	ldrb	r3, [r1, #1]
    42f4:	2b01      	cmp	r3, #1
    42f6:	d052      	beq.n	439e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    42f8:	2301      	movs	r3, #1
    42fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    42fe:	2300      	movs	r3, #0
    4300:	e9cd 1300 	strd	r1, r3, [sp]
    4304:	1c4a      	adds	r2, r1, #1
    4306:	1c8b      	adds	r3, r1, #2
    4308:	4620      	mov	r0, r4
    430a:	f10d 010f 	add.w	r1, sp, #15
    430e:	f003 faa8 	bl	7862 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4312:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4316:	f043 0303 	orr.w	r3, r3, #3
    431a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    431e:	b915      	cbnz	r5, 4326 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4320:	4821      	ldr	r0, [pc, #132]	; (43a8 <nrfx_gpiote_output_configure+0xd8>)
}
    4322:	b005      	add	sp, #20
    4324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4326:	4e1f      	ldr	r6, [pc, #124]	; (43a4 <nrfx_gpiote_output_configure+0xd4>)
    4328:	f104 0708 	add.w	r7, r4, #8
    432c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4330:	0783      	lsls	r3, r0, #30
    4332:	d534      	bpl.n	439e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    4334:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4338:	4661      	mov	r1, ip
    433a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    433c:	f020 0020 	bic.w	r0, r0, #32
    4340:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4344:	04c0      	lsls	r0, r0, #19
    4346:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    434a:	0cc0      	lsrs	r0, r0, #19
    434c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4350:	2300      	movs	r3, #0
    4352:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4356:	786a      	ldrb	r2, [r5, #1]
    4358:	2a00      	cmp	r2, #0
    435a:	d0e1      	beq.n	4320 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    435c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4360:	78ad      	ldrb	r5, [r5, #2]
    4362:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4366:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    436a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    436e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4372:	0223      	lsls	r3, r4, #8
    4374:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4378:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    437a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    437e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4382:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4384:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4386:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    438a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    438e:	432b      	orrs	r3, r5
    4390:	f040 0020 	orr.w	r0, r0, #32
    4394:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4398:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    439c:	e7c0      	b.n	4320 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    439e:	4803      	ldr	r0, [pc, #12]	; (43ac <nrfx_gpiote_output_configure+0xdc>)
    43a0:	e7bf      	b.n	4322 <nrfx_gpiote_output_configure+0x52>
    43a2:	bf00      	nop
    43a4:	20000050 	.word	0x20000050
    43a8:	0bad0000 	.word	0x0bad0000
    43ac:	0bad0004 	.word	0x0bad0004

000043b0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    43b0:	4b01      	ldr	r3, [pc, #4]	; (43b8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    43b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    43b6:	4770      	bx	lr
    43b8:	20000050 	.word	0x20000050

000043bc <nrfx_gpiote_channel_get>:
{
    43bc:	b538      	push	{r3, r4, r5, lr}
    43be:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    43c0:	460d      	mov	r5, r1
    43c2:	b959      	cbnz	r1, 43dc <nrfx_gpiote_channel_get+0x20>
    43c4:	490b      	ldr	r1, [pc, #44]	; (43f4 <nrfx_gpiote_channel_get+0x38>)
    43c6:	480c      	ldr	r0, [pc, #48]	; (43f8 <nrfx_gpiote_channel_get+0x3c>)
    43c8:	4a0c      	ldr	r2, [pc, #48]	; (43fc <nrfx_gpiote_channel_get+0x40>)
    43ca:	f240 2335 	movw	r3, #565	; 0x235
    43ce:	f003 f887 	bl	74e0 <printk>
    43d2:	480a      	ldr	r0, [pc, #40]	; (43fc <nrfx_gpiote_channel_get+0x40>)
    43d4:	f240 2135 	movw	r1, #565	; 0x235
    43d8:	f002 ffae 	bl	7338 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    43dc:	3408      	adds	r4, #8
    43de:	4b08      	ldr	r3, [pc, #32]	; (4400 <nrfx_gpiote_channel_get+0x44>)
    43e0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    43e4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    43e6:	bf43      	ittte	mi
    43e8:	0b5b      	lsrmi	r3, r3, #13
    43ea:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    43ec:	4805      	ldrmi	r0, [pc, #20]	; (4404 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    43ee:	4806      	ldrpl	r0, [pc, #24]	; (4408 <nrfx_gpiote_channel_get+0x4c>)
}
    43f0:	bd38      	pop	{r3, r4, r5, pc}
    43f2:	bf00      	nop
    43f4:	000087b7 	.word	0x000087b7
    43f8:	00008064 	.word	0x00008064
    43fc:	0000873f 	.word	0x0000873f
    4400:	20000050 	.word	0x20000050
    4404:	0bad0000 	.word	0x0bad0000
    4408:	0bad0004 	.word	0x0bad0004

0000440c <nrfx_gpiote_init>:
{
    440c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    440e:	4c0e      	ldr	r4, [pc, #56]	; (4448 <nrfx_gpiote_init+0x3c>)
    4410:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4414:	b9b5      	cbnz	r5, 4444 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4416:	2260      	movs	r2, #96	; 0x60
    4418:	4629      	mov	r1, r5
    441a:	f104 0010 	add.w	r0, r4, #16
    441e:	f003 f8c2 	bl	75a6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4422:	2006      	movs	r0, #6
    4424:	f7fd ff1c 	bl	2260 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <nrfx_gpiote_init+0x40>)
    return err_code;
    442a:	4809      	ldr	r0, [pc, #36]	; (4450 <nrfx_gpiote_init+0x44>)
    442c:	601d      	str	r5, [r3, #0]
    442e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4430:	4b08      	ldr	r3, [pc, #32]	; (4454 <nrfx_gpiote_init+0x48>)
    4432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4436:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    443a:	2301      	movs	r3, #1
    443c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4440:	6763      	str	r3, [r4, #116]	; 0x74
}
    4442:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4444:	4804      	ldr	r0, [pc, #16]	; (4458 <nrfx_gpiote_init+0x4c>)
    4446:	e7fc      	b.n	4442 <nrfx_gpiote_init+0x36>
    4448:	20000050 	.word	0x20000050
    444c:	4000617c 	.word	0x4000617c
    4450:	0bad0000 	.word	0x0bad0000
    4454:	40006000 	.word	0x40006000
    4458:	0bad0005 	.word	0x0bad0005

0000445c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    445c:	4b03      	ldr	r3, [pc, #12]	; (446c <nrfx_gpiote_is_init+0x10>)
    445e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4462:	3800      	subs	r0, #0
    4464:	bf18      	it	ne
    4466:	2001      	movne	r0, #1
    4468:	4770      	bx	lr
    446a:	bf00      	nop
    446c:	20000050 	.word	0x20000050

00004470 <nrfx_gpiote_channel_free>:
{
    4470:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4472:	4801      	ldr	r0, [pc, #4]	; (4478 <nrfx_gpiote_channel_free+0x8>)
    4474:	f7ff bda6 	b.w	3fc4 <nrfx_flag32_free>
    4478:	200000c0 	.word	0x200000c0

0000447c <nrfx_gpiote_channel_alloc>:
{
    447c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    447e:	4801      	ldr	r0, [pc, #4]	; (4484 <nrfx_gpiote_channel_alloc+0x8>)
    4480:	f7ff bd7c 	b.w	3f7c <nrfx_flag32_alloc>
    4484:	200000c0 	.word	0x200000c0

00004488 <nrfx_gpiote_trigger_enable>:
{
    4488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    448a:	4d31      	ldr	r5, [pc, #196]	; (4550 <nrfx_gpiote_trigger_enable+0xc8>)
    448c:	f100 0708 	add.w	r7, r0, #8
{
    4490:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4492:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    4496:	f013 0f1c 	tst.w	r3, #28
{
    449a:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    449c:	d10b      	bne.n	44b6 <nrfx_gpiote_trigger_enable+0x2e>
    449e:	492d      	ldr	r1, [pc, #180]	; (4554 <nrfx_gpiote_trigger_enable+0xcc>)
    44a0:	482d      	ldr	r0, [pc, #180]	; (4558 <nrfx_gpiote_trigger_enable+0xd0>)
    44a2:	4a2e      	ldr	r2, [pc, #184]	; (455c <nrfx_gpiote_trigger_enable+0xd4>)
    44a4:	f240 33df 	movw	r3, #991	; 0x3df
    44a8:	f003 f81a 	bl	74e0 <printk>
    44ac:	482b      	ldr	r0, [pc, #172]	; (455c <nrfx_gpiote_trigger_enable+0xd4>)
    44ae:	f240 31df 	movw	r1, #991	; 0x3df
    44b2:	f002 ff41 	bl	7338 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    44b6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    44ba:	0683      	lsls	r3, r0, #26
    44bc:	d51f      	bpl.n	44fe <nrfx_gpiote_trigger_enable+0x76>
    44be:	f010 0302 	ands.w	r3, r0, #2
    44c2:	d11c      	bne.n	44fe <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    44c4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    44c6:	4608      	mov	r0, r1
    44c8:	f003 f9c7 	bl	785a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    44cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    44d0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    44d4:	6003      	str	r3, [r0, #0]
    44d6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    44d8:	008b      	lsls	r3, r1, #2
    44da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    44de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    44e2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    44e6:	f042 0201 	orr.w	r2, r2, #1
    44ea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    44ee:	b126      	cbz	r6, 44fa <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    44f0:	4a1b      	ldr	r2, [pc, #108]	; (4560 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    44f2:	2301      	movs	r3, #1
    44f4:	408b      	lsls	r3, r1
    44f6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    44fa:	b003      	add	sp, #12
    44fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    44fe:	b95e      	cbnz	r6, 4518 <nrfx_gpiote_trigger_enable+0x90>
    4500:	4918      	ldr	r1, [pc, #96]	; (4564 <nrfx_gpiote_trigger_enable+0xdc>)
    4502:	4815      	ldr	r0, [pc, #84]	; (4558 <nrfx_gpiote_trigger_enable+0xd0>)
    4504:	4a15      	ldr	r2, [pc, #84]	; (455c <nrfx_gpiote_trigger_enable+0xd4>)
    4506:	f240 33ee 	movw	r3, #1006	; 0x3ee
    450a:	f002 ffe9 	bl	74e0 <printk>
    450e:	4813      	ldr	r0, [pc, #76]	; (455c <nrfx_gpiote_trigger_enable+0xd4>)
    4510:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4514:	f002 ff10 	bl	7338 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4518:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    451c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4520:	2b04      	cmp	r3, #4
    4522:	d010      	beq.n	4546 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4524:	2b05      	cmp	r3, #5
    4526:	d010      	beq.n	454a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4528:	a801      	add	r0, sp, #4
    452a:	9401      	str	r4, [sp, #4]
    452c:	f7ff fdf2 	bl	4114 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4530:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4532:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4536:	40d9      	lsrs	r1, r3
    4538:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    453c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    453e:	4620      	mov	r0, r4
    4540:	f003 f9da 	bl	78f8 <nrf_gpio_cfg_sense_set>
}
    4544:	e7d9      	b.n	44fa <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4546:	2103      	movs	r1, #3
    4548:	e7f9      	b.n	453e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    454a:	2102      	movs	r1, #2
    454c:	e7f7      	b.n	453e <nrfx_gpiote_trigger_enable+0xb6>
    454e:	bf00      	nop
    4550:	20000050 	.word	0x20000050
    4554:	000087c1 	.word	0x000087c1
    4558:	00008064 	.word	0x00008064
    455c:	0000873f 	.word	0x0000873f
    4560:	40006000 	.word	0x40006000
    4564:	000087d6 	.word	0x000087d6

00004568 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4568:	4b0e      	ldr	r3, [pc, #56]	; (45a4 <nrfx_gpiote_trigger_disable+0x3c>)
    456a:	f100 0208 	add.w	r2, r0, #8
    456e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4572:	0699      	lsls	r1, r3, #26
    4574:	d513      	bpl.n	459e <nrfx_gpiote_trigger_disable+0x36>
    4576:	079a      	lsls	r2, r3, #30
    4578:	d411      	bmi.n	459e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    457a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    457c:	2201      	movs	r2, #1
    457e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4580:	009b      	lsls	r3, r3, #2
    4582:	4909      	ldr	r1, [pc, #36]	; (45a8 <nrfx_gpiote_trigger_disable+0x40>)
    4584:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4588:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    458c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4590:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4594:	f022 0203 	bic.w	r2, r2, #3
    4598:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    459c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    459e:	2100      	movs	r1, #0
    45a0:	f003 b9aa 	b.w	78f8 <nrf_gpio_cfg_sense_set>
    45a4:	20000050 	.word	0x20000050
    45a8:	40006000 	.word	0x40006000

000045ac <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    45ac:	4b0e      	ldr	r3, [pc, #56]	; (45e8 <nrfx_gpiote_pin_uninit+0x3c>)
    45ae:	f100 0208 	add.w	r2, r0, #8
{
    45b2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    45b4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    45b8:	07db      	lsls	r3, r3, #31
{
    45ba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    45bc:	d511      	bpl.n	45e2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    45be:	f7ff ffd3 	bl	4568 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    45c2:	4620      	mov	r0, r4
    45c4:	f7ff fd8c 	bl	40e0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    45c8:	a801      	add	r0, sp, #4
    45ca:	9401      	str	r4, [sp, #4]
    45cc:	f7ff fda2 	bl	4114 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    45d0:	9b01      	ldr	r3, [sp, #4]
    45d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    45d6:	2202      	movs	r2, #2
    45d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    45dc:	4803      	ldr	r0, [pc, #12]	; (45ec <nrfx_gpiote_pin_uninit+0x40>)
}
    45de:	b002      	add	sp, #8
    45e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    45e2:	4803      	ldr	r0, [pc, #12]	; (45f0 <nrfx_gpiote_pin_uninit+0x44>)
    45e4:	e7fb      	b.n	45de <nrfx_gpiote_pin_uninit+0x32>
    45e6:	bf00      	nop
    45e8:	20000050 	.word	0x20000050
    45ec:	0bad0000 	.word	0x0bad0000
    45f0:	0bad0004 	.word	0x0bad0004

000045f4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    45f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45f8:	4b65      	ldr	r3, [pc, #404]	; (4790 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    45fa:	4866      	ldr	r0, [pc, #408]	; (4794 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    45fc:	4966      	ldr	r1, [pc, #408]	; (4798 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    45fe:	2500      	movs	r5, #0
{
    4600:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4602:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4604:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4606:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4608:	b136      	cbz	r6, 4618 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    460a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    460e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4610:	bf1e      	ittt	ne
    4612:	601c      	strne	r4, [r3, #0]
    4614:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4616:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    4618:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    461a:	428b      	cmp	r3, r1
        mask <<= 1;
    461c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4620:	d1f1      	bne.n	4606 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4622:	4f5e      	ldr	r7, [pc, #376]	; (479c <nrfx_gpiote_irq_handler+0x1a8>)
    4624:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4626:	b37b      	cbz	r3, 4688 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    4628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    462c:	4e5c      	ldr	r6, [pc, #368]	; (47a0 <nrfx_gpiote_irq_handler+0x1ac>)
    462e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4632:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4634:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4638:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    463c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    463e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4642:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4644:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4648:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    464c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    4650:	f8d9 3000 	ldr.w	r3, [r9]
    4654:	b9f3      	cbnz	r3, 4694 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4656:	f108 0820 	add.w	r8, r8, #32
    465a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    465e:	f109 0904 	add.w	r9, r9, #4
    4662:	d1f5      	bne.n	4650 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4664:	603b      	str	r3, [r7, #0]
    4666:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    4668:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    466a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    466e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4672:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    4674:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4678:	9b01      	ldr	r3, [sp, #4]
    467a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    467e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    4680:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    4684:	4313      	orrs	r3, r2
    4686:	d1dd      	bne.n	4644 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    4688:	2401      	movs	r4, #1
    while (mask)
    468a:	2d00      	cmp	r5, #0
    468c:	d168      	bne.n	4760 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    468e:	b009      	add	sp, #36	; 0x24
    4690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4694:	fa93 f3a3 	rbit	r3, r3
    4698:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    469c:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    46a0:	f106 0208 	add.w	r2, r6, #8
    46a4:	4b3f      	ldr	r3, [pc, #252]	; (47a4 <nrfx_gpiote_irq_handler+0x1b0>)
    46a6:	9605      	str	r6, [sp, #20]
    46a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    46ac:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    46b0:	08f4      	lsrs	r4, r6, #3
    46b2:	9302      	str	r3, [sp, #8]
    46b4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    46b6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    46b8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    46bc:	fa0b fc00 	lsl.w	ip, fp, r0
    46c0:	5d18      	ldrb	r0, [r3, r4]
    46c2:	ea20 000c 	bic.w	r0, r0, ip
    46c6:	5518      	strb	r0, [r3, r4]
    46c8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46ca:	a805      	add	r0, sp, #20
    46cc:	9103      	str	r1, [sp, #12]
    46ce:	f7ff fd21 	bl	4114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    46d2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    46d4:	9903      	ldr	r1, [sp, #12]
    46d6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    46da:	074b      	lsls	r3, r1, #29
    46dc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    46e0:	f3c4 4401 	ubfx	r4, r4, #16, #2
    46e4:	d523      	bpl.n	472e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    46e6:	4651      	mov	r1, sl
    46e8:	4630      	mov	r0, r6
    46ea:	f7ff fc9b 	bl	4024 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46ee:	a805      	add	r0, sp, #20
    46f0:	9605      	str	r6, [sp, #20]
    46f2:	f7ff fd0f 	bl	4114 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    46f6:	9a05      	ldr	r2, [sp, #20]
    46f8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    46fc:	b2e4      	uxtb	r4, r4
    46fe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4702:	f3c2 4201 	ubfx	r2, r2, #16, #2
    4706:	4294      	cmp	r4, r2
    4708:	d107      	bne.n	471a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    470a:	2100      	movs	r1, #0
    470c:	4630      	mov	r0, r6
    470e:	f003 f8f3 	bl	78f8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4712:	4621      	mov	r1, r4
    4714:	4630      	mov	r0, r6
    4716:	f003 f8ef 	bl	78f8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    471a:	a805      	add	r0, sp, #20
    471c:	9605      	str	r6, [sp, #20]
    471e:	f7ff fcf9 	bl	4114 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    4722:	9b05      	ldr	r3, [sp, #20]
    4724:	fa0b f303 	lsl.w	r3, fp, r3
    4728:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    472c:	e790      	b.n	4650 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    472e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4730:	bf0c      	ite	eq
    4732:	2103      	moveq	r1, #3
    4734:	2102      	movne	r1, #2
    4736:	4630      	mov	r0, r6
    4738:	f003 f8de 	bl	78f8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    473c:	9b02      	ldr	r3, [sp, #8]
    473e:	2b03      	cmp	r3, #3
    4740:	d004      	beq.n	474c <nrfx_gpiote_irq_handler+0x158>
    4742:	2c02      	cmp	r4, #2
    4744:	d107      	bne.n	4756 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4746:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    474a:	d1e6      	bne.n	471a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    474c:	4651      	mov	r1, sl
    474e:	4630      	mov	r0, r6
    4750:	f7ff fc68 	bl	4024 <call_handler>
    4754:	e7e1      	b.n	471a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4756:	2c03      	cmp	r4, #3
    4758:	d1df      	bne.n	471a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    475a:	f1ba 0f02 	cmp.w	sl, #2
    475e:	e7f4      	b.n	474a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    4760:	fa95 f3a5 	rbit	r3, r5
    4764:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4768:	fa04 f203 	lsl.w	r2, r4, r3
    476c:	009b      	lsls	r3, r3, #2
    476e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4772:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4776:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    477a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    477e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4782:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4786:	f3c1 4101 	ubfx	r1, r1, #16, #2
    478a:	f7ff fc4b 	bl	4024 <call_handler>
    478e:	e77c      	b.n	468a <nrfx_gpiote_irq_handler+0x96>
    4790:	40006100 	.word	0x40006100
    4794:	40006000 	.word	0x40006000
    4798:	40006120 	.word	0x40006120
    479c:	4000617c 	.word	0x4000617c
    47a0:	50000300 	.word	0x50000300
    47a4:	20000050 	.word	0x20000050

000047a8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    47a8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    47aa:	4801      	ldr	r0, [pc, #4]	; (47b0 <nrfx_ppi_channel_alloc+0x8>)
    47ac:	f7ff bbe6 	b.w	3f7c <nrfx_flag32_alloc>
    47b0:	200000cc 	.word	0x200000cc

000047b4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    47b4:	4b03      	ldr	r3, [pc, #12]	; (47c4 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    47b6:	6818      	ldr	r0, [r3, #0]
}
    47b8:	f1a0 0308 	sub.w	r3, r0, #8
    47bc:	4258      	negs	r0, r3
    47be:	4158      	adcs	r0, r3
    47c0:	4770      	bx	lr
    47c2:	bf00      	nop
    47c4:	10000130 	.word	0x10000130

000047c8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    47c8:	4b06      	ldr	r3, [pc, #24]	; (47e4 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    47ca:	681b      	ldr	r3, [r3, #0]
    47cc:	2b08      	cmp	r3, #8
    47ce:	d106      	bne.n	47de <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    47d0:	4b05      	ldr	r3, [pc, #20]	; (47e8 <nrf52_errata_103+0x20>)
    47d2:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    47d4:	2b05      	cmp	r3, #5
    47d6:	d802      	bhi.n	47de <nrf52_errata_103+0x16>
    47d8:	4a04      	ldr	r2, [pc, #16]	; (47ec <nrf52_errata_103+0x24>)
    47da:	5cd0      	ldrb	r0, [r2, r3]
    47dc:	4770      	bx	lr
        return false;
    47de:	2000      	movs	r0, #0
}
    47e0:	4770      	bx	lr
    47e2:	bf00      	nop
    47e4:	10000130 	.word	0x10000130
    47e8:	10000134 	.word	0x10000134
    47ec:	000087e7 	.word	0x000087e7

000047f0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    47f0:	4a02      	ldr	r2, [pc, #8]	; (47fc <nvmc_wait+0xc>)
    47f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    47f6:	2b00      	cmp	r3, #0
    47f8:	d0fb      	beq.n	47f2 <nvmc_wait+0x2>
}
    47fa:	4770      	bx	lr
    47fc:	4001e000 	.word	0x4001e000

00004800 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4800:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4802:	f7ff ffd7 	bl	47b4 <nrf52_errata_136>
    4806:	b140      	cbz	r0, 481a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    480c:	2200      	movs	r2, #0
    480e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4812:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4816:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    481a:	f7ff ffcb 	bl	47b4 <nrf52_errata_136>
    481e:	2800      	cmp	r0, #0
    4820:	d046      	beq.n	48b0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4826:	4b5b      	ldr	r3, [pc, #364]	; (4994 <SystemInit+0x194>)
    4828:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    482c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4830:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4834:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4838:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    483c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4840:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4844:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4848:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    484c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4850:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4854:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4858:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    485c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4860:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4864:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4868:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    486c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4870:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4874:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4878:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    487c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4880:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4884:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4888:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    488c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4890:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4894:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4898:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    489c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    48a0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    48a4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    48a8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    48ac:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    48b0:	f7ff ff8a 	bl	47c8 <nrf52_errata_103>
    48b4:	b110      	cbz	r0, 48bc <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    48b6:	4b38      	ldr	r3, [pc, #224]	; (4998 <SystemInit+0x198>)
    48b8:	4a38      	ldr	r2, [pc, #224]	; (499c <SystemInit+0x19c>)
    48ba:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    48bc:	f7ff ff84 	bl	47c8 <nrf52_errata_103>
    48c0:	b118      	cbz	r0, 48ca <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    48c2:	4b37      	ldr	r3, [pc, #220]	; (49a0 <SystemInit+0x1a0>)
    48c4:	22fb      	movs	r2, #251	; 0xfb
    48c6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    48ca:	f7ff ff7d 	bl	47c8 <nrf52_errata_103>
    48ce:	b148      	cbz	r0, 48e4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    48d0:	4934      	ldr	r1, [pc, #208]	; (49a4 <SystemInit+0x1a4>)
    48d2:	4b35      	ldr	r3, [pc, #212]	; (49a8 <SystemInit+0x1a8>)
    48d4:	680a      	ldr	r2, [r1, #0]
    48d6:	681b      	ldr	r3, [r3, #0]
    48d8:	f022 020f 	bic.w	r2, r2, #15
    48dc:	f003 030f 	and.w	r3, r3, #15
    48e0:	4313      	orrs	r3, r2
    48e2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    48e4:	f7ff ff70 	bl	47c8 <nrf52_errata_103>
    48e8:	b118      	cbz	r0, 48f2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    48ea:	4b30      	ldr	r3, [pc, #192]	; (49ac <SystemInit+0x1ac>)
    48ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    48f0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    48f2:	f7ff ff5f 	bl	47b4 <nrf52_errata_136>
    48f6:	b148      	cbz	r0, 490c <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    48f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4900:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4902:	bf44      	itt	mi
    4904:	f06f 0201 	mvnmi.w	r2, #1
    4908:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    490c:	4b28      	ldr	r3, [pc, #160]	; (49b0 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	2b08      	cmp	r3, #8
    4912:	d10e      	bne.n	4932 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4914:	4b27      	ldr	r3, [pc, #156]	; (49b4 <SystemInit+0x1b4>)
    4916:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4918:	2b05      	cmp	r3, #5
    491a:	d802      	bhi.n	4922 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    491c:	4a26      	ldr	r2, [pc, #152]	; (49b8 <SystemInit+0x1b8>)
    491e:	5cd3      	ldrb	r3, [r2, r3]
    4920:	b13b      	cbz	r3, 4932 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4922:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4926:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    492a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    492e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4932:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4936:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    493a:	2a00      	cmp	r2, #0
    493c:	db03      	blt.n	4946 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    493e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4942:	2b00      	cmp	r3, #0
    4944:	da22      	bge.n	498c <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4946:	491d      	ldr	r1, [pc, #116]	; (49bc <SystemInit+0x1bc>)
    4948:	2301      	movs	r3, #1
    494a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    494e:	f7ff ff4f 	bl	47f0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4952:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4956:	2412      	movs	r4, #18
    4958:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    495c:	f7ff ff48 	bl	47f0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4960:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4964:	f7ff ff44 	bl	47f0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4968:	2300      	movs	r3, #0
    496a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    496e:	f7ff ff3f 	bl	47f0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4972:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4976:	4912      	ldr	r1, [pc, #72]	; (49c0 <SystemInit+0x1c0>)
    4978:	4b12      	ldr	r3, [pc, #72]	; (49c4 <SystemInit+0x1c4>)
    497a:	68ca      	ldr	r2, [r1, #12]
    497c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4980:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4982:	60cb      	str	r3, [r1, #12]
    4984:	f3bf 8f4f 	dsb	sy
    __NOP();
    4988:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    498a:	e7fd      	b.n	4988 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    498c:	4b0e      	ldr	r3, [pc, #56]	; (49c8 <SystemInit+0x1c8>)
    498e:	4a0f      	ldr	r2, [pc, #60]	; (49cc <SystemInit+0x1cc>)
    4990:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4992:	bd10      	pop	{r4, pc}
    4994:	4000c000 	.word	0x4000c000
    4998:	4000568c 	.word	0x4000568c
    499c:	00038148 	.word	0x00038148
    49a0:	4000f000 	.word	0x4000f000
    49a4:	40000ee4 	.word	0x40000ee4
    49a8:	10000258 	.word	0x10000258
    49ac:	40029640 	.word	0x40029640
    49b0:	10000130 	.word	0x10000130
    49b4:	10000134 	.word	0x10000134
    49b8:	000087e1 	.word	0x000087e1
    49bc:	4001e000 	.word	0x4001e000
    49c0:	e000ed00 	.word	0xe000ed00
    49c4:	05fa0004 	.word	0x05fa0004
    49c8:	200000d0 	.word	0x200000d0
    49cc:	03d09000 	.word	0x03d09000

000049d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    49d0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    49d2:	4c14      	ldr	r4, [pc, #80]	; (4a24 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    49d4:	4a14      	ldr	r2, [pc, #80]	; (4a28 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    49d6:	4915      	ldr	r1, [pc, #84]	; (4a2c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    49d8:	2303      	movs	r3, #3
    49da:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    49dc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    49de:	4b14      	ldr	r3, [pc, #80]	; (4a30 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    49e0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    49e2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    49e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    49e8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    49ea:	2300      	movs	r3, #0
    49ec:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    49ee:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    49f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    49f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    49f4:	4a0f      	ldr	r2, [pc, #60]	; (4a34 <_DoInit+0x64>)
    49f6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    49f8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    49fa:	2210      	movs	r2, #16
    49fc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    49fe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4a00:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a02:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4a04:	f002 fd9e 	bl	7544 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a08:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    4a0c:	490a      	ldr	r1, [pc, #40]	; (4a38 <_DoInit+0x68>)
    4a0e:	4620      	mov	r0, r4
    4a10:	f002 fd98 	bl	7544 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a14:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    4a18:	2320      	movs	r3, #32
    4a1a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    4a1c:	f3bf 8f5f 	dmb	sy
}
    4a20:	bd10      	pop	{r4, pc}
    4a22:	bf00      	nop
    4a24:	20000a88 	.word	0x20000a88
    4a28:	000087ed 	.word	0x000087ed
    4a2c:	000087f6 	.word	0x000087f6
    4a30:	20000ba1 	.word	0x20000ba1
    4a34:	20000b91 	.word	0x20000b91
    4a38:	000087fa 	.word	0x000087fa

00004a3c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a3c:	4b0e      	ldr	r3, [pc, #56]	; (4a78 <z_sys_init_run_level+0x3c>)
{
    4a3e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a40:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4a44:	3001      	adds	r0, #1
    4a46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4a4a:	42a6      	cmp	r6, r4
    4a4c:	d800      	bhi.n	4a50 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4a4e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4a50:	e9d4 3500 	ldrd	r3, r5, [r4]
    4a54:	4628      	mov	r0, r5
    4a56:	4798      	blx	r3
		if (dev != NULL) {
    4a58:	b165      	cbz	r5, 4a74 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    4a5a:	68eb      	ldr	r3, [r5, #12]
    4a5c:	b130      	cbz	r0, 4a6c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4a5e:	2800      	cmp	r0, #0
    4a60:	bfb8      	it	lt
    4a62:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4a64:	28ff      	cmp	r0, #255	; 0xff
    4a66:	bfa8      	it	ge
    4a68:	20ff      	movge	r0, #255	; 0xff
    4a6a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4a6c:	785a      	ldrb	r2, [r3, #1]
    4a6e:	f042 0201 	orr.w	r2, r2, #1
    4a72:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4a74:	3408      	adds	r4, #8
    4a76:	e7e8      	b.n	4a4a <z_sys_init_run_level+0xe>
    4a78:	00007dbc 	.word	0x00007dbc

00004a7c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4a7c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4a7e:	4605      	mov	r5, r0
    4a80:	b910      	cbnz	r0, 4a88 <z_impl_device_get_binding+0xc>
		return NULL;
    4a82:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4a84:	4620      	mov	r0, r4
    4a86:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    4a88:	7803      	ldrb	r3, [r0, #0]
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d0f9      	beq.n	4a82 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a8e:	4a0f      	ldr	r2, [pc, #60]	; (4acc <z_impl_device_get_binding+0x50>)
    4a90:	4c0f      	ldr	r4, [pc, #60]	; (4ad0 <z_impl_device_get_binding+0x54>)
    4a92:	4616      	mov	r6, r2
    4a94:	4294      	cmp	r4, r2
    4a96:	d108      	bne.n	4aaa <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    4a98:	4c0d      	ldr	r4, [pc, #52]	; (4ad0 <z_impl_device_get_binding+0x54>)
    4a9a:	42b4      	cmp	r4, r6
    4a9c:	d0f1      	beq.n	4a82 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4a9e:	4620      	mov	r0, r4
    4aa0:	f002 ff41 	bl	7926 <z_device_ready>
    4aa4:	b950      	cbnz	r0, 4abc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    4aa6:	3418      	adds	r4, #24
    4aa8:	e7f7      	b.n	4a9a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    4aaa:	4620      	mov	r0, r4
    4aac:	f002 ff3b 	bl	7926 <z_device_ready>
    4ab0:	b110      	cbz	r0, 4ab8 <z_impl_device_get_binding+0x3c>
    4ab2:	6823      	ldr	r3, [r4, #0]
    4ab4:	42ab      	cmp	r3, r5
    4ab6:	d0e5      	beq.n	4a84 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ab8:	3418      	adds	r4, #24
    4aba:	e7eb      	b.n	4a94 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4abc:	6821      	ldr	r1, [r4, #0]
    4abe:	4628      	mov	r0, r5
    4ac0:	f002 fd5a 	bl	7578 <strcmp>
    4ac4:	2800      	cmp	r0, #0
    4ac6:	d1ee      	bne.n	4aa6 <z_impl_device_get_binding+0x2a>
    4ac8:	e7dc      	b.n	4a84 <z_impl_device_get_binding+0x8>
    4aca:	bf00      	nop
    4acc:	00007aec 	.word	0x00007aec
    4ad0:	00007a74 	.word	0x00007a74

00004ad4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ad6:	4604      	mov	r4, r0
    4ad8:	460e      	mov	r6, r1
	__asm__ volatile(
    4ada:	f04f 0320 	mov.w	r3, #32
    4ade:	f3ef 8711 	mrs	r7, BASEPRI
    4ae2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ae6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4aea:	f001 fc01 	bl	62f0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4aee:	4631      	mov	r1, r6
    4af0:	4605      	mov	r5, r0
    4af2:	4620      	mov	r0, r4
    4af4:	f002 fe8e 	bl	7814 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4af8:	2c04      	cmp	r4, #4
    4afa:	d10c      	bne.n	4b16 <z_fatal_error+0x42>
    4afc:	490a      	ldr	r1, [pc, #40]	; (4b28 <z_fatal_error+0x54>)
    4afe:	4a0b      	ldr	r2, [pc, #44]	; (4b2c <z_fatal_error+0x58>)
    4b00:	480b      	ldr	r0, [pc, #44]	; (4b30 <z_fatal_error+0x5c>)
    4b02:	238f      	movs	r3, #143	; 0x8f
    4b04:	f002 fcec 	bl	74e0 <printk>
    4b08:	480a      	ldr	r0, [pc, #40]	; (4b34 <z_fatal_error+0x60>)
    4b0a:	f002 fce9 	bl	74e0 <printk>
    4b0e:	4807      	ldr	r0, [pc, #28]	; (4b2c <z_fatal_error+0x58>)
    4b10:	218f      	movs	r1, #143	; 0x8f
    4b12:	f002 fc11 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4b16:	f387 8811 	msr	BASEPRI, r7
    4b1a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4b1e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4b24:	f7fd be48 	b.w	27b8 <z_impl_k_thread_abort>
    4b28:	00008823 	.word	0x00008823
    4b2c:	00008801 	.word	0x00008801
    4b30:	00008064 	.word	0x00008064
    4b34:	00008840 	.word	0x00008840

00004b38 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4b38:	4c11      	ldr	r4, [pc, #68]	; (4b80 <idle+0x48>)
    4b3a:	68a2      	ldr	r2, [r4, #8]
    4b3c:	f992 200e 	ldrsb.w	r2, [r2, #14]
    4b40:	2a00      	cmp	r2, #0
{
    4b42:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4b44:	da09      	bge.n	4b5a <idle+0x22>
    4b46:	490f      	ldr	r1, [pc, #60]	; (4b84 <idle+0x4c>)
    4b48:	480f      	ldr	r0, [pc, #60]	; (4b88 <idle+0x50>)
    4b4a:	4a10      	ldr	r2, [pc, #64]	; (4b8c <idle+0x54>)
    4b4c:	2327      	movs	r3, #39	; 0x27
    4b4e:	f002 fcc7 	bl	74e0 <printk>
    4b52:	480e      	ldr	r0, [pc, #56]	; (4b8c <idle+0x54>)
    4b54:	2127      	movs	r1, #39	; 0x27
    4b56:	f002 fbef 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4b5a:	f04f 0220 	mov.w	r2, #32
    4b5e:	f3ef 8311 	mrs	r3, BASEPRI
    4b62:	f382 8812 	msr	BASEPRI_MAX, r2
    4b66:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4b6a:	f002 f81d 	bl	6ba8 <z_get_next_timeout_expiry>
    4b6e:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4b70:	f7fd fa4a 	bl	2008 <pm_system_suspend>
    4b74:	2800      	cmp	r0, #0
    4b76:	d1f0      	bne.n	4b5a <idle+0x22>
	arch_cpu_idle();
    4b78:	f7fd fafc 	bl	2174 <arch_cpu_idle>
}
    4b7c:	e7ed      	b.n	4b5a <idle+0x22>
    4b7e:	bf00      	nop
    4b80:	20000b30 	.word	0x20000b30
    4b84:	00008896 	.word	0x00008896
    4b88:	00008064 	.word	0x00008064
    4b8c:	00008875 	.word	0x00008875

00004b90 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    4b90:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    4b92:	2300      	movs	r3, #0
{
    4b94:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    4b96:	2201      	movs	r2, #1
    4b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4b9c:	220f      	movs	r2, #15
    4b9e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    4ba2:	4c0d      	ldr	r4, [pc, #52]	; (4bd8 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4ba4:	4a0d      	ldr	r2, [pc, #52]	; (4bdc <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	490d      	ldr	r1, [pc, #52]	; (4be0 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4baa:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    4bac:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4bb0:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    4bb4:	f44f 75b0 	mov.w	r5, #352	; 0x160
    4bb8:	9300      	str	r3, [sp, #0]
    4bba:	fb05 1100 	mla	r1, r5, r0, r1
    4bbe:	4b09      	ldr	r3, [pc, #36]	; (4be4 <init_idle_thread+0x54>)
    4bc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4bc4:	4620      	mov	r0, r4
    4bc6:	f001 fd15 	bl	65f4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4bca:	7b63      	ldrb	r3, [r4, #13]
    4bcc:	f023 0304 	bic.w	r3, r3, #4
    4bd0:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    4bd2:	b007      	add	sp, #28
    4bd4:	bd30      	pop	{r4, r5, pc}
    4bd6:	bf00      	nop
    4bd8:	20000340 	.word	0x20000340
    4bdc:	20000b30 	.word	0x20000b30
    4be0:	200021e0 	.word	0x200021e0
    4be4:	00004b39 	.word	0x00004b39

00004be8 <bg_thread_main>:
{
    4be8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4bea:	4b0a      	ldr	r3, [pc, #40]	; (4c14 <bg_thread_main+0x2c>)
    4bec:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4bee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4bf0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4bf2:	f7ff ff23 	bl	4a3c <z_sys_init_run_level>
	boot_banner();
    4bf6:	f002 f9a5 	bl	6f44 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4bfa:	2003      	movs	r0, #3
    4bfc:	f7ff ff1e 	bl	4a3c <z_sys_init_run_level>
	z_init_static_threads();
    4c00:	f001 fdaa 	bl	6758 <z_init_static_threads>
	main();
    4c04:	f7fc f966 	bl	ed4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4c08:	4a03      	ldr	r2, [pc, #12]	; (4c18 <bg_thread_main+0x30>)
    4c0a:	7b13      	ldrb	r3, [r2, #12]
    4c0c:	f023 0301 	bic.w	r3, r3, #1
    4c10:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4c12:	bd08      	pop	{r3, pc}
    4c14:	20000fa1 	.word	0x20000fa1
    4c18:	200003c0 	.word	0x200003c0

00004c1c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4c1c:	4802      	ldr	r0, [pc, #8]	; (4c28 <z_bss_zero+0xc>)
    4c1e:	4a03      	ldr	r2, [pc, #12]	; (4c2c <z_bss_zero+0x10>)
    4c20:	2100      	movs	r1, #0
    4c22:	1a12      	subs	r2, r2, r0
    4c24:	f002 bcbf 	b.w	75a6 <memset>
    4c28:	200001a0 	.word	0x200001a0
    4c2c:	20001160 	.word	0x20001160

00004c30 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4c30:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4c32:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4d0c <z_cstart+0xdc>
    4c36:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4c38:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4c3c:	4d2d      	ldr	r5, [pc, #180]	; (4cf4 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4c3e:	4e2e      	ldr	r6, [pc, #184]	; (4cf8 <z_cstart+0xc8>)
    4c40:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4c42:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4d10 <z_cstart+0xe0>
    4c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4c4a:	2400      	movs	r4, #0
    4c4c:	616b      	str	r3, [r5, #20]
    4c4e:	23e0      	movs	r3, #224	; 0xe0
    4c50:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4c54:	77ec      	strb	r4, [r5, #31]
    4c56:	762c      	strb	r4, [r5, #24]
    4c58:	766c      	strb	r4, [r5, #25]
    4c5a:	76ac      	strb	r4, [r5, #26]
    4c5c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4c60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4c62:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4c66:	626b      	str	r3, [r5, #36]	; 0x24
    4c68:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4c6c:	f7fd fd4e 	bl	270c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4c70:	f7fd fa7a 	bl	2168 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4c74:	f04f 33ff 	mov.w	r3, #4294967295
    4c78:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4c7a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4c7c:	f7fd fe76 	bl	296c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4c80:	f7fd fdac 	bl	27dc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4c84:	f240 1301 	movw	r3, #257	; 0x101
    4c88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4c8c:	ab06      	add	r3, sp, #24
    4c8e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4c90:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4c94:	f002 fe46 	bl	7924 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4c98:	4620      	mov	r0, r4
    4c9a:	f7ff fecf 	bl	4a3c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4c9e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4ca0:	4d16      	ldr	r5, [pc, #88]	; (4cfc <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4ca2:	f7ff fecb 	bl	4a3c <z_sys_init_run_level>
	z_sched_init();
    4ca6:	f001 f98d 	bl	5fc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4caa:	4b15      	ldr	r3, [pc, #84]	; (4d00 <z_cstart+0xd0>)
    4cac:	9305      	str	r3, [sp, #20]
    4cae:	2301      	movs	r3, #1
    4cb0:	4914      	ldr	r1, [pc, #80]	; (4d04 <z_cstart+0xd4>)
    4cb2:	9400      	str	r4, [sp, #0]
    4cb4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4cbc:	464b      	mov	r3, r9
    4cbe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4cc2:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    4cc4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4cc6:	f001 fc95 	bl	65f4 <z_setup_new_thread>
    4cca:	7b6a      	ldrb	r2, [r5, #13]
    4ccc:	f022 0204 	bic.w	r2, r2, #4
    4cd0:	736a      	strb	r2, [r5, #13]
    4cd2:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    4cd4:	4628      	mov	r0, r5
    4cd6:	f000 fdc1 	bl	585c <z_ready_thread>
		init_idle_thread(i);
    4cda:	4620      	mov	r0, r4
    4cdc:	f7ff ff58 	bl	4b90 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    4ce0:	4b09      	ldr	r3, [pc, #36]	; (4d08 <z_cstart+0xd8>)
    4ce2:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4ce4:	464a      	mov	r2, r9
    4ce6:	4639      	mov	r1, r7
    4ce8:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    4cea:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    4cec:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4cf0:	f7fd fb74 	bl	23dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4cf4:	e000ed00 	.word	0xe000ed00
    4cf8:	20000b30 	.word	0x20000b30
    4cfc:	200003c0 	.word	0x200003c0
    4d00:	000088be 	.word	0x000088be
    4d04:	20001dc0 	.word	0x20001dc0
    4d08:	20000340 	.word	0x20000340
    4d0c:	20002b60 	.word	0x20002b60
    4d10:	00004be9 	.word	0x00004be9

00004d14 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    4d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4d18:	4d16      	ldr	r5, [pc, #88]	; (4d74 <init_mem_slab_module+0x60>)
    4d1a:	4c17      	ldr	r4, [pc, #92]	; (4d78 <init_mem_slab_module+0x64>)
    4d1c:	4e17      	ldr	r6, [pc, #92]	; (4d7c <init_mem_slab_module+0x68>)
    4d1e:	46a8      	mov	r8, r5
    4d20:	42ac      	cmp	r4, r5
    4d22:	d90c      	bls.n	4d3e <init_mem_slab_module+0x2a>
    4d24:	4916      	ldr	r1, [pc, #88]	; (4d80 <init_mem_slab_module+0x6c>)
    4d26:	4817      	ldr	r0, [pc, #92]	; (4d84 <init_mem_slab_module+0x70>)
    4d28:	233c      	movs	r3, #60	; 0x3c
    4d2a:	4632      	mov	r2, r6
    4d2c:	f002 fbd8 	bl	74e0 <printk>
    4d30:	4815      	ldr	r0, [pc, #84]	; (4d88 <init_mem_slab_module+0x74>)
    4d32:	f002 fbd5 	bl	74e0 <printk>
    4d36:	213c      	movs	r1, #60	; 0x3c
    4d38:	4630      	mov	r0, r6
    4d3a:	f002 fafd 	bl	7338 <assert_post_action>
    4d3e:	4544      	cmp	r4, r8
    4d40:	d302      	bcc.n	4d48 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4d42:	2000      	movs	r0, #0
	return rc;
}
    4d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4d48:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    4d4c:	ea41 0302 	orr.w	r3, r1, r2
    4d50:	f013 0303 	ands.w	r3, r3, #3
    4d54:	d10b      	bne.n	4d6e <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    4d56:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    4d58:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    4d5a:	4283      	cmp	r3, r0
    4d5c:	d101      	bne.n	4d62 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4d5e:	3420      	adds	r4, #32
    4d60:	e7de      	b.n	4d20 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    4d62:	69a7      	ldr	r7, [r4, #24]
    4d64:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4d66:	3301      	adds	r3, #1
		slab->free_list = p;
    4d68:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    4d6a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4d6c:	e7f5      	b.n	4d5a <init_mem_slab_module+0x46>
		return -EINVAL;
    4d6e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4d72:	e7e7      	b.n	4d44 <init_mem_slab_module+0x30>
    4d74:	20000150 	.word	0x20000150
    4d78:	20000150 	.word	0x20000150
    4d7c:	000088c3 	.word	0x000088c3
    4d80:	000088e8 	.word	0x000088e8
    4d84:	00008064 	.word	0x00008064
    4d88:	00008905 	.word	0x00008905

00004d8c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4d90:	4604      	mov	r4, r0
    4d92:	460e      	mov	r6, r1
    4d94:	4690      	mov	r8, r2
    4d96:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4d98:	f100 0508 	add.w	r5, r0, #8
    4d9c:	f04f 0320 	mov.w	r3, #32
    4da0:	f3ef 8711 	mrs	r7, BASEPRI
    4da4:	f383 8812 	msr	BASEPRI_MAX, r3
    4da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4dac:	4628      	mov	r0, r5
    4dae:	f001 fd63 	bl	6878 <z_spin_lock_valid>
    4db2:	b968      	cbnz	r0, 4dd0 <k_mem_slab_alloc+0x44>
    4db4:	4a24      	ldr	r2, [pc, #144]	; (4e48 <k_mem_slab_alloc+0xbc>)
    4db6:	4925      	ldr	r1, [pc, #148]	; (4e4c <k_mem_slab_alloc+0xc0>)
    4db8:	4825      	ldr	r0, [pc, #148]	; (4e50 <k_mem_slab_alloc+0xc4>)
    4dba:	2381      	movs	r3, #129	; 0x81
    4dbc:	f002 fb90 	bl	74e0 <printk>
    4dc0:	4824      	ldr	r0, [pc, #144]	; (4e54 <k_mem_slab_alloc+0xc8>)
    4dc2:	4629      	mov	r1, r5
    4dc4:	f002 fb8c 	bl	74e0 <printk>
    4dc8:	481f      	ldr	r0, [pc, #124]	; (4e48 <k_mem_slab_alloc+0xbc>)
    4dca:	2181      	movs	r1, #129	; 0x81
    4dcc:	f002 fab4 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    4dd0:	4628      	mov	r0, r5
    4dd2:	f001 fd6f 	bl	68b4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4dd6:	69a3      	ldr	r3, [r4, #24]
    4dd8:	b1eb      	cbz	r3, 4e16 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    4dda:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4ddc:	681b      	ldr	r3, [r3, #0]
    4dde:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4de0:	69e3      	ldr	r3, [r4, #28]
    4de2:	3301      	adds	r3, #1
    4de4:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4de6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4de8:	4628      	mov	r0, r5
    4dea:	f001 fd53 	bl	6894 <z_spin_unlock_valid>
    4dee:	b968      	cbnz	r0, 4e0c <k_mem_slab_alloc+0x80>
    4df0:	4a15      	ldr	r2, [pc, #84]	; (4e48 <k_mem_slab_alloc+0xbc>)
    4df2:	4919      	ldr	r1, [pc, #100]	; (4e58 <k_mem_slab_alloc+0xcc>)
    4df4:	4816      	ldr	r0, [pc, #88]	; (4e50 <k_mem_slab_alloc+0xc4>)
    4df6:	23ac      	movs	r3, #172	; 0xac
    4df8:	f002 fb72 	bl	74e0 <printk>
    4dfc:	4817      	ldr	r0, [pc, #92]	; (4e5c <k_mem_slab_alloc+0xd0>)
    4dfe:	4629      	mov	r1, r5
    4e00:	f002 fb6e 	bl	74e0 <printk>
    4e04:	4810      	ldr	r0, [pc, #64]	; (4e48 <k_mem_slab_alloc+0xbc>)
    4e06:	21ac      	movs	r1, #172	; 0xac
    4e08:	f002 fa96 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4e0c:	f387 8811 	msr	BASEPRI, r7
    4e10:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4e14:	e013      	b.n	4e3e <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4e16:	ea58 0209 	orrs.w	r2, r8, r9
    4e1a:	d103      	bne.n	4e24 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    4e1c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4e1e:	f06f 040b 	mvn.w	r4, #11
    4e22:	e7e1      	b.n	4de8 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4e24:	4622      	mov	r2, r4
    4e26:	e9cd 8900 	strd	r8, r9, [sp]
    4e2a:	4639      	mov	r1, r7
    4e2c:	4628      	mov	r0, r5
    4e2e:	f000 fec7 	bl	5bc0 <z_pend_curr>
		if (result == 0) {
    4e32:	4604      	mov	r4, r0
    4e34:	b918      	cbnz	r0, 4e3e <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    4e36:	4b0a      	ldr	r3, [pc, #40]	; (4e60 <k_mem_slab_alloc+0xd4>)
    4e38:	689b      	ldr	r3, [r3, #8]
    4e3a:	695b      	ldr	r3, [r3, #20]
    4e3c:	6033      	str	r3, [r6, #0]
}
    4e3e:	4620      	mov	r0, r4
    4e40:	b003      	add	sp, #12
    4e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e46:	bf00      	nop
    4e48:	00008177 	.word	0x00008177
    4e4c:	000081c9 	.word	0x000081c9
    4e50:	00008064 	.word	0x00008064
    4e54:	000081de 	.word	0x000081de
    4e58:	0000819d 	.word	0x0000819d
    4e5c:	000081b4 	.word	0x000081b4
    4e60:	20000b30 	.word	0x20000b30

00004e64 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e68:	4604      	mov	r4, r0
    4e6a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4e6c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4e70:	f04f 0320 	mov.w	r3, #32
    4e74:	f3ef 8711 	mrs	r7, BASEPRI
    4e78:	f383 8812 	msr	BASEPRI_MAX, r3
    4e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e80:	4628      	mov	r0, r5
    4e82:	f001 fcf9 	bl	6878 <z_spin_lock_valid>
    4e86:	b968      	cbnz	r0, 4ea4 <k_mem_slab_free+0x40>
    4e88:	4a22      	ldr	r2, [pc, #136]	; (4f14 <k_mem_slab_free+0xb0>)
    4e8a:	4923      	ldr	r1, [pc, #140]	; (4f18 <k_mem_slab_free+0xb4>)
    4e8c:	4823      	ldr	r0, [pc, #140]	; (4f1c <k_mem_slab_free+0xb8>)
    4e8e:	2381      	movs	r3, #129	; 0x81
    4e90:	f002 fb26 	bl	74e0 <printk>
    4e94:	4822      	ldr	r0, [pc, #136]	; (4f20 <k_mem_slab_free+0xbc>)
    4e96:	4629      	mov	r1, r5
    4e98:	f002 fb22 	bl	74e0 <printk>
    4e9c:	481d      	ldr	r0, [pc, #116]	; (4f14 <k_mem_slab_free+0xb0>)
    4e9e:	2181      	movs	r1, #129	; 0x81
    4ea0:	f002 fa4a 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ea4:	4628      	mov	r0, r5
    4ea6:	f001 fd05 	bl	68b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4eaa:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4eae:	f1b8 0f00 	cmp.w	r8, #0
    4eb2:	d10f      	bne.n	4ed4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4eb4:	4620      	mov	r0, r4
    4eb6:	f001 f835 	bl	5f24 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4eba:	b158      	cbz	r0, 4ed4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4ebc:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4ebe:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4ec0:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4ec4:	f000 fcca 	bl	585c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4ec8:	4639      	mov	r1, r7
    4eca:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4ed0:	f000 ba70 	b.w	53b4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4ed4:	6833      	ldr	r3, [r6, #0]
    4ed6:	69a2      	ldr	r2, [r4, #24]
    4ed8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4eda:	6833      	ldr	r3, [r6, #0]
    4edc:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4ede:	69e3      	ldr	r3, [r4, #28]
    4ee0:	3b01      	subs	r3, #1
    4ee2:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ee4:	4628      	mov	r0, r5
    4ee6:	f001 fcd5 	bl	6894 <z_spin_unlock_valid>
    4eea:	b968      	cbnz	r0, 4f08 <k_mem_slab_free+0xa4>
    4eec:	4a09      	ldr	r2, [pc, #36]	; (4f14 <k_mem_slab_free+0xb0>)
    4eee:	490d      	ldr	r1, [pc, #52]	; (4f24 <k_mem_slab_free+0xc0>)
    4ef0:	480a      	ldr	r0, [pc, #40]	; (4f1c <k_mem_slab_free+0xb8>)
    4ef2:	23ac      	movs	r3, #172	; 0xac
    4ef4:	f002 faf4 	bl	74e0 <printk>
    4ef8:	480b      	ldr	r0, [pc, #44]	; (4f28 <k_mem_slab_free+0xc4>)
    4efa:	4629      	mov	r1, r5
    4efc:	f002 faf0 	bl	74e0 <printk>
    4f00:	4804      	ldr	r0, [pc, #16]	; (4f14 <k_mem_slab_free+0xb0>)
    4f02:	21ac      	movs	r1, #172	; 0xac
    4f04:	f002 fa18 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4f08:	f387 8811 	msr	BASEPRI, r7
    4f0c:	f3bf 8f6f 	isb	sy
}
    4f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f14:	00008177 	.word	0x00008177
    4f18:	000081c9 	.word	0x000081c9
    4f1c:	00008064 	.word	0x00008064
    4f20:	000081de 	.word	0x000081de
    4f24:	0000819d 	.word	0x0000819d
    4f28:	000081b4 	.word	0x000081b4

00004f2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f30:	4604      	mov	r4, r0
    4f32:	4616      	mov	r6, r2
    4f34:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f36:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4f3a:	b163      	cbz	r3, 4f56 <z_impl_k_mutex_lock+0x2a>
    4f3c:	4970      	ldr	r1, [pc, #448]	; (5100 <z_impl_k_mutex_lock+0x1d4>)
    4f3e:	4a71      	ldr	r2, [pc, #452]	; (5104 <z_impl_k_mutex_lock+0x1d8>)
    4f40:	4871      	ldr	r0, [pc, #452]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    4f42:	2365      	movs	r3, #101	; 0x65
    4f44:	f002 facc 	bl	74e0 <printk>
    4f48:	4870      	ldr	r0, [pc, #448]	; (510c <z_impl_k_mutex_lock+0x1e0>)
    4f4a:	f002 fac9 	bl	74e0 <printk>
    4f4e:	486d      	ldr	r0, [pc, #436]	; (5104 <z_impl_k_mutex_lock+0x1d8>)
    4f50:	2165      	movs	r1, #101	; 0x65
    4f52:	f002 f9f1 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4f56:	f04f 0320 	mov.w	r3, #32
    4f5a:	f3ef 8811 	mrs	r8, BASEPRI
    4f5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f66:	486a      	ldr	r0, [pc, #424]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4f68:	f001 fc86 	bl	6878 <z_spin_lock_valid>
    4f6c:	b968      	cbnz	r0, 4f8a <z_impl_k_mutex_lock+0x5e>
    4f6e:	4a69      	ldr	r2, [pc, #420]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    4f70:	4969      	ldr	r1, [pc, #420]	; (5118 <z_impl_k_mutex_lock+0x1ec>)
    4f72:	4865      	ldr	r0, [pc, #404]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    4f74:	2381      	movs	r3, #129	; 0x81
    4f76:	f002 fab3 	bl	74e0 <printk>
    4f7a:	4965      	ldr	r1, [pc, #404]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4f7c:	4867      	ldr	r0, [pc, #412]	; (511c <z_impl_k_mutex_lock+0x1f0>)
    4f7e:	f002 faaf 	bl	74e0 <printk>
    4f82:	4864      	ldr	r0, [pc, #400]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    4f84:	2181      	movs	r1, #129	; 0x81
    4f86:	f002 f9d7 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    4f8a:	4861      	ldr	r0, [pc, #388]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4f8c:	f001 fc92 	bl	68b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4f90:	68e3      	ldr	r3, [r4, #12]
    4f92:	4a63      	ldr	r2, [pc, #396]	; (5120 <z_impl_k_mutex_lock+0x1f4>)
    4f94:	b1fb      	cbz	r3, 4fd6 <z_impl_k_mutex_lock+0xaa>
    4f96:	68a0      	ldr	r0, [r4, #8]
    4f98:	6891      	ldr	r1, [r2, #8]
    4f9a:	4288      	cmp	r0, r1
    4f9c:	d03d      	beq.n	501a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4f9e:	ea56 0307 	orrs.w	r3, r6, r7
    4fa2:	d13c      	bne.n	501e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fa4:	485a      	ldr	r0, [pc, #360]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4fa6:	f001 fc75 	bl	6894 <z_spin_unlock_valid>
    4faa:	b968      	cbnz	r0, 4fc8 <z_impl_k_mutex_lock+0x9c>
    4fac:	4a59      	ldr	r2, [pc, #356]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    4fae:	495d      	ldr	r1, [pc, #372]	; (5124 <z_impl_k_mutex_lock+0x1f8>)
    4fb0:	4855      	ldr	r0, [pc, #340]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    4fb2:	23ac      	movs	r3, #172	; 0xac
    4fb4:	f002 fa94 	bl	74e0 <printk>
    4fb8:	4955      	ldr	r1, [pc, #340]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4fba:	485b      	ldr	r0, [pc, #364]	; (5128 <z_impl_k_mutex_lock+0x1fc>)
    4fbc:	f002 fa90 	bl	74e0 <printk>
    4fc0:	4854      	ldr	r0, [pc, #336]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    4fc2:	21ac      	movs	r1, #172	; 0xac
    4fc4:	f002 f9b8 	bl	7338 <assert_post_action>
	__asm__ volatile(
    4fc8:	f388 8811 	msr	BASEPRI, r8
    4fcc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4fd0:	f06f 000f 	mvn.w	r0, #15
    4fd4:	e01e      	b.n	5014 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    4fd6:	6891      	ldr	r1, [r2, #8]
    4fd8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4fdc:	484c      	ldr	r0, [pc, #304]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4fde:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4fe0:	3301      	adds	r3, #1
    4fe2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4fe4:	6893      	ldr	r3, [r2, #8]
    4fe6:	60a3      	str	r3, [r4, #8]
    4fe8:	f001 fc54 	bl	6894 <z_spin_unlock_valid>
    4fec:	b968      	cbnz	r0, 500a <z_impl_k_mutex_lock+0xde>
    4fee:	4a49      	ldr	r2, [pc, #292]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    4ff0:	494c      	ldr	r1, [pc, #304]	; (5124 <z_impl_k_mutex_lock+0x1f8>)
    4ff2:	4845      	ldr	r0, [pc, #276]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    4ff4:	23ac      	movs	r3, #172	; 0xac
    4ff6:	f002 fa73 	bl	74e0 <printk>
    4ffa:	4945      	ldr	r1, [pc, #276]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    4ffc:	484a      	ldr	r0, [pc, #296]	; (5128 <z_impl_k_mutex_lock+0x1fc>)
    4ffe:	f002 fa6f 	bl	74e0 <printk>
    5002:	4844      	ldr	r0, [pc, #272]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    5004:	21ac      	movs	r1, #172	; 0xac
    5006:	f002 f997 	bl	7338 <assert_post_action>
    500a:	f388 8811 	msr	BASEPRI, r8
    500e:	f3bf 8f6f 	isb	sy
		return 0;
    5012:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5014:	b002      	add	sp, #8
    5016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    501a:	6921      	ldr	r1, [r4, #16]
    501c:	e7de      	b.n	4fdc <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    501e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5022:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5026:	4299      	cmp	r1, r3
    5028:	bfa8      	it	ge
    502a:	4619      	movge	r1, r3
    502c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5030:	4291      	cmp	r1, r2
    5032:	bfb8      	it	lt
    5034:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5036:	428b      	cmp	r3, r1
    5038:	dd44      	ble.n	50c4 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    503a:	f000 fdf1 	bl	5c20 <z_set_prio>
    503e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5040:	e9cd 6700 	strd	r6, r7, [sp]
    5044:	4832      	ldr	r0, [pc, #200]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    5046:	4622      	mov	r2, r4
    5048:	4641      	mov	r1, r8
    504a:	f000 fdb9 	bl	5bc0 <z_pend_curr>
	if (got_mutex == 0) {
    504e:	2800      	cmp	r0, #0
    5050:	d0e0      	beq.n	5014 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5052:	f04f 0320 	mov.w	r3, #32
    5056:	f3ef 8611 	mrs	r6, BASEPRI
    505a:	f383 8812 	msr	BASEPRI_MAX, r3
    505e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5062:	482b      	ldr	r0, [pc, #172]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    5064:	f001 fc08 	bl	6878 <z_spin_lock_valid>
    5068:	b968      	cbnz	r0, 5086 <z_impl_k_mutex_lock+0x15a>
    506a:	4a2a      	ldr	r2, [pc, #168]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    506c:	492a      	ldr	r1, [pc, #168]	; (5118 <z_impl_k_mutex_lock+0x1ec>)
    506e:	4826      	ldr	r0, [pc, #152]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    5070:	2381      	movs	r3, #129	; 0x81
    5072:	f002 fa35 	bl	74e0 <printk>
    5076:	4926      	ldr	r1, [pc, #152]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    5078:	4828      	ldr	r0, [pc, #160]	; (511c <z_impl_k_mutex_lock+0x1f0>)
    507a:	f002 fa31 	bl	74e0 <printk>
    507e:	4825      	ldr	r0, [pc, #148]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    5080:	2181      	movs	r1, #129	; 0x81
    5082:	f002 f959 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5086:	4822      	ldr	r0, [pc, #136]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    5088:	f001 fc14 	bl	68b4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    508c:	6823      	ldr	r3, [r4, #0]
    508e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5090:	429c      	cmp	r4, r3
    5092:	d00a      	beq.n	50aa <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5094:	b14b      	cbz	r3, 50aa <z_impl_k_mutex_lock+0x17e>
    5096:	f993 300e 	ldrsb.w	r3, [r3, #14]
    509a:	4299      	cmp	r1, r3
    509c:	bfa8      	it	ge
    509e:	4619      	movge	r1, r3
    50a0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    50a4:	4299      	cmp	r1, r3
    50a6:	bfb8      	it	lt
    50a8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    50aa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    50ac:	f990 300e 	ldrsb.w	r3, [r0, #14]
    50b0:	4299      	cmp	r1, r3
    50b2:	d109      	bne.n	50c8 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    50b4:	b16d      	cbz	r5, 50d2 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    50b6:	4816      	ldr	r0, [pc, #88]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    50b8:	4631      	mov	r1, r6
    50ba:	f000 f97b 	bl	53b4 <z_reschedule>
	return -EAGAIN;
    50be:	f06f 000a 	mvn.w	r0, #10
    50c2:	e7a7      	b.n	5014 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    50c4:	2500      	movs	r5, #0
    50c6:	e7bb      	b.n	5040 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    50c8:	f000 fdaa 	bl	5c20 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    50cc:	2800      	cmp	r0, #0
    50ce:	d1f2      	bne.n	50b6 <z_impl_k_mutex_lock+0x18a>
    50d0:	e7f0      	b.n	50b4 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50d2:	480f      	ldr	r0, [pc, #60]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    50d4:	f001 fbde 	bl	6894 <z_spin_unlock_valid>
    50d8:	b968      	cbnz	r0, 50f6 <z_impl_k_mutex_lock+0x1ca>
    50da:	4a0e      	ldr	r2, [pc, #56]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    50dc:	4911      	ldr	r1, [pc, #68]	; (5124 <z_impl_k_mutex_lock+0x1f8>)
    50de:	480a      	ldr	r0, [pc, #40]	; (5108 <z_impl_k_mutex_lock+0x1dc>)
    50e0:	23ac      	movs	r3, #172	; 0xac
    50e2:	f002 f9fd 	bl	74e0 <printk>
    50e6:	490a      	ldr	r1, [pc, #40]	; (5110 <z_impl_k_mutex_lock+0x1e4>)
    50e8:	480f      	ldr	r0, [pc, #60]	; (5128 <z_impl_k_mutex_lock+0x1fc>)
    50ea:	f002 f9f9 	bl	74e0 <printk>
    50ee:	4809      	ldr	r0, [pc, #36]	; (5114 <z_impl_k_mutex_lock+0x1e8>)
    50f0:	21ac      	movs	r1, #172	; 0xac
    50f2:	f002 f921 	bl	7338 <assert_post_action>
	__asm__ volatile(
    50f6:	f386 8811 	msr	BASEPRI, r6
    50fa:	f3bf 8f6f 	isb	sy
    50fe:	e7de      	b.n	50be <z_impl_k_mutex_lock+0x192>
    5100:	00008946 	.word	0x00008946
    5104:	00008924 	.word	0x00008924
    5108:	00008064 	.word	0x00008064
    510c:	00008958 	.word	0x00008958
    5110:	20000b58 	.word	0x20000b58
    5114:	00008177 	.word	0x00008177
    5118:	000081c9 	.word	0x000081c9
    511c:	000081de 	.word	0x000081de
    5120:	20000b30 	.word	0x20000b30
    5124:	0000819d 	.word	0x0000819d
    5128:	000081b4 	.word	0x000081b4

0000512c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    512c:	b538      	push	{r3, r4, r5, lr}
    512e:	4604      	mov	r4, r0
    5130:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5134:	b163      	cbz	r3, 5150 <z_impl_k_mutex_unlock+0x24>
    5136:	4952      	ldr	r1, [pc, #328]	; (5280 <z_impl_k_mutex_unlock+0x154>)
    5138:	4a52      	ldr	r2, [pc, #328]	; (5284 <z_impl_k_mutex_unlock+0x158>)
    513a:	4853      	ldr	r0, [pc, #332]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    513c:	23c7      	movs	r3, #199	; 0xc7
    513e:	f002 f9cf 	bl	74e0 <printk>
    5142:	4852      	ldr	r0, [pc, #328]	; (528c <z_impl_k_mutex_unlock+0x160>)
    5144:	f002 f9cc 	bl	74e0 <printk>
    5148:	484e      	ldr	r0, [pc, #312]	; (5284 <z_impl_k_mutex_unlock+0x158>)
    514a:	21c7      	movs	r1, #199	; 0xc7
    514c:	f002 f8f4 	bl	7338 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5150:	68a3      	ldr	r3, [r4, #8]
    5152:	2b00      	cmp	r3, #0
    5154:	f000 808d 	beq.w	5272 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5158:	4d4d      	ldr	r5, [pc, #308]	; (5290 <z_impl_k_mutex_unlock+0x164>)
    515a:	68aa      	ldr	r2, [r5, #8]
    515c:	4293      	cmp	r3, r2
    515e:	f040 808b 	bne.w	5278 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5162:	68e3      	ldr	r3, [r4, #12]
    5164:	b94b      	cbnz	r3, 517a <z_impl_k_mutex_unlock+0x4e>
    5166:	494b      	ldr	r1, [pc, #300]	; (5294 <z_impl_k_mutex_unlock+0x168>)
    5168:	4847      	ldr	r0, [pc, #284]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    516a:	4a46      	ldr	r2, [pc, #280]	; (5284 <z_impl_k_mutex_unlock+0x158>)
    516c:	23df      	movs	r3, #223	; 0xdf
    516e:	f002 f9b7 	bl	74e0 <printk>
    5172:	4844      	ldr	r0, [pc, #272]	; (5284 <z_impl_k_mutex_unlock+0x158>)
    5174:	21df      	movs	r1, #223	; 0xdf
    5176:	f002 f8df 	bl	7338 <assert_post_action>
    517a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    517e:	b163      	cbz	r3, 519a <z_impl_k_mutex_unlock+0x6e>
    5180:	493f      	ldr	r1, [pc, #252]	; (5280 <z_impl_k_mutex_unlock+0x154>)
    5182:	4a45      	ldr	r2, [pc, #276]	; (5298 <z_impl_k_mutex_unlock+0x16c>)
    5184:	4840      	ldr	r0, [pc, #256]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    5186:	23fd      	movs	r3, #253	; 0xfd
    5188:	f002 f9aa 	bl	74e0 <printk>
    518c:	4843      	ldr	r0, [pc, #268]	; (529c <z_impl_k_mutex_unlock+0x170>)
    518e:	f002 f9a7 	bl	74e0 <printk>
    5192:	4841      	ldr	r0, [pc, #260]	; (5298 <z_impl_k_mutex_unlock+0x16c>)
    5194:	21fd      	movs	r1, #253	; 0xfd
    5196:	f002 f8cf 	bl	7338 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    519a:	68ab      	ldr	r3, [r5, #8]
    519c:	7bdb      	ldrb	r3, [r3, #15]
    519e:	2b01      	cmp	r3, #1
    51a0:	d10c      	bne.n	51bc <z_impl_k_mutex_unlock+0x90>
    51a2:	493f      	ldr	r1, [pc, #252]	; (52a0 <z_impl_k_mutex_unlock+0x174>)
    51a4:	4a3c      	ldr	r2, [pc, #240]	; (5298 <z_impl_k_mutex_unlock+0x16c>)
    51a6:	4838      	ldr	r0, [pc, #224]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    51a8:	23fe      	movs	r3, #254	; 0xfe
    51aa:	f002 f999 	bl	74e0 <printk>
    51ae:	483b      	ldr	r0, [pc, #236]	; (529c <z_impl_k_mutex_unlock+0x170>)
    51b0:	f002 f996 	bl	74e0 <printk>
    51b4:	4838      	ldr	r0, [pc, #224]	; (5298 <z_impl_k_mutex_unlock+0x16c>)
    51b6:	21fe      	movs	r1, #254	; 0xfe
    51b8:	f002 f8be 	bl	7338 <assert_post_action>

	--_current->base.sched_locked;
    51bc:	68aa      	ldr	r2, [r5, #8]
    51be:	7bd3      	ldrb	r3, [r2, #15]
    51c0:	3b01      	subs	r3, #1
    51c2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    51c4:	68e3      	ldr	r3, [r4, #12]
    51c6:	2b01      	cmp	r3, #1
    51c8:	d905      	bls.n	51d6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    51ca:	3b01      	subs	r3, #1
    51cc:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    51ce:	f000 fe2d 	bl	5e2c <k_sched_unlock>

	return 0;
    51d2:	2000      	movs	r0, #0
}
    51d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    51d6:	f04f 0320 	mov.w	r3, #32
    51da:	f3ef 8511 	mrs	r5, BASEPRI
    51de:	f383 8812 	msr	BASEPRI_MAX, r3
    51e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51e6:	482f      	ldr	r0, [pc, #188]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    51e8:	f001 fb46 	bl	6878 <z_spin_lock_valid>
    51ec:	b968      	cbnz	r0, 520a <z_impl_k_mutex_unlock+0xde>
    51ee:	4a2e      	ldr	r2, [pc, #184]	; (52a8 <z_impl_k_mutex_unlock+0x17c>)
    51f0:	492e      	ldr	r1, [pc, #184]	; (52ac <z_impl_k_mutex_unlock+0x180>)
    51f2:	4825      	ldr	r0, [pc, #148]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    51f4:	2381      	movs	r3, #129	; 0x81
    51f6:	f002 f973 	bl	74e0 <printk>
    51fa:	492a      	ldr	r1, [pc, #168]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    51fc:	482c      	ldr	r0, [pc, #176]	; (52b0 <z_impl_k_mutex_unlock+0x184>)
    51fe:	f002 f96f 	bl	74e0 <printk>
    5202:	4829      	ldr	r0, [pc, #164]	; (52a8 <z_impl_k_mutex_unlock+0x17c>)
    5204:	2181      	movs	r1, #129	; 0x81
    5206:	f002 f897 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    520a:	4826      	ldr	r0, [pc, #152]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    520c:	f001 fb52 	bl	68b4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5210:	68a0      	ldr	r0, [r4, #8]
    5212:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    5214:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5218:	4299      	cmp	r1, r3
    521a:	d001      	beq.n	5220 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    521c:	f000 fd00 	bl	5c20 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5220:	4620      	mov	r0, r4
    5222:	f000 fe7f 	bl	5f24 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5226:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5228:	b158      	cbz	r0, 5242 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    522a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    522e:	6122      	str	r2, [r4, #16]
    5230:	2200      	movs	r2, #0
    5232:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5234:	f000 fb12 	bl	585c <z_ready_thread>
		z_reschedule(&lock, key);
    5238:	481a      	ldr	r0, [pc, #104]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    523a:	4629      	mov	r1, r5
    523c:	f000 f8ba 	bl	53b4 <z_reschedule>
    5240:	e7c5      	b.n	51ce <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    5242:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5244:	4817      	ldr	r0, [pc, #92]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    5246:	f001 fb25 	bl	6894 <z_spin_unlock_valid>
    524a:	b968      	cbnz	r0, 5268 <z_impl_k_mutex_unlock+0x13c>
    524c:	4a16      	ldr	r2, [pc, #88]	; (52a8 <z_impl_k_mutex_unlock+0x17c>)
    524e:	4919      	ldr	r1, [pc, #100]	; (52b4 <z_impl_k_mutex_unlock+0x188>)
    5250:	480d      	ldr	r0, [pc, #52]	; (5288 <z_impl_k_mutex_unlock+0x15c>)
    5252:	23ac      	movs	r3, #172	; 0xac
    5254:	f002 f944 	bl	74e0 <printk>
    5258:	4912      	ldr	r1, [pc, #72]	; (52a4 <z_impl_k_mutex_unlock+0x178>)
    525a:	4817      	ldr	r0, [pc, #92]	; (52b8 <z_impl_k_mutex_unlock+0x18c>)
    525c:	f002 f940 	bl	74e0 <printk>
    5260:	4811      	ldr	r0, [pc, #68]	; (52a8 <z_impl_k_mutex_unlock+0x17c>)
    5262:	21ac      	movs	r1, #172	; 0xac
    5264:	f002 f868 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5268:	f385 8811 	msr	BASEPRI, r5
    526c:	f3bf 8f6f 	isb	sy
    5270:	e7ad      	b.n	51ce <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    5272:	f06f 0015 	mvn.w	r0, #21
    5276:	e7ad      	b.n	51d4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5278:	f04f 30ff 	mov.w	r0, #4294967295
    527c:	e7aa      	b.n	51d4 <z_impl_k_mutex_unlock+0xa8>
    527e:	bf00      	nop
    5280:	00008946 	.word	0x00008946
    5284:	00008924 	.word	0x00008924
    5288:	00008064 	.word	0x00008064
    528c:	00008958 	.word	0x00008958
    5290:	20000b30 	.word	0x20000b30
    5294:	0000897d 	.word	0x0000897d
    5298:	00008994 	.word	0x00008994
    529c:	000089bf 	.word	0x000089bf
    52a0:	000089c2 	.word	0x000089c2
    52a4:	20000b58 	.word	0x20000b58
    52a8:	00008177 	.word	0x00008177
    52ac:	000081c9 	.word	0x000081c9
    52b0:	000081de 	.word	0x000081de
    52b4:	0000819d 	.word	0x0000819d
    52b8:	000081b4 	.word	0x000081b4

000052bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    52bc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    52be:	4c08      	ldr	r4, [pc, #32]	; (52e0 <z_reset_time_slice+0x24>)
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	b15b      	cbz	r3, 52dc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    52c4:	f7fe fce2 	bl	3c8c <sys_clock_elapsed>
    52c8:	4603      	mov	r3, r0
    52ca:	6820      	ldr	r0, [r4, #0]
    52cc:	4a05      	ldr	r2, [pc, #20]	; (52e4 <z_reset_time_slice+0x28>)
    52ce:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    52d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    52d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    52d6:	2100      	movs	r1, #0
    52d8:	f001 bcae 	b.w	6c38 <z_set_timeout_expiry>
}
    52dc:	bd10      	pop	{r4, pc}
    52de:	bf00      	nop
    52e0:	20000b68 	.word	0x20000b68
    52e4:	20000b30 	.word	0x20000b30

000052e8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    52e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ea:	4604      	mov	r4, r0
    52ec:	460d      	mov	r5, r1
	__asm__ volatile(
    52ee:	f04f 0320 	mov.w	r3, #32
    52f2:	f3ef 8611 	mrs	r6, BASEPRI
    52f6:	f383 8812 	msr	BASEPRI_MAX, r3
    52fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52fe:	4823      	ldr	r0, [pc, #140]	; (538c <k_sched_time_slice_set+0xa4>)
    5300:	f001 faba 	bl	6878 <z_spin_lock_valid>
    5304:	b968      	cbnz	r0, 5322 <k_sched_time_slice_set+0x3a>
    5306:	4a22      	ldr	r2, [pc, #136]	; (5390 <k_sched_time_slice_set+0xa8>)
    5308:	4922      	ldr	r1, [pc, #136]	; (5394 <k_sched_time_slice_set+0xac>)
    530a:	4823      	ldr	r0, [pc, #140]	; (5398 <k_sched_time_slice_set+0xb0>)
    530c:	2381      	movs	r3, #129	; 0x81
    530e:	f002 f8e7 	bl	74e0 <printk>
    5312:	491e      	ldr	r1, [pc, #120]	; (538c <k_sched_time_slice_set+0xa4>)
    5314:	4821      	ldr	r0, [pc, #132]	; (539c <k_sched_time_slice_set+0xb4>)
    5316:	f002 f8e3 	bl	74e0 <printk>
    531a:	481d      	ldr	r0, [pc, #116]	; (5390 <k_sched_time_slice_set+0xa8>)
    531c:	2181      	movs	r1, #129	; 0x81
    531e:	f002 f80b 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5322:	481a      	ldr	r0, [pc, #104]	; (538c <k_sched_time_slice_set+0xa4>)
    5324:	f001 fac6 	bl	68b4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5328:	4b1d      	ldr	r3, [pc, #116]	; (53a0 <k_sched_time_slice_set+0xb8>)
    532a:	2200      	movs	r2, #0
    532c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    5330:	f240 30e7 	movw	r0, #999	; 0x3e7
    5334:	2100      	movs	r1, #0
    5336:	611a      	str	r2, [r3, #16]
    5338:	fbe7 0104 	umlal	r0, r1, r7, r4
    533c:	2300      	movs	r3, #0
    533e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5342:	f7fb fad3 	bl	8ec <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5346:	2c00      	cmp	r4, #0
    5348:	4b16      	ldr	r3, [pc, #88]	; (53a4 <k_sched_time_slice_set+0xbc>)
    534a:	dc1b      	bgt.n	5384 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    534c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    534e:	4b16      	ldr	r3, [pc, #88]	; (53a8 <k_sched_time_slice_set+0xc0>)
    5350:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    5352:	f7ff ffb3 	bl	52bc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5356:	480d      	ldr	r0, [pc, #52]	; (538c <k_sched_time_slice_set+0xa4>)
    5358:	f001 fa9c 	bl	6894 <z_spin_unlock_valid>
    535c:	b968      	cbnz	r0, 537a <k_sched_time_slice_set+0x92>
    535e:	4a0c      	ldr	r2, [pc, #48]	; (5390 <k_sched_time_slice_set+0xa8>)
    5360:	4912      	ldr	r1, [pc, #72]	; (53ac <k_sched_time_slice_set+0xc4>)
    5362:	480d      	ldr	r0, [pc, #52]	; (5398 <k_sched_time_slice_set+0xb0>)
    5364:	23ac      	movs	r3, #172	; 0xac
    5366:	f002 f8bb 	bl	74e0 <printk>
    536a:	4908      	ldr	r1, [pc, #32]	; (538c <k_sched_time_slice_set+0xa4>)
    536c:	4810      	ldr	r0, [pc, #64]	; (53b0 <k_sched_time_slice_set+0xc8>)
    536e:	f002 f8b7 	bl	74e0 <printk>
    5372:	4807      	ldr	r0, [pc, #28]	; (5390 <k_sched_time_slice_set+0xa8>)
    5374:	21ac      	movs	r1, #172	; 0xac
    5376:	f001 ffdf 	bl	7338 <assert_post_action>
	__asm__ volatile(
    537a:	f386 8811 	msr	BASEPRI, r6
    537e:	f3bf 8f6f 	isb	sy
	}
}
    5382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    5384:	2802      	cmp	r0, #2
    5386:	bfb8      	it	lt
    5388:	2002      	movlt	r0, #2
    538a:	e7df      	b.n	534c <k_sched_time_slice_set+0x64>
    538c:	20000b60 	.word	0x20000b60
    5390:	00008177 	.word	0x00008177
    5394:	000081c9 	.word	0x000081c9
    5398:	00008064 	.word	0x00008064
    539c:	000081de 	.word	0x000081de
    53a0:	20000b30 	.word	0x20000b30
    53a4:	20000b68 	.word	0x20000b68
    53a8:	20000b64 	.word	0x20000b64
    53ac:	0000819d 	.word	0x0000819d
    53b0:	000081b4 	.word	0x000081b4

000053b4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    53b4:	b538      	push	{r3, r4, r5, lr}
    53b6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    53b8:	460d      	mov	r5, r1
    53ba:	b9e9      	cbnz	r1, 53f8 <z_reschedule+0x44>
    53bc:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    53c0:	b9d3      	cbnz	r3, 53f8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    53c2:	4b19      	ldr	r3, [pc, #100]	; (5428 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    53c4:	69da      	ldr	r2, [r3, #28]
    53c6:	689b      	ldr	r3, [r3, #8]
    53c8:	429a      	cmp	r2, r3
    53ca:	d015      	beq.n	53f8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53cc:	f001 fa62 	bl	6894 <z_spin_unlock_valid>
    53d0:	b968      	cbnz	r0, 53ee <z_reschedule+0x3a>
    53d2:	4a16      	ldr	r2, [pc, #88]	; (542c <z_reschedule+0x78>)
    53d4:	4916      	ldr	r1, [pc, #88]	; (5430 <z_reschedule+0x7c>)
    53d6:	4817      	ldr	r0, [pc, #92]	; (5434 <z_reschedule+0x80>)
    53d8:	23c3      	movs	r3, #195	; 0xc3
    53da:	f002 f881 	bl	74e0 <printk>
    53de:	4816      	ldr	r0, [pc, #88]	; (5438 <z_reschedule+0x84>)
    53e0:	4621      	mov	r1, r4
    53e2:	f002 f87d 	bl	74e0 <printk>
    53e6:	4811      	ldr	r0, [pc, #68]	; (542c <z_reschedule+0x78>)
    53e8:	21c3      	movs	r1, #195	; 0xc3
    53ea:	f001 ffa5 	bl	7338 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    53ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    53f2:	2000      	movs	r0, #0
    53f4:	f7fc bfa2 	b.w	233c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53f8:	4620      	mov	r0, r4
    53fa:	f001 fa4b 	bl	6894 <z_spin_unlock_valid>
    53fe:	b968      	cbnz	r0, 541c <z_reschedule+0x68>
    5400:	4a0a      	ldr	r2, [pc, #40]	; (542c <z_reschedule+0x78>)
    5402:	490b      	ldr	r1, [pc, #44]	; (5430 <z_reschedule+0x7c>)
    5404:	480b      	ldr	r0, [pc, #44]	; (5434 <z_reschedule+0x80>)
    5406:	23ac      	movs	r3, #172	; 0xac
    5408:	f002 f86a 	bl	74e0 <printk>
    540c:	480a      	ldr	r0, [pc, #40]	; (5438 <z_reschedule+0x84>)
    540e:	4621      	mov	r1, r4
    5410:	f002 f866 	bl	74e0 <printk>
    5414:	4805      	ldr	r0, [pc, #20]	; (542c <z_reschedule+0x78>)
    5416:	21ac      	movs	r1, #172	; 0xac
    5418:	f001 ff8e 	bl	7338 <assert_post_action>
    541c:	f385 8811 	msr	BASEPRI, r5
    5420:	f3bf 8f6f 	isb	sy
    5424:	bd38      	pop	{r3, r4, r5, pc}
    5426:	bf00      	nop
    5428:	20000b30 	.word	0x20000b30
    542c:	00008177 	.word	0x00008177
    5430:	0000819d 	.word	0x0000819d
    5434:	00008064 	.word	0x00008064
    5438:	000081b4 	.word	0x000081b4

0000543c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    543c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    543e:	f04f 0320 	mov.w	r3, #32
    5442:	f3ef 8511 	mrs	r5, BASEPRI
    5446:	f383 8812 	msr	BASEPRI_MAX, r3
    544a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    544e:	4829      	ldr	r0, [pc, #164]	; (54f4 <k_sched_lock+0xb8>)
    5450:	f001 fa12 	bl	6878 <z_spin_lock_valid>
    5454:	b968      	cbnz	r0, 5472 <k_sched_lock+0x36>
    5456:	4a28      	ldr	r2, [pc, #160]	; (54f8 <k_sched_lock+0xbc>)
    5458:	4928      	ldr	r1, [pc, #160]	; (54fc <k_sched_lock+0xc0>)
    545a:	4829      	ldr	r0, [pc, #164]	; (5500 <k_sched_lock+0xc4>)
    545c:	2381      	movs	r3, #129	; 0x81
    545e:	f002 f83f 	bl	74e0 <printk>
    5462:	4924      	ldr	r1, [pc, #144]	; (54f4 <k_sched_lock+0xb8>)
    5464:	4827      	ldr	r0, [pc, #156]	; (5504 <k_sched_lock+0xc8>)
    5466:	f002 f83b 	bl	74e0 <printk>
    546a:	4823      	ldr	r0, [pc, #140]	; (54f8 <k_sched_lock+0xbc>)
    546c:	2181      	movs	r1, #129	; 0x81
    546e:	f001 ff63 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5472:	4820      	ldr	r0, [pc, #128]	; (54f4 <k_sched_lock+0xb8>)
    5474:	f001 fa1e 	bl	68b4 <z_spin_lock_set_owner>
    5478:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    547c:	b163      	cbz	r3, 5498 <k_sched_lock+0x5c>
    547e:	4922      	ldr	r1, [pc, #136]	; (5508 <k_sched_lock+0xcc>)
    5480:	4a22      	ldr	r2, [pc, #136]	; (550c <k_sched_lock+0xd0>)
    5482:	481f      	ldr	r0, [pc, #124]	; (5500 <k_sched_lock+0xc4>)
    5484:	23fd      	movs	r3, #253	; 0xfd
    5486:	f002 f82b 	bl	74e0 <printk>
    548a:	4821      	ldr	r0, [pc, #132]	; (5510 <k_sched_lock+0xd4>)
    548c:	f002 f828 	bl	74e0 <printk>
    5490:	481e      	ldr	r0, [pc, #120]	; (550c <k_sched_lock+0xd0>)
    5492:	21fd      	movs	r1, #253	; 0xfd
    5494:	f001 ff50 	bl	7338 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5498:	4c1e      	ldr	r4, [pc, #120]	; (5514 <k_sched_lock+0xd8>)
    549a:	68a2      	ldr	r2, [r4, #8]
    549c:	7bd2      	ldrb	r2, [r2, #15]
    549e:	2a01      	cmp	r2, #1
    54a0:	d10c      	bne.n	54bc <k_sched_lock+0x80>
    54a2:	491d      	ldr	r1, [pc, #116]	; (5518 <k_sched_lock+0xdc>)
    54a4:	4a19      	ldr	r2, [pc, #100]	; (550c <k_sched_lock+0xd0>)
    54a6:	4816      	ldr	r0, [pc, #88]	; (5500 <k_sched_lock+0xc4>)
    54a8:	23fe      	movs	r3, #254	; 0xfe
    54aa:	f002 f819 	bl	74e0 <printk>
    54ae:	4818      	ldr	r0, [pc, #96]	; (5510 <k_sched_lock+0xd4>)
    54b0:	f002 f816 	bl	74e0 <printk>
    54b4:	4815      	ldr	r0, [pc, #84]	; (550c <k_sched_lock+0xd0>)
    54b6:	21fe      	movs	r1, #254	; 0xfe
    54b8:	f001 ff3e 	bl	7338 <assert_post_action>
	--_current->base.sched_locked;
    54bc:	68a2      	ldr	r2, [r4, #8]
    54be:	7bd3      	ldrb	r3, [r2, #15]
    54c0:	3b01      	subs	r3, #1
    54c2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54c4:	480b      	ldr	r0, [pc, #44]	; (54f4 <k_sched_lock+0xb8>)
    54c6:	f001 f9e5 	bl	6894 <z_spin_unlock_valid>
    54ca:	b968      	cbnz	r0, 54e8 <k_sched_lock+0xac>
    54cc:	4a0a      	ldr	r2, [pc, #40]	; (54f8 <k_sched_lock+0xbc>)
    54ce:	4913      	ldr	r1, [pc, #76]	; (551c <k_sched_lock+0xe0>)
    54d0:	480b      	ldr	r0, [pc, #44]	; (5500 <k_sched_lock+0xc4>)
    54d2:	23ac      	movs	r3, #172	; 0xac
    54d4:	f002 f804 	bl	74e0 <printk>
    54d8:	4906      	ldr	r1, [pc, #24]	; (54f4 <k_sched_lock+0xb8>)
    54da:	4811      	ldr	r0, [pc, #68]	; (5520 <k_sched_lock+0xe4>)
    54dc:	f002 f800 	bl	74e0 <printk>
    54e0:	4805      	ldr	r0, [pc, #20]	; (54f8 <k_sched_lock+0xbc>)
    54e2:	21ac      	movs	r1, #172	; 0xac
    54e4:	f001 ff28 	bl	7338 <assert_post_action>
	__asm__ volatile(
    54e8:	f385 8811 	msr	BASEPRI, r5
    54ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    54f0:	bd38      	pop	{r3, r4, r5, pc}
    54f2:	bf00      	nop
    54f4:	20000b60 	.word	0x20000b60
    54f8:	00008177 	.word	0x00008177
    54fc:	000081c9 	.word	0x000081c9
    5500:	00008064 	.word	0x00008064
    5504:	000081de 	.word	0x000081de
    5508:	00008946 	.word	0x00008946
    550c:	00008994 	.word	0x00008994
    5510:	000089bf 	.word	0x000089bf
    5514:	20000b30 	.word	0x20000b30
    5518:	000089c2 	.word	0x000089c2
    551c:	0000819d 	.word	0x0000819d
    5520:	000081b4 	.word	0x000081b4

00005524 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5524:	4b0c      	ldr	r3, [pc, #48]	; (5558 <z_priq_dumb_remove+0x34>)
    5526:	4299      	cmp	r1, r3
{
    5528:	b510      	push	{r4, lr}
    552a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    552c:	d10b      	bne.n	5546 <z_priq_dumb_remove+0x22>
    552e:	490b      	ldr	r1, [pc, #44]	; (555c <z_priq_dumb_remove+0x38>)
    5530:	480b      	ldr	r0, [pc, #44]	; (5560 <z_priq_dumb_remove+0x3c>)
    5532:	4a0c      	ldr	r2, [pc, #48]	; (5564 <z_priq_dumb_remove+0x40>)
    5534:	f240 33e7 	movw	r3, #999	; 0x3e7
    5538:	f001 ffd2 	bl	74e0 <printk>
    553c:	4809      	ldr	r0, [pc, #36]	; (5564 <z_priq_dumb_remove+0x40>)
    553e:	f240 31e7 	movw	r1, #999	; 0x3e7
    5542:	f001 fef9 	bl	7338 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5546:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    554a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    554c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    554e:	2300      	movs	r3, #0
	node->prev = NULL;
    5550:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5554:	bd10      	pop	{r4, pc}
    5556:	bf00      	nop
    5558:	20000340 	.word	0x20000340
    555c:	00008a15 	.word	0x00008a15
    5560:	00008064 	.word	0x00008064
    5564:	000089f3 	.word	0x000089f3

00005568 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    5568:	6883      	ldr	r3, [r0, #8]
{
    556a:	b510      	push	{r4, lr}
    556c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    556e:	b95b      	cbnz	r3, 5588 <unpend_thread_no_timeout+0x20>
    5570:	490b      	ldr	r1, [pc, #44]	; (55a0 <unpend_thread_no_timeout+0x38>)
    5572:	480c      	ldr	r0, [pc, #48]	; (55a4 <unpend_thread_no_timeout+0x3c>)
    5574:	4a0c      	ldr	r2, [pc, #48]	; (55a8 <unpend_thread_no_timeout+0x40>)
    5576:	f240 2383 	movw	r3, #643	; 0x283
    557a:	f001 ffb1 	bl	74e0 <printk>
    557e:	480a      	ldr	r0, [pc, #40]	; (55a8 <unpend_thread_no_timeout+0x40>)
    5580:	f240 2183 	movw	r1, #643	; 0x283
    5584:	f001 fed8 	bl	7338 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5588:	68a0      	ldr	r0, [r4, #8]
    558a:	4621      	mov	r1, r4
    558c:	f7ff ffca 	bl	5524 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5590:	7b63      	ldrb	r3, [r4, #13]
    5592:	f023 0302 	bic.w	r3, r3, #2
    5596:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5598:	2300      	movs	r3, #0
    559a:	60a3      	str	r3, [r4, #8]
}
    559c:	bd10      	pop	{r4, pc}
    559e:	bf00      	nop
    55a0:	00008a36 	.word	0x00008a36
    55a4:	00008064 	.word	0x00008064
    55a8:	000089f3 	.word	0x000089f3

000055ac <update_cache>:
{
    55ac:	b538      	push	{r3, r4, r5, lr}
    55ae:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    55b0:	4814      	ldr	r0, [pc, #80]	; (5604 <update_cache+0x58>)
    55b2:	4d15      	ldr	r5, [pc, #84]	; (5608 <update_cache+0x5c>)
    55b4:	f002 fa01 	bl	79ba <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    55b8:	4604      	mov	r4, r0
    55ba:	b900      	cbnz	r0, 55be <update_cache+0x12>
    55bc:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    55be:	b9ca      	cbnz	r2, 55f4 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    55c0:	68ab      	ldr	r3, [r5, #8]
    55c2:	b963      	cbnz	r3, 55de <update_cache+0x32>
    55c4:	4911      	ldr	r1, [pc, #68]	; (560c <update_cache+0x60>)
    55c6:	4a12      	ldr	r2, [pc, #72]	; (5610 <update_cache+0x64>)
    55c8:	4812      	ldr	r0, [pc, #72]	; (5614 <update_cache+0x68>)
    55ca:	2389      	movs	r3, #137	; 0x89
    55cc:	f001 ff88 	bl	74e0 <printk>
    55d0:	4811      	ldr	r0, [pc, #68]	; (5618 <update_cache+0x6c>)
    55d2:	f001 ff85 	bl	74e0 <printk>
    55d6:	480e      	ldr	r0, [pc, #56]	; (5610 <update_cache+0x64>)
    55d8:	2189      	movs	r1, #137	; 0x89
    55da:	f001 fead 	bl	7338 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    55de:	68ab      	ldr	r3, [r5, #8]
    55e0:	7b5a      	ldrb	r2, [r3, #13]
    55e2:	06d2      	lsls	r2, r2, #27
    55e4:	d106      	bne.n	55f4 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    55e6:	69a2      	ldr	r2, [r4, #24]
    55e8:	b922      	cbnz	r2, 55f4 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    55ea:	89da      	ldrh	r2, [r3, #14]
    55ec:	2a7f      	cmp	r2, #127	; 0x7f
    55ee:	d901      	bls.n	55f4 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    55f0:	61eb      	str	r3, [r5, #28]
}
    55f2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    55f4:	68ab      	ldr	r3, [r5, #8]
    55f6:	42a3      	cmp	r3, r4
    55f8:	d001      	beq.n	55fe <update_cache+0x52>
			z_reset_time_slice();
    55fa:	f7ff fe5f 	bl	52bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    55fe:	61ec      	str	r4, [r5, #28]
}
    5600:	e7f7      	b.n	55f2 <update_cache+0x46>
    5602:	bf00      	nop
    5604:	20000b50 	.word	0x20000b50
    5608:	20000b30 	.word	0x20000b30
    560c:	00008a4d 	.word	0x00008a4d
    5610:	000089f3 	.word	0x000089f3
    5614:	00008064 	.word	0x00008064
    5618:	000089bf 	.word	0x000089bf

0000561c <move_thread_to_end_of_prio_q>:
{
    561c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    561e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5622:	7b43      	ldrb	r3, [r0, #13]
    5624:	2a00      	cmp	r2, #0
{
    5626:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5628:	da06      	bge.n	5638 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    562a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    562e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5630:	4601      	mov	r1, r0
    5632:	481f      	ldr	r0, [pc, #124]	; (56b0 <move_thread_to_end_of_prio_q+0x94>)
    5634:	f7ff ff76 	bl	5524 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5638:	7b63      	ldrb	r3, [r4, #13]
    563a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    563e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5640:	4b1c      	ldr	r3, [pc, #112]	; (56b4 <move_thread_to_end_of_prio_q+0x98>)
    5642:	429c      	cmp	r4, r3
    5644:	d109      	bne.n	565a <move_thread_to_end_of_prio_q+0x3e>
    5646:	491c      	ldr	r1, [pc, #112]	; (56b8 <move_thread_to_end_of_prio_q+0x9c>)
    5648:	481c      	ldr	r0, [pc, #112]	; (56bc <move_thread_to_end_of_prio_q+0xa0>)
    564a:	4a1d      	ldr	r2, [pc, #116]	; (56c0 <move_thread_to_end_of_prio_q+0xa4>)
    564c:	23ba      	movs	r3, #186	; 0xba
    564e:	f001 ff47 	bl	74e0 <printk>
    5652:	481b      	ldr	r0, [pc, #108]	; (56c0 <move_thread_to_end_of_prio_q+0xa4>)
    5654:	21ba      	movs	r1, #186	; 0xba
    5656:	f001 fe6f 	bl	7338 <assert_post_action>
	return list->head == list;
    565a:	4a1a      	ldr	r2, [pc, #104]	; (56c4 <move_thread_to_end_of_prio_q+0xa8>)
    565c:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    565e:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    5660:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5664:	428b      	cmp	r3, r1
    5666:	bf08      	it	eq
    5668:	2300      	moveq	r3, #0
    566a:	2b00      	cmp	r3, #0
    566c:	bf38      	it	cc
    566e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5670:	b1cb      	cbz	r3, 56a6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    5672:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5676:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    567a:	4286      	cmp	r6, r0
    567c:	d00f      	beq.n	569e <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    567e:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5680:	2800      	cmp	r0, #0
    5682:	dd0c      	ble.n	569e <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    5684:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5686:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    568a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    568c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    568e:	6890      	ldr	r0, [r2, #8]
    5690:	1b03      	subs	r3, r0, r4
    5692:	4258      	negs	r0, r3
}
    5694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5698:	4158      	adcs	r0, r3
    569a:	f7ff bf87 	b.w	55ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    569e:	42ab      	cmp	r3, r5
    56a0:	d001      	beq.n	56a6 <move_thread_to_end_of_prio_q+0x8a>
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	e7e4      	b.n	5670 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    56a6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    56aa:	602c      	str	r4, [r5, #0]
	list->tail = node;
    56ac:	6254      	str	r4, [r2, #36]	; 0x24
}
    56ae:	e7ee      	b.n	568e <move_thread_to_end_of_prio_q+0x72>
    56b0:	20000b50 	.word	0x20000b50
    56b4:	20000340 	.word	0x20000340
    56b8:	00008a15 	.word	0x00008a15
    56bc:	00008064 	.word	0x00008064
    56c0:	000089f3 	.word	0x000089f3
    56c4:	20000b30 	.word	0x20000b30

000056c8 <z_time_slice>:
{
    56c8:	b570      	push	{r4, r5, r6, lr}
    56ca:	4604      	mov	r4, r0
	__asm__ volatile(
    56cc:	f04f 0320 	mov.w	r3, #32
    56d0:	f3ef 8511 	mrs	r5, BASEPRI
    56d4:	f383 8812 	msr	BASEPRI_MAX, r3
    56d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56dc:	482a      	ldr	r0, [pc, #168]	; (5788 <z_time_slice+0xc0>)
    56de:	f001 f8cb 	bl	6878 <z_spin_lock_valid>
    56e2:	b968      	cbnz	r0, 5700 <z_time_slice+0x38>
    56e4:	4a29      	ldr	r2, [pc, #164]	; (578c <z_time_slice+0xc4>)
    56e6:	492a      	ldr	r1, [pc, #168]	; (5790 <z_time_slice+0xc8>)
    56e8:	482a      	ldr	r0, [pc, #168]	; (5794 <z_time_slice+0xcc>)
    56ea:	2381      	movs	r3, #129	; 0x81
    56ec:	f001 fef8 	bl	74e0 <printk>
    56f0:	4925      	ldr	r1, [pc, #148]	; (5788 <z_time_slice+0xc0>)
    56f2:	4829      	ldr	r0, [pc, #164]	; (5798 <z_time_slice+0xd0>)
    56f4:	f001 fef4 	bl	74e0 <printk>
    56f8:	4824      	ldr	r0, [pc, #144]	; (578c <z_time_slice+0xc4>)
    56fa:	2181      	movs	r1, #129	; 0x81
    56fc:	f001 fe1c 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5700:	4821      	ldr	r0, [pc, #132]	; (5788 <z_time_slice+0xc0>)
    5702:	f001 f8d7 	bl	68b4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    5706:	4b25      	ldr	r3, [pc, #148]	; (579c <z_time_slice+0xd4>)
    5708:	4a25      	ldr	r2, [pc, #148]	; (57a0 <z_time_slice+0xd8>)
    570a:	6898      	ldr	r0, [r3, #8]
    570c:	6811      	ldr	r1, [r2, #0]
    570e:	4288      	cmp	r0, r1
    5710:	4619      	mov	r1, r3
    5712:	d118      	bne.n	5746 <z_time_slice+0x7e>
			z_reset_time_slice();
    5714:	f7ff fdd2 	bl	52bc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5718:	481b      	ldr	r0, [pc, #108]	; (5788 <z_time_slice+0xc0>)
    571a:	f001 f8bb 	bl	6894 <z_spin_unlock_valid>
    571e:	b968      	cbnz	r0, 573c <z_time_slice+0x74>
    5720:	4a1a      	ldr	r2, [pc, #104]	; (578c <z_time_slice+0xc4>)
    5722:	4920      	ldr	r1, [pc, #128]	; (57a4 <z_time_slice+0xdc>)
    5724:	481b      	ldr	r0, [pc, #108]	; (5794 <z_time_slice+0xcc>)
    5726:	23ac      	movs	r3, #172	; 0xac
    5728:	f001 feda 	bl	74e0 <printk>
    572c:	4916      	ldr	r1, [pc, #88]	; (5788 <z_time_slice+0xc0>)
    572e:	481e      	ldr	r0, [pc, #120]	; (57a8 <z_time_slice+0xe0>)
    5730:	f001 fed6 	bl	74e0 <printk>
    5734:	4815      	ldr	r0, [pc, #84]	; (578c <z_time_slice+0xc4>)
    5736:	21ac      	movs	r1, #172	; 0xac
    5738:	f001 fdfe 	bl	7338 <assert_post_action>
	__asm__ volatile(
    573c:	f385 8811 	msr	BASEPRI, r5
    5740:	f3bf 8f6f 	isb	sy
}
    5744:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5746:	2600      	movs	r6, #0
    5748:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    574a:	4a18      	ldr	r2, [pc, #96]	; (57ac <z_time_slice+0xe4>)
    574c:	6812      	ldr	r2, [r2, #0]
    574e:	b1ba      	cbz	r2, 5780 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5750:	89c2      	ldrh	r2, [r0, #14]
    5752:	2a7f      	cmp	r2, #127	; 0x7f
    5754:	d814      	bhi.n	5780 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    5756:	7b42      	ldrb	r2, [r0, #13]
    5758:	06d2      	lsls	r2, r2, #27
    575a:	d111      	bne.n	5780 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    575c:	4a14      	ldr	r2, [pc, #80]	; (57b0 <z_time_slice+0xe8>)
    575e:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5762:	6812      	ldr	r2, [r2, #0]
    5764:	4296      	cmp	r6, r2
    5766:	db0b      	blt.n	5780 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    5768:	4a12      	ldr	r2, [pc, #72]	; (57b4 <z_time_slice+0xec>)
    576a:	4290      	cmp	r0, r2
    576c:	d008      	beq.n	5780 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    576e:	691a      	ldr	r2, [r3, #16]
    5770:	42a2      	cmp	r2, r4
    5772:	dc02      	bgt.n	577a <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    5774:	f7ff ff52 	bl	561c <move_thread_to_end_of_prio_q>
    5778:	e7cc      	b.n	5714 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    577a:	1b12      	subs	r2, r2, r4
    577c:	611a      	str	r2, [r3, #16]
    577e:	e7cb      	b.n	5718 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    5780:	2300      	movs	r3, #0
    5782:	610b      	str	r3, [r1, #16]
    5784:	e7c8      	b.n	5718 <z_time_slice+0x50>
    5786:	bf00      	nop
    5788:	20000b60 	.word	0x20000b60
    578c:	00008177 	.word	0x00008177
    5790:	000081c9 	.word	0x000081c9
    5794:	00008064 	.word	0x00008064
    5798:	000081de 	.word	0x000081de
    579c:	20000b30 	.word	0x20000b30
    57a0:	20000b5c 	.word	0x20000b5c
    57a4:	0000819d 	.word	0x0000819d
    57a8:	000081b4 	.word	0x000081b4
    57ac:	20000b68 	.word	0x20000b68
    57b0:	20000b64 	.word	0x20000b64
    57b4:	20000340 	.word	0x20000340

000057b8 <ready_thread>:
{
    57b8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    57ba:	f990 200d 	ldrsb.w	r2, [r0, #13]
    57be:	7b43      	ldrb	r3, [r0, #13]
    57c0:	2a00      	cmp	r2, #0
{
    57c2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    57c4:	db3e      	blt.n	5844 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    57c6:	06da      	lsls	r2, r3, #27
    57c8:	d13c      	bne.n	5844 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    57ca:	6985      	ldr	r5, [r0, #24]
    57cc:	2d00      	cmp	r5, #0
    57ce:	d139      	bne.n	5844 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    57d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57d4:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    57d6:	4b1c      	ldr	r3, [pc, #112]	; (5848 <ready_thread+0x90>)
    57d8:	4298      	cmp	r0, r3
    57da:	d109      	bne.n	57f0 <ready_thread+0x38>
    57dc:	491b      	ldr	r1, [pc, #108]	; (584c <ready_thread+0x94>)
    57de:	481c      	ldr	r0, [pc, #112]	; (5850 <ready_thread+0x98>)
    57e0:	4a1c      	ldr	r2, [pc, #112]	; (5854 <ready_thread+0x9c>)
    57e2:	23ba      	movs	r3, #186	; 0xba
    57e4:	f001 fe7c 	bl	74e0 <printk>
    57e8:	481a      	ldr	r0, [pc, #104]	; (5854 <ready_thread+0x9c>)
    57ea:	21ba      	movs	r1, #186	; 0xba
    57ec:	f001 fda4 	bl	7338 <assert_post_action>
	return list->head == list;
    57f0:	4919      	ldr	r1, [pc, #100]	; (5858 <ready_thread+0xa0>)
    57f2:	460b      	mov	r3, r1
    57f4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57f8:	4298      	cmp	r0, r3
    57fa:	bf18      	it	ne
    57fc:	4605      	movne	r5, r0
    57fe:	2d00      	cmp	r5, #0
    5800:	461a      	mov	r2, r3
    5802:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5804:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5806:	bf38      	it	cc
    5808:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    580a:	b1b3      	cbz	r3, 583a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    580c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5810:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5814:	4286      	cmp	r6, r0
    5816:	d00c      	beq.n	5832 <ready_thread+0x7a>
		return b2 - b1;
    5818:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    581a:	2800      	cmp	r0, #0
    581c:	dd09      	ble.n	5832 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    581e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5820:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5824:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5826:	605c      	str	r4, [r3, #4]
}
    5828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    582c:	2000      	movs	r0, #0
    582e:	f7ff bebd 	b.w	55ac <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5832:	42ab      	cmp	r3, r5
    5834:	d001      	beq.n	583a <ready_thread+0x82>
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	e7e7      	b.n	580a <ready_thread+0x52>
	node->prev = tail;
    583a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    583e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5840:	624c      	str	r4, [r1, #36]	; 0x24
}
    5842:	e7f1      	b.n	5828 <ready_thread+0x70>
}
    5844:	bd70      	pop	{r4, r5, r6, pc}
    5846:	bf00      	nop
    5848:	20000340 	.word	0x20000340
    584c:	00008a15 	.word	0x00008a15
    5850:	00008064 	.word	0x00008064
    5854:	000089f3 	.word	0x000089f3
    5858:	20000b30 	.word	0x20000b30

0000585c <z_ready_thread>:
{
    585c:	b538      	push	{r3, r4, r5, lr}
    585e:	4604      	mov	r4, r0
	__asm__ volatile(
    5860:	f04f 0320 	mov.w	r3, #32
    5864:	f3ef 8511 	mrs	r5, BASEPRI
    5868:	f383 8812 	msr	BASEPRI_MAX, r3
    586c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5870:	4817      	ldr	r0, [pc, #92]	; (58d0 <z_ready_thread+0x74>)
    5872:	f001 f801 	bl	6878 <z_spin_lock_valid>
    5876:	b968      	cbnz	r0, 5894 <z_ready_thread+0x38>
    5878:	4a16      	ldr	r2, [pc, #88]	; (58d4 <z_ready_thread+0x78>)
    587a:	4917      	ldr	r1, [pc, #92]	; (58d8 <z_ready_thread+0x7c>)
    587c:	4817      	ldr	r0, [pc, #92]	; (58dc <z_ready_thread+0x80>)
    587e:	2381      	movs	r3, #129	; 0x81
    5880:	f001 fe2e 	bl	74e0 <printk>
    5884:	4912      	ldr	r1, [pc, #72]	; (58d0 <z_ready_thread+0x74>)
    5886:	4816      	ldr	r0, [pc, #88]	; (58e0 <z_ready_thread+0x84>)
    5888:	f001 fe2a 	bl	74e0 <printk>
    588c:	4811      	ldr	r0, [pc, #68]	; (58d4 <z_ready_thread+0x78>)
    588e:	2181      	movs	r1, #129	; 0x81
    5890:	f001 fd52 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5894:	480e      	ldr	r0, [pc, #56]	; (58d0 <z_ready_thread+0x74>)
    5896:	f001 f80d 	bl	68b4 <z_spin_lock_set_owner>
			ready_thread(thread);
    589a:	4620      	mov	r0, r4
    589c:	f7ff ff8c 	bl	57b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58a0:	480b      	ldr	r0, [pc, #44]	; (58d0 <z_ready_thread+0x74>)
    58a2:	f000 fff7 	bl	6894 <z_spin_unlock_valid>
    58a6:	b968      	cbnz	r0, 58c4 <z_ready_thread+0x68>
    58a8:	4a0a      	ldr	r2, [pc, #40]	; (58d4 <z_ready_thread+0x78>)
    58aa:	490e      	ldr	r1, [pc, #56]	; (58e4 <z_ready_thread+0x88>)
    58ac:	480b      	ldr	r0, [pc, #44]	; (58dc <z_ready_thread+0x80>)
    58ae:	23ac      	movs	r3, #172	; 0xac
    58b0:	f001 fe16 	bl	74e0 <printk>
    58b4:	4906      	ldr	r1, [pc, #24]	; (58d0 <z_ready_thread+0x74>)
    58b6:	480c      	ldr	r0, [pc, #48]	; (58e8 <z_ready_thread+0x8c>)
    58b8:	f001 fe12 	bl	74e0 <printk>
    58bc:	4805      	ldr	r0, [pc, #20]	; (58d4 <z_ready_thread+0x78>)
    58be:	21ac      	movs	r1, #172	; 0xac
    58c0:	f001 fd3a 	bl	7338 <assert_post_action>
	__asm__ volatile(
    58c4:	f385 8811 	msr	BASEPRI, r5
    58c8:	f3bf 8f6f 	isb	sy
}
    58cc:	bd38      	pop	{r3, r4, r5, pc}
    58ce:	bf00      	nop
    58d0:	20000b60 	.word	0x20000b60
    58d4:	00008177 	.word	0x00008177
    58d8:	000081c9 	.word	0x000081c9
    58dc:	00008064 	.word	0x00008064
    58e0:	000081de 	.word	0x000081de
    58e4:	0000819d 	.word	0x0000819d
    58e8:	000081b4 	.word	0x000081b4

000058ec <z_sched_start>:
{
    58ec:	b538      	push	{r3, r4, r5, lr}
    58ee:	4604      	mov	r4, r0
	__asm__ volatile(
    58f0:	f04f 0320 	mov.w	r3, #32
    58f4:	f3ef 8511 	mrs	r5, BASEPRI
    58f8:	f383 8812 	msr	BASEPRI_MAX, r3
    58fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5900:	481d      	ldr	r0, [pc, #116]	; (5978 <z_sched_start+0x8c>)
    5902:	f000 ffb9 	bl	6878 <z_spin_lock_valid>
    5906:	b968      	cbnz	r0, 5924 <z_sched_start+0x38>
    5908:	4a1c      	ldr	r2, [pc, #112]	; (597c <z_sched_start+0x90>)
    590a:	491d      	ldr	r1, [pc, #116]	; (5980 <z_sched_start+0x94>)
    590c:	481d      	ldr	r0, [pc, #116]	; (5984 <z_sched_start+0x98>)
    590e:	2381      	movs	r3, #129	; 0x81
    5910:	f001 fde6 	bl	74e0 <printk>
    5914:	4918      	ldr	r1, [pc, #96]	; (5978 <z_sched_start+0x8c>)
    5916:	481c      	ldr	r0, [pc, #112]	; (5988 <z_sched_start+0x9c>)
    5918:	f001 fde2 	bl	74e0 <printk>
    591c:	4817      	ldr	r0, [pc, #92]	; (597c <z_sched_start+0x90>)
    591e:	2181      	movs	r1, #129	; 0x81
    5920:	f001 fd0a 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5924:	4814      	ldr	r0, [pc, #80]	; (5978 <z_sched_start+0x8c>)
    5926:	f000 ffc5 	bl	68b4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    592a:	7b63      	ldrb	r3, [r4, #13]
    592c:	075a      	lsls	r2, r3, #29
    592e:	d416      	bmi.n	595e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5930:	4811      	ldr	r0, [pc, #68]	; (5978 <z_sched_start+0x8c>)
    5932:	f000 ffaf 	bl	6894 <z_spin_unlock_valid>
    5936:	b968      	cbnz	r0, 5954 <z_sched_start+0x68>
    5938:	4a10      	ldr	r2, [pc, #64]	; (597c <z_sched_start+0x90>)
    593a:	4914      	ldr	r1, [pc, #80]	; (598c <z_sched_start+0xa0>)
    593c:	4811      	ldr	r0, [pc, #68]	; (5984 <z_sched_start+0x98>)
    593e:	23ac      	movs	r3, #172	; 0xac
    5940:	f001 fdce 	bl	74e0 <printk>
    5944:	490c      	ldr	r1, [pc, #48]	; (5978 <z_sched_start+0x8c>)
    5946:	4812      	ldr	r0, [pc, #72]	; (5990 <z_sched_start+0xa4>)
    5948:	f001 fdca 	bl	74e0 <printk>
    594c:	480b      	ldr	r0, [pc, #44]	; (597c <z_sched_start+0x90>)
    594e:	21ac      	movs	r1, #172	; 0xac
    5950:	f001 fcf2 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5954:	f385 8811 	msr	BASEPRI, r5
    5958:	f3bf 8f6f 	isb	sy
}
    595c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    595e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5962:	4620      	mov	r0, r4
    5964:	7363      	strb	r3, [r4, #13]
    5966:	f7ff ff27 	bl	57b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    596a:	4629      	mov	r1, r5
    596c:	4802      	ldr	r0, [pc, #8]	; (5978 <z_sched_start+0x8c>)
}
    596e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    5972:	f7ff bd1f 	b.w	53b4 <z_reschedule>
    5976:	bf00      	nop
    5978:	20000b60 	.word	0x20000b60
    597c:	00008177 	.word	0x00008177
    5980:	000081c9 	.word	0x000081c9
    5984:	00008064 	.word	0x00008064
    5988:	000081de 	.word	0x000081de
    598c:	0000819d 	.word	0x0000819d
    5990:	000081b4 	.word	0x000081b4

00005994 <z_thread_timeout>:
{
    5994:	b570      	push	{r4, r5, r6, lr}
    5996:	4604      	mov	r4, r0
	__asm__ volatile(
    5998:	f04f 0320 	mov.w	r3, #32
    599c:	f3ef 8611 	mrs	r6, BASEPRI
    59a0:	f383 8812 	msr	BASEPRI_MAX, r3
    59a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59a8:	4820      	ldr	r0, [pc, #128]	; (5a2c <z_thread_timeout+0x98>)
    59aa:	f000 ff65 	bl	6878 <z_spin_lock_valid>
    59ae:	b968      	cbnz	r0, 59cc <z_thread_timeout+0x38>
    59b0:	4a1f      	ldr	r2, [pc, #124]	; (5a30 <z_thread_timeout+0x9c>)
    59b2:	4920      	ldr	r1, [pc, #128]	; (5a34 <z_thread_timeout+0xa0>)
    59b4:	4820      	ldr	r0, [pc, #128]	; (5a38 <z_thread_timeout+0xa4>)
    59b6:	2381      	movs	r3, #129	; 0x81
    59b8:	f001 fd92 	bl	74e0 <printk>
    59bc:	491b      	ldr	r1, [pc, #108]	; (5a2c <z_thread_timeout+0x98>)
    59be:	481f      	ldr	r0, [pc, #124]	; (5a3c <z_thread_timeout+0xa8>)
    59c0:	f001 fd8e 	bl	74e0 <printk>
    59c4:	481a      	ldr	r0, [pc, #104]	; (5a30 <z_thread_timeout+0x9c>)
    59c6:	2181      	movs	r1, #129	; 0x81
    59c8:	f001 fcb6 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    59cc:	4817      	ldr	r0, [pc, #92]	; (5a2c <z_thread_timeout+0x98>)
    59ce:	f000 ff71 	bl	68b4 <z_spin_lock_set_owner>
		if (!killed) {
    59d2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    59d6:	f013 0f28 	tst.w	r3, #40	; 0x28
    59da:	d110      	bne.n	59fe <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    59dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    59e0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    59e4:	b113      	cbz	r3, 59ec <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    59e6:	4628      	mov	r0, r5
    59e8:	f7ff fdbe 	bl	5568 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    59ec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    59f0:	f023 0314 	bic.w	r3, r3, #20
    59f4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    59f8:	4628      	mov	r0, r5
    59fa:	f7ff fedd 	bl	57b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59fe:	480b      	ldr	r0, [pc, #44]	; (5a2c <z_thread_timeout+0x98>)
    5a00:	f000 ff48 	bl	6894 <z_spin_unlock_valid>
    5a04:	b968      	cbnz	r0, 5a22 <z_thread_timeout+0x8e>
    5a06:	4a0a      	ldr	r2, [pc, #40]	; (5a30 <z_thread_timeout+0x9c>)
    5a08:	490d      	ldr	r1, [pc, #52]	; (5a40 <z_thread_timeout+0xac>)
    5a0a:	480b      	ldr	r0, [pc, #44]	; (5a38 <z_thread_timeout+0xa4>)
    5a0c:	23ac      	movs	r3, #172	; 0xac
    5a0e:	f001 fd67 	bl	74e0 <printk>
    5a12:	4906      	ldr	r1, [pc, #24]	; (5a2c <z_thread_timeout+0x98>)
    5a14:	480b      	ldr	r0, [pc, #44]	; (5a44 <z_thread_timeout+0xb0>)
    5a16:	f001 fd63 	bl	74e0 <printk>
    5a1a:	4805      	ldr	r0, [pc, #20]	; (5a30 <z_thread_timeout+0x9c>)
    5a1c:	21ac      	movs	r1, #172	; 0xac
    5a1e:	f001 fc8b 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5a22:	f386 8811 	msr	BASEPRI, r6
    5a26:	f3bf 8f6f 	isb	sy
}
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
    5a2c:	20000b60 	.word	0x20000b60
    5a30:	00008177 	.word	0x00008177
    5a34:	000081c9 	.word	0x000081c9
    5a38:	00008064 	.word	0x00008064
    5a3c:	000081de 	.word	0x000081de
    5a40:	0000819d 	.word	0x0000819d
    5a44:	000081b4 	.word	0x000081b4

00005a48 <unready_thread>:
{
    5a48:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5a4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5a4e:	7b43      	ldrb	r3, [r0, #13]
    5a50:	2a00      	cmp	r2, #0
{
    5a52:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5a54:	da06      	bge.n	5a64 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a5a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5a5c:	4601      	mov	r1, r0
    5a5e:	4806      	ldr	r0, [pc, #24]	; (5a78 <unready_thread+0x30>)
    5a60:	f7ff fd60 	bl	5524 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5a64:	4b05      	ldr	r3, [pc, #20]	; (5a7c <unready_thread+0x34>)
    5a66:	6898      	ldr	r0, [r3, #8]
    5a68:	1b03      	subs	r3, r0, r4
    5a6a:	4258      	negs	r0, r3
}
    5a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5a70:	4158      	adcs	r0, r3
    5a72:	f7ff bd9b 	b.w	55ac <update_cache>
    5a76:	bf00      	nop
    5a78:	20000b50 	.word	0x20000b50
    5a7c:	20000b30 	.word	0x20000b30

00005a80 <add_to_waitq_locked>:
{
    5a80:	b538      	push	{r3, r4, r5, lr}
    5a82:	4604      	mov	r4, r0
    5a84:	460d      	mov	r5, r1
	unready_thread(thread);
    5a86:	f7ff ffdf 	bl	5a48 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5a8a:	7b63      	ldrb	r3, [r4, #13]
    5a8c:	f043 0302 	orr.w	r3, r3, #2
    5a90:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5a92:	b31d      	cbz	r5, 5adc <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a94:	4b17      	ldr	r3, [pc, #92]	; (5af4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    5a96:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5a98:	429c      	cmp	r4, r3
    5a9a:	d109      	bne.n	5ab0 <add_to_waitq_locked+0x30>
    5a9c:	4916      	ldr	r1, [pc, #88]	; (5af8 <add_to_waitq_locked+0x78>)
    5a9e:	4817      	ldr	r0, [pc, #92]	; (5afc <add_to_waitq_locked+0x7c>)
    5aa0:	4a17      	ldr	r2, [pc, #92]	; (5b00 <add_to_waitq_locked+0x80>)
    5aa2:	23ba      	movs	r3, #186	; 0xba
    5aa4:	f001 fd1c 	bl	74e0 <printk>
    5aa8:	4815      	ldr	r0, [pc, #84]	; (5b00 <add_to_waitq_locked+0x80>)
    5aaa:	21ba      	movs	r1, #186	; 0xba
    5aac:	f001 fc44 	bl	7338 <assert_post_action>
	return list->head == list;
    5ab0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ab2:	429d      	cmp	r5, r3
    5ab4:	bf08      	it	eq
    5ab6:	2300      	moveq	r3, #0
    5ab8:	2b00      	cmp	r3, #0
    5aba:	bf38      	it	cc
    5abc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5abe:	b19b      	cbz	r3, 5ae8 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    5ac0:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5ac4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    5ac8:	4291      	cmp	r1, r2
    5aca:	d008      	beq.n	5ade <add_to_waitq_locked+0x5e>
		return b2 - b1;
    5acc:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ace:	2a00      	cmp	r2, #0
    5ad0:	dd05      	ble.n	5ade <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    5ad2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5ad4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5ad8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5ada:	605c      	str	r4, [r3, #4]
}
    5adc:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    5ade:	686a      	ldr	r2, [r5, #4]
    5ae0:	4293      	cmp	r3, r2
    5ae2:	d001      	beq.n	5ae8 <add_to_waitq_locked+0x68>
    5ae4:	681b      	ldr	r3, [r3, #0]
    5ae6:	e7ea      	b.n	5abe <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    5ae8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5aea:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5aee:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5af0:	606c      	str	r4, [r5, #4]
    5af2:	e7f3      	b.n	5adc <add_to_waitq_locked+0x5c>
    5af4:	20000340 	.word	0x20000340
    5af8:	00008a15 	.word	0x00008a15
    5afc:	00008064 	.word	0x00008064
    5b00:	000089f3 	.word	0x000089f3

00005b04 <pend>:
{
    5b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b08:	4604      	mov	r4, r0
    5b0a:	460d      	mov	r5, r1
    5b0c:	4616      	mov	r6, r2
    5b0e:	461f      	mov	r7, r3
	__asm__ volatile(
    5b10:	f04f 0320 	mov.w	r3, #32
    5b14:	f3ef 8811 	mrs	r8, BASEPRI
    5b18:	f383 8812 	msr	BASEPRI_MAX, r3
    5b1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b20:	481f      	ldr	r0, [pc, #124]	; (5ba0 <pend+0x9c>)
    5b22:	f000 fea9 	bl	6878 <z_spin_lock_valid>
    5b26:	b968      	cbnz	r0, 5b44 <pend+0x40>
    5b28:	4a1e      	ldr	r2, [pc, #120]	; (5ba4 <pend+0xa0>)
    5b2a:	491f      	ldr	r1, [pc, #124]	; (5ba8 <pend+0xa4>)
    5b2c:	481f      	ldr	r0, [pc, #124]	; (5bac <pend+0xa8>)
    5b2e:	2381      	movs	r3, #129	; 0x81
    5b30:	f001 fcd6 	bl	74e0 <printk>
    5b34:	491a      	ldr	r1, [pc, #104]	; (5ba0 <pend+0x9c>)
    5b36:	481e      	ldr	r0, [pc, #120]	; (5bb0 <pend+0xac>)
    5b38:	f001 fcd2 	bl	74e0 <printk>
    5b3c:	4819      	ldr	r0, [pc, #100]	; (5ba4 <pend+0xa0>)
    5b3e:	2181      	movs	r1, #129	; 0x81
    5b40:	f001 fbfa 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b44:	4816      	ldr	r0, [pc, #88]	; (5ba0 <pend+0x9c>)
    5b46:	f000 feb5 	bl	68b4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    5b4a:	4620      	mov	r0, r4
    5b4c:	4629      	mov	r1, r5
    5b4e:	f7ff ff97 	bl	5a80 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b52:	4813      	ldr	r0, [pc, #76]	; (5ba0 <pend+0x9c>)
    5b54:	f000 fe9e 	bl	6894 <z_spin_unlock_valid>
    5b58:	b968      	cbnz	r0, 5b76 <pend+0x72>
    5b5a:	4a12      	ldr	r2, [pc, #72]	; (5ba4 <pend+0xa0>)
    5b5c:	4915      	ldr	r1, [pc, #84]	; (5bb4 <pend+0xb0>)
    5b5e:	4813      	ldr	r0, [pc, #76]	; (5bac <pend+0xa8>)
    5b60:	23ac      	movs	r3, #172	; 0xac
    5b62:	f001 fcbd 	bl	74e0 <printk>
    5b66:	490e      	ldr	r1, [pc, #56]	; (5ba0 <pend+0x9c>)
    5b68:	4813      	ldr	r0, [pc, #76]	; (5bb8 <pend+0xb4>)
    5b6a:	f001 fcb9 	bl	74e0 <printk>
    5b6e:	480d      	ldr	r0, [pc, #52]	; (5ba4 <pend+0xa0>)
    5b70:	21ac      	movs	r1, #172	; 0xac
    5b72:	f001 fbe1 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5b76:	f388 8811 	msr	BASEPRI, r8
    5b7a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b7e:	1c7b      	adds	r3, r7, #1
    5b80:	bf08      	it	eq
    5b82:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5b86:	d008      	beq.n	5b9a <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5b88:	4632      	mov	r2, r6
    5b8a:	463b      	mov	r3, r7
    5b8c:	f104 0018 	add.w	r0, r4, #24
    5b90:	490a      	ldr	r1, [pc, #40]	; (5bbc <pend+0xb8>)
}
    5b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5b96:	f000 bee5 	b.w	6964 <z_add_timeout>
    5b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b9e:	bf00      	nop
    5ba0:	20000b60 	.word	0x20000b60
    5ba4:	00008177 	.word	0x00008177
    5ba8:	000081c9 	.word	0x000081c9
    5bac:	00008064 	.word	0x00008064
    5bb0:	000081de 	.word	0x000081de
    5bb4:	0000819d 	.word	0x0000819d
    5bb8:	000081b4 	.word	0x000081b4
    5bbc:	00005995 	.word	0x00005995

00005bc0 <z_pend_curr>:
{
    5bc0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    5bc2:	4b11      	ldr	r3, [pc, #68]	; (5c08 <z_pend_curr+0x48>)
{
    5bc4:	4604      	mov	r4, r0
	pending_current = _current;
    5bc6:	6898      	ldr	r0, [r3, #8]
    5bc8:	4b10      	ldr	r3, [pc, #64]	; (5c0c <z_pend_curr+0x4c>)
{
    5bca:	460d      	mov	r5, r1
	pending_current = _current;
    5bcc:	6018      	str	r0, [r3, #0]
{
    5bce:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5bd4:	f7ff ff96 	bl	5b04 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bd8:	4620      	mov	r0, r4
    5bda:	f000 fe5b 	bl	6894 <z_spin_unlock_valid>
    5bde:	b968      	cbnz	r0, 5bfc <z_pend_curr+0x3c>
    5be0:	4a0b      	ldr	r2, [pc, #44]	; (5c10 <z_pend_curr+0x50>)
    5be2:	490c      	ldr	r1, [pc, #48]	; (5c14 <z_pend_curr+0x54>)
    5be4:	480c      	ldr	r0, [pc, #48]	; (5c18 <z_pend_curr+0x58>)
    5be6:	23c3      	movs	r3, #195	; 0xc3
    5be8:	f001 fc7a 	bl	74e0 <printk>
    5bec:	480b      	ldr	r0, [pc, #44]	; (5c1c <z_pend_curr+0x5c>)
    5bee:	4621      	mov	r1, r4
    5bf0:	f001 fc76 	bl	74e0 <printk>
    5bf4:	4806      	ldr	r0, [pc, #24]	; (5c10 <z_pend_curr+0x50>)
    5bf6:	21c3      	movs	r1, #195	; 0xc3
    5bf8:	f001 fb9e 	bl	7338 <assert_post_action>
    5bfc:	4628      	mov	r0, r5
}
    5bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5c02:	f7fc bb9b 	b.w	233c <arch_swap>
    5c06:	bf00      	nop
    5c08:	20000b30 	.word	0x20000b30
    5c0c:	20000b5c 	.word	0x20000b5c
    5c10:	00008177 	.word	0x00008177
    5c14:	0000819d 	.word	0x0000819d
    5c18:	00008064 	.word	0x00008064
    5c1c:	000081b4 	.word	0x000081b4

00005c20 <z_set_prio>:
{
    5c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c22:	4604      	mov	r4, r0
    5c24:	460e      	mov	r6, r1
	__asm__ volatile(
    5c26:	f04f 0320 	mov.w	r3, #32
    5c2a:	f3ef 8711 	mrs	r7, BASEPRI
    5c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c36:	483c      	ldr	r0, [pc, #240]	; (5d28 <z_set_prio+0x108>)
    5c38:	f000 fe1e 	bl	6878 <z_spin_lock_valid>
    5c3c:	b968      	cbnz	r0, 5c5a <z_set_prio+0x3a>
    5c3e:	4a3b      	ldr	r2, [pc, #236]	; (5d2c <z_set_prio+0x10c>)
    5c40:	493b      	ldr	r1, [pc, #236]	; (5d30 <z_set_prio+0x110>)
    5c42:	483c      	ldr	r0, [pc, #240]	; (5d34 <z_set_prio+0x114>)
    5c44:	2381      	movs	r3, #129	; 0x81
    5c46:	f001 fc4b 	bl	74e0 <printk>
    5c4a:	4937      	ldr	r1, [pc, #220]	; (5d28 <z_set_prio+0x108>)
    5c4c:	483a      	ldr	r0, [pc, #232]	; (5d38 <z_set_prio+0x118>)
    5c4e:	f001 fc47 	bl	74e0 <printk>
    5c52:	4836      	ldr	r0, [pc, #216]	; (5d2c <z_set_prio+0x10c>)
    5c54:	2181      	movs	r1, #129	; 0x81
    5c56:	f001 fb6f 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5c5a:	4833      	ldr	r0, [pc, #204]	; (5d28 <z_set_prio+0x108>)
    5c5c:	f000 fe2a 	bl	68b4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5c60:	7b63      	ldrb	r3, [r4, #13]
    5c62:	06da      	lsls	r2, r3, #27
    5c64:	b276      	sxtb	r6, r6
    5c66:	d15c      	bne.n	5d22 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    5c68:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    5c6a:	2d00      	cmp	r5, #0
    5c6c:	d159      	bne.n	5d22 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c72:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5c74:	4831      	ldr	r0, [pc, #196]	; (5d3c <z_set_prio+0x11c>)
    5c76:	4621      	mov	r1, r4
    5c78:	f7ff fc54 	bl	5524 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5c7c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5c7e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c84:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c86:	4b2e      	ldr	r3, [pc, #184]	; (5d40 <z_set_prio+0x120>)
    5c88:	429c      	cmp	r4, r3
    5c8a:	d109      	bne.n	5ca0 <z_set_prio+0x80>
    5c8c:	492d      	ldr	r1, [pc, #180]	; (5d44 <z_set_prio+0x124>)
    5c8e:	4829      	ldr	r0, [pc, #164]	; (5d34 <z_set_prio+0x114>)
    5c90:	4a2d      	ldr	r2, [pc, #180]	; (5d48 <z_set_prio+0x128>)
    5c92:	23ba      	movs	r3, #186	; 0xba
    5c94:	f001 fc24 	bl	74e0 <printk>
    5c98:	482b      	ldr	r0, [pc, #172]	; (5d48 <z_set_prio+0x128>)
    5c9a:	21ba      	movs	r1, #186	; 0xba
    5c9c:	f001 fb4c 	bl	7338 <assert_post_action>
	return list->head == list;
    5ca0:	492a      	ldr	r1, [pc, #168]	; (5d4c <z_set_prio+0x12c>)
    5ca2:	460b      	mov	r3, r1
    5ca4:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ca8:	4298      	cmp	r0, r3
    5caa:	bf18      	it	ne
    5cac:	4605      	movne	r5, r0
    5cae:	2d00      	cmp	r5, #0
    5cb0:	461a      	mov	r2, r3
    5cb2:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5cb4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    5cb6:	bf38      	it	cc
    5cb8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cba:	b36b      	cbz	r3, 5d18 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    5cbc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5cc0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5cc4:	4286      	cmp	r6, r0
    5cc6:	d023      	beq.n	5d10 <z_set_prio+0xf0>
		return b2 - b1;
    5cc8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cca:	2800      	cmp	r0, #0
    5ccc:	dd20      	ble.n	5d10 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    5cce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5cd0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5cd4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5cd6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5cd8:	2001      	movs	r0, #1
    5cda:	f7ff fc67 	bl	55ac <update_cache>
    5cde:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ce0:	4811      	ldr	r0, [pc, #68]	; (5d28 <z_set_prio+0x108>)
    5ce2:	f000 fdd7 	bl	6894 <z_spin_unlock_valid>
    5ce6:	b968      	cbnz	r0, 5d04 <z_set_prio+0xe4>
    5ce8:	4a10      	ldr	r2, [pc, #64]	; (5d2c <z_set_prio+0x10c>)
    5cea:	4919      	ldr	r1, [pc, #100]	; (5d50 <z_set_prio+0x130>)
    5cec:	4811      	ldr	r0, [pc, #68]	; (5d34 <z_set_prio+0x114>)
    5cee:	23ac      	movs	r3, #172	; 0xac
    5cf0:	f001 fbf6 	bl	74e0 <printk>
    5cf4:	490c      	ldr	r1, [pc, #48]	; (5d28 <z_set_prio+0x108>)
    5cf6:	4817      	ldr	r0, [pc, #92]	; (5d54 <z_set_prio+0x134>)
    5cf8:	f001 fbf2 	bl	74e0 <printk>
    5cfc:	480b      	ldr	r0, [pc, #44]	; (5d2c <z_set_prio+0x10c>)
    5cfe:	21ac      	movs	r1, #172	; 0xac
    5d00:	f001 fb1a 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5d04:	f387 8811 	msr	BASEPRI, r7
    5d08:	f3bf 8f6f 	isb	sy
}
    5d0c:	4620      	mov	r0, r4
    5d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5d10:	42ab      	cmp	r3, r5
    5d12:	d001      	beq.n	5d18 <z_set_prio+0xf8>
    5d14:	681b      	ldr	r3, [r3, #0]
    5d16:	e7d0      	b.n	5cba <z_set_prio+0x9a>
	node->prev = tail;
    5d18:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    5d1c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5d1e:	624c      	str	r4, [r1, #36]	; 0x24
}
    5d20:	e7da      	b.n	5cd8 <z_set_prio+0xb8>
			thread->base.prio = prio;
    5d22:	73a6      	strb	r6, [r4, #14]
    5d24:	2400      	movs	r4, #0
    5d26:	e7db      	b.n	5ce0 <z_set_prio+0xc0>
    5d28:	20000b60 	.word	0x20000b60
    5d2c:	00008177 	.word	0x00008177
    5d30:	000081c9 	.word	0x000081c9
    5d34:	00008064 	.word	0x00008064
    5d38:	000081de 	.word	0x000081de
    5d3c:	20000b50 	.word	0x20000b50
    5d40:	20000340 	.word	0x20000340
    5d44:	00008a15 	.word	0x00008a15
    5d48:	000089f3 	.word	0x000089f3
    5d4c:	20000b30 	.word	0x20000b30
    5d50:	0000819d 	.word	0x0000819d
    5d54:	000081b4 	.word	0x000081b4

00005d58 <z_impl_k_thread_suspend>:
{
    5d58:	b570      	push	{r4, r5, r6, lr}
    5d5a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5d5c:	3018      	adds	r0, #24
    5d5e:	f000 fed5 	bl	6b0c <z_abort_timeout>
	__asm__ volatile(
    5d62:	f04f 0320 	mov.w	r3, #32
    5d66:	f3ef 8611 	mrs	r6, BASEPRI
    5d6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d72:	4825      	ldr	r0, [pc, #148]	; (5e08 <z_impl_k_thread_suspend+0xb0>)
    5d74:	f000 fd80 	bl	6878 <z_spin_lock_valid>
    5d78:	b968      	cbnz	r0, 5d96 <z_impl_k_thread_suspend+0x3e>
    5d7a:	4a24      	ldr	r2, [pc, #144]	; (5e0c <z_impl_k_thread_suspend+0xb4>)
    5d7c:	4924      	ldr	r1, [pc, #144]	; (5e10 <z_impl_k_thread_suspend+0xb8>)
    5d7e:	4825      	ldr	r0, [pc, #148]	; (5e14 <z_impl_k_thread_suspend+0xbc>)
    5d80:	2381      	movs	r3, #129	; 0x81
    5d82:	f001 fbad 	bl	74e0 <printk>
    5d86:	4920      	ldr	r1, [pc, #128]	; (5e08 <z_impl_k_thread_suspend+0xb0>)
    5d88:	4823      	ldr	r0, [pc, #140]	; (5e18 <z_impl_k_thread_suspend+0xc0>)
    5d8a:	f001 fba9 	bl	74e0 <printk>
    5d8e:	481f      	ldr	r0, [pc, #124]	; (5e0c <z_impl_k_thread_suspend+0xb4>)
    5d90:	2181      	movs	r1, #129	; 0x81
    5d92:	f001 fad1 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d96:	481c      	ldr	r0, [pc, #112]	; (5e08 <z_impl_k_thread_suspend+0xb0>)
    5d98:	f000 fd8c 	bl	68b4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5d9c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    5da0:	7b63      	ldrb	r3, [r4, #13]
    5da2:	2a00      	cmp	r2, #0
    5da4:	da06      	bge.n	5db4 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5daa:	481c      	ldr	r0, [pc, #112]	; (5e1c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5dac:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5dae:	4621      	mov	r1, r4
    5db0:	f7ff fbb8 	bl	5524 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5db4:	4d1a      	ldr	r5, [pc, #104]	; (5e20 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5db6:	7b63      	ldrb	r3, [r4, #13]
    5db8:	68a8      	ldr	r0, [r5, #8]
    5dba:	f043 0310 	orr.w	r3, r3, #16
    5dbe:	7363      	strb	r3, [r4, #13]
    5dc0:	1b03      	subs	r3, r0, r4
    5dc2:	4258      	negs	r0, r3
    5dc4:	4158      	adcs	r0, r3
    5dc6:	f7ff fbf1 	bl	55ac <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dca:	480f      	ldr	r0, [pc, #60]	; (5e08 <z_impl_k_thread_suspend+0xb0>)
    5dcc:	f000 fd62 	bl	6894 <z_spin_unlock_valid>
    5dd0:	b968      	cbnz	r0, 5dee <z_impl_k_thread_suspend+0x96>
    5dd2:	4a0e      	ldr	r2, [pc, #56]	; (5e0c <z_impl_k_thread_suspend+0xb4>)
    5dd4:	4913      	ldr	r1, [pc, #76]	; (5e24 <z_impl_k_thread_suspend+0xcc>)
    5dd6:	480f      	ldr	r0, [pc, #60]	; (5e14 <z_impl_k_thread_suspend+0xbc>)
    5dd8:	23ac      	movs	r3, #172	; 0xac
    5dda:	f001 fb81 	bl	74e0 <printk>
    5dde:	490a      	ldr	r1, [pc, #40]	; (5e08 <z_impl_k_thread_suspend+0xb0>)
    5de0:	4811      	ldr	r0, [pc, #68]	; (5e28 <z_impl_k_thread_suspend+0xd0>)
    5de2:	f001 fb7d 	bl	74e0 <printk>
    5de6:	4809      	ldr	r0, [pc, #36]	; (5e0c <z_impl_k_thread_suspend+0xb4>)
    5de8:	21ac      	movs	r1, #172	; 0xac
    5dea:	f001 faa5 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5dee:	f386 8811 	msr	BASEPRI, r6
    5df2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5df6:	68ab      	ldr	r3, [r5, #8]
    5df8:	42a3      	cmp	r3, r4
    5dfa:	d103      	bne.n	5e04 <z_impl_k_thread_suspend+0xac>
}
    5dfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5e00:	f001 bdd1 	b.w	79a6 <z_reschedule_unlocked>
}
    5e04:	bd70      	pop	{r4, r5, r6, pc}
    5e06:	bf00      	nop
    5e08:	20000b60 	.word	0x20000b60
    5e0c:	00008177 	.word	0x00008177
    5e10:	000081c9 	.word	0x000081c9
    5e14:	00008064 	.word	0x00008064
    5e18:	000081de 	.word	0x000081de
    5e1c:	20000b50 	.word	0x20000b50
    5e20:	20000b30 	.word	0x20000b30
    5e24:	0000819d 	.word	0x0000819d
    5e28:	000081b4 	.word	0x000081b4

00005e2c <k_sched_unlock>:
{
    5e2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e2e:	f04f 0320 	mov.w	r3, #32
    5e32:	f3ef 8511 	mrs	r5, BASEPRI
    5e36:	f383 8812 	msr	BASEPRI_MAX, r3
    5e3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e3e:	482d      	ldr	r0, [pc, #180]	; (5ef4 <k_sched_unlock+0xc8>)
    5e40:	f000 fd1a 	bl	6878 <z_spin_lock_valid>
    5e44:	b968      	cbnz	r0, 5e62 <k_sched_unlock+0x36>
    5e46:	4a2c      	ldr	r2, [pc, #176]	; (5ef8 <k_sched_unlock+0xcc>)
    5e48:	492c      	ldr	r1, [pc, #176]	; (5efc <k_sched_unlock+0xd0>)
    5e4a:	482d      	ldr	r0, [pc, #180]	; (5f00 <k_sched_unlock+0xd4>)
    5e4c:	2381      	movs	r3, #129	; 0x81
    5e4e:	f001 fb47 	bl	74e0 <printk>
    5e52:	4928      	ldr	r1, [pc, #160]	; (5ef4 <k_sched_unlock+0xc8>)
    5e54:	482b      	ldr	r0, [pc, #172]	; (5f04 <k_sched_unlock+0xd8>)
    5e56:	f001 fb43 	bl	74e0 <printk>
    5e5a:	4827      	ldr	r0, [pc, #156]	; (5ef8 <k_sched_unlock+0xcc>)
    5e5c:	2181      	movs	r1, #129	; 0x81
    5e5e:	f001 fa6b 	bl	7338 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    5e62:	4c29      	ldr	r4, [pc, #164]	; (5f08 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    5e64:	4823      	ldr	r0, [pc, #140]	; (5ef4 <k_sched_unlock+0xc8>)
    5e66:	f000 fd25 	bl	68b4 <z_spin_lock_set_owner>
    5e6a:	68a2      	ldr	r2, [r4, #8]
    5e6c:	7bd2      	ldrb	r2, [r2, #15]
    5e6e:	b972      	cbnz	r2, 5e8e <k_sched_unlock+0x62>
    5e70:	4926      	ldr	r1, [pc, #152]	; (5f0c <k_sched_unlock+0xe0>)
    5e72:	4a27      	ldr	r2, [pc, #156]	; (5f10 <k_sched_unlock+0xe4>)
    5e74:	4822      	ldr	r0, [pc, #136]	; (5f00 <k_sched_unlock+0xd4>)
    5e76:	f240 3385 	movw	r3, #901	; 0x385
    5e7a:	f001 fb31 	bl	74e0 <printk>
    5e7e:	4825      	ldr	r0, [pc, #148]	; (5f14 <k_sched_unlock+0xe8>)
    5e80:	f001 fb2e 	bl	74e0 <printk>
    5e84:	4822      	ldr	r0, [pc, #136]	; (5f10 <k_sched_unlock+0xe4>)
    5e86:	f240 3185 	movw	r1, #901	; 0x385
    5e8a:	f001 fa55 	bl	7338 <assert_post_action>
    5e8e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5e92:	b173      	cbz	r3, 5eb2 <k_sched_unlock+0x86>
    5e94:	4920      	ldr	r1, [pc, #128]	; (5f18 <k_sched_unlock+0xec>)
    5e96:	4a1e      	ldr	r2, [pc, #120]	; (5f10 <k_sched_unlock+0xe4>)
    5e98:	4819      	ldr	r0, [pc, #100]	; (5f00 <k_sched_unlock+0xd4>)
    5e9a:	f240 3386 	movw	r3, #902	; 0x386
    5e9e:	f001 fb1f 	bl	74e0 <printk>
    5ea2:	481c      	ldr	r0, [pc, #112]	; (5f14 <k_sched_unlock+0xe8>)
    5ea4:	f001 fb1c 	bl	74e0 <printk>
    5ea8:	4819      	ldr	r0, [pc, #100]	; (5f10 <k_sched_unlock+0xe4>)
    5eaa:	f240 3186 	movw	r1, #902	; 0x386
    5eae:	f001 fa43 	bl	7338 <assert_post_action>
		++_current->base.sched_locked;
    5eb2:	68a2      	ldr	r2, [r4, #8]
    5eb4:	7bd3      	ldrb	r3, [r2, #15]
    5eb6:	3301      	adds	r3, #1
		update_cache(0);
    5eb8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5eba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5ebc:	f7ff fb76 	bl	55ac <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ec0:	480c      	ldr	r0, [pc, #48]	; (5ef4 <k_sched_unlock+0xc8>)
    5ec2:	f000 fce7 	bl	6894 <z_spin_unlock_valid>
    5ec6:	b968      	cbnz	r0, 5ee4 <k_sched_unlock+0xb8>
    5ec8:	4a0b      	ldr	r2, [pc, #44]	; (5ef8 <k_sched_unlock+0xcc>)
    5eca:	4914      	ldr	r1, [pc, #80]	; (5f1c <k_sched_unlock+0xf0>)
    5ecc:	480c      	ldr	r0, [pc, #48]	; (5f00 <k_sched_unlock+0xd4>)
    5ece:	23ac      	movs	r3, #172	; 0xac
    5ed0:	f001 fb06 	bl	74e0 <printk>
    5ed4:	4907      	ldr	r1, [pc, #28]	; (5ef4 <k_sched_unlock+0xc8>)
    5ed6:	4812      	ldr	r0, [pc, #72]	; (5f20 <k_sched_unlock+0xf4>)
    5ed8:	f001 fb02 	bl	74e0 <printk>
    5edc:	4806      	ldr	r0, [pc, #24]	; (5ef8 <k_sched_unlock+0xcc>)
    5ede:	21ac      	movs	r1, #172	; 0xac
    5ee0:	f001 fa2a 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5ee4:	f385 8811 	msr	BASEPRI, r5
    5ee8:	f3bf 8f6f 	isb	sy
}
    5eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    5ef0:	f001 bd59 	b.w	79a6 <z_reschedule_unlocked>
    5ef4:	20000b60 	.word	0x20000b60
    5ef8:	00008177 	.word	0x00008177
    5efc:	000081c9 	.word	0x000081c9
    5f00:	00008064 	.word	0x00008064
    5f04:	000081de 	.word	0x000081de
    5f08:	20000b30 	.word	0x20000b30
    5f0c:	00008a74 	.word	0x00008a74
    5f10:	000089f3 	.word	0x000089f3
    5f14:	000089bf 	.word	0x000089bf
    5f18:	00008946 	.word	0x00008946
    5f1c:	0000819d 	.word	0x0000819d
    5f20:	000081b4 	.word	0x000081b4

00005f24 <z_unpend_first_thread>:
{
    5f24:	b538      	push	{r3, r4, r5, lr}
    5f26:	4604      	mov	r4, r0
	__asm__ volatile(
    5f28:	f04f 0320 	mov.w	r3, #32
    5f2c:	f3ef 8511 	mrs	r5, BASEPRI
    5f30:	f383 8812 	msr	BASEPRI_MAX, r3
    5f34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f38:	481b      	ldr	r0, [pc, #108]	; (5fa8 <z_unpend_first_thread+0x84>)
    5f3a:	f000 fc9d 	bl	6878 <z_spin_lock_valid>
    5f3e:	b968      	cbnz	r0, 5f5c <z_unpend_first_thread+0x38>
    5f40:	4a1a      	ldr	r2, [pc, #104]	; (5fac <z_unpend_first_thread+0x88>)
    5f42:	491b      	ldr	r1, [pc, #108]	; (5fb0 <z_unpend_first_thread+0x8c>)
    5f44:	481b      	ldr	r0, [pc, #108]	; (5fb4 <z_unpend_first_thread+0x90>)
    5f46:	2381      	movs	r3, #129	; 0x81
    5f48:	f001 faca 	bl	74e0 <printk>
    5f4c:	4916      	ldr	r1, [pc, #88]	; (5fa8 <z_unpend_first_thread+0x84>)
    5f4e:	481a      	ldr	r0, [pc, #104]	; (5fb8 <z_unpend_first_thread+0x94>)
    5f50:	f001 fac6 	bl	74e0 <printk>
    5f54:	4815      	ldr	r0, [pc, #84]	; (5fac <z_unpend_first_thread+0x88>)
    5f56:	2181      	movs	r1, #129	; 0x81
    5f58:	f001 f9ee 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f5c:	4812      	ldr	r0, [pc, #72]	; (5fa8 <z_unpend_first_thread+0x84>)
    5f5e:	f000 fca9 	bl	68b4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    5f62:	4620      	mov	r0, r4
    5f64:	f001 fd29 	bl	79ba <z_priq_dumb_best>
		if (thread != NULL) {
    5f68:	4604      	mov	r4, r0
    5f6a:	b128      	cbz	r0, 5f78 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5f6c:	f7ff fafc 	bl	5568 <unpend_thread_no_timeout>
    5f70:	f104 0018 	add.w	r0, r4, #24
    5f74:	f000 fdca 	bl	6b0c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f78:	480b      	ldr	r0, [pc, #44]	; (5fa8 <z_unpend_first_thread+0x84>)
    5f7a:	f000 fc8b 	bl	6894 <z_spin_unlock_valid>
    5f7e:	b968      	cbnz	r0, 5f9c <z_unpend_first_thread+0x78>
    5f80:	4a0a      	ldr	r2, [pc, #40]	; (5fac <z_unpend_first_thread+0x88>)
    5f82:	490e      	ldr	r1, [pc, #56]	; (5fbc <z_unpend_first_thread+0x98>)
    5f84:	480b      	ldr	r0, [pc, #44]	; (5fb4 <z_unpend_first_thread+0x90>)
    5f86:	23ac      	movs	r3, #172	; 0xac
    5f88:	f001 faaa 	bl	74e0 <printk>
    5f8c:	4906      	ldr	r1, [pc, #24]	; (5fa8 <z_unpend_first_thread+0x84>)
    5f8e:	480c      	ldr	r0, [pc, #48]	; (5fc0 <z_unpend_first_thread+0x9c>)
    5f90:	f001 faa6 	bl	74e0 <printk>
    5f94:	4805      	ldr	r0, [pc, #20]	; (5fac <z_unpend_first_thread+0x88>)
    5f96:	21ac      	movs	r1, #172	; 0xac
    5f98:	f001 f9ce 	bl	7338 <assert_post_action>
	__asm__ volatile(
    5f9c:	f385 8811 	msr	BASEPRI, r5
    5fa0:	f3bf 8f6f 	isb	sy
}
    5fa4:	4620      	mov	r0, r4
    5fa6:	bd38      	pop	{r3, r4, r5, pc}
    5fa8:	20000b60 	.word	0x20000b60
    5fac:	00008177 	.word	0x00008177
    5fb0:	000081c9 	.word	0x000081c9
    5fb4:	00008064 	.word	0x00008064
    5fb8:	000081de 	.word	0x000081de
    5fbc:	0000819d 	.word	0x0000819d
    5fc0:	000081b4 	.word	0x000081b4

00005fc4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5fc4:	4b04      	ldr	r3, [pc, #16]	; (5fd8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5fc6:	2100      	movs	r1, #0
    5fc8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5fcc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5fd0:	4608      	mov	r0, r1
    5fd2:	f7ff b989 	b.w	52e8 <k_sched_time_slice_set>
    5fd6:	bf00      	nop
    5fd8:	20000b30 	.word	0x20000b30

00005fdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5fe2:	b173      	cbz	r3, 6002 <z_impl_k_yield+0x26>
    5fe4:	4941      	ldr	r1, [pc, #260]	; (60ec <z_impl_k_yield+0x110>)
    5fe6:	4a42      	ldr	r2, [pc, #264]	; (60f0 <z_impl_k_yield+0x114>)
    5fe8:	4842      	ldr	r0, [pc, #264]	; (60f4 <z_impl_k_yield+0x118>)
    5fea:	f240 43dc 	movw	r3, #1244	; 0x4dc
    5fee:	f001 fa77 	bl	74e0 <printk>
    5ff2:	4841      	ldr	r0, [pc, #260]	; (60f8 <z_impl_k_yield+0x11c>)
    5ff4:	f001 fa74 	bl	74e0 <printk>
    5ff8:	483d      	ldr	r0, [pc, #244]	; (60f0 <z_impl_k_yield+0x114>)
    5ffa:	f240 41dc 	movw	r1, #1244	; 0x4dc
    5ffe:	f001 f99b 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6002:	f04f 0320 	mov.w	r3, #32
    6006:	f3ef 8611 	mrs	r6, BASEPRI
    600a:	f383 8812 	msr	BASEPRI_MAX, r3
    600e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6012:	483a      	ldr	r0, [pc, #232]	; (60fc <z_impl_k_yield+0x120>)
    6014:	f000 fc30 	bl	6878 <z_spin_lock_valid>
    6018:	b968      	cbnz	r0, 6036 <z_impl_k_yield+0x5a>
    601a:	4a39      	ldr	r2, [pc, #228]	; (6100 <z_impl_k_yield+0x124>)
    601c:	4939      	ldr	r1, [pc, #228]	; (6104 <z_impl_k_yield+0x128>)
    601e:	4835      	ldr	r0, [pc, #212]	; (60f4 <z_impl_k_yield+0x118>)
    6020:	2381      	movs	r3, #129	; 0x81
    6022:	f001 fa5d 	bl	74e0 <printk>
    6026:	4935      	ldr	r1, [pc, #212]	; (60fc <z_impl_k_yield+0x120>)
    6028:	4837      	ldr	r0, [pc, #220]	; (6108 <z_impl_k_yield+0x12c>)
    602a:	f001 fa59 	bl	74e0 <printk>
    602e:	4834      	ldr	r0, [pc, #208]	; (6100 <z_impl_k_yield+0x124>)
    6030:	2181      	movs	r1, #129	; 0x81
    6032:	f001 f981 	bl	7338 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6036:	4d35      	ldr	r5, [pc, #212]	; (610c <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    6038:	4830      	ldr	r0, [pc, #192]	; (60fc <z_impl_k_yield+0x120>)
    603a:	f000 fc3b 	bl	68b4 <z_spin_lock_set_owner>
    603e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6040:	7b4b      	ldrb	r3, [r1, #13]
    6042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6046:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6048:	f105 0020 	add.w	r0, r5, #32
    604c:	f7ff fa6a 	bl	5524 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6050:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6052:	7b63      	ldrb	r3, [r4, #13]
    6054:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6058:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    605a:	4b2d      	ldr	r3, [pc, #180]	; (6110 <z_impl_k_yield+0x134>)
    605c:	429c      	cmp	r4, r3
    605e:	d109      	bne.n	6074 <z_impl_k_yield+0x98>
    6060:	492c      	ldr	r1, [pc, #176]	; (6114 <z_impl_k_yield+0x138>)
    6062:	4824      	ldr	r0, [pc, #144]	; (60f4 <z_impl_k_yield+0x118>)
    6064:	4a22      	ldr	r2, [pc, #136]	; (60f0 <z_impl_k_yield+0x114>)
    6066:	23ba      	movs	r3, #186	; 0xba
    6068:	f001 fa3a 	bl	74e0 <printk>
    606c:	4820      	ldr	r0, [pc, #128]	; (60f0 <z_impl_k_yield+0x114>)
    606e:	21ba      	movs	r1, #186	; 0xba
    6070:	f001 f962 	bl	7338 <assert_post_action>
	return list->head == list;
    6074:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6076:	4828      	ldr	r0, [pc, #160]	; (6118 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6078:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    607a:	4283      	cmp	r3, r0
    607c:	bf08      	it	eq
    607e:	2300      	moveq	r3, #0
    6080:	2b00      	cmp	r3, #0
    6082:	bf38      	it	cc
    6084:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6086:	b35b      	cbz	r3, 60e0 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    6088:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    608c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6090:	4297      	cmp	r7, r2
    6092:	d021      	beq.n	60d8 <z_impl_k_yield+0xfc>
		return b2 - b1;
    6094:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    6096:	2a00      	cmp	r2, #0
    6098:	dd1e      	ble.n	60d8 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    609a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    609c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    60a0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    60a2:	605c      	str	r4, [r3, #4]
	update_cache(1);
    60a4:	2001      	movs	r0, #1
    60a6:	f7ff fa81 	bl	55ac <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    60aa:	4814      	ldr	r0, [pc, #80]	; (60fc <z_impl_k_yield+0x120>)
    60ac:	f000 fbf2 	bl	6894 <z_spin_unlock_valid>
    60b0:	b968      	cbnz	r0, 60ce <z_impl_k_yield+0xf2>
    60b2:	4a13      	ldr	r2, [pc, #76]	; (6100 <z_impl_k_yield+0x124>)
    60b4:	4919      	ldr	r1, [pc, #100]	; (611c <z_impl_k_yield+0x140>)
    60b6:	480f      	ldr	r0, [pc, #60]	; (60f4 <z_impl_k_yield+0x118>)
    60b8:	23c3      	movs	r3, #195	; 0xc3
    60ba:	f001 fa11 	bl	74e0 <printk>
    60be:	490f      	ldr	r1, [pc, #60]	; (60fc <z_impl_k_yield+0x120>)
    60c0:	4817      	ldr	r0, [pc, #92]	; (6120 <z_impl_k_yield+0x144>)
    60c2:	f001 fa0d 	bl	74e0 <printk>
    60c6:	480e      	ldr	r0, [pc, #56]	; (6100 <z_impl_k_yield+0x124>)
    60c8:	21c3      	movs	r1, #195	; 0xc3
    60ca:	f001 f935 	bl	7338 <assert_post_action>
    60ce:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    60d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60d4:	f7fc b932 	b.w	233c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    60d8:	428b      	cmp	r3, r1
    60da:	d001      	beq.n	60e0 <z_impl_k_yield+0x104>
    60dc:	681b      	ldr	r3, [r3, #0]
    60de:	e7d2      	b.n	6086 <z_impl_k_yield+0xaa>
	node->prev = tail;
    60e0:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    60e4:	600c      	str	r4, [r1, #0]
	list->tail = node;
    60e6:	626c      	str	r4, [r5, #36]	; 0x24
}
    60e8:	e7dc      	b.n	60a4 <z_impl_k_yield+0xc8>
    60ea:	bf00      	nop
    60ec:	00008946 	.word	0x00008946
    60f0:	000089f3 	.word	0x000089f3
    60f4:	00008064 	.word	0x00008064
    60f8:	000089bf 	.word	0x000089bf
    60fc:	20000b60 	.word	0x20000b60
    6100:	00008177 	.word	0x00008177
    6104:	000081c9 	.word	0x000081c9
    6108:	000081de 	.word	0x000081de
    610c:	20000b30 	.word	0x20000b30
    6110:	20000340 	.word	0x20000340
    6114:	00008a15 	.word	0x00008a15
    6118:	20000b50 	.word	0x20000b50
    611c:	0000819d 	.word	0x0000819d
    6120:	000081b4 	.word	0x000081b4

00006124 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6128:	4604      	mov	r4, r0
    612a:	460d      	mov	r5, r1
    612c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6130:	b173      	cbz	r3, 6150 <z_tick_sleep+0x2c>
    6132:	4945      	ldr	r1, [pc, #276]	; (6248 <z_tick_sleep+0x124>)
    6134:	4a45      	ldr	r2, [pc, #276]	; (624c <z_tick_sleep+0x128>)
    6136:	4846      	ldr	r0, [pc, #280]	; (6250 <z_tick_sleep+0x12c>)
    6138:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    613c:	f001 f9d0 	bl	74e0 <printk>
    6140:	4844      	ldr	r0, [pc, #272]	; (6254 <z_tick_sleep+0x130>)
    6142:	f001 f9cd 	bl	74e0 <printk>
    6146:	4841      	ldr	r0, [pc, #260]	; (624c <z_tick_sleep+0x128>)
    6148:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    614c:	f001 f8f4 	bl	7338 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6150:	ea54 0305 	orrs.w	r3, r4, r5
    6154:	d104      	bne.n	6160 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    6156:	f7ff ff41 	bl	5fdc <z_impl_k_yield>
		k_yield();
		return 0;
    615a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    6160:	f06f 0301 	mvn.w	r3, #1
    6164:	1b1e      	subs	r6, r3, r4
    6166:	f04f 33ff 	mov.w	r3, #4294967295
    616a:	eb63 0705 	sbc.w	r7, r3, r5
    616e:	2e01      	cmp	r6, #1
    6170:	f177 0300 	sbcs.w	r3, r7, #0
    6174:	da64      	bge.n	6240 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6176:	f001 fc3c 	bl	79f2 <sys_clock_tick_get_32>
    617a:	1906      	adds	r6, r0, r4
    617c:	f04f 0320 	mov.w	r3, #32
    6180:	f3ef 8811 	mrs	r8, BASEPRI
    6184:	f383 8812 	msr	BASEPRI_MAX, r3
    6188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    618c:	4832      	ldr	r0, [pc, #200]	; (6258 <z_tick_sleep+0x134>)
    618e:	f000 fb73 	bl	6878 <z_spin_lock_valid>
    6192:	b968      	cbnz	r0, 61b0 <z_tick_sleep+0x8c>
    6194:	4a31      	ldr	r2, [pc, #196]	; (625c <z_tick_sleep+0x138>)
    6196:	4932      	ldr	r1, [pc, #200]	; (6260 <z_tick_sleep+0x13c>)
    6198:	482d      	ldr	r0, [pc, #180]	; (6250 <z_tick_sleep+0x12c>)
    619a:	2381      	movs	r3, #129	; 0x81
    619c:	f001 f9a0 	bl	74e0 <printk>
    61a0:	492d      	ldr	r1, [pc, #180]	; (6258 <z_tick_sleep+0x134>)
    61a2:	4830      	ldr	r0, [pc, #192]	; (6264 <z_tick_sleep+0x140>)
    61a4:	f001 f99c 	bl	74e0 <printk>
    61a8:	482c      	ldr	r0, [pc, #176]	; (625c <z_tick_sleep+0x138>)
    61aa:	2181      	movs	r1, #129	; 0x81
    61ac:	f001 f8c4 	bl	7338 <assert_post_action>
	pending_current = _current;
    61b0:	4f2d      	ldr	r7, [pc, #180]	; (6268 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    61b2:	4829      	ldr	r0, [pc, #164]	; (6258 <z_tick_sleep+0x134>)
    61b4:	f000 fb7e 	bl	68b4 <z_spin_lock_set_owner>
    61b8:	4b2c      	ldr	r3, [pc, #176]	; (626c <z_tick_sleep+0x148>)
    61ba:	68b8      	ldr	r0, [r7, #8]
    61bc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    61be:	f7ff fc43 	bl	5a48 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    61c2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    61c4:	492a      	ldr	r1, [pc, #168]	; (6270 <z_tick_sleep+0x14c>)
    61c6:	4622      	mov	r2, r4
    61c8:	462b      	mov	r3, r5
    61ca:	3018      	adds	r0, #24
    61cc:	f000 fbca 	bl	6964 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    61d0:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61d2:	4821      	ldr	r0, [pc, #132]	; (6258 <z_tick_sleep+0x134>)
    61d4:	7b53      	ldrb	r3, [r2, #13]
    61d6:	f043 0310 	orr.w	r3, r3, #16
    61da:	7353      	strb	r3, [r2, #13]
    61dc:	f000 fb5a 	bl	6894 <z_spin_unlock_valid>
    61e0:	b968      	cbnz	r0, 61fe <z_tick_sleep+0xda>
    61e2:	4a1e      	ldr	r2, [pc, #120]	; (625c <z_tick_sleep+0x138>)
    61e4:	4923      	ldr	r1, [pc, #140]	; (6274 <z_tick_sleep+0x150>)
    61e6:	481a      	ldr	r0, [pc, #104]	; (6250 <z_tick_sleep+0x12c>)
    61e8:	23c3      	movs	r3, #195	; 0xc3
    61ea:	f001 f979 	bl	74e0 <printk>
    61ee:	491a      	ldr	r1, [pc, #104]	; (6258 <z_tick_sleep+0x134>)
    61f0:	4821      	ldr	r0, [pc, #132]	; (6278 <z_tick_sleep+0x154>)
    61f2:	f001 f975 	bl	74e0 <printk>
    61f6:	4819      	ldr	r0, [pc, #100]	; (625c <z_tick_sleep+0x138>)
    61f8:	21c3      	movs	r1, #195	; 0xc3
    61fa:	f001 f89d 	bl	7338 <assert_post_action>
    61fe:	4640      	mov	r0, r8
    6200:	f7fc f89c 	bl	233c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6204:	68bb      	ldr	r3, [r7, #8]
    6206:	7b5b      	ldrb	r3, [r3, #13]
    6208:	06db      	lsls	r3, r3, #27
    620a:	d50e      	bpl.n	622a <z_tick_sleep+0x106>
    620c:	491b      	ldr	r1, [pc, #108]	; (627c <z_tick_sleep+0x158>)
    620e:	4a0f      	ldr	r2, [pc, #60]	; (624c <z_tick_sleep+0x128>)
    6210:	480f      	ldr	r0, [pc, #60]	; (6250 <z_tick_sleep+0x12c>)
    6212:	f240 5319 	movw	r3, #1305	; 0x519
    6216:	f001 f963 	bl	74e0 <printk>
    621a:	480e      	ldr	r0, [pc, #56]	; (6254 <z_tick_sleep+0x130>)
    621c:	f001 f960 	bl	74e0 <printk>
    6220:	480a      	ldr	r0, [pc, #40]	; (624c <z_tick_sleep+0x128>)
    6222:	f240 5119 	movw	r1, #1305	; 0x519
    6226:	f001 f887 	bl	7338 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    622a:	f001 fbe2 	bl	79f2 <sys_clock_tick_get_32>
    622e:	1a30      	subs	r0, r6, r0
    6230:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    6234:	2801      	cmp	r0, #1
    6236:	f171 0300 	sbcs.w	r3, r1, #0
    623a:	bfb8      	it	lt
    623c:	2000      	movlt	r0, #0
    623e:	e78d      	b.n	615c <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6240:	f06f 0601 	mvn.w	r6, #1
    6244:	1b36      	subs	r6, r6, r4
    6246:	e799      	b.n	617c <z_tick_sleep+0x58>
    6248:	00008946 	.word	0x00008946
    624c:	000089f3 	.word	0x000089f3
    6250:	00008064 	.word	0x00008064
    6254:	000089bf 	.word	0x000089bf
    6258:	20000b60 	.word	0x20000b60
    625c:	00008177 	.word	0x00008177
    6260:	000081c9 	.word	0x000081c9
    6264:	000081de 	.word	0x000081de
    6268:	20000b30 	.word	0x20000b30
    626c:	20000b5c 	.word	0x20000b5c
    6270:	00005995 	.word	0x00005995
    6274:	0000819d 	.word	0x0000819d
    6278:	000081b4 	.word	0x000081b4
    627c:	00008aa5 	.word	0x00008aa5

00006280 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6280:	b538      	push	{r3, r4, r5, lr}
    6282:	4604      	mov	r4, r0
    6284:	460d      	mov	r5, r1
    6286:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    628a:	b173      	cbz	r3, 62aa <z_impl_k_sleep+0x2a>
    628c:	4913      	ldr	r1, [pc, #76]	; (62dc <z_impl_k_sleep+0x5c>)
    628e:	4a14      	ldr	r2, [pc, #80]	; (62e0 <z_impl_k_sleep+0x60>)
    6290:	4814      	ldr	r0, [pc, #80]	; (62e4 <z_impl_k_sleep+0x64>)
    6292:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    6296:	f001 f923 	bl	74e0 <printk>
    629a:	4813      	ldr	r0, [pc, #76]	; (62e8 <z_impl_k_sleep+0x68>)
    629c:	f001 f920 	bl	74e0 <printk>
    62a0:	480f      	ldr	r0, [pc, #60]	; (62e0 <z_impl_k_sleep+0x60>)
    62a2:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    62a6:	f001 f847 	bl	7338 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    62aa:	1c6b      	adds	r3, r5, #1
    62ac:	bf08      	it	eq
    62ae:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    62b2:	d106      	bne.n	62c2 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    62b4:	4b0d      	ldr	r3, [pc, #52]	; (62ec <z_impl_k_sleep+0x6c>)
    62b6:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    62b8:	f7ff fd4e 	bl	5d58 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    62bc:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    62c0:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    62c2:	4620      	mov	r0, r4
    62c4:	4629      	mov	r1, r5
    62c6:	f7ff ff2d 	bl	6124 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    62ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    62ce:	fb80 3403 	smull	r3, r4, r0, r3
    62d2:	0bd8      	lsrs	r0, r3, #15
    62d4:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    62d8:	e7f2      	b.n	62c0 <z_impl_k_sleep+0x40>
    62da:	bf00      	nop
    62dc:	00008946 	.word	0x00008946
    62e0:	000089f3 	.word	0x000089f3
    62e4:	00008064 	.word	0x00008064
    62e8:	000089bf 	.word	0x000089bf
    62ec:	20000b30 	.word	0x20000b30

000062f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    62f0:	4b01      	ldr	r3, [pc, #4]	; (62f8 <z_impl_z_current_get+0x8>)
    62f2:	6898      	ldr	r0, [r3, #8]
    62f4:	4770      	bx	lr
    62f6:	bf00      	nop
    62f8:	20000b30 	.word	0x20000b30

000062fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    62fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6300:	4604      	mov	r4, r0
    6302:	f04f 0320 	mov.w	r3, #32
    6306:	f3ef 8611 	mrs	r6, BASEPRI
    630a:	f383 8812 	msr	BASEPRI_MAX, r3
    630e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6312:	4848      	ldr	r0, [pc, #288]	; (6434 <z_thread_abort+0x138>)
    6314:	f000 fab0 	bl	6878 <z_spin_lock_valid>
    6318:	b968      	cbnz	r0, 6336 <z_thread_abort+0x3a>
    631a:	4a47      	ldr	r2, [pc, #284]	; (6438 <z_thread_abort+0x13c>)
    631c:	4947      	ldr	r1, [pc, #284]	; (643c <z_thread_abort+0x140>)
    631e:	4848      	ldr	r0, [pc, #288]	; (6440 <z_thread_abort+0x144>)
    6320:	2381      	movs	r3, #129	; 0x81
    6322:	f001 f8dd 	bl	74e0 <printk>
    6326:	4943      	ldr	r1, [pc, #268]	; (6434 <z_thread_abort+0x138>)
    6328:	4846      	ldr	r0, [pc, #280]	; (6444 <z_thread_abort+0x148>)
    632a:	f001 f8d9 	bl	74e0 <printk>
    632e:	4842      	ldr	r0, [pc, #264]	; (6438 <z_thread_abort+0x13c>)
    6330:	2181      	movs	r1, #129	; 0x81
    6332:	f001 f801 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6336:	483f      	ldr	r0, [pc, #252]	; (6434 <z_thread_abort+0x138>)
    6338:	f000 fabc 	bl	68b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    633c:	7b63      	ldrb	r3, [r4, #13]
    633e:	071a      	lsls	r2, r3, #28
    6340:	d517      	bpl.n	6372 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6342:	483c      	ldr	r0, [pc, #240]	; (6434 <z_thread_abort+0x138>)
    6344:	f000 faa6 	bl	6894 <z_spin_unlock_valid>
    6348:	b968      	cbnz	r0, 6366 <z_thread_abort+0x6a>
    634a:	4a3b      	ldr	r2, [pc, #236]	; (6438 <z_thread_abort+0x13c>)
    634c:	493e      	ldr	r1, [pc, #248]	; (6448 <z_thread_abort+0x14c>)
    634e:	483c      	ldr	r0, [pc, #240]	; (6440 <z_thread_abort+0x144>)
    6350:	23ac      	movs	r3, #172	; 0xac
    6352:	f001 f8c5 	bl	74e0 <printk>
    6356:	4937      	ldr	r1, [pc, #220]	; (6434 <z_thread_abort+0x138>)
    6358:	483c      	ldr	r0, [pc, #240]	; (644c <z_thread_abort+0x150>)
    635a:	f001 f8c1 	bl	74e0 <printk>
    635e:	4836      	ldr	r0, [pc, #216]	; (6438 <z_thread_abort+0x13c>)
    6360:	21ac      	movs	r1, #172	; 0xac
    6362:	f000 ffe9 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6366:	f386 8811 	msr	BASEPRI, r6
    636a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    636e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6372:	f023 0220 	bic.w	r2, r3, #32
    6376:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    637a:	09d2      	lsrs	r2, r2, #7
    637c:	d142      	bne.n	6404 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    637e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6380:	68a3      	ldr	r3, [r4, #8]
    6382:	b113      	cbz	r3, 638a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6384:	4620      	mov	r0, r4
    6386:	f7ff f8ef 	bl	5568 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    638a:	f104 0018 	add.w	r0, r4, #24
    638e:	f000 fbbd 	bl	6b0c <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6392:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6396:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    639a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    639c:	42bd      	cmp	r5, r7
    639e:	d001      	beq.n	63a4 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    63a0:	2d00      	cmp	r5, #0
    63a2:	d139      	bne.n	6418 <z_thread_abort+0x11c>
		update_cache(1);
    63a4:	2001      	movs	r0, #1
    63a6:	f7ff f901 	bl	55ac <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    63aa:	4b29      	ldr	r3, [pc, #164]	; (6450 <z_thread_abort+0x154>)
    63ac:	689b      	ldr	r3, [r3, #8]
    63ae:	42a3      	cmp	r3, r4
    63b0:	d1c7      	bne.n	6342 <z_thread_abort+0x46>
    63b2:	f3ef 8305 	mrs	r3, IPSR
    63b6:	2b00      	cmp	r3, #0
    63b8:	d1c3      	bne.n	6342 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63ba:	481e      	ldr	r0, [pc, #120]	; (6434 <z_thread_abort+0x138>)
    63bc:	f000 fa6a 	bl	6894 <z_spin_unlock_valid>
    63c0:	b968      	cbnz	r0, 63de <z_thread_abort+0xe2>
    63c2:	4a1d      	ldr	r2, [pc, #116]	; (6438 <z_thread_abort+0x13c>)
    63c4:	4920      	ldr	r1, [pc, #128]	; (6448 <z_thread_abort+0x14c>)
    63c6:	481e      	ldr	r0, [pc, #120]	; (6440 <z_thread_abort+0x144>)
    63c8:	23c3      	movs	r3, #195	; 0xc3
    63ca:	f001 f889 	bl	74e0 <printk>
    63ce:	4919      	ldr	r1, [pc, #100]	; (6434 <z_thread_abort+0x138>)
    63d0:	481e      	ldr	r0, [pc, #120]	; (644c <z_thread_abort+0x150>)
    63d2:	f001 f885 	bl	74e0 <printk>
    63d6:	4818      	ldr	r0, [pc, #96]	; (6438 <z_thread_abort+0x13c>)
    63d8:	21c3      	movs	r1, #195	; 0xc3
    63da:	f000 ffad 	bl	7338 <assert_post_action>
    63de:	4630      	mov	r0, r6
    63e0:	f7fb ffac 	bl	233c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    63e4:	4a1b      	ldr	r2, [pc, #108]	; (6454 <z_thread_abort+0x158>)
    63e6:	491c      	ldr	r1, [pc, #112]	; (6458 <z_thread_abort+0x15c>)
    63e8:	4815      	ldr	r0, [pc, #84]	; (6440 <z_thread_abort+0x144>)
    63ea:	f240 634b 	movw	r3, #1611	; 0x64b
    63ee:	f001 f877 	bl	74e0 <printk>
    63f2:	481a      	ldr	r0, [pc, #104]	; (645c <z_thread_abort+0x160>)
    63f4:	f001 f874 	bl	74e0 <printk>
    63f8:	4816      	ldr	r0, [pc, #88]	; (6454 <z_thread_abort+0x158>)
    63fa:	f240 614b 	movw	r1, #1611	; 0x64b
    63fe:	f000 ff9b 	bl	7338 <assert_post_action>
    6402:	e79e      	b.n	6342 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6404:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6408:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    640c:	4814      	ldr	r0, [pc, #80]	; (6460 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    640e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6410:	4621      	mov	r1, r4
    6412:	f7ff f887 	bl	5524 <z_priq_dumb_remove>
}
    6416:	e7b3      	b.n	6380 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    6418:	4628      	mov	r0, r5
    641a:	f7ff f8a5 	bl	5568 <unpend_thread_no_timeout>
    641e:	f105 0018 	add.w	r0, r5, #24
    6422:	f000 fb73 	bl	6b0c <z_abort_timeout>
    6426:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    642a:	4628      	mov	r0, r5
    642c:	f7ff f9c4 	bl	57b8 <ready_thread>
    6430:	e7b3      	b.n	639a <z_thread_abort+0x9e>
    6432:	bf00      	nop
    6434:	20000b60 	.word	0x20000b60
    6438:	00008177 	.word	0x00008177
    643c:	000081c9 	.word	0x000081c9
    6440:	00008064 	.word	0x00008064
    6444:	000081de 	.word	0x000081de
    6448:	0000819d 	.word	0x0000819d
    644c:	000081b4 	.word	0x000081b4
    6450:	20000b30 	.word	0x20000b30
    6454:	000089f3 	.word	0x000089f3
    6458:	0000815f 	.word	0x0000815f
    645c:	00008ae5 	.word	0x00008ae5
    6460:	20000b50 	.word	0x20000b50

00006464 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6464:	b538      	push	{r3, r4, r5, lr}
    6466:	4604      	mov	r4, r0
	__asm__ volatile(
    6468:	f04f 0320 	mov.w	r3, #32
    646c:	f3ef 8511 	mrs	r5, BASEPRI
    6470:	f383 8812 	msr	BASEPRI_MAX, r3
    6474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6478:	4814      	ldr	r0, [pc, #80]	; (64cc <z_impl_k_sem_give+0x68>)
    647a:	f000 f9fd 	bl	6878 <z_spin_lock_valid>
    647e:	b968      	cbnz	r0, 649c <z_impl_k_sem_give+0x38>
    6480:	4a13      	ldr	r2, [pc, #76]	; (64d0 <z_impl_k_sem_give+0x6c>)
    6482:	4914      	ldr	r1, [pc, #80]	; (64d4 <z_impl_k_sem_give+0x70>)
    6484:	4814      	ldr	r0, [pc, #80]	; (64d8 <z_impl_k_sem_give+0x74>)
    6486:	2381      	movs	r3, #129	; 0x81
    6488:	f001 f82a 	bl	74e0 <printk>
    648c:	490f      	ldr	r1, [pc, #60]	; (64cc <z_impl_k_sem_give+0x68>)
    648e:	4813      	ldr	r0, [pc, #76]	; (64dc <z_impl_k_sem_give+0x78>)
    6490:	f001 f826 	bl	74e0 <printk>
    6494:	480e      	ldr	r0, [pc, #56]	; (64d0 <z_impl_k_sem_give+0x6c>)
    6496:	2181      	movs	r1, #129	; 0x81
    6498:	f000 ff4e 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    649c:	480b      	ldr	r0, [pc, #44]	; (64cc <z_impl_k_sem_give+0x68>)
    649e:	f000 fa09 	bl	68b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    64a2:	4620      	mov	r0, r4
    64a4:	f7ff fd3e 	bl	5f24 <z_unpend_first_thread>

	if (thread != NULL) {
    64a8:	b148      	cbz	r0, 64be <z_impl_k_sem_give+0x5a>
    64aa:	2200      	movs	r2, #0
    64ac:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    64ae:	f7ff f9d5 	bl	585c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    64b2:	4629      	mov	r1, r5
    64b4:	4805      	ldr	r0, [pc, #20]	; (64cc <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    64b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    64ba:	f7fe bf7b 	b.w	53b4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    64be:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    64c2:	429a      	cmp	r2, r3
    64c4:	bf18      	it	ne
    64c6:	3301      	addne	r3, #1
    64c8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    64ca:	e7f2      	b.n	64b2 <z_impl_k_sem_give+0x4e>
    64cc:	20000b6c 	.word	0x20000b6c
    64d0:	00008177 	.word	0x00008177
    64d4:	000081c9 	.word	0x000081c9
    64d8:	00008064 	.word	0x00008064
    64dc:	000081de 	.word	0x000081de

000064e0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    64e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    64e2:	4604      	mov	r4, r0
    64e4:	4616      	mov	r6, r2
    64e6:	461f      	mov	r7, r3
    64e8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    64ec:	b17b      	cbz	r3, 650e <z_impl_k_sem_take+0x2e>
    64ee:	ea56 0307 	orrs.w	r3, r6, r7
    64f2:	d00c      	beq.n	650e <z_impl_k_sem_take+0x2e>
    64f4:	4935      	ldr	r1, [pc, #212]	; (65cc <z_impl_k_sem_take+0xec>)
    64f6:	4a36      	ldr	r2, [pc, #216]	; (65d0 <z_impl_k_sem_take+0xf0>)
    64f8:	4836      	ldr	r0, [pc, #216]	; (65d4 <z_impl_k_sem_take+0xf4>)
    64fa:	2379      	movs	r3, #121	; 0x79
    64fc:	f000 fff0 	bl	74e0 <printk>
    6500:	4835      	ldr	r0, [pc, #212]	; (65d8 <z_impl_k_sem_take+0xf8>)
    6502:	f000 ffed 	bl	74e0 <printk>
    6506:	4832      	ldr	r0, [pc, #200]	; (65d0 <z_impl_k_sem_take+0xf0>)
    6508:	2179      	movs	r1, #121	; 0x79
    650a:	f000 ff15 	bl	7338 <assert_post_action>
    650e:	f04f 0320 	mov.w	r3, #32
    6512:	f3ef 8511 	mrs	r5, BASEPRI
    6516:	f383 8812 	msr	BASEPRI_MAX, r3
    651a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    651e:	482f      	ldr	r0, [pc, #188]	; (65dc <z_impl_k_sem_take+0xfc>)
    6520:	f000 f9aa 	bl	6878 <z_spin_lock_valid>
    6524:	b968      	cbnz	r0, 6542 <z_impl_k_sem_take+0x62>
    6526:	4a2e      	ldr	r2, [pc, #184]	; (65e0 <z_impl_k_sem_take+0x100>)
    6528:	492e      	ldr	r1, [pc, #184]	; (65e4 <z_impl_k_sem_take+0x104>)
    652a:	482a      	ldr	r0, [pc, #168]	; (65d4 <z_impl_k_sem_take+0xf4>)
    652c:	2381      	movs	r3, #129	; 0x81
    652e:	f000 ffd7 	bl	74e0 <printk>
    6532:	492a      	ldr	r1, [pc, #168]	; (65dc <z_impl_k_sem_take+0xfc>)
    6534:	482c      	ldr	r0, [pc, #176]	; (65e8 <z_impl_k_sem_take+0x108>)
    6536:	f000 ffd3 	bl	74e0 <printk>
    653a:	4829      	ldr	r0, [pc, #164]	; (65e0 <z_impl_k_sem_take+0x100>)
    653c:	2181      	movs	r1, #129	; 0x81
    653e:	f000 fefb 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6542:	4826      	ldr	r0, [pc, #152]	; (65dc <z_impl_k_sem_take+0xfc>)
    6544:	f000 f9b6 	bl	68b4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6548:	68a3      	ldr	r3, [r4, #8]
    654a:	b1d3      	cbz	r3, 6582 <z_impl_k_sem_take+0xa2>
		sem->count--;
    654c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    654e:	4823      	ldr	r0, [pc, #140]	; (65dc <z_impl_k_sem_take+0xfc>)
    6550:	60a3      	str	r3, [r4, #8]
    6552:	f000 f99f 	bl	6894 <z_spin_unlock_valid>
    6556:	b968      	cbnz	r0, 6574 <z_impl_k_sem_take+0x94>
    6558:	4a21      	ldr	r2, [pc, #132]	; (65e0 <z_impl_k_sem_take+0x100>)
    655a:	4924      	ldr	r1, [pc, #144]	; (65ec <z_impl_k_sem_take+0x10c>)
    655c:	481d      	ldr	r0, [pc, #116]	; (65d4 <z_impl_k_sem_take+0xf4>)
    655e:	23ac      	movs	r3, #172	; 0xac
    6560:	f000 ffbe 	bl	74e0 <printk>
    6564:	491d      	ldr	r1, [pc, #116]	; (65dc <z_impl_k_sem_take+0xfc>)
    6566:	4822      	ldr	r0, [pc, #136]	; (65f0 <z_impl_k_sem_take+0x110>)
    6568:	f000 ffba 	bl	74e0 <printk>
    656c:	481c      	ldr	r0, [pc, #112]	; (65e0 <z_impl_k_sem_take+0x100>)
    656e:	21ac      	movs	r1, #172	; 0xac
    6570:	f000 fee2 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6574:	f385 8811 	msr	BASEPRI, r5
    6578:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    657c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    657e:	b003      	add	sp, #12
    6580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6582:	ea56 0307 	orrs.w	r3, r6, r7
    6586:	d118      	bne.n	65ba <z_impl_k_sem_take+0xda>
    6588:	4814      	ldr	r0, [pc, #80]	; (65dc <z_impl_k_sem_take+0xfc>)
    658a:	f000 f983 	bl	6894 <z_spin_unlock_valid>
    658e:	b968      	cbnz	r0, 65ac <z_impl_k_sem_take+0xcc>
    6590:	4a13      	ldr	r2, [pc, #76]	; (65e0 <z_impl_k_sem_take+0x100>)
    6592:	4916      	ldr	r1, [pc, #88]	; (65ec <z_impl_k_sem_take+0x10c>)
    6594:	480f      	ldr	r0, [pc, #60]	; (65d4 <z_impl_k_sem_take+0xf4>)
    6596:	23ac      	movs	r3, #172	; 0xac
    6598:	f000 ffa2 	bl	74e0 <printk>
    659c:	490f      	ldr	r1, [pc, #60]	; (65dc <z_impl_k_sem_take+0xfc>)
    659e:	4814      	ldr	r0, [pc, #80]	; (65f0 <z_impl_k_sem_take+0x110>)
    65a0:	f000 ff9e 	bl	74e0 <printk>
    65a4:	480e      	ldr	r0, [pc, #56]	; (65e0 <z_impl_k_sem_take+0x100>)
    65a6:	21ac      	movs	r1, #172	; 0xac
    65a8:	f000 fec6 	bl	7338 <assert_post_action>
    65ac:	f385 8811 	msr	BASEPRI, r5
    65b0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    65b4:	f06f 000f 	mvn.w	r0, #15
    65b8:	e7e1      	b.n	657e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    65ba:	e9cd 6700 	strd	r6, r7, [sp]
    65be:	4622      	mov	r2, r4
    65c0:	4629      	mov	r1, r5
    65c2:	4806      	ldr	r0, [pc, #24]	; (65dc <z_impl_k_sem_take+0xfc>)
    65c4:	f7ff fafc 	bl	5bc0 <z_pend_curr>
	return ret;
    65c8:	e7d9      	b.n	657e <z_impl_k_sem_take+0x9e>
    65ca:	bf00      	nop
    65cc:	00008b27 	.word	0x00008b27
    65d0:	00008b07 	.word	0x00008b07
    65d4:	00008064 	.word	0x00008064
    65d8:	000089bf 	.word	0x000089bf
    65dc:	20000b6c 	.word	0x20000b6c
    65e0:	00008177 	.word	0x00008177
    65e4:	000081c9 	.word	0x000081c9
    65e8:	000081de 	.word	0x000081de
    65ec:	0000819d 	.word	0x0000819d
    65f0:	000081b4 	.word	0x000081b4

000065f4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    65f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65f8:	b085      	sub	sp, #20
    65fa:	4604      	mov	r4, r0
    65fc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6600:	f1b8 0f0f 	cmp.w	r8, #15
{
    6604:	460f      	mov	r7, r1
    6606:	4615      	mov	r5, r2
    6608:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    660a:	d132      	bne.n	6672 <z_setup_new_thread+0x7e>
    660c:	4b25      	ldr	r3, [pc, #148]	; (66a4 <z_setup_new_thread+0xb0>)
    660e:	4599      	cmp	r9, r3
    6610:	d133      	bne.n	667a <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    6612:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    6616:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    661a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    661c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    661e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6620:	2304      	movs	r3, #4
    6622:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6624:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6628:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    662c:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6630:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6632:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6636:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6638:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    663c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    663e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6640:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6644:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6646:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6648:	464b      	mov	r3, r9
	node->prev = NULL;
    664a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    664e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6650:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6652:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6654:	4642      	mov	r2, r8
    6656:	4639      	mov	r1, r7
    6658:	4620      	mov	r0, r4
    665a:	f7fb fe89 	bl	2370 <arch_new_thread>
	if (!_current) {
    665e:	4b12      	ldr	r3, [pc, #72]	; (66a8 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6660:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6662:	689b      	ldr	r3, [r3, #8]
    6664:	b103      	cbz	r3, 6668 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6668:	6723      	str	r3, [r4, #112]	; 0x70
}
    666a:	4640      	mov	r0, r8
    666c:	b005      	add	sp, #20
    666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6672:	f108 0310 	add.w	r3, r8, #16
    6676:	2b1e      	cmp	r3, #30
    6678:	d9cb      	bls.n	6612 <z_setup_new_thread+0x1e>
    667a:	4a0c      	ldr	r2, [pc, #48]	; (66ac <z_setup_new_thread+0xb8>)
    667c:	490c      	ldr	r1, [pc, #48]	; (66b0 <z_setup_new_thread+0xbc>)
    667e:	480d      	ldr	r0, [pc, #52]	; (66b4 <z_setup_new_thread+0xc0>)
    6680:	f240 13ff 	movw	r3, #511	; 0x1ff
    6684:	f000 ff2c 	bl	74e0 <printk>
    6688:	4641      	mov	r1, r8
    668a:	480b      	ldr	r0, [pc, #44]	; (66b8 <z_setup_new_thread+0xc4>)
    668c:	f06f 030f 	mvn.w	r3, #15
    6690:	220e      	movs	r2, #14
    6692:	f000 ff25 	bl	74e0 <printk>
    6696:	4805      	ldr	r0, [pc, #20]	; (66ac <z_setup_new_thread+0xb8>)
    6698:	f240 11ff 	movw	r1, #511	; 0x1ff
    669c:	f000 fe4c 	bl	7338 <assert_post_action>
    66a0:	e7b7      	b.n	6612 <z_setup_new_thread+0x1e>
    66a2:	bf00      	nop
    66a4:	00004b39 	.word	0x00004b39
    66a8:	20000b30 	.word	0x20000b30
    66ac:	00008b74 	.word	0x00008b74
    66b0:	00008b97 	.word	0x00008b97
    66b4:	00008064 	.word	0x00008064
    66b8:	00008c17 	.word	0x00008c17

000066bc <z_impl_k_thread_create>:
{
    66bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66c0:	b087      	sub	sp, #28
    66c2:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    66c6:	4604      	mov	r4, r0
    66c8:	460d      	mov	r5, r1
    66ca:	4690      	mov	r8, r2
    66cc:	4699      	mov	r9, r3
    66ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    66d2:	b173      	cbz	r3, 66f2 <z_impl_k_thread_create+0x36>
    66d4:	491b      	ldr	r1, [pc, #108]	; (6744 <z_impl_k_thread_create+0x88>)
    66d6:	4a1c      	ldr	r2, [pc, #112]	; (6748 <z_impl_k_thread_create+0x8c>)
    66d8:	481c      	ldr	r0, [pc, #112]	; (674c <z_impl_k_thread_create+0x90>)
    66da:	f44f 731a 	mov.w	r3, #616	; 0x268
    66de:	f000 feff 	bl	74e0 <printk>
    66e2:	481b      	ldr	r0, [pc, #108]	; (6750 <z_impl_k_thread_create+0x94>)
    66e4:	f000 fefc 	bl	74e0 <printk>
    66e8:	4817      	ldr	r0, [pc, #92]	; (6748 <z_impl_k_thread_create+0x8c>)
    66ea:	f44f 711a 	mov.w	r1, #616	; 0x268
    66ee:	f000 fe23 	bl	7338 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    66f2:	2300      	movs	r3, #0
    66f4:	9305      	str	r3, [sp, #20]
    66f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    66f8:	9304      	str	r3, [sp, #16]
    66fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    66fc:	9303      	str	r3, [sp, #12]
    66fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6700:	9302      	str	r3, [sp, #8]
    6702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6704:	9301      	str	r3, [sp, #4]
    6706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6708:	9300      	str	r3, [sp, #0]
    670a:	4642      	mov	r2, r8
    670c:	464b      	mov	r3, r9
    670e:	4629      	mov	r1, r5
    6710:	4620      	mov	r0, r4
    6712:	f7ff ff6f 	bl	65f4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6716:	1c7b      	adds	r3, r7, #1
    6718:	bf08      	it	eq
    671a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    671e:	d005      	beq.n	672c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6720:	ea56 0307 	orrs.w	r3, r6, r7
    6724:	d106      	bne.n	6734 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    6726:	4620      	mov	r0, r4
    6728:	f7ff f8e0 	bl	58ec <z_sched_start>
}
    672c:	4620      	mov	r0, r4
    672e:	b007      	add	sp, #28
    6730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6734:	4907      	ldr	r1, [pc, #28]	; (6754 <z_impl_k_thread_create+0x98>)
    6736:	4632      	mov	r2, r6
    6738:	463b      	mov	r3, r7
    673a:	f104 0018 	add.w	r0, r4, #24
    673e:	f000 f911 	bl	6964 <z_add_timeout>
    6742:	e7f3      	b.n	672c <z_impl_k_thread_create+0x70>
    6744:	00008946 	.word	0x00008946
    6748:	00008b74 	.word	0x00008b74
    674c:	00008064 	.word	0x00008064
    6750:	00008c48 	.word	0x00008c48
    6754:	00005995 	.word	0x00005995

00006758 <z_init_static_threads>:
{
    6758:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    675c:	4f3f      	ldr	r7, [pc, #252]	; (685c <z_init_static_threads+0x104>)
    675e:	4d40      	ldr	r5, [pc, #256]	; (6860 <z_init_static_threads+0x108>)
    6760:	f8df 810c 	ldr.w	r8, [pc, #268]	; 6870 <z_init_static_threads+0x118>
{
    6764:	b086      	sub	sp, #24
    6766:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    6768:	42bd      	cmp	r5, r7
    676a:	d90e      	bls.n	678a <z_init_static_threads+0x32>
    676c:	493d      	ldr	r1, [pc, #244]	; (6864 <z_init_static_threads+0x10c>)
    676e:	483e      	ldr	r0, [pc, #248]	; (6868 <z_init_static_threads+0x110>)
    6770:	f240 23cf 	movw	r3, #719	; 0x2cf
    6774:	4642      	mov	r2, r8
    6776:	f000 feb3 	bl	74e0 <printk>
    677a:	483c      	ldr	r0, [pc, #240]	; (686c <z_init_static_threads+0x114>)
    677c:	f000 feb0 	bl	74e0 <printk>
    6780:	f240 21cf 	movw	r1, #719	; 0x2cf
    6784:	4640      	mov	r0, r8
    6786:	f000 fdd7 	bl	7338 <assert_post_action>
    678a:	42b5      	cmp	r5, r6
    678c:	f105 0430 	add.w	r4, r5, #48	; 0x30
    6790:	d31f      	bcc.n	67d2 <z_init_static_threads+0x7a>
	k_sched_lock();
    6792:	f7fe fe53 	bl	543c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6796:	4c32      	ldr	r4, [pc, #200]	; (6860 <z_init_static_threads+0x108>)
    6798:	4d35      	ldr	r5, [pc, #212]	; (6870 <z_init_static_threads+0x118>)
    679a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6864 <z_init_static_threads+0x10c>
    679e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 6868 <z_init_static_threads+0x110>
    67a2:	42b4      	cmp	r4, r6
    67a4:	d90e      	bls.n	67c4 <z_init_static_threads+0x6c>
    67a6:	4641      	mov	r1, r8
    67a8:	f240 23ee 	movw	r3, #750	; 0x2ee
    67ac:	462a      	mov	r2, r5
    67ae:	4648      	mov	r0, r9
    67b0:	f000 fe96 	bl	74e0 <printk>
    67b4:	482d      	ldr	r0, [pc, #180]	; (686c <z_init_static_threads+0x114>)
    67b6:	f000 fe93 	bl	74e0 <printk>
    67ba:	f240 21ee 	movw	r1, #750	; 0x2ee
    67be:	4628      	mov	r0, r5
    67c0:	f000 fdba 	bl	7338 <assert_post_action>
    67c4:	42b4      	cmp	r4, r6
    67c6:	d321      	bcc.n	680c <z_init_static_threads+0xb4>
}
    67c8:	b006      	add	sp, #24
    67ca:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    67ce:	f7ff bb2d 	b.w	5e2c <k_sched_unlock>
		z_setup_new_thread(
    67d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    67d6:	9305      	str	r3, [sp, #20]
    67d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    67dc:	9304      	str	r3, [sp, #16]
    67de:	f854 3c14 	ldr.w	r3, [r4, #-20]
    67e2:	9303      	str	r3, [sp, #12]
    67e4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    67e8:	9302      	str	r3, [sp, #8]
    67ea:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    67ee:	9301      	str	r3, [sp, #4]
    67f0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    67f4:	9300      	str	r3, [sp, #0]
    67f6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    67fa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    67fe:	f7ff fef9 	bl	65f4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6802:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6806:	655d      	str	r5, [r3, #84]	; 0x54
    6808:	4625      	mov	r5, r4
    680a:	e7ad      	b.n	6768 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    680c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    680e:	1c4b      	adds	r3, r1, #1
    6810:	d014      	beq.n	683c <z_init_static_threads+0xe4>
    6812:	f240 32e7 	movw	r2, #999	; 0x3e7
    6816:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    6818:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    681c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    6820:	4693      	mov	fp, r2
    6822:	469c      	mov	ip, r3
    6824:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6828:	459c      	cmp	ip, r3
    682a:	bf08      	it	eq
    682c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    682e:	6827      	ldr	r7, [r4, #0]
    6830:	4658      	mov	r0, fp
    6832:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6834:	d104      	bne.n	6840 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    6836:	4638      	mov	r0, r7
    6838:	f7ff f858 	bl	58ec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    683c:	3430      	adds	r4, #48	; 0x30
    683e:	e7b0      	b.n	67a2 <z_init_static_threads+0x4a>
    6840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6844:	2300      	movs	r3, #0
    6846:	f7fa f851 	bl	8ec <__aeabi_uldivmod>
    684a:	4602      	mov	r2, r0
    684c:	460b      	mov	r3, r1
    684e:	f107 0018 	add.w	r0, r7, #24
    6852:	4908      	ldr	r1, [pc, #32]	; (6874 <z_init_static_threads+0x11c>)
    6854:	f000 f886 	bl	6964 <z_add_timeout>
    6858:	e7f0      	b.n	683c <z_init_static_threads+0xe4>
    685a:	bf00      	nop
    685c:	20000150 	.word	0x20000150
    6860:	20000150 	.word	0x20000150
    6864:	00008c6d 	.word	0x00008c6d
    6868:	00008064 	.word	0x00008064
    686c:	00008905 	.word	0x00008905
    6870:	00008b74 	.word	0x00008b74
    6874:	00005995 	.word	0x00005995

00006878 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6878:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    687a:	b138      	cbz	r0, 688c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    687c:	4b04      	ldr	r3, [pc, #16]	; (6890 <z_spin_lock_valid+0x18>)
    687e:	7d1b      	ldrb	r3, [r3, #20]
    6880:	f000 0003 	and.w	r0, r0, #3
    6884:	1ac0      	subs	r0, r0, r3
    6886:	bf18      	it	ne
    6888:	2001      	movne	r0, #1
    688a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    688c:	2001      	movs	r0, #1
}
    688e:	4770      	bx	lr
    6890:	20000b30 	.word	0x20000b30

00006894 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6894:	4906      	ldr	r1, [pc, #24]	; (68b0 <z_spin_unlock_valid+0x1c>)
{
    6896:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6898:	688a      	ldr	r2, [r1, #8]
    689a:	7d08      	ldrb	r0, [r1, #20]
    689c:	6819      	ldr	r1, [r3, #0]
    689e:	4302      	orrs	r2, r0
    68a0:	4291      	cmp	r1, r2
    68a2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    68a6:	bf04      	itt	eq
    68a8:	6018      	streq	r0, [r3, #0]
	return true;
    68aa:	2001      	moveq	r0, #1
}
    68ac:	4770      	bx	lr
    68ae:	bf00      	nop
    68b0:	20000b30 	.word	0x20000b30

000068b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    68b4:	4a02      	ldr	r2, [pc, #8]	; (68c0 <z_spin_lock_set_owner+0xc>)
    68b6:	7d11      	ldrb	r1, [r2, #20]
    68b8:	6893      	ldr	r3, [r2, #8]
    68ba:	430b      	orrs	r3, r1
    68bc:	6003      	str	r3, [r0, #0]
}
    68be:	4770      	bx	lr
    68c0:	20000b30 	.word	0x20000b30

000068c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    68c4:	4b03      	ldr	r3, [pc, #12]	; (68d4 <elapsed+0x10>)
    68c6:	681b      	ldr	r3, [r3, #0]
    68c8:	b90b      	cbnz	r3, 68ce <elapsed+0xa>
    68ca:	f7fd b9df 	b.w	3c8c <sys_clock_elapsed>
}
    68ce:	2000      	movs	r0, #0
    68d0:	4770      	bx	lr
    68d2:	bf00      	nop
    68d4:	20000b70 	.word	0x20000b70

000068d8 <next_timeout>:

static int32_t next_timeout(void)
{
    68d8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    68da:	4b13      	ldr	r3, [pc, #76]	; (6928 <next_timeout+0x50>)
    68dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68de:	429c      	cmp	r4, r3
    68e0:	bf08      	it	eq
    68e2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    68e4:	f7ff ffee 	bl	68c4 <elapsed>
    68e8:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    68ea:	b1bc      	cbz	r4, 691c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    68ec:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    68f0:	1b40      	subs	r0, r0, r5
    68f2:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    68f6:	2801      	cmp	r0, #1
    68f8:	f171 0300 	sbcs.w	r3, r1, #0
    68fc:	db11      	blt.n	6922 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    68fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    6902:	2300      	movs	r3, #0
    6904:	4282      	cmp	r2, r0
    6906:	eb73 0401 	sbcs.w	r4, r3, r1
    690a:	da00      	bge.n	690e <next_timeout+0x36>
    690c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    690e:	4b07      	ldr	r3, [pc, #28]	; (692c <next_timeout+0x54>)
    6910:	691b      	ldr	r3, [r3, #16]
    6912:	b113      	cbz	r3, 691a <next_timeout+0x42>
    6914:	4298      	cmp	r0, r3
    6916:	bfa8      	it	ge
    6918:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    691a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    691c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6920:	e7f5      	b.n	690e <next_timeout+0x36>
    6922:	2000      	movs	r0, #0
    6924:	e7f3      	b.n	690e <next_timeout+0x36>
    6926:	bf00      	nop
    6928:	200000d4 	.word	0x200000d4
    692c:	20000b30 	.word	0x20000b30

00006930 <remove_timeout>:
{
    6930:	b530      	push	{r4, r5, lr}
    6932:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6934:	b168      	cbz	r0, 6952 <remove_timeout+0x22>
    6936:	4a0a      	ldr	r2, [pc, #40]	; (6960 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    6938:	6852      	ldr	r2, [r2, #4]
    693a:	4290      	cmp	r0, r2
    693c:	d009      	beq.n	6952 <remove_timeout+0x22>
	if (next(t) != NULL) {
    693e:	b143      	cbz	r3, 6952 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6940:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6944:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6948:	1912      	adds	r2, r2, r4
    694a:	eb45 0101 	adc.w	r1, r5, r1
    694e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    6952:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    6954:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6956:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6958:	2300      	movs	r3, #0
	node->prev = NULL;
    695a:	e9c0 3300 	strd	r3, r3, [r0]
}
    695e:	bd30      	pop	{r4, r5, pc}
    6960:	200000d4 	.word	0x200000d4

00006964 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    6964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6968:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    696a:	1c6b      	adds	r3, r5, #1
    696c:	bf08      	it	eq
    696e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6972:	4682      	mov	sl, r0
    6974:	468b      	mov	fp, r1
    6976:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6978:	f000 80aa 	beq.w	6ad0 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    697c:	6803      	ldr	r3, [r0, #0]
    697e:	b163      	cbz	r3, 699a <z_add_timeout+0x36>
    6980:	4955      	ldr	r1, [pc, #340]	; (6ad8 <z_add_timeout+0x174>)
    6982:	4a56      	ldr	r2, [pc, #344]	; (6adc <z_add_timeout+0x178>)
    6984:	4856      	ldr	r0, [pc, #344]	; (6ae0 <z_add_timeout+0x17c>)
    6986:	235d      	movs	r3, #93	; 0x5d
    6988:	f000 fdaa 	bl	74e0 <printk>
    698c:	4855      	ldr	r0, [pc, #340]	; (6ae4 <z_add_timeout+0x180>)
    698e:	f000 fda7 	bl	74e0 <printk>
    6992:	4852      	ldr	r0, [pc, #328]	; (6adc <z_add_timeout+0x178>)
    6994:	215d      	movs	r1, #93	; 0x5d
    6996:	f000 fccf 	bl	7338 <assert_post_action>
	to->fn = fn;
    699a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    699e:	f04f 0320 	mov.w	r3, #32
    69a2:	f3ef 8b11 	mrs	fp, BASEPRI
    69a6:	f383 8812 	msr	BASEPRI_MAX, r3
    69aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69ae:	484e      	ldr	r0, [pc, #312]	; (6ae8 <z_add_timeout+0x184>)
    69b0:	f7ff ff62 	bl	6878 <z_spin_lock_valid>
    69b4:	b968      	cbnz	r0, 69d2 <z_add_timeout+0x6e>
    69b6:	4a4d      	ldr	r2, [pc, #308]	; (6aec <z_add_timeout+0x188>)
    69b8:	494d      	ldr	r1, [pc, #308]	; (6af0 <z_add_timeout+0x18c>)
    69ba:	4849      	ldr	r0, [pc, #292]	; (6ae0 <z_add_timeout+0x17c>)
    69bc:	2381      	movs	r3, #129	; 0x81
    69be:	f000 fd8f 	bl	74e0 <printk>
    69c2:	4949      	ldr	r1, [pc, #292]	; (6ae8 <z_add_timeout+0x184>)
    69c4:	484b      	ldr	r0, [pc, #300]	; (6af4 <z_add_timeout+0x190>)
    69c6:	f000 fd8b 	bl	74e0 <printk>
    69ca:	4848      	ldr	r0, [pc, #288]	; (6aec <z_add_timeout+0x188>)
    69cc:	2181      	movs	r1, #129	; 0x81
    69ce:	f000 fcb3 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    69d2:	4845      	ldr	r0, [pc, #276]	; (6ae8 <z_add_timeout+0x184>)
    69d4:	f7ff ff6e 	bl	68b4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    69d8:	f06f 0301 	mvn.w	r3, #1
    69dc:	ebb3 0804 	subs.w	r8, r3, r4
    69e0:	f04f 32ff 	mov.w	r2, #4294967295
    69e4:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    69e8:	f1b8 0f00 	cmp.w	r8, #0
    69ec:	f179 0100 	sbcs.w	r1, r9, #0
    69f0:	db1c      	blt.n	6a2c <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    69f2:	4841      	ldr	r0, [pc, #260]	; (6af8 <z_add_timeout+0x194>)
    69f4:	e9d0 1000 	ldrd	r1, r0, [r0]
    69f8:	1a5b      	subs	r3, r3, r1
    69fa:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    69fe:	1b1e      	subs	r6, r3, r4
    6a00:	eb62 0705 	sbc.w	r7, r2, r5
    6a04:	2e01      	cmp	r6, #1
    6a06:	f177 0300 	sbcs.w	r3, r7, #0
    6a0a:	bfbc      	itt	lt
    6a0c:	2601      	movlt	r6, #1
    6a0e:	2700      	movlt	r7, #0
    6a10:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    6a14:	4a39      	ldr	r2, [pc, #228]	; (6afc <z_add_timeout+0x198>)
    6a16:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a1a:	4293      	cmp	r3, r2
    6a1c:	d11d      	bne.n	6a5a <z_add_timeout+0xf6>
	node->prev = tail;
    6a1e:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    6a22:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    6a26:	f8c2 a004 	str.w	sl, [r2, #4]
}
    6a2a:	e02c      	b.n	6a86 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6a2c:	f7ff ff4a 	bl	68c4 <elapsed>
    6a30:	1c63      	adds	r3, r4, #1
    6a32:	9300      	str	r3, [sp, #0]
    6a34:	f145 0300 	adc.w	r3, r5, #0
    6a38:	9301      	str	r3, [sp, #4]
    6a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
    6a3e:	1812      	adds	r2, r2, r0
    6a40:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    6a44:	e9ca 2304 	strd	r2, r3, [sl, #16]
    6a48:	e7e4      	b.n	6a14 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6a4a:	1be0      	subs	r0, r4, r7
    6a4c:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    6a50:	42b3      	cmp	r3, r6
    6a52:	e9ca 0104 	strd	r0, r1, [sl, #16]
    6a56:	d0e2      	beq.n	6a1e <z_add_timeout+0xba>
    6a58:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6a5a:	2b00      	cmp	r3, #0
    6a5c:	d0df      	beq.n	6a1e <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    6a5e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    6a62:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    6a66:	42bc      	cmp	r4, r7
    6a68:	eb75 0108 	sbcs.w	r1, r5, r8
    6a6c:	daed      	bge.n	6a4a <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    6a6e:	1b38      	subs	r0, r7, r4
    6a70:	eb68 0105 	sbc.w	r1, r8, r5
    6a74:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6a78:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6a7a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    6a7e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    6a82:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    6a86:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a88:	4293      	cmp	r3, r2
    6a8a:	d00b      	beq.n	6aa4 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6a8c:	459a      	cmp	sl, r3
    6a8e:	d109      	bne.n	6aa4 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6a90:	f7ff ff22 	bl	68d8 <next_timeout>

			if (next_time == 0 ||
    6a94:	b118      	cbz	r0, 6a9e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    6a96:	4b1a      	ldr	r3, [pc, #104]	; (6b00 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    6a98:	691b      	ldr	r3, [r3, #16]
    6a9a:	4283      	cmp	r3, r0
    6a9c:	d002      	beq.n	6aa4 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    6a9e:	2100      	movs	r1, #0
    6aa0:	f7fd f8c4 	bl	3c2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6aa4:	4810      	ldr	r0, [pc, #64]	; (6ae8 <z_add_timeout+0x184>)
    6aa6:	f7ff fef5 	bl	6894 <z_spin_unlock_valid>
    6aaa:	b968      	cbnz	r0, 6ac8 <z_add_timeout+0x164>
    6aac:	4a0f      	ldr	r2, [pc, #60]	; (6aec <z_add_timeout+0x188>)
    6aae:	4915      	ldr	r1, [pc, #84]	; (6b04 <z_add_timeout+0x1a0>)
    6ab0:	480b      	ldr	r0, [pc, #44]	; (6ae0 <z_add_timeout+0x17c>)
    6ab2:	23ac      	movs	r3, #172	; 0xac
    6ab4:	f000 fd14 	bl	74e0 <printk>
    6ab8:	490b      	ldr	r1, [pc, #44]	; (6ae8 <z_add_timeout+0x184>)
    6aba:	4813      	ldr	r0, [pc, #76]	; (6b08 <z_add_timeout+0x1a4>)
    6abc:	f000 fd10 	bl	74e0 <printk>
    6ac0:	480a      	ldr	r0, [pc, #40]	; (6aec <z_add_timeout+0x188>)
    6ac2:	21ac      	movs	r1, #172	; 0xac
    6ac4:	f000 fc38 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6ac8:	f38b 8811 	msr	BASEPRI, fp
    6acc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6ad0:	b003      	add	sp, #12
    6ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ad6:	bf00      	nop
    6ad8:	00008cbe 	.word	0x00008cbe
    6adc:	00008c9a 	.word	0x00008c9a
    6ae0:	00008064 	.word	0x00008064
    6ae4:	000089bf 	.word	0x000089bf
    6ae8:	20000b74 	.word	0x20000b74
    6aec:	00008177 	.word	0x00008177
    6af0:	000081c9 	.word	0x000081c9
    6af4:	000081de 	.word	0x000081de
    6af8:	20000440 	.word	0x20000440
    6afc:	200000d4 	.word	0x200000d4
    6b00:	20000b30 	.word	0x20000b30
    6b04:	0000819d 	.word	0x0000819d
    6b08:	000081b4 	.word	0x000081b4

00006b0c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6b0c:	b538      	push	{r3, r4, r5, lr}
    6b0e:	4604      	mov	r4, r0
	__asm__ volatile(
    6b10:	f04f 0320 	mov.w	r3, #32
    6b14:	f3ef 8511 	mrs	r5, BASEPRI
    6b18:	f383 8812 	msr	BASEPRI_MAX, r3
    6b1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b20:	481a      	ldr	r0, [pc, #104]	; (6b8c <z_abort_timeout+0x80>)
    6b22:	f7ff fea9 	bl	6878 <z_spin_lock_valid>
    6b26:	b968      	cbnz	r0, 6b44 <z_abort_timeout+0x38>
    6b28:	4a19      	ldr	r2, [pc, #100]	; (6b90 <z_abort_timeout+0x84>)
    6b2a:	491a      	ldr	r1, [pc, #104]	; (6b94 <z_abort_timeout+0x88>)
    6b2c:	481a      	ldr	r0, [pc, #104]	; (6b98 <z_abort_timeout+0x8c>)
    6b2e:	2381      	movs	r3, #129	; 0x81
    6b30:	f000 fcd6 	bl	74e0 <printk>
    6b34:	4915      	ldr	r1, [pc, #84]	; (6b8c <z_abort_timeout+0x80>)
    6b36:	4819      	ldr	r0, [pc, #100]	; (6b9c <z_abort_timeout+0x90>)
    6b38:	f000 fcd2 	bl	74e0 <printk>
    6b3c:	4814      	ldr	r0, [pc, #80]	; (6b90 <z_abort_timeout+0x84>)
    6b3e:	2181      	movs	r1, #129	; 0x81
    6b40:	f000 fbfa 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b44:	4811      	ldr	r0, [pc, #68]	; (6b8c <z_abort_timeout+0x80>)
    6b46:	f7ff feb5 	bl	68b4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    6b4a:	6823      	ldr	r3, [r4, #0]
    6b4c:	b1db      	cbz	r3, 6b86 <z_abort_timeout+0x7a>
			remove_timeout(to);
    6b4e:	4620      	mov	r0, r4
    6b50:	f7ff feee 	bl	6930 <remove_timeout>
			ret = 0;
    6b54:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b56:	480d      	ldr	r0, [pc, #52]	; (6b8c <z_abort_timeout+0x80>)
    6b58:	f7ff fe9c 	bl	6894 <z_spin_unlock_valid>
    6b5c:	b968      	cbnz	r0, 6b7a <z_abort_timeout+0x6e>
    6b5e:	4a0c      	ldr	r2, [pc, #48]	; (6b90 <z_abort_timeout+0x84>)
    6b60:	490f      	ldr	r1, [pc, #60]	; (6ba0 <z_abort_timeout+0x94>)
    6b62:	480d      	ldr	r0, [pc, #52]	; (6b98 <z_abort_timeout+0x8c>)
    6b64:	23ac      	movs	r3, #172	; 0xac
    6b66:	f000 fcbb 	bl	74e0 <printk>
    6b6a:	4908      	ldr	r1, [pc, #32]	; (6b8c <z_abort_timeout+0x80>)
    6b6c:	480d      	ldr	r0, [pc, #52]	; (6ba4 <z_abort_timeout+0x98>)
    6b6e:	f000 fcb7 	bl	74e0 <printk>
    6b72:	4807      	ldr	r0, [pc, #28]	; (6b90 <z_abort_timeout+0x84>)
    6b74:	21ac      	movs	r1, #172	; 0xac
    6b76:	f000 fbdf 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6b7a:	f385 8811 	msr	BASEPRI, r5
    6b7e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6b82:	4620      	mov	r0, r4
    6b84:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    6b86:	f06f 0415 	mvn.w	r4, #21
    6b8a:	e7e4      	b.n	6b56 <z_abort_timeout+0x4a>
    6b8c:	20000b74 	.word	0x20000b74
    6b90:	00008177 	.word	0x00008177
    6b94:	000081c9 	.word	0x000081c9
    6b98:	00008064 	.word	0x00008064
    6b9c:	000081de 	.word	0x000081de
    6ba0:	0000819d 	.word	0x0000819d
    6ba4:	000081b4 	.word	0x000081b4

00006ba8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6ba8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6baa:	f04f 0320 	mov.w	r3, #32
    6bae:	f3ef 8511 	mrs	r5, BASEPRI
    6bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    6bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6bba:	4818      	ldr	r0, [pc, #96]	; (6c1c <z_get_next_timeout_expiry+0x74>)
    6bbc:	f7ff fe5c 	bl	6878 <z_spin_lock_valid>
    6bc0:	b968      	cbnz	r0, 6bde <z_get_next_timeout_expiry+0x36>
    6bc2:	4a17      	ldr	r2, [pc, #92]	; (6c20 <z_get_next_timeout_expiry+0x78>)
    6bc4:	4917      	ldr	r1, [pc, #92]	; (6c24 <z_get_next_timeout_expiry+0x7c>)
    6bc6:	4818      	ldr	r0, [pc, #96]	; (6c28 <z_get_next_timeout_expiry+0x80>)
    6bc8:	2381      	movs	r3, #129	; 0x81
    6bca:	f000 fc89 	bl	74e0 <printk>
    6bce:	4913      	ldr	r1, [pc, #76]	; (6c1c <z_get_next_timeout_expiry+0x74>)
    6bd0:	4816      	ldr	r0, [pc, #88]	; (6c2c <z_get_next_timeout_expiry+0x84>)
    6bd2:	f000 fc85 	bl	74e0 <printk>
    6bd6:	4812      	ldr	r0, [pc, #72]	; (6c20 <z_get_next_timeout_expiry+0x78>)
    6bd8:	2181      	movs	r1, #129	; 0x81
    6bda:	f000 fbad 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6bde:	480f      	ldr	r0, [pc, #60]	; (6c1c <z_get_next_timeout_expiry+0x74>)
    6be0:	f7ff fe68 	bl	68b4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    6be4:	f7ff fe78 	bl	68d8 <next_timeout>
    6be8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bea:	480c      	ldr	r0, [pc, #48]	; (6c1c <z_get_next_timeout_expiry+0x74>)
    6bec:	f7ff fe52 	bl	6894 <z_spin_unlock_valid>
    6bf0:	b968      	cbnz	r0, 6c0e <z_get_next_timeout_expiry+0x66>
    6bf2:	4a0b      	ldr	r2, [pc, #44]	; (6c20 <z_get_next_timeout_expiry+0x78>)
    6bf4:	490e      	ldr	r1, [pc, #56]	; (6c30 <z_get_next_timeout_expiry+0x88>)
    6bf6:	480c      	ldr	r0, [pc, #48]	; (6c28 <z_get_next_timeout_expiry+0x80>)
    6bf8:	23ac      	movs	r3, #172	; 0xac
    6bfa:	f000 fc71 	bl	74e0 <printk>
    6bfe:	4907      	ldr	r1, [pc, #28]	; (6c1c <z_get_next_timeout_expiry+0x74>)
    6c00:	480c      	ldr	r0, [pc, #48]	; (6c34 <z_get_next_timeout_expiry+0x8c>)
    6c02:	f000 fc6d 	bl	74e0 <printk>
    6c06:	4806      	ldr	r0, [pc, #24]	; (6c20 <z_get_next_timeout_expiry+0x78>)
    6c08:	21ac      	movs	r1, #172	; 0xac
    6c0a:	f000 fb95 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6c0e:	f385 8811 	msr	BASEPRI, r5
    6c12:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    6c16:	4620      	mov	r0, r4
    6c18:	bd38      	pop	{r3, r4, r5, pc}
    6c1a:	bf00      	nop
    6c1c:	20000b74 	.word	0x20000b74
    6c20:	00008177 	.word	0x00008177
    6c24:	000081c9 	.word	0x000081c9
    6c28:	00008064 	.word	0x00008064
    6c2c:	000081de 	.word	0x000081de
    6c30:	0000819d 	.word	0x0000819d
    6c34:	000081b4 	.word	0x000081b4

00006c38 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    6c38:	b570      	push	{r4, r5, r6, lr}
    6c3a:	4604      	mov	r4, r0
    6c3c:	460d      	mov	r5, r1
	__asm__ volatile(
    6c3e:	f04f 0320 	mov.w	r3, #32
    6c42:	f3ef 8611 	mrs	r6, BASEPRI
    6c46:	f383 8812 	msr	BASEPRI_MAX, r3
    6c4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c4e:	481b      	ldr	r0, [pc, #108]	; (6cbc <z_set_timeout_expiry+0x84>)
    6c50:	f7ff fe12 	bl	6878 <z_spin_lock_valid>
    6c54:	b968      	cbnz	r0, 6c72 <z_set_timeout_expiry+0x3a>
    6c56:	4a1a      	ldr	r2, [pc, #104]	; (6cc0 <z_set_timeout_expiry+0x88>)
    6c58:	491a      	ldr	r1, [pc, #104]	; (6cc4 <z_set_timeout_expiry+0x8c>)
    6c5a:	481b      	ldr	r0, [pc, #108]	; (6cc8 <z_set_timeout_expiry+0x90>)
    6c5c:	2381      	movs	r3, #129	; 0x81
    6c5e:	f000 fc3f 	bl	74e0 <printk>
    6c62:	4916      	ldr	r1, [pc, #88]	; (6cbc <z_set_timeout_expiry+0x84>)
    6c64:	4819      	ldr	r0, [pc, #100]	; (6ccc <z_set_timeout_expiry+0x94>)
    6c66:	f000 fc3b 	bl	74e0 <printk>
    6c6a:	4815      	ldr	r0, [pc, #84]	; (6cc0 <z_set_timeout_expiry+0x88>)
    6c6c:	2181      	movs	r1, #129	; 0x81
    6c6e:	f000 fb63 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c72:	4812      	ldr	r0, [pc, #72]	; (6cbc <z_set_timeout_expiry+0x84>)
    6c74:	f7ff fe1e 	bl	68b4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    6c78:	f7ff fe2e 	bl	68d8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6c7c:	2801      	cmp	r0, #1
    6c7e:	dd05      	ble.n	6c8c <z_set_timeout_expiry+0x54>
    6c80:	42a0      	cmp	r0, r4
    6c82:	db03      	blt.n	6c8c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6c84:	4629      	mov	r1, r5
    6c86:	4620      	mov	r0, r4
    6c88:	f7fc ffd0 	bl	3c2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c8c:	480b      	ldr	r0, [pc, #44]	; (6cbc <z_set_timeout_expiry+0x84>)
    6c8e:	f7ff fe01 	bl	6894 <z_spin_unlock_valid>
    6c92:	b968      	cbnz	r0, 6cb0 <z_set_timeout_expiry+0x78>
    6c94:	4a0a      	ldr	r2, [pc, #40]	; (6cc0 <z_set_timeout_expiry+0x88>)
    6c96:	490e      	ldr	r1, [pc, #56]	; (6cd0 <z_set_timeout_expiry+0x98>)
    6c98:	480b      	ldr	r0, [pc, #44]	; (6cc8 <z_set_timeout_expiry+0x90>)
    6c9a:	23ac      	movs	r3, #172	; 0xac
    6c9c:	f000 fc20 	bl	74e0 <printk>
    6ca0:	4906      	ldr	r1, [pc, #24]	; (6cbc <z_set_timeout_expiry+0x84>)
    6ca2:	480c      	ldr	r0, [pc, #48]	; (6cd4 <z_set_timeout_expiry+0x9c>)
    6ca4:	f000 fc1c 	bl	74e0 <printk>
    6ca8:	4805      	ldr	r0, [pc, #20]	; (6cc0 <z_set_timeout_expiry+0x88>)
    6caa:	21ac      	movs	r1, #172	; 0xac
    6cac:	f000 fb44 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6cb0:	f386 8811 	msr	BASEPRI, r6
    6cb4:	f3bf 8f6f 	isb	sy
		}
	}
}
    6cb8:	bd70      	pop	{r4, r5, r6, pc}
    6cba:	bf00      	nop
    6cbc:	20000b74 	.word	0x20000b74
    6cc0:	00008177 	.word	0x00008177
    6cc4:	000081c9 	.word	0x000081c9
    6cc8:	00008064 	.word	0x00008064
    6ccc:	000081de 	.word	0x000081de
    6cd0:	0000819d 	.word	0x0000819d
    6cd4:	000081b4 	.word	0x000081b4

00006cd8 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    6cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cdc:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6cde:	f7fe fcf3 	bl	56c8 <z_time_slice>
	__asm__ volatile(
    6ce2:	f04f 0320 	mov.w	r3, #32
    6ce6:	f3ef 8711 	mrs	r7, BASEPRI
    6cea:	f383 8812 	msr	BASEPRI_MAX, r3
    6cee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cf2:	4855      	ldr	r0, [pc, #340]	; (6e48 <sys_clock_announce+0x170>)
    6cf4:	f7ff fdc0 	bl	6878 <z_spin_lock_valid>
    6cf8:	b968      	cbnz	r0, 6d16 <sys_clock_announce+0x3e>
    6cfa:	4a54      	ldr	r2, [pc, #336]	; (6e4c <sys_clock_announce+0x174>)
    6cfc:	4954      	ldr	r1, [pc, #336]	; (6e50 <sys_clock_announce+0x178>)
    6cfe:	4855      	ldr	r0, [pc, #340]	; (6e54 <sys_clock_announce+0x17c>)
    6d00:	2381      	movs	r3, #129	; 0x81
    6d02:	f000 fbed 	bl	74e0 <printk>
    6d06:	4950      	ldr	r1, [pc, #320]	; (6e48 <sys_clock_announce+0x170>)
    6d08:	4853      	ldr	r0, [pc, #332]	; (6e58 <sys_clock_announce+0x180>)
    6d0a:	f000 fbe9 	bl	74e0 <printk>
    6d0e:	484f      	ldr	r0, [pc, #316]	; (6e4c <sys_clock_announce+0x174>)
    6d10:	2181      	movs	r1, #129	; 0x81
    6d12:	f000 fb11 	bl	7338 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    6d16:	4d51      	ldr	r5, [pc, #324]	; (6e5c <sys_clock_announce+0x184>)
    6d18:	4e51      	ldr	r6, [pc, #324]	; (6e60 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    6d1a:	484b      	ldr	r0, [pc, #300]	; (6e48 <sys_clock_announce+0x170>)
	return list->head == list;
    6d1c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 6e6c <sys_clock_announce+0x194>
    6d20:	f7ff fdc8 	bl	68b4 <z_spin_lock_set_owner>
    6d24:	46b3      	mov	fp, r6
    6d26:	602c      	str	r4, [r5, #0]
    6d28:	e9d6 2300 	ldrd	r2, r3, [r6]
    6d2c:	f8d5 c000 	ldr.w	ip, [r5]
    6d30:	f8da 4000 	ldr.w	r4, [sl]
    6d34:	e9cd 2300 	strd	r2, r3, [sp]
    6d38:	4662      	mov	r2, ip
    6d3a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d3c:	4554      	cmp	r4, sl
    6d3e:	46e0      	mov	r8, ip
    6d40:	4699      	mov	r9, r3
    6d42:	d00c      	beq.n	6d5e <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    6d44:	b15c      	cbz	r4, 6d5e <sys_clock_announce+0x86>
    6d46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    6d4a:	458c      	cmp	ip, r1
    6d4c:	eb79 0302 	sbcs.w	r3, r9, r2
    6d50:	da2e      	bge.n	6db0 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    6d52:	ebb1 000c 	subs.w	r0, r1, ip
    6d56:	eb62 0109 	sbc.w	r1, r2, r9
    6d5a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    6d5e:	9a00      	ldr	r2, [sp, #0]
    6d60:	9901      	ldr	r1, [sp, #4]
    6d62:	eb18 0202 	adds.w	r2, r8, r2
    6d66:	464b      	mov	r3, r9
    6d68:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    6d6c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6d6e:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    6d72:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6d74:	f7ff fdb0 	bl	68d8 <next_timeout>
    6d78:	4621      	mov	r1, r4
    6d7a:	f7fc ff57 	bl	3c2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d7e:	4832      	ldr	r0, [pc, #200]	; (6e48 <sys_clock_announce+0x170>)
    6d80:	f7ff fd88 	bl	6894 <z_spin_unlock_valid>
    6d84:	b968      	cbnz	r0, 6da2 <sys_clock_announce+0xca>
    6d86:	4a31      	ldr	r2, [pc, #196]	; (6e4c <sys_clock_announce+0x174>)
    6d88:	4936      	ldr	r1, [pc, #216]	; (6e64 <sys_clock_announce+0x18c>)
    6d8a:	4832      	ldr	r0, [pc, #200]	; (6e54 <sys_clock_announce+0x17c>)
    6d8c:	23ac      	movs	r3, #172	; 0xac
    6d8e:	f000 fba7 	bl	74e0 <printk>
    6d92:	492d      	ldr	r1, [pc, #180]	; (6e48 <sys_clock_announce+0x170>)
    6d94:	4834      	ldr	r0, [pc, #208]	; (6e68 <sys_clock_announce+0x190>)
    6d96:	f000 fba3 	bl	74e0 <printk>
    6d9a:	482c      	ldr	r0, [pc, #176]	; (6e4c <sys_clock_announce+0x174>)
    6d9c:	21ac      	movs	r1, #172	; 0xac
    6d9e:	f000 facb 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6da2:	f387 8811 	msr	BASEPRI, r7
    6da6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6daa:	b003      	add	sp, #12
    6dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    6db0:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    6db4:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    6db8:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    6dbc:	f04f 0200 	mov.w	r2, #0
    6dc0:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    6dc4:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    6dc8:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    6dca:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    6dce:	4620      	mov	r0, r4
		curr_tick += dt;
    6dd0:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    6dd4:	f7ff fdac 	bl	6930 <remove_timeout>
    6dd8:	481b      	ldr	r0, [pc, #108]	; (6e48 <sys_clock_announce+0x170>)
    6dda:	f7ff fd5b 	bl	6894 <z_spin_unlock_valid>
    6dde:	b968      	cbnz	r0, 6dfc <sys_clock_announce+0x124>
    6de0:	4a1a      	ldr	r2, [pc, #104]	; (6e4c <sys_clock_announce+0x174>)
    6de2:	4920      	ldr	r1, [pc, #128]	; (6e64 <sys_clock_announce+0x18c>)
    6de4:	481b      	ldr	r0, [pc, #108]	; (6e54 <sys_clock_announce+0x17c>)
    6de6:	23ac      	movs	r3, #172	; 0xac
    6de8:	f000 fb7a 	bl	74e0 <printk>
    6dec:	4916      	ldr	r1, [pc, #88]	; (6e48 <sys_clock_announce+0x170>)
    6dee:	481e      	ldr	r0, [pc, #120]	; (6e68 <sys_clock_announce+0x190>)
    6df0:	f000 fb76 	bl	74e0 <printk>
    6df4:	4815      	ldr	r0, [pc, #84]	; (6e4c <sys_clock_announce+0x174>)
    6df6:	21ac      	movs	r1, #172	; 0xac
    6df8:	f000 fa9e 	bl	7338 <assert_post_action>
    6dfc:	f387 8811 	msr	BASEPRI, r7
    6e00:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6e04:	68a3      	ldr	r3, [r4, #8]
    6e06:	4620      	mov	r0, r4
    6e08:	4798      	blx	r3
	__asm__ volatile(
    6e0a:	f04f 0320 	mov.w	r3, #32
    6e0e:	f3ef 8711 	mrs	r7, BASEPRI
    6e12:	f383 8812 	msr	BASEPRI_MAX, r3
    6e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e1a:	480b      	ldr	r0, [pc, #44]	; (6e48 <sys_clock_announce+0x170>)
    6e1c:	f7ff fd2c 	bl	6878 <z_spin_lock_valid>
    6e20:	b968      	cbnz	r0, 6e3e <sys_clock_announce+0x166>
    6e22:	4a0a      	ldr	r2, [pc, #40]	; (6e4c <sys_clock_announce+0x174>)
    6e24:	490a      	ldr	r1, [pc, #40]	; (6e50 <sys_clock_announce+0x178>)
    6e26:	480b      	ldr	r0, [pc, #44]	; (6e54 <sys_clock_announce+0x17c>)
    6e28:	2381      	movs	r3, #129	; 0x81
    6e2a:	f000 fb59 	bl	74e0 <printk>
    6e2e:	4906      	ldr	r1, [pc, #24]	; (6e48 <sys_clock_announce+0x170>)
    6e30:	4809      	ldr	r0, [pc, #36]	; (6e58 <sys_clock_announce+0x180>)
    6e32:	f000 fb55 	bl	74e0 <printk>
    6e36:	4805      	ldr	r0, [pc, #20]	; (6e4c <sys_clock_announce+0x174>)
    6e38:	2181      	movs	r1, #129	; 0x81
    6e3a:	f000 fa7d 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e3e:	4802      	ldr	r0, [pc, #8]	; (6e48 <sys_clock_announce+0x170>)
    6e40:	f7ff fd38 	bl	68b4 <z_spin_lock_set_owner>
	return k;
    6e44:	e770      	b.n	6d28 <sys_clock_announce+0x50>
    6e46:	bf00      	nop
    6e48:	20000b74 	.word	0x20000b74
    6e4c:	00008177 	.word	0x00008177
    6e50:	000081c9 	.word	0x000081c9
    6e54:	00008064 	.word	0x00008064
    6e58:	000081de 	.word	0x000081de
    6e5c:	20000b70 	.word	0x20000b70
    6e60:	20000440 	.word	0x20000440
    6e64:	0000819d 	.word	0x0000819d
    6e68:	000081b4 	.word	0x000081b4
    6e6c:	200000d4 	.word	0x200000d4

00006e70 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6e70:	b570      	push	{r4, r5, r6, lr}
    6e72:	f04f 0320 	mov.w	r3, #32
    6e76:	f3ef 8611 	mrs	r6, BASEPRI
    6e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e82:	481b      	ldr	r0, [pc, #108]	; (6ef0 <sys_clock_tick_get+0x80>)
    6e84:	f7ff fcf8 	bl	6878 <z_spin_lock_valid>
    6e88:	b968      	cbnz	r0, 6ea6 <sys_clock_tick_get+0x36>
    6e8a:	4a1a      	ldr	r2, [pc, #104]	; (6ef4 <sys_clock_tick_get+0x84>)
    6e8c:	491a      	ldr	r1, [pc, #104]	; (6ef8 <sys_clock_tick_get+0x88>)
    6e8e:	481b      	ldr	r0, [pc, #108]	; (6efc <sys_clock_tick_get+0x8c>)
    6e90:	2381      	movs	r3, #129	; 0x81
    6e92:	f000 fb25 	bl	74e0 <printk>
    6e96:	4916      	ldr	r1, [pc, #88]	; (6ef0 <sys_clock_tick_get+0x80>)
    6e98:	4819      	ldr	r0, [pc, #100]	; (6f00 <sys_clock_tick_get+0x90>)
    6e9a:	f000 fb21 	bl	74e0 <printk>
    6e9e:	4815      	ldr	r0, [pc, #84]	; (6ef4 <sys_clock_tick_get+0x84>)
    6ea0:	2181      	movs	r1, #129	; 0x81
    6ea2:	f000 fa49 	bl	7338 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ea6:	4812      	ldr	r0, [pc, #72]	; (6ef0 <sys_clock_tick_get+0x80>)
    6ea8:	f7ff fd04 	bl	68b4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6eac:	f7fc feee 	bl	3c8c <sys_clock_elapsed>
    6eb0:	4b14      	ldr	r3, [pc, #80]	; (6f04 <sys_clock_tick_get+0x94>)
    6eb2:	e9d3 4500 	ldrd	r4, r5, [r3]
    6eb6:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6eb8:	480d      	ldr	r0, [pc, #52]	; (6ef0 <sys_clock_tick_get+0x80>)
    6eba:	f145 0500 	adc.w	r5, r5, #0
    6ebe:	f7ff fce9 	bl	6894 <z_spin_unlock_valid>
    6ec2:	b968      	cbnz	r0, 6ee0 <sys_clock_tick_get+0x70>
    6ec4:	4a0b      	ldr	r2, [pc, #44]	; (6ef4 <sys_clock_tick_get+0x84>)
    6ec6:	4910      	ldr	r1, [pc, #64]	; (6f08 <sys_clock_tick_get+0x98>)
    6ec8:	480c      	ldr	r0, [pc, #48]	; (6efc <sys_clock_tick_get+0x8c>)
    6eca:	23ac      	movs	r3, #172	; 0xac
    6ecc:	f000 fb08 	bl	74e0 <printk>
    6ed0:	4907      	ldr	r1, [pc, #28]	; (6ef0 <sys_clock_tick_get+0x80>)
    6ed2:	480e      	ldr	r0, [pc, #56]	; (6f0c <sys_clock_tick_get+0x9c>)
    6ed4:	f000 fb04 	bl	74e0 <printk>
    6ed8:	4806      	ldr	r0, [pc, #24]	; (6ef4 <sys_clock_tick_get+0x84>)
    6eda:	21ac      	movs	r1, #172	; 0xac
    6edc:	f000 fa2c 	bl	7338 <assert_post_action>
	__asm__ volatile(
    6ee0:	f386 8811 	msr	BASEPRI, r6
    6ee4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6ee8:	4620      	mov	r0, r4
    6eea:	4629      	mov	r1, r5
    6eec:	bd70      	pop	{r4, r5, r6, pc}
    6eee:	bf00      	nop
    6ef0:	20000b74 	.word	0x20000b74
    6ef4:	00008177 	.word	0x00008177
    6ef8:	000081c9 	.word	0x000081c9
    6efc:	00008064 	.word	0x00008064
    6f00:	000081de 	.word	0x000081de
    6f04:	20000440 	.word	0x20000440
    6f08:	0000819d 	.word	0x0000819d
    6f0c:	000081b4 	.word	0x000081b4

00006f10 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    6f10:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    6f12:	4806      	ldr	r0, [pc, #24]	; (6f2c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    6f14:	4a06      	ldr	r2, [pc, #24]	; (6f30 <z_data_copy+0x20>)
    6f16:	4907      	ldr	r1, [pc, #28]	; (6f34 <z_data_copy+0x24>)
    6f18:	1a12      	subs	r2, r2, r0
    6f1a:	f000 fb39 	bl	7590 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6f22:	4a05      	ldr	r2, [pc, #20]	; (6f38 <z_data_copy+0x28>)
    6f24:	4905      	ldr	r1, [pc, #20]	; (6f3c <z_data_copy+0x2c>)
    6f26:	4806      	ldr	r0, [pc, #24]	; (6f40 <z_data_copy+0x30>)
    6f28:	f000 bb32 	b.w	7590 <memcpy>
    6f2c:	20000000 	.word	0x20000000
    6f30:	200001a0 	.word	0x200001a0
    6f34:	00008d14 	.word	0x00008d14
    6f38:	00000000 	.word	0x00000000
    6f3c:	00008d14 	.word	0x00008d14
    6f40:	20000000 	.word	0x20000000

00006f44 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    6f44:	4a02      	ldr	r2, [pc, #8]	; (6f50 <boot_banner+0xc>)
    6f46:	4903      	ldr	r1, [pc, #12]	; (6f54 <boot_banner+0x10>)
    6f48:	4803      	ldr	r0, [pc, #12]	; (6f58 <boot_banner+0x14>)
    6f4a:	f000 bac9 	b.w	74e0 <printk>
    6f4e:	bf00      	nop
    6f50:	000089c1 	.word	0x000089c1
    6f54:	00008cde 	.word	0x00008cde
    6f58:	00008ced 	.word	0x00008ced

00006f5c <nrf_cc3xx_platform_init_no_rng>:
    6f5c:	b510      	push	{r4, lr}
    6f5e:	4c0a      	ldr	r4, [pc, #40]	; (6f88 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6f60:	6823      	ldr	r3, [r4, #0]
    6f62:	b11b      	cbz	r3, 6f6c <nrf_cc3xx_platform_init_no_rng+0x10>
    6f64:	2301      	movs	r3, #1
    6f66:	6023      	str	r3, [r4, #0]
    6f68:	2000      	movs	r0, #0
    6f6a:	bd10      	pop	{r4, pc}
    6f6c:	f000 f8d6 	bl	711c <CC_LibInitNoRng>
    6f70:	2800      	cmp	r0, #0
    6f72:	d0f7      	beq.n	6f64 <nrf_cc3xx_platform_init_no_rng+0x8>
    6f74:	3801      	subs	r0, #1
    6f76:	2806      	cmp	r0, #6
    6f78:	d803      	bhi.n	6f82 <nrf_cc3xx_platform_init_no_rng+0x26>
    6f7a:	4b04      	ldr	r3, [pc, #16]	; (6f8c <nrf_cc3xx_platform_init_no_rng+0x30>)
    6f7c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6f80:	bd10      	pop	{r4, pc}
    6f82:	4803      	ldr	r0, [pc, #12]	; (6f90 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6f84:	bd10      	pop	{r4, pc}
    6f86:	bf00      	nop
    6f88:	20000b78 	.word	0x20000b78
    6f8c:	00007dd4 	.word	0x00007dd4
    6f90:	ffff8ffe 	.word	0xffff8ffe

00006f94 <nrf_cc3xx_platform_abort>:
    6f94:	f3bf 8f4f 	dsb	sy
    6f98:	4905      	ldr	r1, [pc, #20]	; (6fb0 <nrf_cc3xx_platform_abort+0x1c>)
    6f9a:	4b06      	ldr	r3, [pc, #24]	; (6fb4 <nrf_cc3xx_platform_abort+0x20>)
    6f9c:	68ca      	ldr	r2, [r1, #12]
    6f9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6fa2:	4313      	orrs	r3, r2
    6fa4:	60cb      	str	r3, [r1, #12]
    6fa6:	f3bf 8f4f 	dsb	sy
    6faa:	bf00      	nop
    6fac:	e7fd      	b.n	6faa <nrf_cc3xx_platform_abort+0x16>
    6fae:	bf00      	nop
    6fb0:	e000ed00 	.word	0xe000ed00
    6fb4:	05fa0004 	.word	0x05fa0004

00006fb8 <CC_PalAbort>:
    6fb8:	b4f0      	push	{r4, r5, r6, r7}
    6fba:	4f09      	ldr	r7, [pc, #36]	; (6fe0 <CC_PalAbort+0x28>)
    6fbc:	4e09      	ldr	r6, [pc, #36]	; (6fe4 <CC_PalAbort+0x2c>)
    6fbe:	4c0a      	ldr	r4, [pc, #40]	; (6fe8 <CC_PalAbort+0x30>)
    6fc0:	4a0a      	ldr	r2, [pc, #40]	; (6fec <CC_PalAbort+0x34>)
    6fc2:	4d0b      	ldr	r5, [pc, #44]	; (6ff0 <CC_PalAbort+0x38>)
    6fc4:	490b      	ldr	r1, [pc, #44]	; (6ff4 <CC_PalAbort+0x3c>)
    6fc6:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    6fca:	603b      	str	r3, [r7, #0]
    6fcc:	6852      	ldr	r2, [r2, #4]
    6fce:	6033      	str	r3, [r6, #0]
    6fd0:	6023      	str	r3, [r4, #0]
    6fd2:	2400      	movs	r4, #0
    6fd4:	602b      	str	r3, [r5, #0]
    6fd6:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    6fda:	bcf0      	pop	{r4, r5, r6, r7}
    6fdc:	4710      	bx	r2
    6fde:	bf00      	nop
    6fe0:	5002b400 	.word	0x5002b400
    6fe4:	5002b404 	.word	0x5002b404
    6fe8:	5002b408 	.word	0x5002b408
    6fec:	200000dc 	.word	0x200000dc
    6ff0:	5002b40c 	.word	0x5002b40c
    6ff4:	5002a000 	.word	0x5002a000

00006ff8 <nrf_cc3xx_platform_set_abort>:
    6ff8:	e9d0 1200 	ldrd	r1, r2, [r0]
    6ffc:	4b01      	ldr	r3, [pc, #4]	; (7004 <nrf_cc3xx_platform_set_abort+0xc>)
    6ffe:	e9c3 1200 	strd	r1, r2, [r3]
    7002:	4770      	bx	lr
    7004:	200000dc 	.word	0x200000dc

00007008 <mutex_free>:
    7008:	b510      	push	{r4, lr}
    700a:	4604      	mov	r4, r0
    700c:	b130      	cbz	r0, 701c <mutex_free+0x14>
    700e:	6863      	ldr	r3, [r4, #4]
    7010:	06db      	lsls	r3, r3, #27
    7012:	d502      	bpl.n	701a <mutex_free+0x12>
    7014:	2300      	movs	r3, #0
    7016:	6023      	str	r3, [r4, #0]
    7018:	6063      	str	r3, [r4, #4]
    701a:	bd10      	pop	{r4, pc}
    701c:	4b02      	ldr	r3, [pc, #8]	; (7028 <mutex_free+0x20>)
    701e:	4803      	ldr	r0, [pc, #12]	; (702c <mutex_free+0x24>)
    7020:	685b      	ldr	r3, [r3, #4]
    7022:	4798      	blx	r3
    7024:	e7f3      	b.n	700e <mutex_free+0x6>
    7026:	bf00      	nop
    7028:	200000dc 	.word	0x200000dc
    702c:	00007df0 	.word	0x00007df0

00007030 <mutex_unlock>:
    7030:	b168      	cbz	r0, 704e <mutex_unlock+0x1e>
    7032:	6843      	ldr	r3, [r0, #4]
    7034:	b13b      	cbz	r3, 7046 <mutex_unlock+0x16>
    7036:	06db      	lsls	r3, r3, #27
    7038:	d507      	bpl.n	704a <mutex_unlock+0x1a>
    703a:	f3bf 8f5f 	dmb	sy
    703e:	2300      	movs	r3, #0
    7040:	6003      	str	r3, [r0, #0]
    7042:	4618      	mov	r0, r3
    7044:	4770      	bx	lr
    7046:	4803      	ldr	r0, [pc, #12]	; (7054 <mutex_unlock+0x24>)
    7048:	4770      	bx	lr
    704a:	4803      	ldr	r0, [pc, #12]	; (7058 <mutex_unlock+0x28>)
    704c:	4770      	bx	lr
    704e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7052:	4770      	bx	lr
    7054:	ffff8fea 	.word	0xffff8fea
    7058:	ffff8fe9 	.word	0xffff8fe9

0000705c <mutex_init>:
    705c:	b510      	push	{r4, lr}
    705e:	4604      	mov	r4, r0
    7060:	b120      	cbz	r0, 706c <mutex_init+0x10>
    7062:	2200      	movs	r2, #0
    7064:	2311      	movs	r3, #17
    7066:	6022      	str	r2, [r4, #0]
    7068:	6063      	str	r3, [r4, #4]
    706a:	bd10      	pop	{r4, pc}
    706c:	4801      	ldr	r0, [pc, #4]	; (7074 <mutex_init+0x18>)
    706e:	f7ff ffa3 	bl	6fb8 <CC_PalAbort>
    7072:	e7f6      	b.n	7062 <mutex_init+0x6>
    7074:	00007e18 	.word	0x00007e18

00007078 <mutex_lock>:
    7078:	b1c0      	cbz	r0, 70ac <mutex_lock+0x34>
    707a:	6843      	ldr	r3, [r0, #4]
    707c:	b1a3      	cbz	r3, 70a8 <mutex_lock+0x30>
    707e:	06db      	lsls	r3, r3, #27
    7080:	d510      	bpl.n	70a4 <mutex_lock+0x2c>
    7082:	2201      	movs	r2, #1
    7084:	f3bf 8f5b 	dmb	ish
    7088:	e850 3f00 	ldrex	r3, [r0]
    708c:	e840 2100 	strex	r1, r2, [r0]
    7090:	2900      	cmp	r1, #0
    7092:	d1f9      	bne.n	7088 <mutex_lock+0x10>
    7094:	f3bf 8f5b 	dmb	ish
    7098:	2b01      	cmp	r3, #1
    709a:	d0f3      	beq.n	7084 <mutex_lock+0xc>
    709c:	f3bf 8f5f 	dmb	sy
    70a0:	2000      	movs	r0, #0
    70a2:	4770      	bx	lr
    70a4:	4803      	ldr	r0, [pc, #12]	; (70b4 <mutex_lock+0x3c>)
    70a6:	4770      	bx	lr
    70a8:	4803      	ldr	r0, [pc, #12]	; (70b8 <mutex_lock+0x40>)
    70aa:	4770      	bx	lr
    70ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    70b0:	4770      	bx	lr
    70b2:	bf00      	nop
    70b4:	ffff8fe9 	.word	0xffff8fe9
    70b8:	ffff8fea 	.word	0xffff8fea

000070bc <nrf_cc3xx_platform_set_mutexes>:
    70bc:	b570      	push	{r4, r5, r6, lr}
    70be:	e9d0 2300 	ldrd	r2, r3, [r0]
    70c2:	4c13      	ldr	r4, [pc, #76]	; (7110 <nrf_cc3xx_platform_set_mutexes+0x54>)
    70c4:	4d13      	ldr	r5, [pc, #76]	; (7114 <nrf_cc3xx_platform_set_mutexes+0x58>)
    70c6:	e9c4 2300 	strd	r2, r3, [r4]
    70ca:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    70ce:	e9c4 6302 	strd	r6, r3, [r4, #8]
    70d2:	4b11      	ldr	r3, [pc, #68]	; (7118 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    70d4:	6808      	ldr	r0, [r1, #0]
    70d6:	6018      	str	r0, [r3, #0]
    70d8:	6848      	ldr	r0, [r1, #4]
    70da:	6058      	str	r0, [r3, #4]
    70dc:	6888      	ldr	r0, [r1, #8]
    70de:	6098      	str	r0, [r3, #8]
    70e0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    70e4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    70e8:	60de      	str	r6, [r3, #12]
    70ea:	6118      	str	r0, [r3, #16]
    70ec:	06cb      	lsls	r3, r1, #27
    70ee:	d50d      	bpl.n	710c <nrf_cc3xx_platform_set_mutexes+0x50>
    70f0:	2300      	movs	r3, #0
    70f2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    70f6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    70fa:	f505 7088 	add.w	r0, r5, #272	; 0x110
    70fe:	4790      	blx	r2
    7100:	6823      	ldr	r3, [r4, #0]
    7102:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    7106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    710a:	4718      	bx	r3
    710c:	bd70      	pop	{r4, r5, r6, pc}
    710e:	bf00      	nop
    7110:	200000ec 	.word	0x200000ec
    7114:	20000fa4 	.word	0x20000fa4
    7118:	200000fc 	.word	0x200000fc

0000711c <CC_LibInitNoRng>:
    711c:	b510      	push	{r4, lr}
    711e:	f000 f833 	bl	7188 <CC_HalInit>
    7122:	b120      	cbz	r0, 712e <CC_LibInitNoRng+0x12>
    7124:	2403      	movs	r4, #3
    7126:	f000 f867 	bl	71f8 <CC_PalTerminate>
    712a:	4620      	mov	r0, r4
    712c:	bd10      	pop	{r4, pc}
    712e:	f000 f835 	bl	719c <CC_PalInit>
    7132:	b990      	cbnz	r0, 715a <CC_LibInitNoRng+0x3e>
    7134:	f000 f8b0 	bl	7298 <CC_PalPowerSaveModeSelect>
    7138:	b990      	cbnz	r0, 7160 <CC_LibInitNoRng+0x44>
    713a:	4b0f      	ldr	r3, [pc, #60]	; (7178 <CC_LibInitNoRng+0x5c>)
    713c:	681b      	ldr	r3, [r3, #0]
    713e:	0e1b      	lsrs	r3, r3, #24
    7140:	2bf0      	cmp	r3, #240	; 0xf0
    7142:	d108      	bne.n	7156 <CC_LibInitNoRng+0x3a>
    7144:	4a0d      	ldr	r2, [pc, #52]	; (717c <CC_LibInitNoRng+0x60>)
    7146:	4b0e      	ldr	r3, [pc, #56]	; (7180 <CC_LibInitNoRng+0x64>)
    7148:	6812      	ldr	r2, [r2, #0]
    714a:	429a      	cmp	r2, r3
    714c:	d00a      	beq.n	7164 <CC_LibInitNoRng+0x48>
    714e:	2407      	movs	r4, #7
    7150:	f000 f81c 	bl	718c <CC_HalTerminate>
    7154:	e7e7      	b.n	7126 <CC_LibInitNoRng+0xa>
    7156:	2406      	movs	r4, #6
    7158:	e7fa      	b.n	7150 <CC_LibInitNoRng+0x34>
    715a:	2404      	movs	r4, #4
    715c:	4620      	mov	r0, r4
    715e:	bd10      	pop	{r4, pc}
    7160:	2400      	movs	r4, #0
    7162:	e7f5      	b.n	7150 <CC_LibInitNoRng+0x34>
    7164:	2001      	movs	r0, #1
    7166:	f000 f897 	bl	7298 <CC_PalPowerSaveModeSelect>
    716a:	4604      	mov	r4, r0
    716c:	2800      	cmp	r0, #0
    716e:	d1f7      	bne.n	7160 <CC_LibInitNoRng+0x44>
    7170:	4b04      	ldr	r3, [pc, #16]	; (7184 <CC_LibInitNoRng+0x68>)
    7172:	6018      	str	r0, [r3, #0]
    7174:	e7d9      	b.n	712a <CC_LibInitNoRng+0xe>
    7176:	bf00      	nop
    7178:	5002b928 	.word	0x5002b928
    717c:	5002ba24 	.word	0x5002ba24
    7180:	20e00000 	.word	0x20e00000
    7184:	5002ba0c 	.word	0x5002ba0c

00007188 <CC_HalInit>:
    7188:	2000      	movs	r0, #0
    718a:	4770      	bx	lr

0000718c <CC_HalTerminate>:
    718c:	2000      	movs	r0, #0
    718e:	4770      	bx	lr

00007190 <CC_HalMaskInterrupt>:
    7190:	4b01      	ldr	r3, [pc, #4]	; (7198 <CC_HalMaskInterrupt+0x8>)
    7192:	6018      	str	r0, [r3, #0]
    7194:	4770      	bx	lr
    7196:	bf00      	nop
    7198:	5002ba04 	.word	0x5002ba04

0000719c <CC_PalInit>:
    719c:	b510      	push	{r4, lr}
    719e:	4811      	ldr	r0, [pc, #68]	; (71e4 <CC_PalInit+0x48>)
    71a0:	f000 f848 	bl	7234 <CC_PalMutexCreate>
    71a4:	b100      	cbz	r0, 71a8 <CC_PalInit+0xc>
    71a6:	bd10      	pop	{r4, pc}
    71a8:	480f      	ldr	r0, [pc, #60]	; (71e8 <CC_PalInit+0x4c>)
    71aa:	f000 f843 	bl	7234 <CC_PalMutexCreate>
    71ae:	2800      	cmp	r0, #0
    71b0:	d1f9      	bne.n	71a6 <CC_PalInit+0xa>
    71b2:	4c0e      	ldr	r4, [pc, #56]	; (71ec <CC_PalInit+0x50>)
    71b4:	4620      	mov	r0, r4
    71b6:	f000 f83d 	bl	7234 <CC_PalMutexCreate>
    71ba:	2800      	cmp	r0, #0
    71bc:	d1f3      	bne.n	71a6 <CC_PalInit+0xa>
    71be:	4b0c      	ldr	r3, [pc, #48]	; (71f0 <CC_PalInit+0x54>)
    71c0:	480c      	ldr	r0, [pc, #48]	; (71f4 <CC_PalInit+0x58>)
    71c2:	601c      	str	r4, [r3, #0]
    71c4:	f000 f836 	bl	7234 <CC_PalMutexCreate>
    71c8:	4601      	mov	r1, r0
    71ca:	2800      	cmp	r0, #0
    71cc:	d1eb      	bne.n	71a6 <CC_PalInit+0xa>
    71ce:	f000 f82d 	bl	722c <CC_PalDmaInit>
    71d2:	4604      	mov	r4, r0
    71d4:	b108      	cbz	r0, 71da <CC_PalInit+0x3e>
    71d6:	4620      	mov	r0, r4
    71d8:	bd10      	pop	{r4, pc}
    71da:	f000 f83f 	bl	725c <CC_PalPowerSaveModeInit>
    71de:	4620      	mov	r0, r4
    71e0:	e7fa      	b.n	71d8 <CC_PalInit+0x3c>
    71e2:	bf00      	nop
    71e4:	20000134 	.word	0x20000134
    71e8:	20000128 	.word	0x20000128
    71ec:	20000130 	.word	0x20000130
    71f0:	20000138 	.word	0x20000138
    71f4:	2000012c 	.word	0x2000012c

000071f8 <CC_PalTerminate>:
    71f8:	b508      	push	{r3, lr}
    71fa:	4808      	ldr	r0, [pc, #32]	; (721c <CC_PalTerminate+0x24>)
    71fc:	f000 f824 	bl	7248 <CC_PalMutexDestroy>
    7200:	4807      	ldr	r0, [pc, #28]	; (7220 <CC_PalTerminate+0x28>)
    7202:	f000 f821 	bl	7248 <CC_PalMutexDestroy>
    7206:	4807      	ldr	r0, [pc, #28]	; (7224 <CC_PalTerminate+0x2c>)
    7208:	f000 f81e 	bl	7248 <CC_PalMutexDestroy>
    720c:	4806      	ldr	r0, [pc, #24]	; (7228 <CC_PalTerminate+0x30>)
    720e:	f000 f81b 	bl	7248 <CC_PalMutexDestroy>
    7212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7216:	f000 b80b 	b.w	7230 <CC_PalDmaTerminate>
    721a:	bf00      	nop
    721c:	20000134 	.word	0x20000134
    7220:	20000128 	.word	0x20000128
    7224:	20000130 	.word	0x20000130
    7228:	2000012c 	.word	0x2000012c

0000722c <CC_PalDmaInit>:
    722c:	2000      	movs	r0, #0
    722e:	4770      	bx	lr

00007230 <CC_PalDmaTerminate>:
    7230:	4770      	bx	lr
    7232:	bf00      	nop

00007234 <CC_PalMutexCreate>:
    7234:	b508      	push	{r3, lr}
    7236:	4b03      	ldr	r3, [pc, #12]	; (7244 <CC_PalMutexCreate+0x10>)
    7238:	6802      	ldr	r2, [r0, #0]
    723a:	681b      	ldr	r3, [r3, #0]
    723c:	6810      	ldr	r0, [r2, #0]
    723e:	4798      	blx	r3
    7240:	2000      	movs	r0, #0
    7242:	bd08      	pop	{r3, pc}
    7244:	200000ec 	.word	0x200000ec

00007248 <CC_PalMutexDestroy>:
    7248:	b508      	push	{r3, lr}
    724a:	4b03      	ldr	r3, [pc, #12]	; (7258 <CC_PalMutexDestroy+0x10>)
    724c:	6802      	ldr	r2, [r0, #0]
    724e:	685b      	ldr	r3, [r3, #4]
    7250:	6810      	ldr	r0, [r2, #0]
    7252:	4798      	blx	r3
    7254:	2000      	movs	r0, #0
    7256:	bd08      	pop	{r3, pc}
    7258:	200000ec 	.word	0x200000ec

0000725c <CC_PalPowerSaveModeInit>:
    725c:	b570      	push	{r4, r5, r6, lr}
    725e:	4c09      	ldr	r4, [pc, #36]	; (7284 <CC_PalPowerSaveModeInit+0x28>)
    7260:	4d09      	ldr	r5, [pc, #36]	; (7288 <CC_PalPowerSaveModeInit+0x2c>)
    7262:	6920      	ldr	r0, [r4, #16]
    7264:	68ab      	ldr	r3, [r5, #8]
    7266:	4798      	blx	r3
    7268:	b118      	cbz	r0, 7272 <CC_PalPowerSaveModeInit+0x16>
    726a:	4b08      	ldr	r3, [pc, #32]	; (728c <CC_PalPowerSaveModeInit+0x30>)
    726c:	4808      	ldr	r0, [pc, #32]	; (7290 <CC_PalPowerSaveModeInit+0x34>)
    726e:	685b      	ldr	r3, [r3, #4]
    7270:	4798      	blx	r3
    7272:	4a08      	ldr	r2, [pc, #32]	; (7294 <CC_PalPowerSaveModeInit+0x38>)
    7274:	68eb      	ldr	r3, [r5, #12]
    7276:	6920      	ldr	r0, [r4, #16]
    7278:	2100      	movs	r1, #0
    727a:	6011      	str	r1, [r2, #0]
    727c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7280:	4718      	bx	r3
    7282:	bf00      	nop
    7284:	200000fc 	.word	0x200000fc
    7288:	200000ec 	.word	0x200000ec
    728c:	200000dc 	.word	0x200000dc
    7290:	00007e3c 	.word	0x00007e3c
    7294:	20000b8c 	.word	0x20000b8c

00007298 <CC_PalPowerSaveModeSelect>:
    7298:	b570      	push	{r4, r5, r6, lr}
    729a:	4d1a      	ldr	r5, [pc, #104]	; (7304 <CC_PalPowerSaveModeSelect+0x6c>)
    729c:	4e1a      	ldr	r6, [pc, #104]	; (7308 <CC_PalPowerSaveModeSelect+0x70>)
    729e:	4604      	mov	r4, r0
    72a0:	68b2      	ldr	r2, [r6, #8]
    72a2:	6928      	ldr	r0, [r5, #16]
    72a4:	4790      	blx	r2
    72a6:	b9f0      	cbnz	r0, 72e6 <CC_PalPowerSaveModeSelect+0x4e>
    72a8:	b15c      	cbz	r4, 72c2 <CC_PalPowerSaveModeSelect+0x2a>
    72aa:	4c18      	ldr	r4, [pc, #96]	; (730c <CC_PalPowerSaveModeSelect+0x74>)
    72ac:	6823      	ldr	r3, [r4, #0]
    72ae:	b1ab      	cbz	r3, 72dc <CC_PalPowerSaveModeSelect+0x44>
    72b0:	2b01      	cmp	r3, #1
    72b2:	d01a      	beq.n	72ea <CC_PalPowerSaveModeSelect+0x52>
    72b4:	3b01      	subs	r3, #1
    72b6:	6023      	str	r3, [r4, #0]
    72b8:	6928      	ldr	r0, [r5, #16]
    72ba:	68f3      	ldr	r3, [r6, #12]
    72bc:	4798      	blx	r3
    72be:	2000      	movs	r0, #0
    72c0:	bd70      	pop	{r4, r5, r6, pc}
    72c2:	4c12      	ldr	r4, [pc, #72]	; (730c <CC_PalPowerSaveModeSelect+0x74>)
    72c4:	6821      	ldr	r1, [r4, #0]
    72c6:	b939      	cbnz	r1, 72d8 <CC_PalPowerSaveModeSelect+0x40>
    72c8:	4b11      	ldr	r3, [pc, #68]	; (7310 <CC_PalPowerSaveModeSelect+0x78>)
    72ca:	4a12      	ldr	r2, [pc, #72]	; (7314 <CC_PalPowerSaveModeSelect+0x7c>)
    72cc:	2001      	movs	r0, #1
    72ce:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    72d2:	6813      	ldr	r3, [r2, #0]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d1fc      	bne.n	72d2 <CC_PalPowerSaveModeSelect+0x3a>
    72d8:	3101      	adds	r1, #1
    72da:	6021      	str	r1, [r4, #0]
    72dc:	68f3      	ldr	r3, [r6, #12]
    72de:	6928      	ldr	r0, [r5, #16]
    72e0:	4798      	blx	r3
    72e2:	2000      	movs	r0, #0
    72e4:	bd70      	pop	{r4, r5, r6, pc}
    72e6:	480c      	ldr	r0, [pc, #48]	; (7318 <CC_PalPowerSaveModeSelect+0x80>)
    72e8:	bd70      	pop	{r4, r5, r6, pc}
    72ea:	4a0a      	ldr	r2, [pc, #40]	; (7314 <CC_PalPowerSaveModeSelect+0x7c>)
    72ec:	6813      	ldr	r3, [r2, #0]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d1fc      	bne.n	72ec <CC_PalPowerSaveModeSelect+0x54>
    72f2:	4a07      	ldr	r2, [pc, #28]	; (7310 <CC_PalPowerSaveModeSelect+0x78>)
    72f4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    72f8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    72fc:	f7ff ff48 	bl	7190 <CC_HalMaskInterrupt>
    7300:	6823      	ldr	r3, [r4, #0]
    7302:	e7d7      	b.n	72b4 <CC_PalPowerSaveModeSelect+0x1c>
    7304:	200000fc 	.word	0x200000fc
    7308:	200000ec 	.word	0x200000ec
    730c:	20000b8c 	.word	0x20000b8c
    7310:	5002a000 	.word	0x5002a000
    7314:	5002b910 	.word	0x5002b910
    7318:	ffff8fe9 	.word	0xffff8fe9

0000731c <k_uptime_get>:
{
    731c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    731e:	f000 fb6c 	bl	79fa <z_impl_k_uptime_ticks>
    7322:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    7326:	fba0 2304 	umull	r2, r3, r0, r4
    732a:	fb04 3301 	mla	r3, r4, r1, r3
    732e:	0bd0      	lsrs	r0, r2, #15
}
    7330:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    7334:	0bd9      	lsrs	r1, r3, #15
    7336:	bd10      	pop	{r4, pc}

00007338 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    7338:	4040      	eors	r0, r0
    733a:	f380 8811 	msr	BASEPRI, r0
    733e:	f04f 0004 	mov.w	r0, #4
    7342:	df02      	svc	2
}
    7344:	4770      	bx	lr

00007346 <encode_uint>:
{
    7346:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    734a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    734c:	78d3      	ldrb	r3, [r2, #3]
{
    734e:	4614      	mov	r4, r2
	switch (specifier) {
    7350:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7352:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    7356:	4606      	mov	r6, r0
    7358:	460f      	mov	r7, r1
    735a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    735c:	d02d      	beq.n	73ba <encode_uint+0x74>
    735e:	d828      	bhi.n	73b2 <encode_uint+0x6c>
		return 16;
    7360:	2b58      	cmp	r3, #88	; 0x58
    7362:	bf14      	ite	ne
    7364:	250a      	movne	r5, #10
    7366:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    7368:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    736c:	46aa      	mov	sl, r5
    736e:	f04f 0b00 	mov.w	fp, #0
    7372:	4652      	mov	r2, sl
    7374:	465b      	mov	r3, fp
    7376:	4630      	mov	r0, r6
    7378:	4639      	mov	r1, r7
    737a:	f7f9 fab7 	bl	8ec <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    737e:	2a09      	cmp	r2, #9
    7380:	b2d3      	uxtb	r3, r2
    7382:	d81f      	bhi.n	73c4 <encode_uint+0x7e>
    7384:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7386:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7388:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    738a:	bf08      	it	eq
    738c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    738e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    7392:	d301      	bcc.n	7398 <encode_uint+0x52>
    7394:	45c8      	cmp	r8, r9
    7396:	d812      	bhi.n	73be <encode_uint+0x78>
	if (conv->flag_hash) {
    7398:	7823      	ldrb	r3, [r4, #0]
    739a:	069b      	lsls	r3, r3, #26
    739c:	d505      	bpl.n	73aa <encode_uint+0x64>
		if (radix == 8) {
    739e:	2d08      	cmp	r5, #8
    73a0:	d116      	bne.n	73d0 <encode_uint+0x8a>
			conv->altform_0 = true;
    73a2:	78a3      	ldrb	r3, [r4, #2]
    73a4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    73a8:	70a3      	strb	r3, [r4, #2]
}
    73aa:	4640      	mov	r0, r8
    73ac:	b003      	add	sp, #12
    73ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    73b2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    73b6:	2b70      	cmp	r3, #112	; 0x70
    73b8:	e7d3      	b.n	7362 <encode_uint+0x1c>
	switch (specifier) {
    73ba:	2508      	movs	r5, #8
    73bc:	e7d4      	b.n	7368 <encode_uint+0x22>
		value /= radix;
    73be:	4606      	mov	r6, r0
    73c0:	460f      	mov	r7, r1
    73c2:	e7d6      	b.n	7372 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    73c4:	9a01      	ldr	r2, [sp, #4]
    73c6:	2a19      	cmp	r2, #25
    73c8:	bf94      	ite	ls
    73ca:	3337      	addls	r3, #55	; 0x37
    73cc:	3357      	addhi	r3, #87	; 0x57
    73ce:	e7da      	b.n	7386 <encode_uint+0x40>
		} else if (radix == 16) {
    73d0:	2d10      	cmp	r5, #16
    73d2:	d1ea      	bne.n	73aa <encode_uint+0x64>
			conv->altform_0c = true;
    73d4:	78a3      	ldrb	r3, [r4, #2]
    73d6:	f043 0310 	orr.w	r3, r3, #16
    73da:	e7e5      	b.n	73a8 <encode_uint+0x62>

000073dc <outs>:
{
    73dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73e0:	4607      	mov	r7, r0
    73e2:	4688      	mov	r8, r1
    73e4:	4615      	mov	r5, r2
    73e6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    73e8:	4614      	mov	r4, r2
    73ea:	42b4      	cmp	r4, r6
    73ec:	eba4 0005 	sub.w	r0, r4, r5
    73f0:	d302      	bcc.n	73f8 <outs+0x1c>
    73f2:	b93e      	cbnz	r6, 7404 <outs+0x28>
    73f4:	7823      	ldrb	r3, [r4, #0]
    73f6:	b12b      	cbz	r3, 7404 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    73f8:	f814 0b01 	ldrb.w	r0, [r4], #1
    73fc:	4641      	mov	r1, r8
    73fe:	47b8      	blx	r7
		if (rc < 0) {
    7400:	2800      	cmp	r0, #0
    7402:	daf2      	bge.n	73ea <outs+0xe>
}
    7404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007408 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7408:	4770      	bx	lr

0000740a <sys_notify_validate>:
	if (notify == NULL) {
    740a:	4603      	mov	r3, r0
    740c:	b158      	cbz	r0, 7426 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    740e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7410:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    7414:	2a01      	cmp	r2, #1
    7416:	d003      	beq.n	7420 <sys_notify_validate+0x16>
    7418:	2a03      	cmp	r2, #3
    741a:	d104      	bne.n	7426 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    741c:	6802      	ldr	r2, [r0, #0]
    741e:	b112      	cbz	r2, 7426 <sys_notify_validate+0x1c>
		notify->result = 0;
    7420:	2000      	movs	r0, #0
    7422:	6098      	str	r0, [r3, #8]
    7424:	4770      	bx	lr
		return -EINVAL;
    7426:	f06f 0015 	mvn.w	r0, #21
}
    742a:	4770      	bx	lr

0000742c <abort_function>:
{
    742c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    742e:	2000      	movs	r0, #0
    7430:	f7fa fe86 	bl	2140 <sys_reboot>

00007434 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7434:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    7436:	f013 0307 	ands.w	r3, r3, #7
    743a:	d105      	bne.n	7448 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    743c:	6803      	ldr	r3, [r0, #0]
    743e:	2b00      	cmp	r3, #0
		evt = EVT_START;
    7440:	bf0c      	ite	eq
    7442:	2000      	moveq	r0, #0
    7444:	2003      	movne	r0, #3
    7446:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7448:	2b02      	cmp	r3, #2
    744a:	d105      	bne.n	7458 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    744c:	8bc3      	ldrh	r3, [r0, #30]
    744e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    7450:	bf14      	ite	ne
    7452:	2000      	movne	r0, #0
    7454:	2004      	moveq	r0, #4
    7456:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7458:	2b01      	cmp	r3, #1
    745a:	d105      	bne.n	7468 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    745c:	6803      	ldr	r3, [r0, #0]
    745e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    7460:	bf0c      	ite	eq
    7462:	2000      	moveq	r0, #0
    7464:	2005      	movne	r0, #5
    7466:	4770      	bx	lr
	int evt = EVT_NOP;
    7468:	2000      	movs	r0, #0
}
    746a:	4770      	bx	lr

0000746c <notify_one>:
{
    746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7470:	460d      	mov	r5, r1
    7472:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7474:	4619      	mov	r1, r3
    7476:	1d28      	adds	r0, r5, #4
{
    7478:	4690      	mov	r8, r2
    747a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    747c:	f7fa f950 	bl	1720 <sys_notify_finalize>
	if (cb) {
    7480:	4604      	mov	r4, r0
    7482:	b138      	cbz	r0, 7494 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7484:	4633      	mov	r3, r6
    7486:	4642      	mov	r2, r8
    7488:	4629      	mov	r1, r5
    748a:	4638      	mov	r0, r7
    748c:	46a4      	mov	ip, r4
}
    748e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7492:	4760      	bx	ip
}
    7494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007498 <validate_args>:
{
    7498:	b510      	push	{r4, lr}
    749a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    749c:	b140      	cbz	r0, 74b0 <validate_args+0x18>
    749e:	b139      	cbz	r1, 74b0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    74a0:	1d08      	adds	r0, r1, #4
    74a2:	f7ff ffb2 	bl	740a <sys_notify_validate>
	if ((rv == 0)
    74a6:	b928      	cbnz	r0, 74b4 <validate_args+0x1c>
	    && ((cli->notify.flags
    74a8:	68a3      	ldr	r3, [r4, #8]
    74aa:	f033 0303 	bics.w	r3, r3, #3
    74ae:	d001      	beq.n	74b4 <validate_args+0x1c>
		rv = -EINVAL;
    74b0:	f06f 0015 	mvn.w	r0, #21
}
    74b4:	bd10      	pop	{r4, pc}

000074b6 <onoff_manager_init>:
{
    74b6:	b538      	push	{r3, r4, r5, lr}
    74b8:	460c      	mov	r4, r1
	if ((mgr == NULL)
    74ba:	4605      	mov	r5, r0
    74bc:	b158      	cbz	r0, 74d6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    74be:	b151      	cbz	r1, 74d6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    74c0:	680b      	ldr	r3, [r1, #0]
    74c2:	b143      	cbz	r3, 74d6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    74c4:	684b      	ldr	r3, [r1, #4]
    74c6:	b133      	cbz	r3, 74d6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    74c8:	2220      	movs	r2, #32
    74ca:	2100      	movs	r1, #0
    74cc:	f000 f86b 	bl	75a6 <memset>
    74d0:	612c      	str	r4, [r5, #16]
	return 0;
    74d2:	2000      	movs	r0, #0
}
    74d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    74d6:	f06f 0015 	mvn.w	r0, #21
    74da:	e7fb      	b.n	74d4 <onoff_manager_init+0x1e>

000074dc <arch_printk_char_out>:
}
    74dc:	2000      	movs	r0, #0
    74de:	4770      	bx	lr

000074e0 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    74e0:	b40f      	push	{r0, r1, r2, r3}
    74e2:	b507      	push	{r0, r1, r2, lr}
    74e4:	a904      	add	r1, sp, #16
    74e6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    74ea:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    74ec:	f7fa fe1a 	bl	2124 <vprintk>
	}
	va_end(ap);
}
    74f0:	b003      	add	sp, #12
    74f2:	f85d eb04 	ldr.w	lr, [sp], #4
    74f6:	b004      	add	sp, #16
    74f8:	4770      	bx	lr

000074fa <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    74fa:	2200      	movs	r2, #0
    74fc:	e9c0 2200 	strd	r2, r2, [r0]
    7500:	6082      	str	r2, [r0, #8]
}
    7502:	4770      	bx	lr

00007504 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7504:	4604      	mov	r4, r0
    7506:	b508      	push	{r3, lr}
    7508:	4608      	mov	r0, r1
    750a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    750c:	461a      	mov	r2, r3
    750e:	47a0      	blx	r4
	return z_impl_z_current_get();
    7510:	f7fe feee 	bl	62f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7514:	f7fb f950 	bl	27b8 <z_impl_k_thread_abort>

00007518 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7518:	f7fd badc 	b.w	4ad4 <z_fatal_error>

0000751c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    751c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    751e:	6800      	ldr	r0, [r0, #0]
    7520:	f7fd bad8 	b.w	4ad4 <z_fatal_error>

00007524 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7524:	2100      	movs	r1, #0
    7526:	2001      	movs	r0, #1
    7528:	f7ff bff6 	b.w	7518 <z_arm_fatal_error>

0000752c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    752c:	b508      	push	{r3, lr}
	handler();
    752e:	f7fa fe59 	bl	21e4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7536:	f7fa bf67 	b.w	2408 <z_arm_exc_exit>

0000753a <_stdout_hook_default>:
}
    753a:	f04f 30ff 	mov.w	r0, #4294967295
    753e:	4770      	bx	lr

00007540 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    7540:	f7fb ba8a 	b.w	2a58 <z_impl_zephyr_fputc>

00007544 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    7544:	3901      	subs	r1, #1
    7546:	4603      	mov	r3, r0
    7548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    754c:	b90a      	cbnz	r2, 7552 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    754e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    7550:	4770      	bx	lr
		*d = *s;
    7552:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    7556:	e7f7      	b.n	7548 <strcpy+0x4>

00007558 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7558:	4603      	mov	r3, r0
	size_t n = 0;
    755a:	2000      	movs	r0, #0

	while (*s != '\0') {
    755c:	5c1a      	ldrb	r2, [r3, r0]
    755e:	b902      	cbnz	r2, 7562 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7560:	4770      	bx	lr
		n++;
    7562:	3001      	adds	r0, #1
    7564:	e7fa      	b.n	755c <strlen+0x4>

00007566 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7566:	4603      	mov	r3, r0
	size_t n = 0;
    7568:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    756a:	5c1a      	ldrb	r2, [r3, r0]
    756c:	b10a      	cbz	r2, 7572 <strnlen+0xc>
    756e:	4288      	cmp	r0, r1
    7570:	d100      	bne.n	7574 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7572:	4770      	bx	lr
		n++;
    7574:	3001      	adds	r0, #1
    7576:	e7f8      	b.n	756a <strnlen+0x4>

00007578 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7578:	1e43      	subs	r3, r0, #1
    757a:	3901      	subs	r1, #1
    757c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7580:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7584:	4282      	cmp	r2, r0
    7586:	d101      	bne.n	758c <strcmp+0x14>
    7588:	2a00      	cmp	r2, #0
    758a:	d1f7      	bne.n	757c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    758c:	1a10      	subs	r0, r2, r0
    758e:	4770      	bx	lr

00007590 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7590:	b510      	push	{r4, lr}
    7592:	1e43      	subs	r3, r0, #1
    7594:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7596:	4291      	cmp	r1, r2
    7598:	d100      	bne.n	759c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    759a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    759c:	f811 4b01 	ldrb.w	r4, [r1], #1
    75a0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    75a4:	e7f7      	b.n	7596 <memcpy+0x6>

000075a6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    75a6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    75a8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    75aa:	4603      	mov	r3, r0
	while (n > 0) {
    75ac:	4293      	cmp	r3, r2
    75ae:	d100      	bne.n	75b2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    75b0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    75b2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    75b6:	e7f9      	b.n	75ac <memset+0x6>

000075b8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    75b8:	b084      	sub	sp, #16
    75ba:	ab04      	add	r3, sp, #16
    75bc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    75c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    75c4:	2b06      	cmp	r3, #6
    75c6:	d108      	bne.n	75da <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    75c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75cc:	2201      	movs	r2, #1
    75ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    75d2:	f3bf 8f4f 	dsb	sy
        __WFE();
    75d6:	bf20      	wfe
    while (true)
    75d8:	e7fd      	b.n	75d6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    75da:	b004      	add	sp, #16
    75dc:	4770      	bx	lr

000075de <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    75de:	b084      	sub	sp, #16
    75e0:	ab04      	add	r3, sp, #16
    75e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    75e6:	2300      	movs	r3, #0
    75e8:	f383 8811 	msr	BASEPRI, r3
    75ec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    75f0:	b004      	add	sp, #16
    75f2:	4770      	bx	lr

000075f4 <set_starting_state>:
{
    75f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    75f6:	f04f 0320 	mov.w	r3, #32
    75fa:	f3ef 8211 	mrs	r2, BASEPRI
    75fe:	f383 8812 	msr	BASEPRI_MAX, r3
    7602:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7606:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7608:	f003 0407 	and.w	r4, r3, #7
    760c:	2c01      	cmp	r4, #1
    760e:	d106      	bne.n	761e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7610:	6001      	str	r1, [r0, #0]
	int err = 0;
    7612:	2000      	movs	r0, #0
	__asm__ volatile(
    7614:	f382 8811 	msr	BASEPRI, r2
    7618:	f3bf 8f6f 	isb	sy
}
    761c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    761e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7622:	428b      	cmp	r3, r1
		err = -EALREADY;
    7624:	bf14      	ite	ne
    7626:	f04f 30ff 	movne.w	r0, #4294967295
    762a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    762e:	e7f1      	b.n	7614 <set_starting_state+0x20>

00007630 <set_on_state>:
	__asm__ volatile(
    7630:	f04f 0320 	mov.w	r3, #32
    7634:	f3ef 8211 	mrs	r2, BASEPRI
    7638:	f383 8812 	msr	BASEPRI_MAX, r3
    763c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7640:	6803      	ldr	r3, [r0, #0]
    7642:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7646:	f043 0302 	orr.w	r3, r3, #2
    764a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    764c:	f382 8811 	msr	BASEPRI, r2
    7650:	f3bf 8f6f 	isb	sy
}
    7654:	4770      	bx	lr

00007656 <onoff_started_callback>:
	return &data->mgr[type];
    7656:	6900      	ldr	r0, [r0, #16]
    7658:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    765a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    765e:	2100      	movs	r1, #0
    7660:	4710      	bx	r2

00007662 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7662:	2000      	movs	r0, #0
    7664:	f7fc bb94 	b.w	3d90 <nrfx_clock_start>

00007668 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7668:	2000      	movs	r0, #0
    766a:	f7fc bbe5 	b.w	3e38 <nrfx_clock_stop>

0000766e <api_stop>:
	return stop(dev, subsys, CTX_API);
    766e:	2280      	movs	r2, #128	; 0x80
    7670:	f7fb ba98 	b.w	2ba4 <stop>

00007674 <blocking_start_callback>:
{
    7674:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7676:	f7fe bef5 	b.w	6464 <z_impl_k_sem_give>

0000767a <api_start>:
{
    767a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    767e:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    7680:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    7682:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    7684:	436f      	muls	r7, r5
{
    7686:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    7688:	f107 0048 	add.w	r0, r7, #72	; 0x48
    768c:	2180      	movs	r1, #128	; 0x80
    768e:	4420      	add	r0, r4
{
    7690:	4690      	mov	r8, r2
    7692:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    7694:	f7ff ffae 	bl	75f4 <set_starting_state>
	if (err < 0) {
    7698:	2800      	cmp	r0, #0
    769a:	db07      	blt.n	76ac <api_start+0x32>
	subdata->cb = cb;
    769c:	443c      	add	r4, r7
	subdata->user_data = user_data;
    769e:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    76a2:	6873      	ldr	r3, [r6, #4]
    76a4:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    76a8:	4798      	blx	r3
	return 0;
    76aa:	2000      	movs	r0, #0
}
    76ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000076b0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    76b0:	6843      	ldr	r3, [r0, #4]
    76b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    76b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    76b8:	600b      	str	r3, [r1, #0]
}
    76ba:	2000      	movs	r0, #0
    76bc:	4770      	bx	lr

000076be <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    76be:	6843      	ldr	r3, [r0, #4]
    76c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    76c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    76c6:	4042      	eors	r2, r0
    76c8:	400a      	ands	r2, r1
    76ca:	4042      	eors	r2, r0
    p_reg->OUT = value;
    76cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    76d0:	2000      	movs	r0, #0
    76d2:	4770      	bx	lr

000076d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    76d4:	6843      	ldr	r3, [r0, #4]
    76d6:	685b      	ldr	r3, [r3, #4]
}
    76d8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    76da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    76de:	4770      	bx	lr

000076e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    76e0:	6843      	ldr	r3, [r0, #4]
    76e2:	685b      	ldr	r3, [r3, #4]
}
    76e4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    76e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    76ea:	4770      	bx	lr

000076ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    76ec:	6843      	ldr	r3, [r0, #4]
    76ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    76f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    76f4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    76f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    76fa:	2000      	movs	r0, #0
    76fc:	4770      	bx	lr

000076fe <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    76fe:	6843      	ldr	r3, [r0, #4]
    7700:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    7702:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7706:	05d1      	lsls	r1, r2, #23
    7708:	d518      	bpl.n	773c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    770a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    770e:	b1aa      	cbz	r2, 773c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7710:	f04f 0120 	mov.w	r1, #32
    7714:	f3ef 8211 	mrs	r2, BASEPRI
    7718:	f381 8812 	msr	BASEPRI_MAX, r1
    771c:	f3bf 8f6f 	isb	sy
    7720:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7724:	b131      	cbz	r1, 7734 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7726:	2100      	movs	r1, #0
    7728:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    772c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7730:	2101      	movs	r1, #1
    7732:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    7734:	f382 8811 	msr	BASEPRI, r2
    7738:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    773c:	6842      	ldr	r2, [r0, #4]
    773e:	6852      	ldr	r2, [r2, #4]
    7740:	06d2      	lsls	r2, r2, #27
    7742:	d515      	bpl.n	7770 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    7744:	f04f 0120 	mov.w	r1, #32
    7748:	f3ef 8211 	mrs	r2, BASEPRI
    774c:	f381 8812 	msr	BASEPRI_MAX, r1
    7750:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7754:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7758:	b111      	cbz	r1, 7760 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    775a:	2100      	movs	r1, #0
    775c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7764:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7768:	f382 8811 	msr	BASEPRI, r2
    776c:	f3bf 8f6f 	isb	sy
}
    7770:	4770      	bx	lr

00007772 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    7772:	6902      	ldr	r2, [r0, #16]
{
    7774:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    7776:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    777a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    777e:	2000      	movs	r0, #0
    7780:	4770      	bx	lr

00007782 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7782:	6843      	ldr	r3, [r0, #4]
    7784:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7786:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    778a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    778e:	4770      	bx	lr

00007790 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    7790:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7792:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7794:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7798:	b940      	cbnz	r0, 77ac <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    779a:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    779c:	0792      	lsls	r2, r2, #30
    779e:	d406      	bmi.n	77ae <is_tx_ready+0x1e>
    77a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    77a4:	3800      	subs	r0, #0
    77a6:	bf18      	it	ne
    77a8:	2001      	movne	r0, #1
    77aa:	4770      	bx	lr
    77ac:	2001      	movs	r0, #1
}
    77ae:	4770      	bx	lr

000077b0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    77b0:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    77b2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    77b4:	681b      	ldr	r3, [r3, #0]
    77b6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    77ba:	b148      	cbz	r0, 77d0 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    77bc:	7c52      	ldrb	r2, [r2, #17]
    77be:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77c0:	2000      	movs	r0, #0
    77c2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    77c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    77ca:	2201      	movs	r2, #1
    77cc:	601a      	str	r2, [r3, #0]
	return 0;
    77ce:	4770      	bx	lr
		return -1;
    77d0:	f04f 30ff 	mov.w	r0, #4294967295
}
    77d4:	4770      	bx	lr

000077d6 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    77d6:	b510      	push	{r4, lr}
    77d8:	2200      	movs	r2, #0
    77da:	4604      	mov	r4, r0
    77dc:	2101      	movs	r1, #1
    77de:	2002      	movs	r0, #2
    77e0:	f7fa fd5c 	bl	229c <z_arm_irq_priority_set>
    77e4:	2002      	movs	r0, #2
    77e6:	f7fa fd3b 	bl	2260 <arch_irq_enable>
    77ea:	4620      	mov	r0, r4
    77ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77f0:	f7fb bf38 	b.w	3664 <uarte_instance_init.isra.0>

000077f4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    77f4:	b510      	push	{r4, lr}
    77f6:	2200      	movs	r2, #0
    77f8:	4604      	mov	r4, r0
    77fa:	2101      	movs	r1, #1
    77fc:	2028      	movs	r0, #40	; 0x28
    77fe:	f7fa fd4d 	bl	229c <z_arm_irq_priority_set>
    7802:	2028      	movs	r0, #40	; 0x28
    7804:	f7fa fd2c 	bl	2260 <arch_irq_enable>
    7808:	4620      	mov	r0, r4
    780a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    780e:	f7fb bf29 	b.w	3664 <uarte_instance_init.isra.0>

00007812 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7812:	4770      	bx	lr

00007814 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7814:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7816:	2000      	movs	r0, #0
    7818:	f7fb f95c 	bl	2ad4 <sys_arch_reboot>

0000781c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    781c:	f7ff bb9e 	b.w	6f5c <nrf_cc3xx_platform_init_no_rng>

00007820 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7820:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7822:	f7f9 ff9d 	bl	1760 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7826:	f7fa f84f 	bl	18c8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    782a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    782e:	f7ff bb95 	b.w	6f5c <nrf_cc3xx_platform_init_no_rng>

00007832 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7832:	4700      	bx	r0

00007834 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7834:	f000 b8e3 	b.w	79fe <z_impl_k_busy_wait>

00007838 <nrf_gpio_pin_present_check>:
    switch (port)
    7838:	0943      	lsrs	r3, r0, #5
    783a:	d00b      	beq.n	7854 <nrf_gpio_pin_present_check+0x1c>
    783c:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    783e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7842:	bf18      	it	ne
    7844:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7846:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    784a:	fa23 f000 	lsr.w	r0, r3, r0
}
    784e:	f000 0001 	and.w	r0, r0, #1
    7852:	4770      	bx	lr
    switch (port)
    7854:	f04f 33ff 	mov.w	r3, #4294967295
    7858:	e7f5      	b.n	7846 <nrf_gpio_pin_present_check+0xe>

0000785a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    785a:	0080      	lsls	r0, r0, #2
}
    785c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    7860:	4770      	bx	lr

00007862 <nrf_gpio_reconfigure>:
{
    7862:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7866:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7868:	a801      	add	r0, sp, #4
{
    786a:	460e      	mov	r6, r1
    786c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    7870:	4690      	mov	r8, r2
    7872:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7874:	f7fc fc4e 	bl	4114 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7878:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    787a:	f1b8 0f00 	cmp.w	r8, #0
    787e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7882:	bf14      	ite	ne
    7884:	2302      	movne	r3, #2
    7886:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7888:	2e00      	cmp	r6, #0
    788a:	bf18      	it	ne
    788c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7890:	2d00      	cmp	r5, #0
    7892:	bf14      	ite	ne
    7894:	210c      	movne	r1, #12
    7896:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7898:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    789a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    789e:	bf14      	ite	ne
    78a0:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    78a4:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    78a6:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    78a8:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    78ac:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    78b0:	bf14      	ite	ne
    78b2:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    78b6:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    78b8:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    78ba:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    78be:	b106      	cbz	r6, 78c2 <nrf_gpio_reconfigure+0x60>
    78c0:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    78c2:	f1b8 0f00 	cmp.w	r8, #0
    78c6:	d003      	beq.n	78d0 <nrf_gpio_reconfigure+0x6e>
    78c8:	f898 8000 	ldrb.w	r8, [r8]
    78cc:	ea4f 0848 	mov.w	r8, r8, lsl #1
    78d0:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    78d2:	b10d      	cbz	r5, 78d8 <nrf_gpio_reconfigure+0x76>
    78d4:	782d      	ldrb	r5, [r5, #0]
    78d6:	00ad      	lsls	r5, r5, #2
    78d8:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    78dc:	b10c      	cbz	r4, 78e2 <nrf_gpio_reconfigure+0x80>
    78de:	7822      	ldrb	r2, [r4, #0]
    78e0:	0214      	lsls	r4, r2, #8
    78e2:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    78e4:	b10f      	cbz	r7, 78ea <nrf_gpio_reconfigure+0x88>
    78e6:	783f      	ldrb	r7, [r7, #0]
    78e8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    78ea:	432c      	orrs	r4, r5
    78ec:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    78ee:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    78f2:	b002      	add	sp, #8
    78f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000078f8 <nrf_gpio_cfg_sense_set>:
{
    78f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    78fa:	f10d 030f 	add.w	r3, sp, #15
    78fe:	9301      	str	r3, [sp, #4]
    7900:	2300      	movs	r3, #0
{
    7902:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7906:	9300      	str	r3, [sp, #0]
    7908:	461a      	mov	r2, r3
    790a:	4619      	mov	r1, r3
    790c:	f7ff ffa9 	bl	7862 <nrf_gpio_reconfigure>
}
    7910:	b005      	add	sp, #20
    7912:	f85d fb04 	ldr.w	pc, [sp], #4

00007916 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7916:	f7fd b85b 	b.w	49d0 <_DoInit>

0000791a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    791a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    791c:	f7ff fffb 	bl	7916 <SEGGER_RTT_Init>

	return 0;
}
    7920:	2000      	movs	r0, #0
    7922:	bd08      	pop	{r3, pc}

00007924 <z_device_state_init>:
}
    7924:	4770      	bx	lr

00007926 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7926:	b138      	cbz	r0, 7938 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7928:	68c3      	ldr	r3, [r0, #12]
    792a:	8818      	ldrh	r0, [r3, #0]
    792c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7930:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    7934:	4258      	negs	r0, r3
    7936:	4158      	adcs	r0, r3
}
    7938:	4770      	bx	lr

0000793a <z_pm_save_idle_exit>:
{
    793a:	b508      	push	{r3, lr}
	pm_system_resume();
    793c:	f7fa fb20 	bl	1f80 <pm_system_resume>
}
    7940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7944:	f7ff bf65 	b.w	7812 <sys_clock_idle_exit>

00007948 <k_mem_slab_init>:
{
    7948:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    794a:	2400      	movs	r4, #0
    794c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    794e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7950:	ea41 0402 	orr.w	r4, r1, r2
    7954:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7958:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    795c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    795e:	d10c      	bne.n	797a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    7960:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7962:	42a3      	cmp	r3, r4
    7964:	d103      	bne.n	796e <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    7966:	e9c0 0000 	strd	r0, r0, [r0]
}
    796a:	2000      	movs	r0, #0
}
    796c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    796e:	6985      	ldr	r5, [r0, #24]
    7970:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7972:	3401      	adds	r4, #1
		slab->free_list = p;
    7974:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    7976:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7978:	e7f3      	b.n	7962 <k_mem_slab_init+0x1a>
		return -EINVAL;
    797a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    797e:	e7f5      	b.n	796c <k_mem_slab_init+0x24>

00007980 <z_impl_k_mutex_init>:
{
    7980:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7982:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7984:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7988:	e9c3 3300 	strd	r3, r3, [r3]
}
    798c:	4770      	bx	lr

0000798e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    798e:	4603      	mov	r3, r0
    7990:	b920      	cbnz	r0, 799c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7992:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7996:	b90a      	cbnz	r2, 799c <z_reschedule_irqlock+0xe>
    7998:	f7fa bcd0 	b.w	233c <arch_swap>
    799c:	f383 8811 	msr	BASEPRI, r3
    79a0:	f3bf 8f6f 	isb	sy
}
    79a4:	4770      	bx	lr

000079a6 <z_reschedule_unlocked>:
	__asm__ volatile(
    79a6:	f04f 0320 	mov.w	r3, #32
    79aa:	f3ef 8011 	mrs	r0, BASEPRI
    79ae:	f383 8812 	msr	BASEPRI_MAX, r3
    79b2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    79b6:	f7ff bfea 	b.w	798e <z_reschedule_irqlock>

000079ba <z_priq_dumb_best>:
{
    79ba:	4603      	mov	r3, r0
	return list->head == list;
    79bc:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79be:	4283      	cmp	r3, r0
    79c0:	d003      	beq.n	79ca <z_priq_dumb_best+0x10>
	if (n != NULL) {
    79c2:	2800      	cmp	r0, #0
    79c4:	bf38      	it	cc
    79c6:	2000      	movcc	r0, #0
    79c8:	4770      	bx	lr
	struct k_thread *thread = NULL;
    79ca:	2000      	movs	r0, #0
}
    79cc:	4770      	bx	lr

000079ce <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    79ce:	b13a      	cbz	r2, 79e0 <z_impl_k_sem_init+0x12>
    79d0:	428a      	cmp	r2, r1
    79d2:	d305      	bcc.n	79e0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    79d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    79d8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    79dc:	2000      	movs	r0, #0
    79de:	4770      	bx	lr
		return -EINVAL;
    79e0:	f06f 0015 	mvn.w	r0, #21
}
    79e4:	4770      	bx	lr

000079e6 <k_is_in_isr>:
    79e6:	f3ef 8005 	mrs	r0, IPSR
}
    79ea:	3800      	subs	r0, #0
    79ec:	bf18      	it	ne
    79ee:	2001      	movne	r0, #1
    79f0:	4770      	bx	lr

000079f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    79f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    79f4:	f7ff fa3c 	bl	6e70 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    79f8:	bd08      	pop	{r3, pc}

000079fa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    79fa:	f7ff ba39 	b.w	6e70 <sys_clock_tick_get>

000079fe <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    79fe:	b108      	cbz	r0, 7a04 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7a00:	f7fb b87e 	b.w	2b00 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7a04:	4770      	bx	lr

00007a06 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7a06:	4770      	bx	lr

00007a08 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7a08:	f7fc befa 	b.w	4800 <SystemInit>
